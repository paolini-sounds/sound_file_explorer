#!/usr/bin/python3

#       ___                     ___                       ___           ___                       ___           ___           ___
#      /\  \                   /\__\                     /\  \         /\  \                     /\__\         /\__\         /\  \
#     /::\  \       ___       /:/ _/_       ___         |::\  \       /::\  \                   /:/ _/_       /:/ _/_        \:\  \       ___
#    /:/\:\__\     /|  |     /:/ /\  \     /\__\        |:|:\  \     /:/\:\__\                 /:/ /\__\     /:/ /\  \        \:\  \     /\__\
#   /:/ /:/  /    |:|  |    /:/ /::\  \   /:/__/      __|:|\:\  \   /:/ /:/  /  ___     ___   /:/ /:/ _/_   /:/ /::\  \   ___  \:\  \   /:/__/
#  /:/_/:/  /     |:|  |   /:/_/:/\:\__\ /::\  \     /::::|_\:\__\ /:/_/:/  /  /\  \   /\__\ /:/_/:/ /\__\ /:/__\/\:\__\ /\  \  \:\__\ /::\  \
#  \:\/:/  /    __|:|__|   \:\/:/ /:/  / \/\:\  \__  \:\~~\  \/__/ \:\/:/  /   \:\  \ /:/  / \:\/:/ /:/  / \:\  \ /:/  / \:\  \ /:/  / \/\:\  \__
#   \::/__/    /::::\  \    \::/ /:/  /   ~~\:\/\__\  \:\  \        \::/__/     \:\  /:/  /   \::/_/:/  /   \:\  /:/  /   \:\  /:/  /   ~~\:\/\__\
#    \:\  \    ~~~~\:\  \    \/_/:/  /       \::/  /   \:\  \        \:\  \      \:\/:/  /     \:\/:/  /     \:\/:/  /     \:\/:/  /       \::/  /
#     \:\__\        \:\__\     /:/  /        /:/  /     \:\__\        \:\__\      \::/  /       \::/  /       \::/  /       \::/  /        /:/  /
#      \/__/         \/__/     \/__/         \/__/       \/__/         \/__/       \/__/         \/__/         \/__/         \/__/         \/__/
#
#
#                                               ___                                     ___
#                                              /\__\                      ___          /\__\
#                                             /:/ _/_       ___          /\  \        /:/ _/_
#                                            /:/ /\__\     /\__\         \:\  \      /:/ /\__\
#                                           /:/ /:/  /    /:/__/          \:\  \    /:/ /:/ _/_
#                                          /:/_/:/  /    /::\  \      ___  \:\__\  /:/_/:/ /\__\
#                                          \:\/:/  /     \/\:\  \__  /\  \ |:|  |  \:\/:/ /:/  /
#                                           \::/__/       ~~\:\/\__\ \:\  \|:|  |   \::/_/:/  /
#                                            \:\  \          \::/  /  \:\__|:|__|    \:\/:/  /
#                                             \:\__\         /:/  /    \::::/__/      \::/  /
#                                              \/__/         \/__/      ~~~~           \/__/
#
#
#     Copyright 2023, 2024 PySimpleSoft Inc.

version = "5.0.4 Released 1-Apr-2024"

# M"""""""`YM MM""""""""`M M""MMMMM""M MM""""""""`M MM"""""""`MM
# M  mmmm.  M MM  mmmmmmmM M  MMMMM  M MM  mmmmmmmM MM  mmmm,  M
# M  MMMMM  M M`      MMMM M  MMMMP  M M`      MMMM M'        .M
# M  MMMMM  M MM  MMMMMMMM M  MMMM' .M MM  MMMMMMMM MM  MMMb. "M
# M  MMMMM  M MM  MMMMMMMM M  MMP' .MM MM  MMMMMMMM MM  MMMMM  M
# M  MMMMM  M MM        .M M     .dMMM MM        .M MM  MMMMM  M
# MMMMMMMMMMM MMMMMMMMMMMM MMMMMMMMMMM MMMMMMMMMMMM MMMMMMMMMMMM
#
# MM"""""""`YM MMP"""""YMM MP""""""`MM M""""""""M    M""""""""M M""MMMMM""MM M""M MP""""""`MM
# MM  mmmmm  M M' .mmm. `M M  mmmmm..M Mmmm  mmmM    Mmmm  mmmM M  MMMMM  MM M  M M  mmmmm..M
# M'        .M M  MMMMM  M M.      `YM MMMM  MMMM    MMMM  MMMM M         `M M  M M.      `YM
# MM  MMMMMMMM M  MMMMM  M MMMMMMM.  M MMMM  MMMM    MMMM  MMMM M  MMMMM  MM M  M MMMMMMM.  M
# MM  MMMMMMMM M. `MMM' .M M. .MMM'  M MMMM  MMMM    MMMM  MMMM M  MMMMM  MM M  M M. .MMM'  M
# MM  MMMMMMMM MMb     dMM Mb.     .dM MMMM  MMMM    MMMM  MMMM M  MMMMM  MM M  M Mb.     .dM
# MMMMMMMMMMMM MMMMMMMMMMM MMMMMMMMMMM MMMMMMMMMM    MMMMMMMMMM MMMMMMMMMMMM MMMM MMMMMMMMMMM
#
# MM'""""'YMM MMP"""""YMM M""""""'YMM MM""""""""`M    MMP"""""YMM M"""""""`YM M""MMMMMMMM M""M M"""""""`YM MM""""""""`M
# M' .mmm. `M M' .mmm. `M M  mmmm. `M MM  mmmmmmmM    M' .mmm. `M M  mmmm.  M M  MMMMMMMM M  M M  mmmm.  M MM  mmmmmmmM
# M  MMMMMooM M  MMMMM  M M  MMMMM  M M`      MMMM    M  MMMMM  M M  MMMMM  M M  MMMMMMMM M  M M  MMMMM  M M`      MMMM
# M  MMMMMMMM M  MMMMM  M M  MMMMM  M MM  MMMMMMMM    M  MMMMM  M M  MMMMM  M M  MMMMMMMM M  M M  MMMMM  M MM  MMMMMMMM
# M. `MMM' .M M. `MMM' .M M  MMMM' .M MM  MMMMMMMM    M. `MMM' .M M  MMMMM  M M  MMMMMMMM M  M M  MMMMM  M MM  MMMMMMMM
# MM.     .dM MMb     dMM M       .MM MM        .M    MMb     dMM M  MMMMM  M M         M M  M M  MMMMM  M MM        .M
# MMMMMMMMMMM MMMMMMMMMMM MMMMMMMMMMM MMMMMMMMMMMM    MMMMMMMMMMM MMMMMMMMMMM MMMMMMMMMMM MMMM MMMMMMMMMMM MMMMMMMMMMMM



"""
Changelog since last major release

5.0.4       Released 1-Apr-2024


"""


__version__ = version.split()[0]  # For PEP 396 and PEP 345

# The shortened version of version
try:
    ver = version.split(' ')[0]
except:
    ver = ''


port = 'PySimpleGUI'

import os
import sys


# all of the tkinter involved imports
import tkinter as tk
from tkinter import filedialog
# from tkinter.colorchooser import askcolor
from tkinter import ttk
# import tkinter.scrolledtext as tkst
import tkinter.font
# from uuid import uuid4

# end of tkinter specific imports
# get the tkinter detailed version
tclversion_detailed = tkinter.Tcl().eval('info patchlevel')
framework_version = tclversion_detailed

import marshal, base64, zlib

import time
import pickle
import calendar
import datetime
import textwrap

import socket
from hashlib import sha256
import inspect
import traceback
import difflib
import copy
import pprint
import platform
import pydoc            # for the built-in PSG SDK Help Window

try:  # Because Raspberry Pi is still on 3.4....it's not critical if this module isn't imported on the Pi
    from typing import List, Any, Union, Tuple, Dict, SupportsAbs, Optional  # because this code has to run on 2.7 can't use real type hints.  Must do typing only in comments
except:
    print('*** Skipping import of Typing module. "pip3 install typing" to remove this warning ***')
import random
import warnings
from math import floor
from math import fabs
from functools import wraps

try:  # Because Raspberry Pi is still on 3.4....
    # from subprocess import run, PIPE, Popen
    import subprocess
except Exception as e:
    print('** Import error {} **'.format(e))

import threading
import itertools
import json
import configparser
import queue

try:
    import webbrowser

    webbrowser_available = True
except:
    webbrowser_available = False
# used for github upgrades
import urllib.request
import urllib.error
import urllib.parse

# import re
import ctypes

pil_import_attempted = pil_imported = False

warnings.simplefilter('always', UserWarning)

g_time_start = 0
g_time_end = 0
g_time_delta = 0


# These timer routines are to help you quickly time portions of code.  Place the timer_start call at the point
# you want to start timing and the timer_stop at the end point. The delta between the start and stop calls
# is returned from calling timer_stop

def timer_start():
    """
    Time your code easily.... starts the timer.
    Uses the time.time value, a technique known to not be terribly accurage, but tis' gclose enough for our purposes
    """
    global g_time_start

    g_time_start = time.time()


def timer_stop():
    """
    Time your code easily.... stop the timer and print the number of MILLISECONDS since the timer start

    :return: delta in MILLISECONDS from timer_start was called
    :rtype:  int
    """
    global g_time_delta, g_time_end

    g_time_end = time.time()
    g_time_delta = g_time_end - g_time_start
    return int(g_time_delta * 1000)


def timer_stop_usec():
    """
    Time your code easily.... stop the timer and print the number of MICROSECONDS since the timer start

    :return: delta in MICROSECONDS from timer_start was called
    :rtype:  int
    """
    global g_time_delta, g_time_end

    g_time_end = time.time()
    g_time_delta = g_time_end - g_time_start
    return int(g_time_delta * 1000000)



def _timeit(func):
    """
    Put @_timeit as a decorator to a function to get the time spent in that function printed out

    :param func: Decorated function
    :type func:
    :return:     Execution time for the decorated function
    :rtype:
    """

    @wraps(func)
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()
        print('{} executed in {:.4f} seconds'.format(func.__name__, end - start))
        return result

    return wrapper


_timeit_counter = 0
MAX_TIMEIT_COUNT = 1000
_timeit_total = 0


def _timeit_summary(func):
    """
    Same as the timeit decorator except that the value is shown as an averave
    Put @_timeit_summary as a decorator to a function to get the time spent in that function printed out

    :param func: Decorated function
    :type func:
    :return:     Execution time for the decorated function
    :rtype:
    """

    @wraps(func)
    def wrapper(*args, **kwargs):
        global _timeit_counter, _timeit_total

        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()
        _timeit_counter += 1
        _timeit_total += end - start
        if _timeit_counter > MAX_TIMEIT_COUNT:
            print('{} executed in {:.4f} seconds'.format(func.__name__, _timeit_total / MAX_TIMEIT_COUNT))
            _timeit_counter = 0
            _timeit_total = 0
        return result

    return wrapper


def formatted_datetime_now():
    """
    Returns a string with current date and time formatted YYYY-MM-DD HH:MM:SS for easy logging

    :return:    String with date and time formatted YYYY-MM-DD  HH:MM:SS
    :rtype:     (str)
    """
    now = datetime.datetime.now()
    current_time = now.strftime("%Y-%m-%d %H:%M:%S")
    return current_time


def running_linux():
    """
    Determines the OS is Linux by using sys.platform

    Returns True if Linux

    :return: True if sys.platform indicates running Linux
    :rtype:  (bool)
    """
    return sys.platform.startswith('linux')


def running_mac():
    """
    Determines the OS is Mac by using sys.platform

    Returns True if Mac

    :return: True if sys.platform indicates running Mac
    :rtype:  (bool)
    """
    return sys.platform.startswith('darwin')


def running_windows():
    """
    Determines the OS is Windows by using sys.platform

    Returns True if Windows

    :return: True if sys.platform indicates running Windows
    :rtype:  (bool)
    """
    return sys.platform.startswith('win')


def running_trinket():
    """
    A special case for Trinket.  Checks both the OS and the number of environment variables
    Currently, Trinket only has ONE environment variable.  This fact is used to figure out if Trinket is being used.

    Returns True if "Trinket" (in theory)

    :return: True if sys.platform indicates Linux and the number of environment variables is 1
    :rtype:  (bool)
    """
    if sys.platform.startswith('linux') and socket.gethostname().startswith('pygame-'):
        return True
    return False


def running_replit():
    """
    A special case for REPLIT.  Checks both the OS and for the existance of the number of environment variable REPL_OWNER
    Currently, Trinket only has ONE environment variable.  This fact is used to figure out if Trinket is being used.

    Returns True if running on "replit"

    :return: True if sys.platform indicates Linux and setting REPL_OWNER is found in the environment variables
    :rtype:  (bool)
    """
    if 'REPL_OWNER' in os.environ and sys.platform.startswith('linux'):
        return True
    return False


# Handy python statements to increment and decrement with wrapping that I don't want to forget
# count = (count + (MAX - 1)) % MAX           # Decrement - roll over to MAX from 0
# count = (count + 1) % MAX                   # Increment to MAX then roll over to 0

# ----====----====----==== Constants the user CAN safely change ====----====----====----#

# Base64 encoded GIF file
DEFAULT_BASE64_ICON = b'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'

DEFAULT_BASE64_ICON_16_BY_16 = b'iVBORw0KGgoAAAANSUhEUgAAABAAAAAOCAYAAAAmL5yKAAACmUlEQVR4nFWQS2icVRiGn++c8/+ZS2ZiJ4guQkGQULFgNS66cFMQ6wVR8EJFXBUKxVWpROOFEgXxAtqFSMGKXQiKurC2CeLKldZLxIobpQkEWy3SmcY680/m/8/5PhfTVvrsn5f3fQXADBHBAGx1x0E8e4icQvvPyOzaKH9j6bEy5fMgs6DH2fT7WNy1iZnIFdlsLuNM+oC6e5K+QstDHJ58fHnh2U+7Mz+4mmto0Tca1wllsUSzeoTed5WY4ViZ87SrT2hnD9ONMOWhn6AVIBZf33l88cOVf298W2TYtKiRdidnsHGEF3bvFwD7fcdepvxRejECl3DyKkmf0sxtd83gsfOfXX/syOle1nrZRoWaOABD3R2O8QlzlKZ4CRh/M/vzWyA/urrz2o0lccujr+z8fFUHqXBOPJoEHwLBbgoACBkOR6UR77bx220XgC38E6ObruXEv5ZfW3nwBmm4hpYpktUCqbpAPvH9OOAKAqhBkA5RE1MTAe2eeuDkix+vV9OHHQNV8R4Rw/snmN91fjzBcS2VJtq5h4vfPrR04L3l3q2HnRt01PD4LFKO9kE8879qyFXZTKkHR7r0ze4Tz7/zRff2N70vOppIZHmBpj2EsBPLfuXQlze7q9Uvk0wgU1nfmPnoq3O3LOQTo06qYiTLhWrzIMY91Jp7CVkTr/uv/QAQAUwZmquJKye10gR4yqGBWyDPttK/WFJv5SD9cQO1iGGAOUzxuW2bOb1u5fQijZZHSIDgw1ZGw5LaZE65eQ6Ro+OAJMqECEiGSCCYpI2ZaV7ffswVvXeptwPihVRBfTJHdZXM3c9L9/5x+QM9oYWuJeFscpzVQVpTcz9hSHzuvqephvM4/ych66LpfYaDu5i/+xcOmfsPXNAyV3hjwl8AAAAASUVORK5CYII='

DEFAULT_BASE64_LOADING_GIF = b''

PSG_DEBUGGER_LOGO = b'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'

UDEMY_ICON = b'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'

PSG5_LOGO = b'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'

BLANK_BASE64 = b'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII='

DEFAULT_WINDOW_ICON = DEFAULT_BASE64_ICON

DEFAULT_ELEMENT_SIZE = (45, 1)  # In CHARACTERS
DEFAULT_BUTTON_ELEMENT_SIZE = (10, 1)  # In CHARACTERS
DEFAULT_MARGINS = (10, 5)  # Margins for each LEFT/RIGHT margin is first term
DEFAULT_ELEMENT_PADDING = (5, 3)  # Padding between elements (row, col) in pixels
DEFAULT_AUTOSIZE_TEXT = True
DEFAULT_AUTOSIZE_BUTTONS = True
DEFAULT_FONT = ("Helvetica", 10)
DEFAULT_TEXT_JUSTIFICATION = 'left'
DEFAULT_BORDER_WIDTH = 1
DEFAULT_AUTOCLOSE_TIME = 3  # time in seconds to show an autoclose form
DEFAULT_DEBUG_WINDOW_SIZE = (80, 20)
DEFAULT_WINDOW_LOCATION = (None, None)
MAX_SCROLLED_TEXT_BOX_HEIGHT = 50
DEFAULT_TOOLTIP_TIME = 400
DEFAULT_TOOLTIP_OFFSET = (0, -20)
DEFAULT_KEEP_ON_TOP = None
DEFAULT_SCALING = None
DEFAULT_ALPHA_CHANNEL = 1.0
DEFAULT_HIDE_WINDOW_WHEN_CREATING = True
TOOLTIP_BACKGROUND_COLOR = "#ffffe0"
TOOLTIP_FONT = None
DEFAULT_USE_BUTTON_SHORTCUTS = False
#################### COLOR STUFF ####################
BLUES = ("#082567", "#0A37A3", "#00345B")
PURPLES = ("#480656", "#4F2398", "#380474")
GREENS = ("#01826B", "#40A860", "#96D2AB", "#00A949", "#003532")
YELLOWS = ("#F3FB62", "#F0F595")
TANS = ("#FFF9D5", "#F4EFCF", "#DDD8BA")
NICE_BUTTON_COLORS = ((GREENS[3], TANS[0]),
                      ('#000000', '#FFFFFF'),
                      ('#FFFFFF', '#000000'),
                      (YELLOWS[0], PURPLES[1]),
                      (YELLOWS[0], GREENS[3]),
                      (YELLOWS[0], BLUES[2]))

COLOR_SYSTEM_DEFAULT = '1234567890'  # A Magic Number kind of signal to PySimpleGUI that the color should not be set at all
DEFAULT_BUTTON_COLOR = ('white', BLUES[0])  # Foreground, Background (None, None) == System Default
OFFICIAL_PYSIMPLEGUI_BUTTON_COLOR = ('white', BLUES[0])

# The "default PySimpleGUI theme"
OFFICIAL_PYSIMPLEGUI_THEME = CURRENT_LOOK_AND_FEEL = 'Dark Blue 3'

DEFAULT_ERROR_BUTTON_COLOR = ("#FFFFFF", "#FF0000")
DEFAULT_BACKGROUND_COLOR = None
DEFAULT_ELEMENT_BACKGROUND_COLOR = None
DEFAULT_ELEMENT_TEXT_COLOR = COLOR_SYSTEM_DEFAULT
DEFAULT_TEXT_ELEMENT_BACKGROUND_COLOR = None
DEFAULT_TEXT_COLOR = COLOR_SYSTEM_DEFAULT
DEFAULT_INPUT_ELEMENTS_COLOR = COLOR_SYSTEM_DEFAULT
DEFAULT_INPUT_TEXT_COLOR = COLOR_SYSTEM_DEFAULT
DEFAULT_SCROLLBAR_COLOR = None



# A transparent button is simply one that matches the background
# TRANSPARENT_BUTTON = 'This constant has been depricated. You must set your button background = background it is on for it to be transparent appearing'


# --------------------------------------------------------------------------------
# Progress Bar Relief Choices
RELIEF_RAISED = 'raised'
RELIEF_SUNKEN = 'sunken'
RELIEF_FLAT = 'flat'
RELIEF_RIDGE = 'ridge'
RELIEF_GROOVE = 'groove'
RELIEF_SOLID = 'solid'
RELIEF_LIST = (RELIEF_RAISED, RELIEF_FLAT, RELIEF_SUNKEN, RELIEF_RIDGE, RELIEF_SOLID, RELIEF_GROOVE)

# These are the spepific themes that tkinter offers
THEME_DEFAULT = 'default'  # this is a TTK theme, not a PSG theme!!!
THEME_WINNATIVE = 'winnative'
THEME_CLAM = 'clam'
THEME_ALT = 'alt'
THEME_CLASSIC = 'classic'
THEME_VISTA = 'vista'
THEME_XPNATIVE = 'xpnative'

# The theme to use by default for all windows
DEFAULT_TTK_THEME = THEME_DEFAULT
ttk_theme_in_use = None


USE_TTK_BUTTONS = None

DEFAULT_PROGRESS_BAR_COLOR = ("#01826B", '#D0D0D0')  # a nice green progress bar
DEFAULT_PROGRESS_BAR_COMPUTE = ('#000000', '#000000')  # Means that the progress bar colors should be computed from other colors
DEFAULT_PROGRESS_BAR_COLOR_OFFICIAL = ("#01826B", '#D0D0D0')  # a nice green progress bar
DEFAULT_PROGRESS_BAR_SIZE = (20, 20)  # Size of Progress Bar (characters for length, pixels for width)
DEFAULT_PROGRESS_BAR_BORDER_WIDTH = 1
DEFAULT_PROGRESS_BAR_RELIEF = RELIEF_GROOVE
# PROGRESS_BAR_STYLES = ('default', 'winnative', 'clam', 'alt', 'classic', 'vista', 'xpnative')
DEFAULT_PROGRESS_BAR_STYLE = DEFAULT_TTK_THEME
DEFAULT_METER_ORIENTATION = 'Horizontal'
DEFAULT_SLIDER_ORIENTATION = 'vertical'
DEFAULT_SLIDER_BORDER_WIDTH = 1
DEFAULT_SLIDER_RELIEF = tk.FLAT
DEFAULT_FRAME_RELIEF = tk.GROOVE

DEFAULT_LISTBOX_SELECT_MODE = tk.SINGLE
SELECT_MODE_MULTIPLE = tk.MULTIPLE
LISTBOX_SELECT_MODE_MULTIPLE = 'multiple'
SELECT_MODE_BROWSE = tk.BROWSE
LISTBOX_SELECT_MODE_BROWSE = 'browse'
SELECT_MODE_EXTENDED = tk.EXTENDED
LISTBOX_SELECT_MODE_EXTENDED = 'extended'
SELECT_MODE_SINGLE = tk.SINGLE
LISTBOX_SELECT_MODE_SINGLE = 'single'

TABLE_SELECT_MODE_NONE = tk.NONE
TABLE_SELECT_MODE_BROWSE = tk.BROWSE
TABLE_SELECT_MODE_EXTENDED = tk.EXTENDED
DEFAULT_TABLE_SELECT_MODE = TABLE_SELECT_MODE_EXTENDED
TABLE_CLICKED_INDICATOR = '+CLICKED+'  # Part of the tuple returned as an event when a Table element has click events enabled
DEFAULT_MODAL_WINDOWS_ENABLED = True
DEFAULT_MODAL_WINDOWS_FORCED = False

TAB_LOCATION_TOP = 'top'
TAB_LOCATION_TOP_LEFT = 'topleft'
TAB_LOCATION_TOP_RIGHT = 'topright'
TAB_LOCATION_LEFT = 'left'
TAB_LOCATION_LEFT_TOP = 'lefttop'
TAB_LOCATION_LEFT_BOTTOM = 'leftbottom'
TAB_LOCATION_RIGHT = 'right'
TAB_LOCATION_RIGHT_TOP = 'righttop'
TAB_LOCATION_RIGHT_BOTTOM = 'rightbottom'
TAB_LOCATION_BOTTOM = 'bottom'
TAB_LOCATION_BOTTOM_LEFT = 'bottomleft'
TAB_LOCATION_BOTTOM_RIGHT = 'bottomright'

TITLE_LOCATION_TOP = tk.N
TITLE_LOCATION_BOTTOM = tk.S
TITLE_LOCATION_LEFT = tk.W
TITLE_LOCATION_RIGHT = tk.E
TITLE_LOCATION_TOP_LEFT = tk.NW
TITLE_LOCATION_TOP_RIGHT = tk.NE
TITLE_LOCATION_BOTTOM_LEFT = tk.SW
TITLE_LOCATION_BOTTOM_RIGHT = tk.SE

TEXT_LOCATION_TOP = tk.N
TEXT_LOCATION_BOTTOM = tk.S
TEXT_LOCATION_LEFT = tk.W
TEXT_LOCATION_RIGHT = tk.E
TEXT_LOCATION_TOP_LEFT = tk.NW
TEXT_LOCATION_TOP_RIGHT = tk.NE
TEXT_LOCATION_BOTTOM_LEFT = tk.SW
TEXT_LOCATION_BOTTOM_RIGHT = tk.SE
TEXT_LOCATION_CENTER = tk.CENTER

GRAB_ANYWHERE_IGNORE_THESE_WIDGETS = (ttk.Sizegrip, tk.Scale, ttk.Scrollbar, tk.Scrollbar, tk.Entry, tk.Text, tk.PanedWindow, tk.Listbox, tk.OptionMenu, ttk.Treeview)

# ----====----====----==== Constants the user should NOT f-with ====----====----====----#
ThisRow = 555666777  # magic number

# DEFAULT_WINDOW_ICON = ''
MESSAGE_BOX_LINE_WIDTH = 60

# "Special" Key Values.. reserved
# Key representing a Read timeout
EVENT_TIMEOUT = TIMEOUT_EVENT = TIMEOUT_KEY = '__TIMEOUT__'
EVENT_TIMER = TIMER_KEY = '__TIMER EVENT__'
WIN_CLOSED = WINDOW_CLOSED = None
WINDOW_CLOSE_ATTEMPTED_EVENT = WIN_X_EVENT = WIN_CLOSE_ATTEMPTED_EVENT = '-WINDOW CLOSE ATTEMPTED-'
WINDOW_CONFIG_EVENT = '__WINDOW CONFIG__'
TITLEBAR_MINIMIZE_KEY = '__TITLEBAR MINIMIZE__'
TITLEBAR_MAXIMIZE_KEY = '__TITLEBAR MAXIMIZE__'
TITLEBAR_CLOSE_KEY = '__TITLEBAR CLOSE__'
TITLEBAR_IMAGE_KEY = '__TITLEBAR IMAGE__'
TITLEBAR_TEXT_KEY = '__TITLEBAR TEXT__'
TITLEBAR_KEY = '__TITLEBAR__'
TITLEBAR_DO_NOT_USE_AN_ICON = '__TITLEBAR_NO_ICON__'


# Key indicating should not create any return values for element
WRITE_ONLY_KEY = '__WRITE ONLY__'

MENU_DISABLED_CHARACTER = '!'
MENU_SHORTCUT_CHARACTER = '&'
MENU_KEY_SEPARATOR = '::'
MENU_SEPARATOR_LINE = '---'
MENU_RIGHT_CLICK_EDITME_EXIT = ['', ['Edit Me', 'Exit']]
MENU_RIGHT_CLICK_EDITME_VER_EXIT = ['', ['Edit Me', 'Version', 'Exit']]
MENU_RIGHT_CLICK_EDITME_VER_EXPLORER_EXIT = ['', ['Edit Me', 'Version', 'Show in Explorer', 'Exit']]
MENU_RIGHT_CLICK_EDITME_VER_LOC_EXIT = ['', ['Edit Me', 'Version', 'File Location', 'Exit']]
MENU_RIGHT_CLICK_EDITME_VER_SETTINGS_EXIT = ['', ['Edit Me', 'Settings', 'Version', 'Exit']]
MENU_RIGHT_CLICK_EXIT = ['', ['Exit']]
MENU_RIGHT_CLICK_DISABLED = ['', []]
_MENU_RIGHT_CLICK_TABGROUP_DEFAULT = ['TABGROUP DEFAULT', []]
ENABLE_TK_WINDOWS = False

USE_CUSTOM_TITLEBAR = None
CUSTOM_TITLEBAR_BACKGROUND_COLOR = None
CUSTOM_TITLEBAR_TEXT_COLOR = None
CUSTOM_TITLEBAR_ICON = None
CUSTOM_TITLEBAR_FONT = None
TITLEBAR_METADATA_MARKER = 'This window has a titlebar'

CUSTOM_MENUBAR_METADATA_MARKER = 'This is a custom menubar'

SUPPRESS_ERROR_POPUPS = False
SUPPRESS_RAISE_KEY_ERRORS = True
SUPPRESS_KEY_GUESSING = False
SUPPRESS_WIDGET_NOT_FINALIZED_WARNINGS = False
ENABLE_TREEVIEW_869_PATCH = True

# These are now set based on the global settings file
ENABLE_MAC_NOTITLEBAR_PATCH = False
ENABLE_MAC_MODAL_DISABLE_PATCH = False
ENABLE_MAC_DISABLE_GRAB_ANYWHERE_WITH_TITLEBAR = True
ENABLE_MAC_ALPHA_99_PATCH = False

OLD_TABLE_TREE_SELECTED_ROW_COLORS = ('#FFFFFF', '#4A6984')
ALTERNATE_TABLE_AND_TREE_SELECTED_ROW_COLORS = ('SystemHighlightText', 'SystemHighlight')

# Some handy unicode symbols
SYMBOL_SQUARE = '█'
SYMBOL_CIRCLE = '⚫'
SYMBOL_CIRCLE_OUTLINE = '◯'
SYMBOL_BULLET = '•'
SYMBOL_UP = '▲'
SYMBOL_RIGHT = '►'
SYMBOL_LEFT = '◄'
SYMBOL_DOWN = '▼'
SYMBOL_X = '❎'
SYMBOL_CHECK = '✅'
SYMBOL_CHECK_SMALL = '✓'
SYMBOL_X_SMALL = '✗'
SYMBOL_BALLOT_X = '☒'
SYMBOL_BALLOT_CHECK = '☑'
SYMBOL_LEFT_DOUBLE = '«'
SYMBOL_RIGHT_DOUBLE = '»'
SYMBOL_LEFT_ARROWHEAD = '⮜'
SYMBOL_RIGHT_ARROWHEAD = '⮞'
SYMBOL_UP_ARROWHEAD = '⮝'
SYMBOL_DOWN_ARROWHEAD = '⮟'
SYMBOL_HOURGLASS = '⌛' if running_windows() or running_mac() else ''

if sum([int(i) for i in tclversion_detailed.split('.')]) > 19:
    SYMBOL_TITLEBAR_MINIMIZE = '_'
    SYMBOL_TITLEBAR_MAXIMIZE = '◻'
    SYMBOL_TITLEBAR_CLOSE = 'Ｘ'
else:
    SYMBOL_TITLEBAR_MINIMIZE = '_'
    SYMBOL_TITLEBAR_MAXIMIZE = 'O'
    SYMBOL_TITLEBAR_CLOSE = 'X'

#################### PATHS for user_settings APIs ####################
# These paths are passed to os.path.expanduser to get the default path for user_settings
# They can be changed using set_options

DEFAULT_USER_SETTINGS_WIN_PATH = r'~\AppData\Local\PySimpleGUI\settings'
DEFAULT_USER_SETTINGS_LINUX_PATH = r'~/.config/PySimpleGUI/settings'
DEFAULT_USER_SETTINGS_MAC_PATH = r'~/Library/Application Support/PySimpleGUI/settings'
DEFAULT_USER_SETTINGS_TRINKET_PATH = r'.'
DEFAULT_USER_SETTINGS_REPLIT_PATH = r'.'
DEFAULT_USER_SETTINGS_UNKNOWN_OS_PATH = r'~/Library/Application Support/PySimpleGUI/settings'
DEFAULT_USER_SETTINGS_PATH = None  # value set by user to override all paths above
DEFAULT_USER_SETTINGS_PYSIMPLEGUI_PATH = None  # location of the global PySimpleGUI settings
DEFAULT_USER_SETTINGS_PYSIMPLEGUI_FILENAME = '_PySimpleGUI_settings_global_.json'  # location of the global PySimpleGUI settings



# ====================================================================== #
# One-liner functions that are handy as f_ck                             #
# ====================================================================== #
def rgb(red, green, blue):
    """
    Given integer values of Red, Green, Blue, return a color string "#RRGGBB"
    :param red:   Red portion from 0 to 255
    :type red:    (int)
    :param green: Green portion from 0 to 255
    :type green:  (int)
    :param blue:  Blue portion from 0 to 255
    :type  blue:  (int)
    :return:      A single RGB String in the format "#RRGGBB" where each pair is a hex number.
    :rtype:       (str)
    """
    red = min(int(red), 255) if red > 0 else 0
    blue = min(int(blue), 255) if blue > 0 else 0
    green = min(int(green), 255) if green > 0 else 0
    return '#%02x%02x%02x' % (red, green, blue)


# ====================================================================== #
# Enums for types                                                        #
# ====================================================================== #
# -------------------------  Button types  ------------------------- #
# uncomment this line and indent to go back to using Enums
BUTTON_TYPE_BROWSE_FOLDER = 1
BUTTON_TYPE_BROWSE_FILE = 2
BUTTON_TYPE_BROWSE_FILES = 21
BUTTON_TYPE_SAVEAS_FILE = 3
BUTTON_TYPE_CLOSES_WIN = 5
BUTTON_TYPE_CLOSES_WIN_ONLY = 6
BUTTON_TYPE_READ_FORM = 7
BUTTON_TYPE_REALTIME = 9
BUTTON_TYPE_CALENDAR_CHOOSER = 30
BUTTON_TYPE_COLOR_CHOOSER = 40
BUTTON_TYPE_SHOW_DEBUGGER = 50

BROWSE_FILES_DELIMITER = ';'  # the delimiter to be used between each file in the returned string

FILE_TYPES_ALL_FILES = (("ALL Files", "*.* *"),)

BUTTON_DISABLED_MEANS_IGNORE = 'ignore'

# -------------------------  Element types  ------------------------- #

ELEM_TYPE_TEXT = 'text'
ELEM_TYPE_INPUT_TEXT = 'input'
ELEM_TYPE_INPUT_COMBO = 'combo'
ELEM_TYPE_INPUT_OPTION_MENU = 'option menu'
ELEM_TYPE_INPUT_RADIO = 'radio'
ELEM_TYPE_INPUT_MULTILINE = 'multiline'
ELEM_TYPE_INPUT_CHECKBOX = 'checkbox'
ELEM_TYPE_INPUT_SPIN = 'spind'
ELEM_TYPE_BUTTON = 'button'
ELEM_TYPE_IMAGE = 'image'
ELEM_TYPE_CANVAS = 'canvas'
ELEM_TYPE_FRAME = 'frame'
ELEM_TYPE_GRAPH = 'graph'
ELEM_TYPE_TAB = 'tab'
ELEM_TYPE_TAB_GROUP = 'tabgroup'
ELEM_TYPE_INPUT_SLIDER = 'slider'
ELEM_TYPE_INPUT_LISTBOX = 'listbox'
ELEM_TYPE_OUTPUT = 'output'
ELEM_TYPE_COLUMN = 'column'
ELEM_TYPE_MENUBAR = 'menubar'
ELEM_TYPE_PROGRESS_BAR = 'progressbar'
ELEM_TYPE_BLANK = 'blank'
ELEM_TYPE_TABLE = 'table'
ELEM_TYPE_TREE = 'tree'
ELEM_TYPE_ERROR = 'error'
ELEM_TYPE_SEPARATOR = 'separator'
ELEM_TYPE_STATUSBAR = 'statusbar'
ELEM_TYPE_PANE = 'pane'
ELEM_TYPE_BUTTONMENU = 'buttonmenu'
ELEM_TYPE_TITLEBAR = 'titlebar'
ELEM_TYPE_SIZEGRIP = 'sizegrip'

# STRETCH == ERROR ELEMENT as a filler

# -------------------------  Popup Buttons Types  ------------------------- #
POPUP_BUTTONS_YES_NO = 1
POPUP_BUTTONS_CANCELLED = 2
POPUP_BUTTONS_ERROR = 3
POPUP_BUTTONS_OK_CANCEL = 4
POPUP_BUTTONS_OK = 0
POPUP_BUTTONS_NO_BUTTONS = 5

PSG_THEME_PART_BUTTON_TEXT = 'Button Text Color'
PSG_THEME_PART_BUTTON_BACKGROUND = 'Button Background Color'
PSG_THEME_PART_BACKGROUND = 'Background Color'
PSG_THEME_PART_INPUT_BACKGROUND = 'Input Element Background Color'
PSG_THEME_PART_INPUT_TEXT = 'Input Element Text Color'
PSG_THEME_PART_TEXT = 'Text Color'
PSG_THEME_PART_SLIDER = 'Slider Color'
PSG_THEME_PART_LIST = [PSG_THEME_PART_BACKGROUND, PSG_THEME_PART_BUTTON_BACKGROUND, PSG_THEME_PART_BUTTON_TEXT, PSG_THEME_PART_INPUT_BACKGROUND, PSG_THEME_PART_INPUT_TEXT,
                       PSG_THEME_PART_TEXT, PSG_THEME_PART_SLIDER]

# theme_button

TTK_SCROLLBAR_PART_TROUGH_COLOR = 'Trough Color'
TTK_SCROLLBAR_PART_BACKGROUND_COLOR = 'Background Color'
TTK_SCROLLBAR_PART_ARROW_BUTTON_ARROW_COLOR = 'Arrow Button Arrow Color'
TTK_SCROLLBAR_PART_FRAME_COLOR = 'Frame Color'
TTK_SCROLLBAR_PART_SCROLL_WIDTH = 'Frame Width'
TTK_SCROLLBAR_PART_ARROW_WIDTH = 'Arrow Width'
TTK_SCROLLBAR_PART_RELIEF = 'Relief'
TTK_SCROLLBAR_PART_LIST = [TTK_SCROLLBAR_PART_TROUGH_COLOR, TTK_SCROLLBAR_PART_BACKGROUND_COLOR, TTK_SCROLLBAR_PART_ARROW_BUTTON_ARROW_COLOR,
                           TTK_SCROLLBAR_PART_FRAME_COLOR, TTK_SCROLLBAR_PART_SCROLL_WIDTH, TTK_SCROLLBAR_PART_ARROW_WIDTH, TTK_SCROLLBAR_PART_RELIEF]
TTK_SCROLLBAR_PART_THEME_BASED_LIST = [TTK_SCROLLBAR_PART_TROUGH_COLOR, TTK_SCROLLBAR_PART_BACKGROUND_COLOR, TTK_SCROLLBAR_PART_ARROW_BUTTON_ARROW_COLOR,
                                       TTK_SCROLLBAR_PART_FRAME_COLOR]
DEFAULT_TTK_PART_MAPPING_DICT = {TTK_SCROLLBAR_PART_TROUGH_COLOR: PSG_THEME_PART_SLIDER,
                                 TTK_SCROLLBAR_PART_BACKGROUND_COLOR: PSG_THEME_PART_BUTTON_BACKGROUND,
                                 TTK_SCROLLBAR_PART_ARROW_BUTTON_ARROW_COLOR: PSG_THEME_PART_BUTTON_TEXT,
                                 TTK_SCROLLBAR_PART_FRAME_COLOR: PSG_THEME_PART_BACKGROUND,
                                 TTK_SCROLLBAR_PART_SCROLL_WIDTH: 12,
                                 TTK_SCROLLBAR_PART_ARROW_WIDTH: 12,
                                 TTK_SCROLLBAR_PART_RELIEF: RELIEF_RAISED}

ttk_part_mapping_dict = copy.copy(DEFAULT_TTK_PART_MAPPING_DICT)



# -------------------------  Web Destinations  ------------------------- #
var_QQZIsaU6 = r'https://signup.PySimpleGUI.com'
var_9Zzu6 = r'http://privacy.PySimpleGUI.com'
var_8q1xhPKE = r'http://terms.PySimpleGUI.com'
var_bpfPTHN = r'http://license.PySimpleGUI.com'
URL_HOME = r'http://home.PySimpleGUI.com'
URL_DOCS = r'http://docs.PySimpleGUI.com'


class TTKPartOverrides():
    """
    This class contains "overrides" to the defaults for ttk scrollbars that are defined in the global settings file.
    This class is used in every element, in the Window class and there's a global one that is used by set_options.
    """

    def __init__(self, sbar_trough_color=None, sbar_background_color=None, sbar_arrow_color=None, sbar_width=None, sbar_arrow_width=None, sbar_frame_color=None, sbar_relief=None):
        self.sbar_trough_color = sbar_trough_color
        self.sbar_background_color = sbar_background_color
        self.sbar_arrow_color = sbar_arrow_color
        self.sbar_width = sbar_width
        self.sbar_arrow_width = sbar_arrow_width
        self.sbar_frame_color = sbar_frame_color
        self.sbar_relief = sbar_relief


ttk_part_overrides_from_options = TTKPartOverrides()

# -------------------------  tkinter BASIC cursors... there are some OS dependent ones too  ------------------------- #
TKINTER_CURSORS = ['X_cursor', 'arrow', 'based_arrow_down', 'based_arrow_up', 'boat',
                   'bogosity', 'bottom_left_corner', 'bottom_right_corner', 'bottom_side',
                   'bottom_tee', 'box_spiral', 'center_ptr', 'circle', 'clock',
                   'coffee_mug', 'cross', 'cross_reverse', 'crosshair', 'diamond_cross',
                   'dot', 'dotbox', 'double_arrow', 'draft_large', 'draft_small', 'draped_box',
                   'exchange', 'fleur', 'gobbler', 'gumby', 'hand1', 'hand2', 'heart',
                   'icon', 'iron_cross', 'left_ptr', 'left_side', 'left_tee', 'leftbutton',
                   'll_angle', 'lr_angle', 'man', 'middlebutton', 'mouse', 'pencil', 'pirate',
                   'plus', 'question_arrow', 'right_ptr', 'right_side', 'right_tee',
                   'rightbutton', 'rtl_logo', 'sailboat', 'sb_down_arrow', 'sb_h_double_arrow',
                   'sb_left_arrow', 'sb_right_arrow', 'sb_up_arrow', 'sb_v_double_arrow',
                   'shuttle', 'sizing', 'spider', 'spraycan', 'star', 'target', 'tcross',
                   'top_left_arrow', 'top_left_corner', 'top_right_corner', 'top_side', 'top_tee',
                   'trek', 'ul_angle', 'umbrella', 'ur_angle', 'watch', 'xterm']

# -------------------------  tkinter key codes for bindings  ------------------------- #

# The keycode that when pressed will take a snapshot of the current window
DEFAULT_WINDOW_SNAPSHOT_KEY_CODE = None
DEFAULT_WINDOW_SNAPSHOT_KEY = '--SCREENSHOT THIS WINDOW--'

tkinter_keysyms = (
'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'minus', 'period', 'slash',
'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',
'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e',
'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'nobreakspace',
'exclamdown', 'cent', 'sterling', 'currency', 'yen', 'brokenbar', 'section', 'diaeresis', 'copyright', 'ordfeminine', 'guillemotleft', 'notsign', 'hyphen', 'registered', 'macron',
'degree', 'plusminus', 'twosuperior', 'threesuperior', 'acute', 'mu', 'paragraph', 'periodcentered', 'cedilla', 'onesuperior', 'masculine', 'guillemotright', 'onequarter',
'onehalf', 'threequarters', 'questiondown', 'Agrave', 'Aacute', 'Acircumflex', 'Atilde', 'Adiaeresis', 'Aring', 'AE', 'Ccedilla', 'Egrave', 'Eacute', 'Ecircumflex', 'Ediaeresis',
'Igrave', 'Iacute', 'Icircumflex', 'Idiaeresis', 'Eth', 'Ntilde', 'Ograve', 'Oacute', 'Ocircumflex', 'Otilde', 'Odiaeresis', 'multiply', 'Ooblique', 'Ugrave', 'Uacute',
'Ucircumflex', 'Udiaeresis', 'Yacute', 'Thorn', 'ssharp', 'agrave', 'aacute', 'acircumflex', 'atilde', 'adiaeresis', 'aring', 'ae', 'ccedilla', 'egrave', 'eacute', 'ecircumflex',
'ediaeresis', 'igrave', 'iacute', 'icircumflex', 'idiaeresis', 'eth', 'ntilde', 'ograve', 'oacute', 'ocircumflex', 'otilde', 'odiaeresis', 'division', 'oslash', 'ugrave', 'uacute',
'ucircumflex', 'udiaeresis', 'yacute', 'thorn', 'ydiaeresis', 'Aogonek', 'breve', 'Lstroke', 'Lcaron', 'Sacute', 'Scaron', 'Scedilla', 'Tcaron', 'Zacute', 'Zcaron', 'Zabovedot',
'aogonek', 'ogonek', 'lstroke', 'lcaron', 'sacute', 'caron', 'scaron', 'scedilla', 'tcaron', 'zacute', 'doubleacute', 'zcaron', 'zabovedot', 'Racute', 'Abreve', 'Cacute', 'Ccaron',
'Eogonek', 'Ecaron', 'Dcaron', 'Nacute', 'Ncaron', 'Odoubleacute', 'Rcaron', 'Uring', 'Udoubleacute', 'Tcedilla', 'racute', 'abreve', 'cacute', 'ccaron', 'eogonek', 'ecaron',
'dcaron', 'nacute', 'ncaron', 'odoubleacute', 'rcaron', 'uring', 'udoubleacute', 'tcedilla', 'abovedot',
'leftradical', 'topleftradical', 'horizconnector', 'topintegral', 'botintegral', 'vertconnector', 'topleftsqbracket', 'botleftsqbracket', 'toprightsqbracket', 'botrightsqbracket',
'topleftparens', 'botleftparens', 'toprightparens', 'botrightparens', 'leftmiddlecurlybrace', 'rightmiddlecurlybrace', 'topleftsummation', 'botleftsummation',
'topvertsummationconnector', 'botvertsummationconnector', 'toprightsummation', 'botrightsummation', 'rightmiddlesummation', 'lessthanequal', 'notequal', 'greaterthanequal',
'integral', 'therefore', 'variation', 'infinity', 'nabla', 'approximate', 'similarequal', 'ifonlyif', 'implies', 'identical', 'radical', 'includedin', 'includes', 'intersection',
'union', 'logicaland', 'logicalor', 'partialderivative', 'function', 'leftarrow', 'uparrow', 'rightarrow', 'downarrow', 'blank', 'soliddiamond', 'checkerboard', 'ht', 'ff', 'cr',
'lf', 'nl', 'vt', 'lowrightcorner', 'uprightcorner', 'upleftcorner', 'lowleftcorner', 'crossinglines', 'horizlinescan1', 'horizlinescan3', 'horizlinescan5', 'horizlinescan7',
'horizlinescan9', 'leftt', 'rightt', 'bott', 'topt', 'vertbar', 'emspace', 'enspace', 'em3space', 'em4space', 'digitspace', 'punctspace', 'thinspace', 'hairspace', 'emdash',
'endash', 'signifblank', 'ellipsis', 'doubbaselinedot', 'onethird', 'twothirds', 'onefifth', 'twofifths', 'threefifths', 'fourfifths', 'onesixth', 'fivesixths', 'careof',
'figdash', 'leftanglebracket', 'decimalpoint', 'rightanglebracket', 'marker', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'trademark', 'signaturemark',
'trademarkincircle', 'leftopentriangle', 'rightopentriangle', 'emopencircle', 'emopenrectangle', 'leftsinglequotemark', 'rightsinglequotemark', 'leftdoublequotemark',
'rightdoublequotemark', 'prescription', 'minutes', 'seconds', 'latincross', 'hexagram', 'filledrectbullet', 'filledlefttribullet', 'filledrighttribullet', 'emfilledcircle',
'emfilledrect', 'enopencircbullet', 'enopensquarebullet', 'openrectbullet', 'opentribulletup', 'opentribulletdown', 'openstar', 'enfilledcircbullet', 'enfilledsqbullet',
'filledtribulletup', 'filledtribulletdown', 'leftpointer', 'rightpointer', 'club', 'diamond', 'heart', 'maltesecross', 'dagger', 'doubledagger', 'checkmark', 'ballotcross',
'musicalsharp', 'musicalflat', 'malesymbol', 'femalesymbol', 'telephone', 'telephonerecorder', 'phonographcopyright', 'caret', 'singlelowquotemark', 'doublelowquotemark', 'cursor',
'leftcaret', 'rightcaret', 'downcaret', 'upcaret', 'overbar', 'downtack', 'upshoe', 'downstile', 'underbar', 'jot', 'quad', 'uptack', 'circle', 'upstile', 'downshoe', 'rightshoe',
'leftshoe', 'lefttack', 'righttack', 'BackSpace', 'Tab', 'Linefeed', 'Clear', 'Return', 'Pause', 'Scroll_Lock',
'Sys_Req', 'Escape', 'Multi_key', 'Kanji', 'Home', 'Left', 'Up', 'Right', 'Down', 'Prior', 'Next', 'End', 'Begin', 'Win_L', 'Win_R', 'App', 'Select', 'Print', 'Execute', 'Insert',
'Undo', 'Redo', 'Menu', 'Find', 'Cancel', 'Help', 'Break', 'Hebrew_switch', 'Num_Lock', 'KP_Space', 'KP_Tab', 'KP_Enter', 'KP_F1', 'KP_F2', 'KP_F3', 'KP_F4', 'KP_Multiply',
'KP_Add', 'KP_Separator', 'KP_Subtract', 'KP_Decimal', 'KP_Divide', 'KP_0', 'KP_1', 'KP_2', 'KP_3', 'KP_4', 'KP_5', 'KP_6', 'KP_7', 'KP_8', 'KP_9', 'KP_Equal', 'F1', 'F2', 'F3',
'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'L1', 'L2', 'L3', 'L4', 'L5', 'L6', 'L7', 'L8', 'L9', 'L10', 'R1', 'R2', 'R3', 'R4', 'R5', 'R6', 'R7', 'R8', 'R9', 'R10',
'R11', 'R12', 'F33', 'R14', 'R15', 'Shift_L', 'Shift_R', 'Control_L', 'Control_R', 'Caps_Lock', 'Shift_Lock', 'Meta_L', 'Meta_R', 'Alt_L', 'Alt_R', 'Super_L', 'Super_R', 'Hyper_L',
'Hyper_R', 'Delete')


# ------------------------------------------------------------------------- #
#                       ToolTip used by the Elements                        #
# ------------------------------------------------------------------------- #

class ToolTip:
    """
    Create a tooltip for a given widget
    (inspired by https://stackoverflow.com/a/36221216)
    This is an INTERNALLY USED only class.  Users should not refer to this class at all.
    """

    def __init__(self, widget, text, timeout=DEFAULT_TOOLTIP_TIME):
        """
        :param widget:  The tkinter widget
        :type widget:   widget type varies
        :param text:    text for the tooltip. It can inslude \n. If None tip won't be shown
        :type text:     str | None
        :param timeout: Time in milliseconds that mouse must remain still before tip is shown
        :type timeout:  (int)
        """
        self.widget = widget
        self.text = text            # Set to None and tooltip will be not shown
        self.timeout = timeout
        # self.wraplength = wraplength if wraplength else widget.winfo_screenwidth() // 2
        self.tipwindow = None
        self.id = None
        self.x = self.y = 0
        self.widget.bind("<Enter>", self.enter)
        self.widget.bind("<Leave>", self.leave)
        self.widget.bind("<ButtonPress>", self.leave)

    def enter(self, event=None):
        """
        Called by tkinter when mouse enters a widget
        :param event: from tkinter.  Has x,y coordinates of mouse
        :type event:

        """
        if self.text is None:       # if tip is diabled
            return
        self.x = event.x
        self.y = event.y
        self.schedule()

    def leave(self, event=None):
        """
        Called by tktiner when mouse exits a widget
        :param event: from tkinter.  Event info that's not used by function.
        :type event:

        """
        self.unschedule()
        self.hidetip()

    def schedule(self):
        """
        Schedule a timer to time how long mouse is hovering
        """
        self.unschedule()
        self.id = self.widget.after(self.timeout, self.showtip)

    def unschedule(self):
        """
        Cancel timer used to time mouse hover
        """
        if self.id:
            self.widget.after_cancel(self.id)
        self.id = None

    def showtip(self):
        """
        Creates a topoltip window with the tooltip text inside of it
        """
        if self.tipwindow:
            return
        x = self.widget.winfo_rootx() + self.x + DEFAULT_TOOLTIP_OFFSET[0]
        y = self.widget.winfo_rooty() + self.y + DEFAULT_TOOLTIP_OFFSET[1]
        self.tipwindow = tk.Toplevel(self.widget)
        # if not sys.platform.startswith('darwin'):
        try:
            self.tipwindow.wm_overrideredirect(True)
            # if running_mac() and ENABLE_MAC_NOTITLEBAR_PATCH:
            if _mac_should_apply_notitlebar_patch():
                self.tipwindow.wm_overrideredirect(False)
        except Exception as e:
            print('* Error performing wm_overrideredirect in showtip *', e)
        self.tipwindow.wm_geometry("+%d+%d" % (x, y))
        self.tipwindow.wm_attributes("-topmost", 1)

        label = ttk.Label(self.tipwindow, text=self.text, justify=tk.LEFT,
                          background=TOOLTIP_BACKGROUND_COLOR, relief=tk.SOLID, borderwidth=1)
        if TOOLTIP_FONT is not None:
            label.config(font=TOOLTIP_FONT)
        label.pack()

    def hidetip(self):
        """
        Destroy the tooltip window
        """
        if self.tipwindow:
            self.tipwindow.destroy()
        self.tipwindow = None

    def remove(self):
        """
        Removes a tooltip from a widget
        """
        self.text = None

# ---------------------------------------------------------------------- #
# Cascading structure.... Objects get larger                             #
#   Button                                                               #
#       Element                                                          #
#           Row                                                          #
#               Form                                                     #
# ---------------------------------------------------------------------- #
# ------------------------------------------------------------------------- #
#                       Element CLASS                                       #
# ------------------------------------------------------------------------- #
class Element():
    """ The base class for all Elements. Holds the basic description of an Element like size and colors """

    def __init__(self, type, size=(None, None), auto_size_text=None, font=None, background_color=None, text_color=None, key=None, pad=None, tooltip=None,
                 visible=True, metadata=None, sbar_trough_color=None, sbar_background_color=None, sbar_arrow_color=None, sbar_width=None, sbar_arrow_width=None, sbar_frame_color=None, sbar_relief=None):
        """
        Element base class. Only used internally.  User will not create an Element object by itself

        :param type:                        The type of element. These constants all start with "ELEM_TYPE_"
        :type type:                         (int) (could be enum)
        :param size:                        w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1
        :type size:                         (int, int) | (None, None) | int
        :param auto_size_text:              True if the Widget should be shrunk to exactly fit the number of chars to show
        :type auto_size_text:               bool
        :param font:                        specifies the font family, size. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:                         (str or (str, int[, str]) or None)
        :param background_color:            color of background. Can be in #RRGGBB format or a color name "black"
        :type background_color:             (str)
        :param text_color:                  element's text color. Can be in #RRGGBB format or a color name "black"
        :type text_color:                   (str)
        :param key:                         Identifies an Element. Should be UNIQUE to this window.
        :type key:                          str | int | tuple | object
        :param pad:                         Amount of padding to put around element in pixels (left/right, top/bottom). If an int is given, then auto-converted to tuple (int, int)
        :type pad:                          (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param tooltip:                     text, that will appear when mouse hovers over the element
        :type tooltip:                      (str)
        :param visible:                     set visibility state of the element (Default = True)
        :type visible:                      (bool)
        :param metadata:                    User metadata that can be set to ANYTHING
        :type metadata:                     (Any)
        :param sbar_trough_color:           Scrollbar color of the trough
        :type sbar_trough_color:            (str)
        :param sbar_background_color:       Scrollbar color of the background of the arrow buttons at the ends AND the color of the "thumb" (the thing you grab and slide). Switches to arrow color when mouse is over
        :type sbar_background_color:        (str)
        :param sbar_arrow_color:            Scrollbar color of the arrow at the ends of the scrollbar (it looks like a button). Switches to background color when mouse is over
        :type sbar_arrow_color:             (str)
        :param sbar_width:                  Scrollbar width in pixels
        :type sbar_width:                   (int)
        :param sbar_arrow_width:            Scrollbar width of the arrow on the scrollbar. It will potentially impact the overall width of the scrollbar
        :type sbar_arrow_width:             (int)
        :param sbar_frame_color:            Scrollbar Color of frame around scrollbar (available only on some ttk themes)
        :type sbar_frame_color:             (str)
        :param sbar_relief:                 Scrollbar relief that will be used for the "thumb" of the scrollbar (the thing you grab that slides). Should be a constant that is defined at starting with "RELIEF_" - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID
        :type sbar_relief:                  (str)
        """

        if size is not None and size != (None, None):
            if isinstance(size, int):
                size = (size, 1)
            if isinstance(size, tuple) and len(size) == 1:
                size = (size[0], 1)

        if pad is not None and pad != (None, None):
            if isinstance(pad, int):
                pad = (pad, pad)

        self.Size = size
        self.Type = type
        self.AutoSizeText = auto_size_text

        self.Pad = pad
        self.Font = font

        self.TKStringVar = None
        self.TKIntVar = None
        self.TKText = None
        self.TKEntry = None
        self.TKImage = None
        self.ttk_style_name = ''  # The ttk style name (if this is a ttk widget)
        self.ttk_style = None  # The ttk Style object (if this is a ttk widget)
        self._metadata = None  # type: Any
        if not hasattr(self, 'setting'):
            self.setting = None       # If no setting has been set yet, set it to None
        self.ParentForm = None  # type: Window
        self.ParentContainer = None  # will be a Form, Column, or Frame element # UNBIND
        self.TextInputDefault = None
        self.Position = (0, 0)  # Default position Row 0, Col 0
        self.BackgroundColor = background_color if background_color is not None else DEFAULT_ELEMENT_BACKGROUND_COLOR
        self.TextColor = text_color if text_color is not None else DEFAULT_ELEMENT_TEXT_COLOR
        self.Key = key  # dictionary key for return values
        self.Tooltip = tooltip
        self.TooltipObject = None       # type: ToolTip
        self._visible = visible
        self.TKRightClickMenu = None
        self.Widget = None  # Set when creating window. Has the main tkinter widget for element
        self.Tearoff = False  # needed because of right click menu code
        self.ParentRowFrame = None  # type tk.Frame
        self.metadata = metadata
        self.user_bind_dict = {}  # Used when user defines a tkinter binding using bind method - convert bind string to key modifier
        self.user_bind_event = None  # Used when user defines a tkinter binding using bind method - event data from tkinter
        # self.pad_used = (0, 0)  # the amount of pad used when was inserted into the layout
        self._popup_menu_location = (None, None)
        self.pack_settings = None
        self.vsb_style_name = None  # ttk style name used for the verical scrollbar if one is attached to element
        self.hsb_style_name = None  # ttk style name used for the horizontal scrollbar if one is attached to element
        self.vsb_style = None  # The ttk style used for the vertical scrollbar if one is attached to element
        self.hsb_style = None  # The ttk style used for the horizontal scrollbar if one is attached to element
        self.hsb = None  # The horizontal scrollbar if one is attached to element
        self.vsb = None  # The vertical scrollbar if one is attached to element
        ## TTK Scrollbar Settings
        self.ttk_part_overrides = TTKPartOverrides(sbar_trough_color=sbar_trough_color, sbar_background_color=sbar_background_color, sbar_arrow_color=sbar_arrow_color,
                                                   sbar_width=sbar_width, sbar_arrow_width=sbar_arrow_width, sbar_frame_color=sbar_frame_color, sbar_relief=sbar_relief)

        PSG_THEME_PART_FUNC_MAP = {PSG_THEME_PART_BACKGROUND: theme_background_color,
                                   PSG_THEME_PART_BUTTON_BACKGROUND: theme_button_color_background,
                                   PSG_THEME_PART_BUTTON_TEXT: theme_button_color_text,
                                   PSG_THEME_PART_INPUT_BACKGROUND: theme_input_background_color,
                                   PSG_THEME_PART_INPUT_TEXT: theme_input_text_color,
                                   PSG_THEME_PART_TEXT: theme_text_color,
                                   PSG_THEME_PART_SLIDER: theme_slider_color}

        # class Theme_Parts():
        #     PSG_THEME_PART_FUNC_MAP = {PSG_THEME_PART_BACKGROUND: theme_background_color,
        if sbar_trough_color is not None:
            self.scroll_trough_color = sbar_trough_color
        else:
            self.scroll_trough_color = PSG_THEME_PART_FUNC_MAP.get(ttk_part_mapping_dict[TTK_SCROLLBAR_PART_TROUGH_COLOR], ttk_part_mapping_dict[TTK_SCROLLBAR_PART_TROUGH_COLOR])
            if callable(self.scroll_trough_color):
                self.scroll_trough_color = self.scroll_trough_color()

        if sbar_background_color is not None:
            self.scroll_background_color = sbar_background_color
        else:
            self.scroll_background_color = PSG_THEME_PART_FUNC_MAP.get(ttk_part_mapping_dict[TTK_SCROLLBAR_PART_BACKGROUND_COLOR],
                                                                       ttk_part_mapping_dict[TTK_SCROLLBAR_PART_BACKGROUND_COLOR])
            if callable(self.scroll_background_color):
                self.scroll_background_color = self.scroll_background_color()

        if sbar_arrow_color is not None:
            self.scroll_arrow_color = sbar_arrow_color
        else:
            self.scroll_arrow_color = PSG_THEME_PART_FUNC_MAP.get(ttk_part_mapping_dict[TTK_SCROLLBAR_PART_ARROW_BUTTON_ARROW_COLOR],
                                                                  ttk_part_mapping_dict[TTK_SCROLLBAR_PART_ARROW_BUTTON_ARROW_COLOR])
            if callable(self.scroll_arrow_color):
                self.scroll_arrow_color = self.scroll_arrow_color()

        if sbar_frame_color is not None:
            self.scroll_frame_color = sbar_frame_color
        else:
            self.scroll_frame_color = PSG_THEME_PART_FUNC_MAP.get(ttk_part_mapping_dict[TTK_SCROLLBAR_PART_FRAME_COLOR], ttk_part_mapping_dict[TTK_SCROLLBAR_PART_FRAME_COLOR])
            if callable(self.scroll_frame_color):
                self.scroll_frame_color = self.scroll_frame_color()

        if sbar_relief is not None:
            self.scroll_relief = sbar_relief
        else:
            self.scroll_relief = ttk_part_mapping_dict[TTK_SCROLLBAR_PART_RELIEF]

        if sbar_width is not None:
            self.scroll_width = sbar_width
        else:
            self.scroll_width = ttk_part_mapping_dict[TTK_SCROLLBAR_PART_SCROLL_WIDTH]

        if sbar_arrow_width is not None:
            self.scroll_arrow_width = sbar_arrow_width
        else:
            self.scroll_arrow_width = ttk_part_mapping_dict[TTK_SCROLLBAR_PART_ARROW_WIDTH]

        if not hasattr(self, 'DisabledTextColor'):
            self.DisabledTextColor = None
        if not hasattr(self, 'ItemFont'):
            self.ItemFont = None
        if not hasattr(self, 'RightClickMenu'):
            self.RightClickMenu = None
        if not hasattr(self, 'Disabled'):
            self.Disabled = None  # in case the element hasn't defined this, add it here

    @property
    def visible(self):
        """
        Returns visibility state for the element.  This is a READONLY property
        :return: Visibility state for element
        :rtype:  (bool)
        """
        return self._visible

    @property
    def metadata(self):
        """
        Metadata is an Element property that you can use at any time to hold any value
        :return: the current metadata value
        :rtype:  (Any)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, value):
        """
         Metadata is an Element property that you can use at any time to hold any value
        :param value: Anything you want it to be
        :type value:  (Any)
        """
        self._metadata = value

    @property
    def key(self):
        """
        Returns key for the element.  This is a READONLY property.
        Keys can be any hashable object (basically anything except a list... tuples are ok, but not lists)
        :return: The window's Key
        :rtype:  (Any)
        """
        return self.Key

    @property
    def widget(self):
        """
        Returns tkinter widget for the element.  This is a READONLY property.
        The implementation is that the Widget member variable is returned. This is a backward compatible addition
        :return:    The element's underlying tkinter widget
        :rtype:     (tkinter.Widget)
        """
        return self.Widget

    def _RightClickMenuCallback(self, event):
        """
        Callback function that's called when a right click happens. Shows right click menu as result

        :param event: information provided by tkinter about the event including x,y location of click
        :type event:

        """
        if self.Type == ELEM_TYPE_TAB_GROUP:
            try:
                index = self.Widget.index('@{},{}'.format(event.x, event.y))
                tab = self.Widget.tab(index, 'text')
                key = self.find_key_from_tab_name(tab)
                tab_element = self.ParentForm.key_dict[key]
                if tab_element.RightClickMenu is None:  # if this tab didn't explicitly have a menu, then don't show anything
                    return
                tab_element.TKRightClickMenu.tk_popup(event.x_root, event.y_root, 0)
                self.TKRightClickMenu.grab_release()
            except:
                pass
            return
        self.TKRightClickMenu.tk_popup(event.x_root, event.y_root, 0)
        self.TKRightClickMenu.grab_release()
        if self.Type == ELEM_TYPE_GRAPH:
            self._update_position_for_returned_values(event)

    def _tearoff_menu_callback(self, parent, menu):
        """
        Callback function that's called when a right click menu is torn off.
        The reason for this function is to relocate the torn-off menu. It will default to 0,0 otherwise
        This callback moves the right click menu window to the location of the current window

        :param parent: information provided by tkinter - the parent of the Meny
        :type parent:
        :param menu:   information provided by tkinter - the menu window
        :type menu:

        """
        if self._popup_menu_location == (None, None):
            winx, winy = self.ParentForm.current_location()
        else:
            winx, winy = self._popup_menu_location
        # self.ParentForm.TKroot.update()
        self.ParentForm.TKroot.tk.call('wm', 'geometry', menu, "+{}+{}".format(winx, winy))

    def _MenuItemChosenCallback(self, item_chosen):  # TEXT Menu item callback
        """
        Callback function called when user chooses a menu item from menubar, Button Menu or right click menu

        :param item_chosen: String holding the value chosen.
        :type item_chosen:  str

        """
        # print('IN MENU ITEM CALLBACK', item_chosen)
        self.MenuItemChosen = item_chosen
        self.ParentForm.LastButtonClicked = self.MenuItemChosen
        self.ParentForm.FormRemainedOpen = True
        _exit_mainloop(self.ParentForm)
        # Window._window_that_exited = self.ParentForm
        # self.ParentForm.TKroot.quit()  # kick the users out of the mainloop

    def _FindReturnKeyBoundButton(self, form):
        """
        Searches for which Button has the flag Button.BindReturnKey set.  It is called recursively when a
        "Container Element" is encountered. Func has to walk entire window including these "sub-forms"

        :param form: the Window object to search
        :type form:
        :return:     Button Object if a button is found, else None
        :rtype:      Button | None
        """
        for row in form.Rows:
            for element in row:
                if element.Type == ELEM_TYPE_BUTTON:
                    if element.BindReturnKey:
                        return element
                if element.Type == ELEM_TYPE_COLUMN:
                    rc = self._FindReturnKeyBoundButton(element)
                    if rc is not None:
                        return rc
                if element.Type == ELEM_TYPE_FRAME:
                    rc = self._FindReturnKeyBoundButton(element)
                    if rc is not None:
                        return rc
                if element.Type == ELEM_TYPE_TAB_GROUP:
                    rc = self._FindReturnKeyBoundButton(element)
                    if rc is not None:
                        return rc
                if element.Type == ELEM_TYPE_TAB:
                    rc = self._FindReturnKeyBoundButton(element)
                    if rc is not None:
                        return rc
                if element.Type == ELEM_TYPE_PANE:
                    rc = self._FindReturnKeyBoundButton(element)
                    if rc is not None:
                        return rc
        return None

    def _TextClickedHandler(self, event):
        """
        Callback that's called when a text element is clicked on with events enabled on the Text Element.
        Result is that control is returned back to user (quits mainloop).

        :param event:
        :type event:

        """
        # If this is a minimize button for a custom titlebar, then minimize the window
        if self.Key in (TITLEBAR_MINIMIZE_KEY, TITLEBAR_MAXIMIZE_KEY, TITLEBAR_CLOSE_KEY):
            self.ParentForm._custom_titlebar_callback(self.Key)
        elif self.Key == var_YtKRpq7:
            webbrowser.open_new_tab(var_QQZIsaU6)
            return
        self._generic_callback_handler(self.DisplayText)
        return

    def _ReturnKeyHandler(self, event):
        """
        Internal callback for the ENTER / RETURN key. Results in calling the ButtonCallBack for element that has the return key bound to it, just as if button was clicked.

        :param event:
        :type event:

        """
        # if the element is disabled, ignore the event
        if self.Disabled:
            return

        MyForm = self.ParentForm
        button_element = self._FindReturnKeyBoundButton(MyForm)
        if button_element is not None:
            # if the Button has been disabled, then don't perform the callback
            if button_element.Disabled:
                return
            button_element.ButtonCallBack()

    def _generic_callback_handler(self, alternative_to_key=None, force_key_to_be=None):
        """
        Peforms the actions that were in many of the callback functions previously.  Combined so that it's
        easier to modify and is in 1 place now

        :param event:            From tkinter and is not used
        :type event:             Any
        :param alternate_to_key: If key is None, then use this value instead
        :type alternate_to_key:  Any
        """
        if force_key_to_be is not None:
            self.ParentForm.LastButtonClicked = force_key_to_be
        elif self.Key is not None:
            self.ParentForm.LastButtonClicked = self.Key
        else:
            self.ParentForm.LastButtonClicked = alternative_to_key
        self.ParentForm.FormRemainedOpen = True

        _exit_mainloop(self.ParentForm)
        # if self.ParentForm.CurrentlyRunningMainloop:
        #     Window._window_that_exited = self.ParentForm
        #     self.ParentForm.TKroot.quit()  # kick the users out of the mainloop

    def _ListboxSelectHandler(self, event):
        """
        Internal callback function for when a listbox item is selected

        :param event: Information from tkinter about the callback
        :type event:

        """
        self._generic_callback_handler('')

    def _ComboboxSelectHandler(self, event):
        """
        Internal callback function for when an entry is selected in a Combobox.
        :param event: Event data from tkinter (not used)
        :type event:

        """
        self._generic_callback_handler('')



    def _OptionMenuSelectHandler(self, var, index, mode):
        """
        Internal callback function for when an entry is selected in a OptionMenu.
        :param var:     tkinter control variable
        :param index:   index of var, '' if var is not a list
        :param mode:    'w' for 'write' here
        """
        self._generic_callback_handler('')




    def _SpinboxSelectHandler(self, event=None):
        """
        Internal callback function for when an entry is selected in a Spinbox.
        Note that the parm is optional because it's not used if arrows are used to change the value
        but if the return key is pressed, it will include the event parm
        :param event: Event data passed in by tkinter (not used)
        :type event:
        """
        self._generic_callback_handler('')

    def _RadioHandler(self):
        """
        Internal callback for when a radio button is selected and enable events was set for radio
        """
        self._generic_callback_handler('')

    def _CheckboxHandler(self):
        """
        Internal callback for when a checkbnox is selected and enable events was set for checkbox
        """
        self._generic_callback_handler('')

    def _TabGroupSelectHandler(self, event):
        """
        Internal callback for when a Tab is selected and enable events was set for TabGroup

        :param event: Event data passed in by tkinter (not used)
        :type event:
        """
        self._generic_callback_handler('')

    def _KeyboardHandler(self, event):
        """
        Internal callback for when a key is pressed andd return keyboard events was set for window

        :param event: Event data passed in by tkinter (not used)
        :type event:
        """

        # if the element is disabled, ignore the event
        if self.Disabled:
            return
        self._generic_callback_handler('')

    def _ClickHandler(self, event):
        """
        Internal callback for when a mouse was clicked... I think.

        :param event: Event data passed in by tkinter (not used)
        :type event:
        """
        self._generic_callback_handler('')

    def _this_elements_window_closed(self, quick_check=True):
        if self.ParentForm is not None:
            return self.ParentForm.is_closed(quick_check=quick_check)

        return True

    def _user_bind_callback(self, bind_string, event, propagate=True):
        """
        Used when user binds a tkinter event directly to an element

        :param bind_string: The event that was bound so can lookup the key modifier
        :type bind_string:  (str)
        :param event:       Event data passed in by tkinter (not used)
        :type event:        (Any)
        :param propagate:   If True then tkinter will be told to propagate the event to the element
        :type propagate:    (bool)
        """
        key_suffix = self.user_bind_dict.get(bind_string, '')
        self.user_bind_event = event
        if self.Type == ELEM_TYPE_GRAPH:
            self._update_position_for_returned_values(event)
        if self.Key is not None:
            if isinstance(self.Key, str):
                key = self.Key + str(key_suffix)
            else:
                key = (self.Key, key_suffix)  # old way (pre 2021) was to make a brand new tuple
                # key = self.Key + (key_suffix,)   # in 2021 tried this. It will break existing applications though - if key is a tuple, add one more item
        else:
            key = bind_string

        self._generic_callback_handler(force_key_to_be=key)

        return 'break' if propagate is not True else None

    def bind(self, bind_string, key_modifier, propagate=True):
        """
        Used to add tkinter events to an Element.
        The tkinter specific data is in the Element's member variable user_bind_event
        :param bind_string:  The string tkinter expected in its bind function
        :type bind_string:   (str)
        :param key_modifier: Additional data to be added to the element's key when event is returned
        :type key_modifier:  (str)
        :param propagate:    If True then tkinter will be told to propagate the event to the element
        :type propagate:     (bool)
        """
        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        try:
            self.Widget.bind(bind_string, lambda evt: self._user_bind_callback(bind_string, evt, propagate))
        except Exception as e:
            self.Widget.unbind_all(bind_string)
            return

        self.user_bind_dict[bind_string] = key_modifier

    def unbind(self, bind_string):
        """
        Removes a previously bound tkinter event from an Element.
        :param bind_string: The string tkinter expected in its bind function
        :type bind_string:  (str)
        """
        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return
        self.Widget.unbind(bind_string)
        self.user_bind_dict.pop(bind_string, None)

    def set_tooltip(self, tooltip_text):
        """
        Called by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').

        :param tooltip_text: the text to show in tooltip.  If None then no tip will be shown
        :type tooltip_text:  str | None
        """

        if self.TooltipObject:
            try:
                self.TooltipObject.leave()
            except:
                pass

        self.TooltipObject = ToolTip(self.Widget, text=tooltip_text, timeout=DEFAULT_TOOLTIP_TIME)


    def remove_tooltip(self):
        """
        Removes a previiously created tooltip for an element

        """

        if self.TooltipObject:
            try:
                self.TooltipObject.remove()
            except:
                pass


    def set_focus(self, force=False):
        """
        Sets the current focus to be on this element

        :param force: if True will call focus_force otherwise calls focus_set
        :type force:  bool
        """
        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return
        try:
            if force:
                self.Widget.focus_force()
            else:
                self.Widget.focus_set()
        except Exception as e:
            _error_popup_with_traceback("Exception blocking focus. Check your element's Widget", e)

    def block_focus(self, block=True):
        """
        Enable or disable the element from getting focus by using the keyboard.
        If the block parameter is True, then this element will not be given focus by using
        the keyboard to go from one element to another.
        You CAN click on the element and utilize it.

        :param block: if True the element will not get focus via the keyboard
        :type block:  bool
        """
        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return
        try:
            self.ParentForm.TKroot.focus_force()
            if block:
                self.Widget.configure(takefocus=0)
            else:
                self.Widget.configure(takefocus=1)
        except Exception as e:
            _error_popup_with_traceback("Exception blocking focus. Check your element's Widget", e)

    def get_next_focus(self):
        """
        Gets the next element that should get focus after this element.

        :return:    Element that will get focus after this one
        :rtype:     (Element)
        """
        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return None

        try:
            next_widget_focus = self.widget.tk_focusNext()
            return self.ParentForm.widget_to_element(next_widget_focus)
        except Exception as e:
            _error_popup_with_traceback("Exception getting next focus. Check your element's Widget", e)

    def get_previous_focus(self):
        """
        Gets the element that should get focus previous to this element.

        :return:    Element that should get the focus before this one
        :rtype:     (Element)
        """
        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return None
        try:
            next_widget_focus = self.widget.tk_focusPrev()  # tkinter.Widget
            return self.ParentForm.widget_to_element(next_widget_focus)
        except Exception as e:
            _error_popup_with_traceback("Exception getting previous focus. Check your element's Widget", e)

    def set_size(self, size=(None, None)):
        """
        Changes the size of an element to a specific size.
        It's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.

        :param size: The size in characters, rows typically. In some cases they are pixels
        :type size:  (int, int)
        """
        try:
            if size[0] != None:
                self.Widget.config(width=size[0])
        except:
            print('Warning, error setting width on element with key=', self.Key)
        try:
            if size[1] != None:
                self.Widget.config(height=size[1])
        except:
            try:
                self.Widget.config(length=size[1])
            except:
                print('Warning, error setting height on element with key=', self.Key)

        if self.Type == ELEM_TYPE_GRAPH:
            self.CanvasSize = size

    def get_size(self):
        """
        Return the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.
        :return: width and height of the element
        :rtype:  (int, int)
        """
        try:
            w = self.Widget.winfo_width()
            h = self.Widget.winfo_height()
        except:
            print('Warning, error getting size of element', self.Key)
            w = h = None
        return w, h

    def hide_row(self):
        """
        Hide the entire row an Element is located on.
        Use this if you must have all space removed when you are hiding an element, including the row container
        """
        try:
            self.ParentRowFrame.pack_forget()
        except:
            print('Warning, error hiding element row for key =', self.Key)

    def unhide_row(self):
        """
        Unhides (makes visible again) the row container that the Element is located on.
        Note that it will re-appear at the bottom of the window / container, most likely.
        """
        try:
            self.ParentRowFrame.pack()
        except:
            print('Warning, error hiding element row for key =', self.Key)

    def expand(self, expand_x=False, expand_y=False, expand_row=True):
        """
        Causes the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions

        :param expand_x:   If True Element will expand in the Horizontal directions
        :type expand_x:    (bool)
        :param expand_y:   If True Element will expand in the Vertical directions
        :type expand_y:    (bool)
        :param expand_row: If True the row containing the element will also expand. Without this your element is "trapped" within the row
        :type expand_row:  (bool)
        """
        if expand_x and expand_y:
            fill = tk.BOTH
        elif expand_x:
            fill = tk.X
        elif expand_y:
            fill = tk.Y
        else:
            return

        if not self._widget_was_created():
            return
        self.Widget.pack(expand=True, fill=fill)
        self.ParentRowFrame.pack(expand=expand_row, fill=fill)
        if self.element_frame is not None:
            self.element_frame.pack(expand=True, fill=fill)

    def set_cursor(self, cursor=None, cursor_color=None):
        """
        Sets the cursor for the current Element.
        "Cursor" is used in 2 different ways in this call.
        For the parameter "cursor" it's actually the mouse pointer.
        If you do not want any mouse pointer, then use the string "none"
        For the parameter "cursor_color" it's the color of the beam used when typing into an input element

        :param cursor:       The tkinter cursor name
        :type cursor:        (str)
        :param cursor_color: color to set the "cursor" to
        :type cursor_color:  (str)
        """
        if not self._widget_was_created():
            return
        if cursor is not None:
            try:
                self.Widget.config(cursor=cursor)
            except Exception as e:
                print('Warning bad cursor specified ', cursor)
                print(e)
        if cursor_color is not None:
            try:
                self.Widget.config(insertbackground=cursor_color)
            except Exception as e:
                print('Warning bad cursor color', cursor_color)
                print(e)

    def set_vscroll_position(self, percent_from_top):
        """
        Attempts to set the vertical scroll postition for an element's Widget
        :param percent_from_top: From 0 to 1.0, the percentage from the top to move scrollbar to
        :type percent_from_top:  (float)
        """
        if self.Type == ELEM_TYPE_COLUMN and self.Scrollable:
            widget = self.widget.canvas  # scrollable column is a special case
        else:
            widget = self.widget

        try:
            widget.yview_moveto(percent_from_top)
        except Exception as e:
            print('Warning setting the vertical scroll (yview_moveto failed)')
            print(e)

    def _widget_was_created(self):
        """
        Determines if a Widget was created for this element.

        :return: True if a Widget has been created previously (Widget is not None)
        :rtype:  (bool)
        """
        if self.Widget is not None:
            return True
        else:
            if SUPPRESS_WIDGET_NOT_FINALIZED_WARNINGS:
                return False

            warnings.warn('You cannot Update element with key = {} until the window.read() is called or finalize=True when creating window'.format(self.Key), UserWarning)
            if not SUPPRESS_ERROR_POPUPS:
                _error_popup_with_traceback('Unable to complete operation on element with key {}'.format(self.Key),
                                            'You cannot perform operations (such as calling update) on an Element until:',
                                            ' window.read() is called or finalize=True when Window created.',
                                            'Adding a "finalize=True" parameter to your Window creation will likely fix this.',
                                            _create_error_message(),
                                            )
            return False

    def _grab_anywhere_on_using_control_key(self):
        """
        Turns on Grab Anywhere functionality AFTER a window has been created.  Don't try on a window that's not yet
        been Finalized or Read.
        """
        self.Widget.bind("<Control-Button-1>", self.ParentForm._StartMove)
        self.Widget.bind("<Control-ButtonRelease-1>", self.ParentForm._StopMove)
        self.Widget.bind("<Control-B1-Motion>", self.ParentForm._OnMotion)

    def _grab_anywhere_on(self):
        """
        Turns on Grab Anywhere functionality AFTER a window has been created.  Don't try on a window that's not yet
        been Finalized or Read.
        """
        self.Widget.bind("<ButtonPress-1>", self.ParentForm._StartMove)
        self.Widget.bind("<ButtonRelease-1>", self.ParentForm._StopMove)
        self.Widget.bind("<B1-Motion>", self.ParentForm._OnMotion)

    def _grab_anywhere_off(self):
        """
        Turns off Grab Anywhere functionality AFTER a window has been created.  Don't try on a window that's not yet
        been Finalized or Read.
        """
        self.Widget.unbind("<ButtonPress-1>")
        self.Widget.unbind("<ButtonRelease-1>")
        self.Widget.unbind("<B1-Motion>")

    def grab_anywhere_exclude(self):
        """
        Excludes this element from being used by the grab_anywhere feature
        Handy for elements like a Graph element when dragging is enabled. You want the Graph element to get the drag events instead of the window dragging.
        """
        self.ParentForm._grab_anywhere_ignore_these_list.append(self.Widget)

    def grab_anywhere_include(self):
        """
        Includes this element in the grab_anywhere feature
        This will allow you to make a Multline element drag a window for example
        """
        self.ParentForm._grab_anywhere_include_these_list.append(self.Widget)


    def set_right_click_menu(self, menu=None):
        """
        Sets a right click menu for an element.
        If a menu is already set for the element, it will call the tkinter destroy method to remove it
        :param menu:                   A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type menu:                    List[List[ List[str] | str ]]
        """
        if menu == MENU_RIGHT_CLICK_DISABLED:
            return
        if menu is None:
            menu = self.ParentForm.RightClickMenu
            if menu is None:
                return
        if menu:
            # If previously had a menu destroy it
            if self.TKRightClickMenu:
                try:
                    self.TKRightClickMenu.destroy()     # just in case there's a problem let's not crash
                except:
                    pass
            top_menu = tk.Menu(self.ParentForm.TKroot, tearoff=self.ParentForm.right_click_menu_tearoff, tearoffcommand=self._tearoff_menu_callback)

            if self.ParentForm.right_click_menu_background_color not in (COLOR_SYSTEM_DEFAULT, None):
                top_menu.config(bg=self.ParentForm.right_click_menu_background_color)
            if self.ParentForm.right_click_menu_text_color not in (COLOR_SYSTEM_DEFAULT, None):
                top_menu.config(fg=self.ParentForm.right_click_menu_text_color)
            if self.ParentForm.right_click_menu_disabled_text_color not in (COLOR_SYSTEM_DEFAULT, None):
                top_menu.config(disabledforeground=self.ParentForm.right_click_menu_disabled_text_color)
            if self.ParentForm.right_click_menu_font is not None:
                top_menu.config(font=self.ParentForm.right_click_menu_font)

            if self.ParentForm.right_click_menu_selected_colors[0] not in (COLOR_SYSTEM_DEFAULT, None):
                top_menu.config(activeforeground=self.ParentForm.right_click_menu_selected_colors[0])
            if self.ParentForm.right_click_menu_selected_colors[1] not in (COLOR_SYSTEM_DEFAULT, None):
                top_menu.config(activebackground=self.ParentForm.right_click_menu_selected_colors[1])
            AddMenuItem(top_menu, menu[1], self, right_click_menu=True)
            self.TKRightClickMenu = top_menu
            if self.ParentForm.RightClickMenu:            # if the top level has a right click menu, then setup a callback for the Window itself
                if self.ParentForm.TKRightClickMenu is None:
                    self.ParentForm.TKRightClickMenu = top_menu
                    if (running_mac()):
                        self.ParentForm.TKroot.bind('<ButtonRelease-2>', self.ParentForm._RightClickMenuCallback)
                    else:
                        self.ParentForm.TKroot.bind('<ButtonRelease-3>', self.ParentForm._RightClickMenuCallback)
            if (running_mac()):
                self.Widget.bind('<ButtonRelease-2>', self._RightClickMenuCallback)
            else:
                self.Widget.bind('<ButtonRelease-3>', self._RightClickMenuCallback)


    def save_element_screenshot_to_disk(self, filename=None):
        """
        Saves an image of the PySimpleGUI window provided into the filename provided

        :param filename:        Optional filename to save screenshot to. If not included, the User Settinds are used to get the filename
        :return:                A PIL ImageGrab object that can be saved or manipulated
        :rtype:                 (PIL.ImageGrab | None)
        """
        global pil_import_attempted, pil_imported, PIL, ImageGrab, Image

        if not pil_import_attempted:
            try:
                import PIL as PIL
                from PIL import ImageGrab
                from PIL import Image
                pil_imported = True
                pil_import_attempted = True
            except:
                pil_imported = False
                pil_import_attempted = True
                print('FAILED TO IMPORT PIL!')
                return None
        try:
            # Add a little to the X direction if window has a titlebar
            rect = (
            self.widget.winfo_rootx(), self.widget.winfo_rooty(), self.widget.winfo_rootx() + self.widget.winfo_width(), self.widget.winfo_rooty() + self.widget.winfo_height())

            grab = ImageGrab.grab(bbox=rect)
            # Save the grabbed image to disk
        except Exception as e:
            # print(e)
            popup_error_with_traceback('Screen capture failure', 'Error happened while trying to save screencapture of an element', e)
            return None

        # return grab
        if filename is None:
            folder = pysimplegui_user_settings.get('-screenshots folder-', '')
            filename = pysimplegui_user_settings.get('-screenshots filename-', '')
            full_filename = os.path.join(folder, filename)
        else:
            full_filename = filename
        if full_filename:
            try:
                grab.save(full_filename)
            except Exception as e:
                popup_error_with_traceback('Screen capture failure', 'Error happened while trying to save screencapture', e)
        else:
            popup_error_with_traceback('Screen capture failure', 'You have attempted a screen capture but have not set up a good filename to save to')
        return grab

    def _pack_forget_save_settings(self, alternate_widget=None):
        """
        Performs a pack_forget which will make a widget invisible.
        This method saves the pack settings so that they can be restored if the element is made visible again

        :param alternate_widget:   Widget to use that's different than the one defined in Element.Widget. These are usually Frame widgets
        :type alternate_widget:    (tk.Widget)
        """

        if alternate_widget is not None and self.Widget is None:
            return

        widget = alternate_widget if alternate_widget is not None else self.Widget
        # if the widget is already invisible (i.e. not packed) then will get an error
        try:
            pack_settings = widget.pack_info()
            self.pack_settings = pack_settings
            widget.pack_forget()
        except:
            pass

    def _pack_restore_settings(self, alternate_widget=None):
        """
        Restores a previously packated widget which will make it visible again.
        If no settings were saved, then the widget is assumed to have not been unpacked and will not try to pack it again

        :param alternate_widget:   Widget to use that's different than the one defined in Element.Widget. These are usually Frame widgets
        :type alternate_widget:    (tk.Widget)
        """

        # if there are no saved pack settings, then assume it hasnb't been packaed before. The request will be ignored
        if self.pack_settings is None:
            return

        widget = alternate_widget if alternate_widget is not None else self.Widget
        if widget is not None:
            widget.pack(**self.pack_settings)

    def update(self, *args, **kwargs):
        """
        A dummy update call.  This will only be called if an element hasn't implemented an update method
        It is provided here for docstring purposes.  If you got here by browing code via PyCharm, know
        that this is not the function that will be called.  Your actual element's update method will be called.

        If you call update, you must call window.refresh if you want the change to happen prior to your next
        window.read() call. Normally uou don't do this as the window.read call is likely going to happen next.
        """
        print('* Base Element Class update was called. Your element does not seem to have an update method')

    def __call__(self, *args, **kwargs):
        """
        Makes it possible to "call" an already existing element.  When you do make the "call", it actually calls
        the Update method for the element.
        Example:    If this text element was in yoiur layout:
                    sg.Text('foo', key='T')
                    Then you can call the Update method for that element by writing:
                    window.find_element('T')('new text value')
        """
        return self.update(*args, **kwargs)

    SetTooltip = set_tooltip
    SetFocus = set_focus


# ---------------------------------------------------------------------- #
#                           Input Class                                  #
# ---------------------------------------------------------------------- #
class Input(Element):
    """
    Display a single text input field.  Based on the tkinter Widget `Entry`
    """

    def __init__(self, default_text='', size=(None, None), s=(None, None), disabled=False, password_char='', setting=None,
                 justification=None, background_color=None, text_color=None, font=None, tooltip=None, border_width=None,
                 change_submits=False, enable_events=False, do_not_clear=True, key=None, k=None, focus=False, pad=None, p=None,
                 use_readonly_for_disable=True, readonly=False, disabled_readonly_background_color=None, disabled_readonly_text_color=None, selected_text_color=None,
                 selected_background_color=None, expand_x=False, expand_y=False,
                 right_click_menu=None, visible=True, metadata=None):
        """
        :param default_text:                       Text initially shown in the input box as a default value(Default value = ''). Will automatically be converted to string
        :type default_text:                        (Any)
        :param size:                               w=characters-wide, h=rows-high. If an int is supplied rather than a tuple, then a tuple is created width=int supplied and heigh=1
        :type size:                                (int, int) |  (int, None) | int
        :param s:                                  Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                                   (int, int)  | (None, None) | int
        :param disabled:                           set disable state for element (Default = False)
        :type disabled:                            (bool)
        :param password_char:                      Password character if this is a password field (Default value = '')
        :type password_char:                       (char)
        :param setting:                            If not None, then this element will be saved in a settings file using the key for the element
        :type setting:                             (Any)
        :param justification:                      justification for data display. Valid choices - left, right, center
        :type justification:                       (str)
        :param background_color:                   color of background in one of the color formats
        :type background_color:                    (str)
        :param text_color:                         color of the text
        :type text_color:                          (str)
        :param font:                               specifies the font family, size. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:                                (str or (str, int[, str]) or None)
        :param tooltip:                            text, that will appear when mouse hovers over the element
        :type tooltip:                             (str)
        :param border_width:                       width of border around element in pixels
        :type border_width:                        (int)
        :param change_submits:                     * DEPRICATED DO NOT USE. Use `enable_events` instead
        :type change_submits:                      (bool)
        :param enable_events:                      If True then changes to this element are immediately reported as an event. Use this instead of change_submits (Default = False)
        :type enable_events:                       (bool)
        :param do_not_clear:                       If False then the field will be set to blank after ANY event (button, any event) (Default = True)
        :type do_not_clear:                        (bool)
        :param key:                                Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key:                                 str | int | tuple | object
        :param k:                                  Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                                   str | int | tuple | object
        :param focus:                              Determines if initial focus should go to this element.
        :type focus:                               (bool)
        :param pad:                                Amount of padding to put around element. Normally (horizontal pixels, vertical pixels) but can be split apart further into ((horizontal left, horizontal right), (vertical above, vertical below)). If int is given, then converted to tuple (int, int) with the value provided duplicated
        :type pad:                                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                                  Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                                   (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param use_readonly_for_disable:           If True (the default) tkinter state set to 'readonly'. Otherwise state set to 'disabled'
        :type use_readonly_for_disable:            (bool)
        :param readonly:                           If True tkinter state set to 'readonly'.  Use this in place of use_readonly_for_disable as another way of achieving readonly.  Note cannot set BOTH readonly and disabled as tkinter only supplies a single flag
        :type readonly:                            (bool)
        :param disabled_readonly_background_color: If state is set to readonly or disabled, the color to use for the background
        :type disabled_readonly_background_color:  (str)
        :param disabled_readonly_text_color:       If state is set to readonly or disabled, the color to use for the text
        :type disabled_readonly_text_color:        (str)
        :param selected_text_color:                Color of text when it is selected (using mouse or control+A, etc)
        :type selected_text_color:                 (str)
        :param selected_background_color:          Color of background when it is selected (using mouse or control+A, etc)
        :type selected_background_color:           (str)
        :param expand_x:                           If True the element will automatically expand in the X direction to fill available space
        :type expand_x:                            (bool)
        :param expand_y:                           If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:                            (bool)
        :param right_click_menu:                   A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:                    List[List[ List[str] | str ]]
        :param visible:                            set visibility state of the element (Default = True)
        :type visible:                             (bool)
        :param metadata:                           User metadata that can be set to ANYTHING
        :type metadata:                            (Any)
        """

        self.DefaultText = default_text if default_text is not None else ''
        self.PasswordCharacter = password_char
        bg = background_color if background_color is not None else DEFAULT_INPUT_ELEMENTS_COLOR
        fg = text_color if text_color is not None else DEFAULT_INPUT_TEXT_COLOR
        self.selected_text_color = selected_text_color
        self.selected_background_color = selected_background_color
        self.Focus = focus
        self.do_not_clear = do_not_clear
        self.Justification = justification
        self.Disabled = disabled
        self.ChangeSubmits = change_submits or enable_events
        self.RightClickMenu = right_click_menu
        self.UseReadonlyForDisable = use_readonly_for_disable
        self.disabled_readonly_background_color = disabled_readonly_background_color
        self.disabled_readonly_text_color = disabled_readonly_text_color
        self.ReadOnly = readonly
        self.BorderWidth = border_width if border_width is not None else DEFAULT_BORDER_WIDTH
        self.TKEntry = self.Widget = None  # type: tk.Entry
        key = key if key is not None else k
        sz = size if size != (None, None) else s
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y
        if setting is not None:
            self.setting = setting
            self.DefaultText = user_settings_get_entry(key, setting)

        super().__init__(ELEM_TYPE_INPUT_TEXT, size=sz, background_color=bg, text_color=fg, key=key, pad=pad,
                         font=font, tooltip=tooltip, visible=visible, metadata=metadata)

    def update(self, value=None, disabled=None, select=None, visible=None, text_color=None, background_color=None, font=None, move_cursor_to='end', password_char=None, paste=None,
               readonly=None):
        """
        Changes some of the settings for the Input Element. Must call `Window.Read` or `Window.Finalize` prior.
        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param value:            new text to display as default text in Input field
        :type value:             (str)
        :param disabled:         disable or enable state of the element (sets Entry Widget to readonly or normal)
        :type disabled:          (bool)
        :param select:           if True, then the text will be selected
        :type select:            (bool)
        :param visible:          change visibility of element
        :type visible:           (bool)
        :param text_color:       change color of text being typed
        :type text_color:        (str)
        :param background_color: change color of the background
        :type background_color:  (str)
        :param font:             specifies the font family, size. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:              (str or (str, int[, str]) or None)
        :param move_cursor_to:   Moves the cursor to a particular offset. Defaults to 'end'
        :type move_cursor_to:    int | str
        :param password_char:    Password character if this is a password field
        :type password_char:     str
        :param paste:            If True "Pastes" the value into the element rather than replacing the entire element. If anything is selected it is replaced. The text is inserted at the current cursor location.
        :type paste:             bool
        :param readonly:         if True make element readonly (user cannot change any choices). Enables the element if either choice are made.
        :type readonly:          (bool)
        """
        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Input.update - The window was closed')
            return

        if background_color not in (None, COLOR_SYSTEM_DEFAULT):
            self.TKEntry.configure(background=background_color)
            self.BackgroundColor = background_color
        if text_color not in (None, COLOR_SYSTEM_DEFAULT):
            self.TKEntry.configure(fg=text_color)
            self.TextColor = text_color

        if disabled is True:
            if self.UseReadonlyForDisable:
                self.TKEntry.configure(fg=self.disabled_readonly_text_color)
                self.TKEntry['state'] = 'readonly'
            else:
                self.TKEntry.configure(fg=self.TextColor)
                self.TKEntry['state'] = 'disabled'
            self.Disabled = True
        elif disabled is False:
            self.TKEntry['state'] = 'normal'
            self.TKEntry.configure(fg=self.TextColor)
            self.Disabled = False

        if readonly is True:
            self.TKEntry['state'] = 'readonly'
        elif readonly is False:
            self.TKEntry['state'] = 'normal'




        if value is not None:
            if paste is not True:
                try:
                    self.TKStringVar.set(value)
                except:
                    pass
            self.DefaultText = value
            if paste is True:
                try:
                    self.TKEntry.delete('sel.first', 'sel.last')
                except:
                    pass
                self.TKEntry.insert("insert", value)
            if move_cursor_to == 'end':
                self.TKEntry.icursor(tk.END)
            elif move_cursor_to is not None:
                self.TKEntry.icursor(move_cursor_to)
        if select:
            self.TKEntry.select_range(0, 'end')
        if visible is False:
            self._pack_forget_save_settings()
            # self.TKEntry.pack_forget()
        elif visible is True:
            self._pack_restore_settings()
            # self.TKEntry.pack(padx=self.pad_used[0], pady=self.pad_used[1])
            # self.TKEntry.pack(padx=self.pad_used[0], pady=self.pad_used[1], in_=self.ParentRowFrame)
        if visible is not None:
            self._visible = visible
        if password_char is not None:
            self.TKEntry.configure(show=password_char)
            self.PasswordCharacter = password_char
        if font is not None:
            self.TKEntry.configure(font=font)



    def set_ibeam_color(self, ibeam_color=None):
        """
        Sets the color of the I-Beam that is used to "insert" characters. This is oftens called a "Cursor" by
        many users.  To keep from being confused with tkinter's definition of cursor (the mouse pointer), the term
        ibeam is used in this case.
        :param ibeam_color: color to set the "I-Beam" used to indicate where characters will be inserted
        :type ibeam_color:  (str)
        """

        if not self._widget_was_created():
            return
        if ibeam_color is not None:
            try:
                self.Widget.config(insertbackground=ibeam_color)
            except Exception as e:
                _error_popup_with_traceback('Error setting I-Beam color in set_ibeam_color',
                           'The element has a key:', self.Key,
                            'The color passed in was:', ibeam_color)




    def get(self):
        """
        Read and return the current value of the input element. Must call `Window.Read` or `Window.Finalize` prior

        :return: current value of Input field or '' if error encountered
        :rtype:  (str)
        """
        try:
            text = self.TKStringVar.get()
        except:
            text = ''
        return text

    Get = get
    Update = update


# -------------------------  INPUT TEXT Element lazy functions  ------------------------- #
In = Input
InputText = Input
I = Input


# ---------------------------------------------------------------------- #
#                           Combo                                        #
# ---------------------------------------------------------------------- #
class Combo(Element):
    """
    ComboBox Element - A combination of a single-line input and a drop-down menu. User can type in their own value or choose from list.
    """

    def __init__(self, values, default_value=None, size=(None, None), s=(None, None), auto_size_text=None, background_color=None, text_color=None, button_background_color=None,
                 button_arrow_color=None, bind_return_key=False, setting=None, change_submits=False, enable_events=False, enable_per_char_events=None, disabled=False, key=None, k=None, pad=None,
                 p=None, expand_x=False, expand_y=False, tooltip=None, readonly=False, font=None, visible=True, metadata=None):
        """
        :param values:                  values to choose. While displayed as text, the items returned are what the caller supplied, not text
        :type values:                   List[Any] or Tuple[Any]
        :param default_value:           Choice to be displayed as initial value. Must match one of values variable contents
        :type default_value:            (Any)
        :param size:                    width, height. Width = characters-wide, height = NOTE it's the number of entries to show in the list. If an Int is passed rather than a tuple, then height is auto-set to 1 and width is value of the int
        :type size:                     (int, int)  | (None, None) | int
        :param s:                       Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                        (int, int)  | (None, None) | int
        :param auto_size_text:          True if element should be the same size as the contents
        :type auto_size_text:           (bool)
        :param background_color:        color of background
        :type background_color:         (str)
        :param text_color:              color of the text
        :type text_color:               (str)
        :param button_background_color: The color of the background of the button on the combo box
        :type button_background_color:  (str)
        :param button_arrow_color:      The color of the arrow on the button on the combo box
        :type button_arrow_color:       (str)
        :param bind_return_key:         If True, then the return key will cause a the Combo to generate an event when return key is pressed
        :type bind_return_key:          (bool)
        :param setting:                 If not None, then this element will be saved in a settings file using the key for the element
        :type setting:                  (Any)
        :param change_submits:          DEPRICATED DO NOT USE. Use `enable_events` instead
        :type change_submits:           (bool)
        :param enable_events:           Turns on the element specific events. Combo event is when a choice is made
        :type enable_events:            (bool)
        :param enable_per_char_events:  Enables generation of events for every character that's input. This is like the Input element's events
        :type enable_per_char_events:   (bool)
        :param disabled:                set disable state for element
        :type disabled:                 (bool)
        :param key:                     Used with window.find_element and with return values to uniquely identify this element
        :type key:                      str | int | tuple | object
        :param k:                       Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                        str | int | tuple | object
        :param pad:                     Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:                      (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                       Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                        (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param expand_x:                If True the element will automatically expand in the X direction to fill available space
        :type expand_x:                 (bool)
        :param expand_y:                If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:                 (bool)
        :param tooltip:                 text that will appear when mouse hovers over this element
        :type tooltip:                  (str)
        :param readonly:                make element readonly (user can't change). True means user cannot change
        :type readonly:                 (bool)
        :param font:                    specifies the font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:                     (str or (str, int[, str]) or None)
        :param visible:                 set visibility state of the element
        :type visible:                  (bool)
        :param metadata:                User metadata that can be set to ANYTHING
        :type metadata:                 (Any)
        """

        self.Values = values
        self.DefaultValue = default_value
        self.ChangeSubmits = change_submits or enable_events
        self.Widget = self.TKCombo = None  # type: ttk.Combobox
        self.Disabled = disabled
        self.Readonly = readonly
        self.BindReturnKey = bind_return_key
        bg = background_color if background_color else DEFAULT_INPUT_ELEMENTS_COLOR
        fg = text_color if text_color is not None else DEFAULT_INPUT_TEXT_COLOR
        key = key if key is not None else k
        sz = size if size != (None, None) else s
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y
        if button_background_color is None:
            self.button_background_color = theme_button_color()[1]
        else:
            self.button_background_color = button_background_color
        if button_arrow_color is None:
            self.button_arrow_color = theme_button_color()[0]
        else:
            self.button_arrow_color = button_arrow_color
        self.enable_per_char_events = enable_per_char_events
        if setting is not None:
            self.setting = setting
            self.DefaultValue = user_settings_get_entry(key, setting)

        super().__init__(ELEM_TYPE_INPUT_COMBO, size=sz, auto_size_text=auto_size_text, background_color=bg,
                         text_color=fg, key=key, pad=pad, tooltip=tooltip, font=font or DEFAULT_FONT, visible=visible, metadata=metadata)

    def update(self, value=None, values=None, set_to_index=None, disabled=None, readonly=None, font=None, visible=None, size=(None, None), select=None, text_color=None, background_color=None):
        """
        Changes some of the settings for the Combo Element. Must call `Window.Read` or `Window.Finalize` prior.
        Note that the state can be in 3 states only.... enabled, disabled, readonly even
        though more combinations are available. The easy way to remember is that if you
        change the readonly parameter then you are enabling the element.

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param value:            change which value is current selected based on new list of previous list of choices
        :type value:             (Any)
        :param values:           change list of choices
        :type values:            List[Any]
        :param set_to_index:     change selection to a particular choice starting with index = 0
        :type set_to_index:      (int)
        :param disabled:         disable or enable state of the element
        :type disabled:          (bool)
        :param readonly:         if True make element readonly (user cannot change any choices). Enables the element if either choice are made.
        :type readonly:          (bool)
        :param font:             specifies the font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:              (str or (str, int[, str]) or None)
        :param visible:          control visibility of element
        :type visible:           (bool)
        :param size:             width, height. Width = characters-wide, height = NOTE it's the number of entries to show in the list
        :type size:              (int, int)
        :param select:           if True, then the text will be selected, if False then selection will be cleared
        :type select:            (bool)
        :param background_color: color of background
        :type background_color:  (str)
        :param text_color:       color of the text
        :type text_color:        (str)
        """
        if size != (None, None):
            if isinstance(size, int):
                size = (size, 1)
            if isinstance(size, tuple) and len(size) == 1:
                size = (size[0], 1)

        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Combo.update - The window was closed')
            return

        if values is not None:
            try:
                self.TKCombo['values'] = values
                # self.TKCombo.current(0)       # don't set any value if a new set of values was made
            except:
                pass
            self.Values = values
            if value is None:
                self.TKCombo.set('')
            if size == (None, None):
                max_line_len = max([len(str(l)) for l in self.Values]) if len(self.Values) else 0
                if self.AutoSizeText is False:
                    width = self.Size[0]
                else:
                    width = max_line_len + 1
                self.TKCombo.configure(width=width)
            else:
                self.TKCombo.configure(height=size[1])
                self.TKCombo.configure(width=size[0])
        if value is not None:
            if value not in self.Values:
                self.TKCombo.set(value)
            else:
                for index, v in enumerate(self.Values):
                    if v == value:
                        try:
                            self.TKCombo.current(index)
                        except:
                            pass
                        self.DefaultValue = value
                        break
        if set_to_index is not None:
            try:
                self.TKCombo.current(set_to_index)
                self.DefaultValue = self.Values[set_to_index]
            except:
                pass
        if readonly:
            self.Readonly = True
            self.TKCombo['state'] = 'readonly'
        elif readonly is False:
            self.Readonly = False
            self.TKCombo['state'] = 'enable'
        if disabled is True:
            self.TKCombo['state'] = 'disable'
        elif disabled is False and self.Readonly is True:
            self.TKCombo['state'] = 'readonly'
        elif disabled is False and self.Readonly is False:
            self.TKCombo['state'] = 'enable'
        self.Disabled = disabled if disabled is not None else self.Disabled

        combostyle = self.ttk_style
        style_name = self.ttk_style_name
        if text_color is not None:
            combostyle.configure(style_name, foreground=text_color)
            combostyle.configure(style_name, selectforeground=text_color)
            combostyle.configure(style_name, insertcolor=text_color)
            combostyle.map(style_name, fieldforeground=[('readonly', text_color)])
            self.TextColor = text_color
        if background_color is not None:
            combostyle.configure(style_name, selectbackground=background_color)
            combostyle.map(style_name, fieldbackground=[('readonly', background_color)])
            combostyle.configure(style_name, fieldbackground=background_color)
            self.BackgroundColor = background_color


        if self.Readonly is True:
            if text_color not in (None, COLOR_SYSTEM_DEFAULT):
                combostyle.configure(style_name, selectforeground=text_color)
            if background_color not in (None, COLOR_SYSTEM_DEFAULT):
                combostyle.configure(style_name, selectbackground=background_color)


        if font is not None:
            self.Font = font
            self.TKCombo.configure(font=font)
            self._dropdown_newfont = tkinter.font.Font(font=font)
            self.ParentRowFrame.option_add("*TCombobox*Listbox*Font", self._dropdown_newfont)


        # make tcl call to deal with colors for the drop-down formatting
        try:
            if self.BackgroundColor not in (None, COLOR_SYSTEM_DEFAULT) and \
                self.TextColor not in (None, COLOR_SYSTEM_DEFAULT):
                self.Widget.tk.eval(
            '[ttk::combobox::PopdownWindow {}].f.l configure -foreground {} -background {} -selectforeground {} -selectbackground {} -font {}'.format(self.Widget, self.TextColor, self.BackgroundColor, self.BackgroundColor, self.TextColor, self._dropdown_newfont))
        except Exception as e:
            pass    # going to let this one slide

        if visible is False:
            self._pack_forget_save_settings()
            # self.TKCombo.pack_forget()
        elif visible is True:
            self._pack_restore_settings()
            # self.TKCombo.pack(padx=self.pad_used[0], pady=self.pad_used[1])
        if visible is not None:
            self._visible = visible
        if select is True:
           self.TKCombo.select_range(0, tk.END)
        elif select is False:
           self.TKCombo.select_clear()


    def get(self):
        """
        Returns the current (right now) value of the Combo.  DO NOT USE THIS AS THE NORMAL WAY OF READING A COMBO!
        You should be using values from your call to window.read instead.  Know what you're doing if you use it.

        :return: Returns the value of what is currently chosen
        :rtype:  Any | None
        """
        try:
            if self.TKCombo.current() == -1:  # if the current value was not in the original list
                value = self.TKCombo.get()  # then get the value typed in by user
            else:
                value = self.Values[self.TKCombo.current()]  # get value from original list given index
        except:
            value = None  # only would happen if user closes window
        return value

    Get = get
    Update = update


# -------------------------  INPUT COMBO Element lazy functions  ------------------------- #
InputCombo = Combo
DropDown = InputCombo
Drop = InputCombo
DD = Combo


# ---------------------------------------------------------------------- #
#                           Option Menu                                  #
# ---------------------------------------------------------------------- #
class OptionMenu(Element):
    """
    Option Menu is an Element available ONLY on the tkinter port of PySimpleGUI.  It's is a widget that is unique
    to tkinter.  However, it looks much like a ComboBox.  Instead of an arrow to click to pull down the list of
    choices, another little graphic is shown on the widget to indicate where you click.  After clicking to activate,
    it looks like a Combo Box that you scroll to select a choice.
    """

    def __init__(self, values, default_value=None, size=(None, None), s=(None, None), disabled=False, enable_events=False, auto_size_text=None, expand_x=False, expand_y=False,
                 background_color=None, text_color=None, key=None, k=None, pad=None, p=None, tooltip=None, visible=True, metadata=None):
        """
        :param values:           Values to be displayed
        :type values:            List[Any] or Tuple[Any]
        :param default_value:    the value to choose by default
        :type default_value:     (Any)
        :param size:             (width, height) size in characters (wide), height is ignored and present to be consistent with other elements
        :type size:              (int, int) (width, UNUSED)
        :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                 (int, int)  | (None, None) | int
        :param disabled:         control enabled / disabled
        :type disabled:          (bool)
        :param enable_events:    Turns on the element specific events. OptionMenu event is when a choice is made
        :type enable_events:     (bool)
        :param auto_size_text:   True if size of Element should match the contents of the items
        :type auto_size_text:    (bool)
        :param expand_x:         If True the element will automatically expand in the X direction to fill available space
        :type expand_x:          (bool)
        :param expand_y:         If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:          (bool)
        :param background_color: color of background
        :type background_color:  (str)
        :param text_color:       color of the text
        :type text_color:        (str)
        :param key:              Used with window.find_element and with return values to uniquely identify this element
        :type key:               str | int | tuple | object
        :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                 str | int | tuple | object
        :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param tooltip:          text that will appear when mouse hovers over this element
        :type tooltip:           (str)
        :param visible:          set visibility state of the element
        :type visible:           (bool)
        :param metadata:         User metadata that can be set to ANYTHING
        :type metadata:          (Any)
        """

        self.Values = values
        self.DefaultValue = default_value
        self.Widget = self.TKOptionMenu = None  # type: tk.OptionMenu
        self.Disabled = disabled
        bg = background_color if background_color else DEFAULT_INPUT_ELEMENTS_COLOR
        fg = text_color if text_color is not None else DEFAULT_INPUT_TEXT_COLOR
        key = key if key is not None else k
        sz = size if size != (None, None) else s
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y
        self.ChangeSubmits = enable_events

        super().__init__(ELEM_TYPE_INPUT_OPTION_MENU, size=sz, auto_size_text=auto_size_text, background_color=bg,
                         text_color=fg, key=key, pad=pad, tooltip=tooltip, visible=visible, metadata=metadata)

    def update(self, value=None, values=None, disabled=None, visible=None, size=(None, None)):
        """
        Changes some of the settings for the OptionMenu Element. Must call `Window.Read` or `Window.Finalize` prior

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param value:    the value to choose by default
        :type value:     (Any)
        :param values:   Values to be displayed
        :type values:    List[Any]
        :param disabled: disable or enable state of the element
        :type disabled:  (bool)
        :param visible:  control visibility of element
        :type visible:   (bool)
        :param size:     (width, height) size in characters (wide), height is ignored and present to be consistent with other elements
        :type size:      (int, int) (width, UNUSED)
        """
        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in OptionMenu.update - The window was closed')
            return

        if values is not None:
            self.Values = values
            self.TKOptionMenu['menu'].delete(0, 'end')

            # Insert list of new options (tk._setit hooks them up to var)
            # self.TKStringVar.set(self.Values[0])
            for new_value in self.Values:
                self.TKOptionMenu['menu'].add_command(label=new_value, command=tk._setit(self.TKStringVar, new_value))
            if value is None:
                self.TKStringVar.set('')

            if size == (None, None):
                max_line_len = max([len(str(l)) for l in self.Values]) if len(self.Values) else 0
                if self.AutoSizeText is False:
                    width = self.Size[0]
                else:
                    width = max_line_len + 1
                self.TKOptionMenu.configure(width=width)
            else:
                self.TKOptionMenu.configure(width=size[0])

        if value is not None:
            self.DefaultValue = value
            self.TKStringVar.set(value)

        if disabled is True:
            self.TKOptionMenu['state'] = 'disabled'
        elif disabled is False:
            self.TKOptionMenu['state'] = 'normal'
        self.Disabled = disabled if disabled is not None else self.Disabled
        if visible is False:
            self._pack_forget_save_settings()
            # self.TKOptionMenu.pack_forget()
        elif visible is True:
            self._pack_restore_settings()
            # self.TKOptionMenu.pack(padx=self.pad_used[0], pady=self.pad_used[1])
        if visible is not None:
            self._visible = visible

    Update = update


# -------------------------  OPTION MENU Element lazy functions  ------------------------- #
InputOptionMenu = OptionMenu


# ---------------------------------------------------------------------- #
#                           Listbox                                      #
# ---------------------------------------------------------------------- #
class Listbox(Element):
    """
    A List Box.  Provide a list of values for the user to choose one or more of.   Returns a list of selected rows
    when a window.read() is executed.
    """

    def __init__(self, values, default_values=None, select_mode=None, change_submits=False, enable_events=False,
                 bind_return_key=False, size=(None, None), s=(None, None), disabled=False, justification=None, auto_size_text=None, font=None, no_scrollbar=False,
                 horizontal_scroll=False, setting=None,
                 background_color=None, text_color=None, highlight_background_color=None, highlight_text_color=None,
                 sbar_trough_color=None, sbar_background_color=None, sbar_arrow_color=None, sbar_width=None, sbar_arrow_width=None, sbar_frame_color=None, sbar_relief=None,
                 key=None, k=None, pad=None, p=None, tooltip=None, expand_x=False, expand_y=False, right_click_menu=None, visible=True, metadata=None):
        """
        :param values:                     list of values to display. Can be any type including mixed types as long as they have __str__ method
        :type values:                      List[Any] or Tuple[Any]
        :param default_values:             which values should be initially selected
        :type default_values:              List[Any]
        :param select_mode:                Select modes are used to determine if only 1 item can be selected or multiple and how they can be selected.   Valid choices begin with "LISTBOX_SELECT_MODE_" and include: LISTBOX_SELECT_MODE_SINGLE LISTBOX_SELECT_MODE_MULTIPLE LISTBOX_SELECT_MODE_BROWSE LISTBOX_SELECT_MODE_EXTENDED
        :type select_mode:                 [enum]
        :param change_submits:             DO NOT USE. Only listed for backwards compat - Use enable_events instead
        :type change_submits:              (bool)
        :param enable_events:              Turns on the element specific events. Listbox generates events when an item is clicked
        :type enable_events:               (bool)
        :param bind_return_key:            If True, then the return key will cause a the Listbox to generate an event when return key is pressed
        :type bind_return_key:             (bool)
        :param size:                       w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1
        :type size:                        (int, int) |  (int, None) | int
        :param s:                          Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                           (int, int)  | (None, None) | int
        :param disabled:                   set disable state for element
        :type disabled:                    (bool)
        :param justification:              justification for items in listbox. Valid choices - left, right, center.  Default is left. NOTE - on some older versions of tkinter, not available
        :type justification:               (str)
        :param auto_size_text:             True if element should be the same size as the contents
        :type auto_size_text:              (bool)
        :param font:                       specifies the font family, size, etc.  Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:                        (str or (str, int[, str]) or None)
        :param no_scrollbar:               Controls if a scrollbar should be shown.  If True, no scrollbar will be shown
        :type no_scrollbar:                (bool)
        :param horizontal_scroll:          Controls if a horizontal scrollbar should be shown.  If True a horizontal scrollbar will be shown in addition to vertical
        :type horizontal_scroll:           (bool)
        :param setting:                    If not None, then this element will be saved in a settings file using the key for the element
        :type setting:                     (Any)
        :param background_color:           color of background
        :type background_color:            (str)
        :param text_color:                 color of the text
        :type text_color:                  (str)
        :param highlight_background_color: color of the background when an item is selected. Defaults to normal text color (a reverse look)
        :type highlight_background_color:  (str)
        :param highlight_text_color:       color of the text when an item is selected. Defaults to the normal background color (a rerverse look)
        :type highlight_text_color:        (str)
        :param sbar_trough_color:           Scrollbar color of the trough
        :type sbar_trough_color:            (str)
        :param sbar_background_color:       Scrollbar color of the background of the arrow buttons at the ends AND the color of the "thumb" (the thing you grab and slide). Switches to arrow color when mouse is over
        :type sbar_background_color:        (str)
        :param sbar_arrow_color:            Scrollbar color of the arrow at the ends of the scrollbar (it looks like a button). Switches to background color when mouse is over
        :type sbar_arrow_color:             (str)
        :param sbar_width:                  Scrollbar width in pixels
        :type sbar_width:                   (int)
        :param sbar_arrow_width:            Scrollbar width of the arrow on the scrollbar. It will potentially impact the overall width of the scrollbar
        :type sbar_arrow_width:             (int)
        :param sbar_frame_color:            Scrollbar Color of frame around scrollbar (available only on some ttk themes)
        :type sbar_frame_color:             (str)
        :param sbar_relief:                 Scrollbar relief that will be used for the "thumb" of the scrollbar (the thing you grab that slides). Should be a constant that is defined at starting with "RELIEF_" - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID
        :type sbar_relief:                  (str)
        :param key:                        Used with window.find_element and with return values to uniquely identify this element
        :type key:                         str | int | tuple | object
        :param k:                          Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                           str | int | tuple | object
        :param pad:                        Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:                         (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                          Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                           (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param tooltip:                    text, that will appear when mouse hovers over the element
        :type tooltip:                     (str)
        :param expand_x:                   If True the element will automatically expand in the X direction to fill available space
        :type expand_x:                    (bool)
        :param expand_y:                   If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:                    (bool)
        :param right_click_menu:           A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:            List[List[ List[str] | str ]]
        :param visible:                    set visibility state of the element
        :type visible:                     (bool)
        :param metadata:                   User metadata that can be set to ANYTHING
        :type metadata:                    (Any)
        """

        if values is None:
            _error_popup_with_traceback('Error in your Listbox definition - The values parameter cannot be None', 'Use an empty list if you want no values in your Listbox')

        self.Values = values
        self.DefaultValues = default_values
        self.TKListbox = None
        self.ChangeSubmits = change_submits or enable_events
        self.BindReturnKey = bind_return_key
        self.Disabled = disabled
        if select_mode == LISTBOX_SELECT_MODE_BROWSE:
            self.SelectMode = SELECT_MODE_BROWSE
        elif select_mode == LISTBOX_SELECT_MODE_EXTENDED:
            self.SelectMode = SELECT_MODE_EXTENDED
        elif select_mode == LISTBOX_SELECT_MODE_MULTIPLE:
            self.SelectMode = SELECT_MODE_MULTIPLE
        elif select_mode == LISTBOX_SELECT_MODE_SINGLE:
            self.SelectMode = SELECT_MODE_SINGLE
        else:
            self.SelectMode = DEFAULT_LISTBOX_SELECT_MODE
        bg = background_color if background_color is not None else theme_input_background_color()
        fg = text_color if text_color is not None else theme_input_text_color()
        self.HighlightBackgroundColor = highlight_background_color if highlight_background_color is not None else fg
        self.HighlightTextColor = highlight_text_color if highlight_text_color is not None else bg
        self.RightClickMenu = right_click_menu
        self.vsb = None  # type: tk.Scrollbar or None
        self.hsb = None  # type: tk.Scrollbar | None
        self.TKListbox = self.Widget = None  # type: tk.Listbox
        self.element_frame = None  # type: tk.Frame
        self.NoScrollbar = no_scrollbar
        self.HorizontalScroll = horizontal_scroll
        key = key if key is not None else k
        sz = size if size != (None, None) else s
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y
        self.justification = justification
        if setting is not None:
            self.setting = setting
            self.DefaultValues = user_settings_get_entry(key, setting)


        super().__init__(ELEM_TYPE_INPUT_LISTBOX, size=sz, auto_size_text=auto_size_text, font=font,
                         background_color=bg, text_color=fg, key=key, pad=pad, tooltip=tooltip, visible=visible, metadata=metadata,
                         sbar_trough_color=sbar_trough_color, sbar_background_color=sbar_background_color, sbar_arrow_color=sbar_arrow_color, sbar_width=sbar_width,
                         sbar_arrow_width=sbar_arrow_width, sbar_frame_color=sbar_frame_color, sbar_relief=sbar_relief)


    def update(self, values=None, disabled=None, set_to_index=None, scroll_to_index=None, select_mode=None, visible=None):
        """
        Changes some of the settings for the Listbox Element. Must call `Window.Read` or `Window.Finalize` prior
        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param values:          new list of choices to be shown to user
        :type values:           List[Any]
        :param disabled:        disable or enable state of the element
        :type disabled:         (bool)
        :param set_to_index:    highlights the item(s) indicated. If parm is an int one entry will be set. If is a list, then each entry in list is highlighted
        :type set_to_index:     int | list | tuple
        :param scroll_to_index: scroll the listbox so that this index is the first shown
        :type scroll_to_index:  (int)
        :param select_mode:     changes the select mode according to tkinter's listbox widget
        :type select_mode:      (str)
        :param visible:         control visibility of element
        :type visible:          (bool)
        """

        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Listbox.update - The window was closed')
            return

        if disabled is True:
            self.TKListbox.configure(state='disabled')
        elif disabled is False:
            self.TKListbox.configure(state='normal')
        self.Disabled = disabled if disabled is not None else self.Disabled

        if values is not None:
            self.TKListbox.delete(0, 'end')
            for item in list(values):
                self.TKListbox.insert(tk.END, item)
            # self.TKListbox.selection_set(0, 0)
            self.Values = list(values)
        if set_to_index is not None:
            self.TKListbox.selection_clear(0, len(self.Values))  # clear all listbox selections
            if type(set_to_index) in (tuple, list):
                for i in set_to_index:
                    try:
                        self.TKListbox.selection_set(i, i)
                    except:
                        warnings.warn('* Listbox Update selection_set failed with index {}*'.format(set_to_index))
            else:
                try:
                    self.TKListbox.selection_set(set_to_index, set_to_index)
                except:
                    warnings.warn('* Listbox Update selection_set failed with index {}*'.format(set_to_index))
        if visible is False:
            self._pack_forget_save_settings(self.element_frame)
        elif visible is True:
            self._pack_restore_settings(self.element_frame)
        if scroll_to_index is not None and len(self.Values):
            self.TKListbox.yview_moveto(scroll_to_index / len(self.Values))
        if select_mode is not None:
            try:
                self.TKListbox.config(selectmode=select_mode)
            except:
                print('Listbox.update error trying to change mode to: ', select_mode)
        if visible is not None:
            self._visible = visible

    def set_value(self, values):
        """
        Set listbox highlighted choices

        :param values: new values to choose based on previously set values
        :type values:  List[Any] | Tuple[Any]

        """
        for index, item in enumerate(self.Values):
            try:
                if item in values:
                    self.TKListbox.selection_set(index)
                else:
                    self.TKListbox.selection_clear(index)
            except:
                pass
        self.DefaultValues = values

    def get_list_values(self):
        # type: (Listbox) -> List[Any]
        """
        Returns list of Values provided by the user in the user's format

        :return: List of values. Can be any / mixed types -> []
        :rtype:  List[Any]
        """
        return self.Values

    def get_indexes(self):
        """
        Returns the items currently selected as a list of indexes

        :return: A list of offsets into values that is currently selected
        :rtype:  List[int]
        """
        return self.TKListbox.curselection()

    def get(self):
        """
        Returns the list of items currently selected in this listbox.  It should be identical
        to the value you would receive when performing a window.read() call.

        :return: The list of currently selected items. The actual items are returned, not the indexes
        :rtype:  List[Any]
        """
        try:
            items = self.TKListbox.curselection()
            value = [self.Values[int(item)] for item in items]
        except:
            value = []
        return value




    def select_index(self, index, highlight_text_color=None, highlight_background_color=None):
        """
        Selects an index while providing capability to setting the selected color for the index to specific text/background color

        :param index:                      specifies which item to change. index starts at 0 and goes to length of values list minus one
        :type  index:                      (int)
        :param highlight_text_color:       color of the text when this item is selected.
        :type  highlight_text_color:        (str)
        :param highlight_background_color: color of the background when this item is selected
        :type  highlight_background_color:  (str)
        """

        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Listbox.select_item - The window was closed')
            return

        if index >= len(self.Values):
            _error_popup_with_traceback('Index {} is out of range for Listbox.select_index. Max allowed index is {}.'.format(index, len(self.Values)-1))
            return

        self.TKListbox.selection_set(index, index)

        if highlight_text_color is not None:
            self.widget.itemconfig(index, selectforeground=highlight_text_color)
        if highlight_background_color is not None:
            self.widget.itemconfig(index, selectbackground=highlight_background_color)


    def set_index_color(self, index, text_color=None, background_color=None, highlight_text_color=None, highlight_background_color=None):
        """
        Sets the color of a specific item without selecting it

        :param index:                      specifies which item to change. index starts at 0 and goes to length of values list minus one
        :type  index:                      (int)
        :param text_color:                 color of the text for this item
        :type  text_color:                 (str)
        :param background_color:           color of the background for this item
        :type  background_color:           (str)
        :param highlight_text_color:       color of the text when this item is selected.
        :type  highlight_text_color:       (str)
        :param highlight_background_color: color of the background when this item is selected
        :type  highlight_background_color: (str)
        """

        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Listbox.set_item_color - The window was closed')
            return

        if index >= len(self.Values):
            _error_popup_with_traceback('Index {} is out of range for Listbox.set_index_color. Max allowed index is {}.'.format(index, len(self.Values)-1))
            return

        if text_color is not None:
            self.widget.itemconfig(index, fg=text_color)
        if background_color is not None:
            self.widget.itemconfig(index, bg=background_color)
        if highlight_text_color is not None:
            self.widget.itemconfig(index, selectforeground=highlight_text_color)
        if highlight_background_color is not None:
            self.widget.itemconfig(index, selectbackground=highlight_background_color)



    GetIndexes = get_indexes
    GetListValues = get_list_values
    SetValue = set_value
    Update = update


LBox = Listbox
LB = Listbox


# ---------------------------------------------------------------------- #
#                           Radio                                        #
# ---------------------------------------------------------------------- #
class Radio(Element):
    """
    Radio Button Element - Used in a group of other Radio Elements to provide user with ability to select only
    1 choice in a list of choices.
    """

    def __init__(self, text, group_id, default=False, disabled=False, size=(None, None), s=(None, None), auto_size_text=None, setting=None,
                 background_color=None, text_color=None, circle_color=None, font=None, key=None, k=None, pad=None, p=None, tooltip=None,
                 change_submits=False, enable_events=False, right_click_menu=None, expand_x=False, expand_y=False, visible=True, metadata=None):
        """
        :param text:             Text to display next to button
        :type text:              (str)
        :param group_id:         Groups together multiple Radio Buttons. Any type works
        :type group_id:          (Any)
        :param default:          Set to True for the one element of the group you want initially selected
        :type default:           (bool)
        :param disabled:         set disable state
        :type disabled:          (bool)
        :param size:             (w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1
        :type size:              (int, int)  | (None, None) | int
        :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                 (int, int)  | (None, None) | int
        :param auto_size_text:   if True will size the element to match the length of the text
        :type auto_size_text:    (bool)
        :param setting:          If not None, then this element will be saved in a settings file using the key for the element
        :type setting:           (Any)
        :param background_color: color of background
        :type background_color:  (str)
        :param text_color:       color of the text
        :type text_color:        (str)
        :param circle_color:     color of background of the circle that has the dot selection indicator in it
        :type circle_color:      (str)
        :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:              (str or (str, int[, str]) or None)
        :param key:              Used with window.find_element and with return values to uniquely identify this element
        :type key:               str | int | tuple | object
        :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                 str | int | tuple | object
        :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param tooltip:          text, that will appear when mouse hovers over the element
        :type tooltip:           (str)
        :param change_submits:   DO NOT USE. Only listed for backwards compat - Use enable_events instead
        :type change_submits:    (bool)
        :param enable_events:    Turns on the element specific events. Radio Button events happen when an item is selected
        :type enable_events:     (bool)
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:  List[List[ List[str] | str ]]
        :param expand_x:         If True the element will automatically expand in the X direction to fill available space
        :type expand_x:          (bool)
        :param expand_y:         If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:          (bool)
        :param visible:          set visibility state of the element
        :type visible:           (bool)
        :param metadata:         User metadata that can be set to ANYTHING
        :type metadata:          (Any)
        """

        self.InitialState = default
        self.Text = text
        self.Widget = self.TKRadio = None  # type: tk.Radiobutton
        self.GroupID = group_id
        self.Value = None
        self.Disabled = disabled
        self.TextColor = text_color if text_color else theme_text_color()
        self.RightClickMenu = right_click_menu

        if circle_color is None:
            # ---- compute color of circle background ---
            try:  # something in here will fail if a color is not specified in Hex
                text_hsl = _hex_to_hsl(self.TextColor)
                background_hsl = _hex_to_hsl(background_color if background_color else theme_background_color())
                l_delta = abs(text_hsl[2] - background_hsl[2]) / 10
                if text_hsl[2] > background_hsl[2]:  # if the text is "lighter" than the background then make background darker
                    bg_rbg = _hsl_to_rgb(background_hsl[0], background_hsl[1], background_hsl[2] - l_delta)
                else:
                    bg_rbg = _hsl_to_rgb(background_hsl[0], background_hsl[1], background_hsl[2] + l_delta)
                self.CircleBackgroundColor = rgb(*bg_rbg)
            except:
                self.CircleBackgroundColor = background_color if background_color else theme_background_color()
        else:
            self.CircleBackgroundColor = circle_color
        self.ChangeSubmits = change_submits or enable_events
        self.EncodedRadioValue = None
        key = key if key is not None else k
        sz = size if size != (None, None) else s
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y
        if setting is not None:
            self.setting = bool(setting)
            self.InitialState = user_settings_get_entry(key, self.setting)




        super().__init__(ELEM_TYPE_INPUT_RADIO, size=sz, auto_size_text=auto_size_text, font=font,
                         background_color=background_color, text_color=self.TextColor, key=key, pad=pad,
                         tooltip=tooltip, visible=visible, metadata=metadata)

    def update(self, value=None, text=None, background_color=None, text_color=None, circle_color=None, disabled=None, visible=None):
        """
        Changes some of the settings for the Radio Button Element. Must call `Window.read` or `Window.finalize` prior

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param value:            if True change to selected and set others in group to unselected
        :type value:             (bool)
        :param text:             Text to display next to radio button
        :type text:              (str)
        :param background_color: color of background
        :type background_color:  (str)
        :param text_color:       color of the text. Note this also changes the color of the selection dot
        :type text_color:        (str)
        :param circle_color:     color of background of the circle that has the dot selection indicator in it
        :type circle_color:      (str)
        :param disabled:         disable or enable state of the element
        :type disabled:          (bool)
        :param visible:          control visibility of element
        :type visible:           (bool)
        """

        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Radio.update - The window was closed')
            return

        if value is not None:
            try:
                if value is True:
                    self.TKIntVar.set(self.EncodedRadioValue)
                elif value is False:
                    if self.TKIntVar.get() == self.EncodedRadioValue:
                        self.TKIntVar.set(0)
            except:
                print('Error updating Radio')
            self.InitialState = value
        if text is not None:
            self.Text = str(text)
            self.TKRadio.configure(text=self.Text)
        if background_color not in (None, COLOR_SYSTEM_DEFAULT):
            self.TKRadio.configure(background=background_color)
            self.BackgroundColor = background_color
        if text_color not in (None, COLOR_SYSTEM_DEFAULT):
            self.TKRadio.configure(fg=text_color)
            self.TextColor = text_color

        if circle_color not in (None, COLOR_SYSTEM_DEFAULT):
            self.CircleBackgroundColor = circle_color
            self.TKRadio.configure(selectcolor=self.CircleBackgroundColor)  # The background of the radio button
        elif text_color or background_color:
            if self.TextColor not in (None, COLOR_SYSTEM_DEFAULT) and self.BackgroundColor not in (None, COLOR_SYSTEM_DEFAULT) and self.TextColor.startswith(
                    '#') and self.BackgroundColor.startswith('#'):
                # ---- compute color of circle background ---
                text_hsl = _hex_to_hsl(self.TextColor)
                background_hsl = _hex_to_hsl(self.BackgroundColor if self.BackgroundColor else theme_background_color())
                l_delta = abs(text_hsl[2] - background_hsl[2]) / 10
                if text_hsl[2] > background_hsl[2]:  # if the text is "lighter" than the background then make background darker
                    bg_rbg = _hsl_to_rgb(background_hsl[0], background_hsl[1], background_hsl[2] - l_delta)
                else:
                    bg_rbg = _hsl_to_rgb(background_hsl[0], background_hsl[1], background_hsl[2] + l_delta)
                self.CircleBackgroundColor = rgb(*bg_rbg)
                self.TKRadio.configure(selectcolor=self.CircleBackgroundColor)  # The background of the checkbox

        if disabled is True:
            self.TKRadio['state'] = 'disabled'
        elif disabled is False:
            self.TKRadio['state'] = 'normal'
        self.Disabled = disabled if disabled is not None else self.Disabled

        if visible is False:
            self._pack_forget_save_settings()
        elif visible is True:
            self._pack_restore_settings()
        if visible is not None:
            self._visible = visible

    def reset_group(self):
        """
        Sets all Radio Buttons in the group to not selected
        """
        self.TKIntVar.set(0)

    def get(self):
        # type: (Radio) -> bool
        """
        A snapshot of the value of Radio Button -> (bool)

        :return: True if this radio button is selected
        :rtype:  (bool)
        """
        return self.TKIntVar.get() == self.EncodedRadioValue

    Get = get
    ResetGroup = reset_group
    Update = update


R = Radio
Rad = Radio


# ---------------------------------------------------------------------- #
#                           Checkbox                                     #
# ---------------------------------------------------------------------- #
class Checkbox(Element):
    """
    Checkbox Element - Displays a checkbox and text next to it
    """

    def __init__(self, text, default=False, size=(None, None), s=(None, None), auto_size_text=None, setting=None, font=None, background_color=None, text_color=None, checkbox_color=None, highlight_thickness=1, change_submits=False, enable_events=False, disabled=False, key=None, k=None, pad=None, p=None, tooltip=None, right_click_menu=None, expand_x=False, expand_y=False, visible=True, metadata=None):
        """
        :param text:                Text to display next to checkbox
        :type text:                 (str)
        :param default:             Set to True if you want this checkbox initially checked
        :type default:              (bool)
        :param size:                (w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1
        :type size:                 (int, int)  | (None, None) | int
        :param s:                   Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                    (int, int)  | (None, None) | int
        :param auto_size_text:      if True will size the element to match the length of the text
        :type auto_size_text:       (bool)
        :param setting:             If not None, then this element will be saved in a settings file using the key for the element
        :type setting:              (Any)
        :param font:                specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:                 (str or (str, int[, str]) or None)
        :param background_color:    color of background
        :type background_color:     (str)
        :param text_color:          color of the text
        :type text_color:           (str)
        :param checkbox_color:      color of background of the box that has the check mark in it. The checkmark is the same color as the text
        :type checkbox_color:       (str)
        :param highlight_thickness: thickness of border around checkbox when gets focus
        :type highlight_thickness:  (int)
        :param change_submits:      DO NOT USE. Only listed for backwards compat - Use enable_events instead
        :type change_submits:       (bool)
        :param enable_events:       Turns on the element specific events. Checkbox events happen when an item changes
        :type enable_events:        (bool)
        :param disabled:            set disable state
        :type disabled:             (bool)
        :param key:                 Used with window.find_element and with return values to uniquely identify this element
        :type key:                  str | int | tuple | object
        :param k:                   Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                    str | int | tuple | object
        :param pad:                 Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:                  (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                   Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                    (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param tooltip:             text, that will appear when mouse hovers over the element
        :type tooltip:              (str)
        :param right_click_menu:    A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:     List[List[ List[str] | str ]]
        :param expand_x:            If True the element will automatically expand in the X direction to fill available space
        :type expand_x:             (bool)
        :param expand_y:            If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:             (bool)
        :param visible:             set visibility state of the element
        :type visible:              (bool)
        :param metadata:            User metadata that can be set to ANYTHING
        :type metadata:             (Any)
        """

        self.Text = text
        self.InitialState = bool(default)
        self.Value = None
        self.TKCheckbutton = self.Widget = None  # type: tk.Checkbutton
        self.Disabled = disabled
        self.TextColor = text_color if text_color else theme_text_color()
        self.RightClickMenu = right_click_menu
        self.highlight_thickness = highlight_thickness

        # ---- compute color of circle background ---
        if checkbox_color is None:
            try:  # something in here will fail if a color is not specified in Hex
                text_hsl = _hex_to_hsl(self.TextColor)
                background_hsl = _hex_to_hsl(background_color if background_color else theme_background_color())
                l_delta = abs(text_hsl[2] - background_hsl[2]) / 10
                if text_hsl[2] > background_hsl[2]:  # if the text is "lighter" than the background then make background darker
                    bg_rbg = _hsl_to_rgb(background_hsl[0], background_hsl[1], background_hsl[2] - l_delta)
                else:
                    bg_rbg = _hsl_to_rgb(background_hsl[0], background_hsl[1], background_hsl[2] + l_delta)
                self.CheckboxBackgroundColor = rgb(*bg_rbg)
            except:
                self.CheckboxBackgroundColor = background_color if background_color else theme_background_color()
        else:
            self.CheckboxBackgroundColor = checkbox_color
        self.ChangeSubmits = change_submits or enable_events
        key = key if key is not None else k
        sz = size if size != (None, None) else s
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y
        if setting is not None:
            self.setting = bool(setting)
            self.InitialState = user_settings_get_entry(key, self.setting)


        super().__init__(ELEM_TYPE_INPUT_CHECKBOX, size=sz, auto_size_text=auto_size_text, font=font,
                         background_color=background_color, text_color=self.TextColor, key=key, pad=pad,
                         tooltip=tooltip, visible=visible, metadata=metadata)

    def get(self):
        # type: (Checkbox) -> bool
        """
        Return the current state of this checkbox

        :return: Current state of checkbox
        :rtype:  (bool)
        """
        return self.TKIntVar.get() != 0

    def update(self, value=None, text=None, background_color=None, text_color=None, checkbox_color=None, disabled=None, visible=None):
        """
        Changes some of the settings for the Checkbox Element. Must call `Window.Read` or `Window.Finalize` prior.
        Note that changing visibility may cause element to change locations when made visible after invisible

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param value:            if True checks the checkbox, False clears it
        :type value:             (bool)
        :param text:             Text to display next to checkbox
        :type text:              (str)
        :param background_color: color of background
        :type background_color:  (str)
        :param text_color:       color of the text. Note this also changes the color of the checkmark
        :type text_color:        (str)
        :param disabled:         disable or enable element
        :type disabled:          (bool)
        :param visible:          control visibility of element
        :type visible:           (bool)
        """

        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Checkbox.update - The window was closed')
            return

        if value is not None:
            value = bool(value)
            try:
                self.TKIntVar.set(value)
                self.InitialState = value
            except:
                print('Checkbox update failed')
        if disabled is True:
            self.TKCheckbutton.configure(state='disabled')
        elif disabled is False:
            self.TKCheckbutton.configure(state='normal')
        self.Disabled = disabled if disabled is not None else self.Disabled

        if text is not None:
            self.Text = str(text)
            self.TKCheckbutton.configure(text=self.Text)
        if background_color not in (None, COLOR_SYSTEM_DEFAULT):
            self.TKCheckbutton.configure(background=background_color)
            self.BackgroundColor = background_color
        if text_color not in (None, COLOR_SYSTEM_DEFAULT):
            self.TKCheckbutton.configure(fg=text_color)
            self.TextColor = text_color
        # Color the checkbox itself
        if checkbox_color not in (None, COLOR_SYSTEM_DEFAULT):
            self.CheckboxBackgroundColor = checkbox_color
            self.TKCheckbutton.configure(selectcolor=self.CheckboxBackgroundColor)  # The background of the checkbox
        elif text_color or background_color:
            if self.CheckboxBackgroundColor is not None and self.TextColor is not None and self.BackgroundColor is not None and self.TextColor.startswith(
                    '#') and self.BackgroundColor.startswith('#'):
                # ---- compute color of checkbox background ---
                text_hsl = _hex_to_hsl(self.TextColor)
                background_hsl = _hex_to_hsl(self.BackgroundColor if self.BackgroundColor else theme_background_color())
                l_delta = abs(text_hsl[2] - background_hsl[2]) / 10
                if text_hsl[2] > background_hsl[2]:  # if the text is "lighter" than the background then make background darker
                    bg_rbg = _hsl_to_rgb(background_hsl[0], background_hsl[1], background_hsl[2] - l_delta)
                else:
                    bg_rbg = _hsl_to_rgb(background_hsl[0], background_hsl[1], background_hsl[2] + l_delta)
                self.CheckboxBackgroundColor = rgb(*bg_rbg)
                self.TKCheckbutton.configure(selectcolor=self.CheckboxBackgroundColor)  # The background of the checkbox

        if visible is False:
            self._pack_forget_save_settings()
        elif visible is True:
            self._pack_restore_settings()

        if visible is not None:
            self._visible = visible

    Get = get
    Update = update


# -------------------------  CHECKBOX Element lazy functions  ------------------------- #
CB = Checkbox
CBox = Checkbox
Check = Checkbox


# ---------------------------------------------------------------------- #
#                           Spin                                         #
# ---------------------------------------------------------------------- #

class Spin(Element):
    """
    A spinner with up/down buttons and a single line of text. Choose 1 values from list
    """

    def __init__(self, values, initial_value=None, disabled=False, change_submits=False, enable_events=False, readonly=False, setting=None,
                 size=(None, None), s=(None, None), auto_size_text=None, bind_return_key=None, font=None, background_color=None, text_color=None, key=None, k=None, pad=None,
                 p=None, wrap=None,
                 tooltip=None, right_click_menu=None, expand_x=False, expand_y=False, visible=True, metadata=None):
        """
        :param values:           List of valid values
        :type values:            Tuple[Any] or List[Any]
        :param initial_value:    Initial item to show in window. Choose from list of values supplied
        :type initial_value:     (Any)
        :param disabled:         set disable state
        :type disabled:          (bool)
        :param change_submits:   DO NOT USE. Only listed for backwards compat - Use enable_events instead
        :type change_submits:    (bool)
        :param enable_events:    Turns on the element specific events. Spin events happen when an item changes
        :type enable_events:     (bool)
        :param readonly:         If True, then users cannot type in values. Only values from the values list are allowed.
        :type readonly:          (bool)
        :param setting:          If not None, then this element will be saved in a settings file using the key for the element
        :type setting:           (Any)
        :param size:             (w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1
        :type size:              (int, int)  | (None, None) | int
        :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                 (int, int)  | (None, None) | int
        :param auto_size_text:   if True will size the element to match the length of the text
        :type auto_size_text:    (bool)
        :param bind_return_key:  If True, then the return key will cause a the element to generate an event when return key is pressed
        :type bind_return_key:   (bool)
        :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:              (str or (str, int[, str]) or None)
        :param background_color: color of background
        :type background_color:  (str)
        :param text_color:       color of the text
        :type text_color:        (str)
        :param key:              Used with window.find_element and with return values to uniquely identify this element
        :type key:               str | int | tuple | object
        :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                 str | int | tuple | object
        :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param wrap:             Determines if the values should "Wrap". Default is False. If True, when reaching last value, will continue back to the first value.
        :type wrap:              (bool)
        :param tooltip:          text, that will appear when mouse hovers over the element
        :type tooltip:           (str)
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:  List[List[ List[str] | str ]]
        :param expand_x:         If True the element will automatically expand in the X direction to fill available space
        :type expand_x:          (bool)
        :param expand_y:         If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:          (bool)
        :param visible:          set visibility state of the element
        :type visible:           (bool)
        :param metadata:         User metadata that can be set to ANYTHING
        :type metadata:          (Any)
        """

        self.Values = values
        self.DefaultValue = initial_value
        self.ChangeSubmits = change_submits or enable_events
        self.TKSpinBox = self.Widget = None  # type: tk.Spinbox
        self.Disabled = disabled
        self.Readonly = readonly
        self.RightClickMenu = right_click_menu
        self.BindReturnKey = bind_return_key
        self.wrap = wrap

        bg = background_color if background_color else DEFAULT_INPUT_ELEMENTS_COLOR
        fg = text_color if text_color is not None else DEFAULT_INPUT_TEXT_COLOR
        key = key if key is not None else k
        sz = size if size != (None, None) else s
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y

        if setting is not None:
            self.setting = setting
            self.DefaultValue = user_settings_get_entry(key, setting)


        super().__init__(ELEM_TYPE_INPUT_SPIN, size=sz, auto_size_text=auto_size_text, font=font, background_color=bg, text_color=fg,
                         key=key, pad=pad, tooltip=tooltip, visible=visible, metadata=metadata)
        return

    def update(self, value=None, values=None, disabled=None, readonly=None, visible=None):
        """
        Changes some of the settings for the Spin Element. Must call `Window.Read` or `Window.Finalize` prior
        Note that the state can be in 3 states only.... enabled, disabled, readonly even
        though more combinations are available. The easy way to remember is that if you
        change the readonly parameter then you are enabling the element.

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param value:    set the current value from list of choices
        :type value:     (Any)
        :param values:   set available choices
        :type values:    List[Any]
        :param disabled: disable. Note disabled and readonly cannot be mixed. It must be one OR the other
        :type disabled:  (bool)
        :param readonly: make element readonly.  Note disabled and readonly cannot be mixed. It must be one OR the other
        :type readonly:  (bool)
        :param visible:  control visibility of element
        :type visible:   (bool)
        """

        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Spin.update - The window was closed')
            return

        if values != None:
            old_value = self.TKStringVar.get()
            self.Values = values
            self.TKSpinBox.configure(values=values)
            self.TKStringVar.set(old_value)
        if value is not None:
            try:
                self.TKStringVar.set(value)
                self.DefaultValue = value
            except:
                pass

        if readonly is True:
            self.Readonly = True
            self.TKSpinBox['state'] = 'readonly'
        elif readonly is False:
            self.Readonly = False
            self.TKSpinBox['state'] = 'normal'
        if disabled is True:
            self.TKSpinBox['state'] = 'disable'
        elif disabled is False:
            if self.Readonly:
                self.TKSpinBox['state'] = 'readonly'
            else:
                self.TKSpinBox['state'] = 'normal'
        self.Disabled = disabled if disabled is not None else self.Disabled

        if visible is False:
            self._pack_forget_save_settings()
        elif visible is True:
            self._pack_restore_settings()
        if visible is not None:
            self._visible = visible

    def _SpinChangedHandler(self, event):
        """
        Callback function. Used internally only. Called by tkinter when Spinbox Widget changes.  Results in Window.Read() call returning

        :param event: passed in from tkinter
        :type event:
        """
        # first, get the results table built
        if self.Key is not None:
            self.ParentForm.LastButtonClicked = self.Key
        else:
            self.ParentForm.LastButtonClicked = ''
        self.ParentForm.FormRemainedOpen = True
        _exit_mainloop(self.ParentForm)
        # if self.ParentForm.CurrentlyRunningMainloop:
        #     Window._window_that_exited = self.ParentForm
        #     self.ParentForm.TKroot.quit()  # kick the users out of the mainloop




    def set_ibeam_color(self, ibeam_color=None):
        """
        Sets the color of the I-Beam that is used to "insert" characters. This is oftens called a "Cursor" by
        many users.  To keep from being confused with tkinter's definition of cursor (the mouse pointer), the term
        ibeam is used in this case.
        :param ibeam_color: color to set the "I-Beam" used to indicate where characters will be inserted
        :type ibeam_color:  (str)
        """

        if not self._widget_was_created():
            return
        if ibeam_color is not None:
            try:
                self.Widget.config(insertbackground=ibeam_color)
            except Exception as e:
                _error_popup_with_traceback('Error setting I-Beam color in set_ibeam_color',
                           'The element has a key:', self.Key,
                            'The color passed in was:', ibeam_color)



    def get(self):
        """
        Return the current chosen value showing in spinbox.
        This value will be the same as what was provided as list of choices.  If list items are ints, then the
        item returned will be an int (not a string)

        :return: The currently visible entry
        :rtype:  (Any)
        """
        value = self.TKStringVar.get()
        for v in self.Values:
            if str(v) == value:
                value = v
                break
        return value

    Get = get
    Update = update


Sp = Spin  # type: Spin


# ---------------------------------------------------------------------- #
#                           Multiline                                    #
# ---------------------------------------------------------------------- #
class Multiline(Element):
    """
    Multiline Element - Display and/or read multiple lines of text.  This is both an input and output element.
    Other PySimpleGUI ports have a separate MultilineInput and MultilineOutput elements.  May want to split this
    one up in the future too.
    """

    def __init__(self, default_text='', enter_submits=False, disabled=False, autoscroll=False, autoscroll_only_at_bottom=False, border_width=None,
                 size=(None, None), s=(None, None), setting=None, auto_size_text=None, background_color=None, text_color=None, selected_text_color=None, selected_background_color=None, horizontal_scroll=False, change_submits=False, enable_events=False, do_not_clear=True, key=None, k=None, write_only=False, auto_refresh=False, reroute_stdout=False, reroute_stderr=False, reroute_cprint=False, echo_stdout_stderr=False, focus=False, font=None, pad=None, p=None, tooltip=None, justification=None, no_scrollbar=False, wrap_lines=None, sbar_trough_color=None, sbar_background_color=None, sbar_arrow_color=None, sbar_width=None, sbar_arrow_width=None, sbar_frame_color=None, sbar_relief=None, expand_x=False, expand_y=False, rstrip=True, right_click_menu=None, visible=True, metadata=None):
        """
        :param default_text:                 Initial text to show
        :type default_text:                  (Any)
        :param enter_submits:                if True, the Window.read call will return is enter key is pressed in this element
        :type enter_submits:                 (bool)
        :param disabled:                     set disable state
        :type disabled:                      (bool)
        :param autoscroll:                   If True the contents of the element will automatically scroll as more data added to the end
        :type autoscroll:                    (bool)
        :param autoscroll_only_at_bottom:    If True the contents of the element will automatically scroll only if the scrollbar is at the bottom of the multiline
        :type autoscroll_only_at_bottom:     (bool)
        :param border_width:                 width of border around element in pixels
        :type border_width:                  (int)
        :param size:                         (w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1
        :type size:                          (int, int)  | (None, None) | int | (None, int)
        :param s:                            Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                             (int, int)  | (None, None) | int | (None, int)
        :param setting:                      If not None, then this element will be saved in a settings file using the key for the element
        :type setting:                       (Any)
        :param auto_size_text:               if True will size the element to match the length of the text
        :type auto_size_text:                (bool)
        :param background_color:             color of background
        :type background_color:              (str)
        :param text_color:                   color of the text
        :type text_color:                    (str)
        :param selected_text_color:          Color of text when it is selected (using mouse or control+A, etc)
        :type selected_text_color:           (str)
        :param selected_background_color:    Color of background when it is selected (using mouse or control+A, etc)
        :type selected_background_color:     (str)
        :param horizontal_scroll:            Controls if a horizontal scrollbar should be shown.  If True a horizontal scrollbar will be shown in addition to vertical
        :type horizontal_scroll:             (bool)
        :param change_submits:               DO NOT USE. Only listed for backwards compat - Use enable_events instead
        :type change_submits:                (bool)
        :param enable_events:                If True then any key press that happens when the element has focus will generate an event.
        :type enable_events:                 (bool)
        :param do_not_clear:                 if False the element will be cleared any time the Window.read call returns
        :type do_not_clear:                  (bool)
        :param key:                          Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element
        :type key:                           str | int | tuple | object
        :param k:                            Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                             str | int | tuple | object
        :param write_only:                   If True then no entry will be added to the values dictionary when the window is read
        :type write_only:                    bool
        :param auto_refresh:                 If True then anytime the element is updated, the window will be refreshed so that the change is immediately displayed
        :type auto_refresh:                  (bool)
        :param reroute_stdout:               If True then all output to stdout will be output to this element
        :type reroute_stdout:                (bool)
        :param reroute_stderr:               If True then all output to stderr will be output to this element
        :type reroute_stderr:                (bool)
        :param reroute_cprint:               If True your cprint calls will output to this element. It's the same as you calling cprint_set_output_destination
        :type reroute_cprint:                (bool)
        :param echo_stdout_stderr:           If True then output to stdout and stderr will be output to this element AND also to the normal console location
        :type echo_stdout_stderr:            (bool)
        :param focus:                        if True initial focus will go to this element
        :type focus:                         (bool)
        :param font:                         specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:                          (str or (str, int[, str]) or None)
        :param pad:                          Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:                           (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                            Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                             (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param tooltip:                      text, that will appear when mouse hovers over the element
        :type tooltip:                       (str)
        :param justification:                text justification. left, right, center. Can use single characters l, r, c.
        :type justification:                 (str)
        :param no_scrollbar:                 If False then a vertical scrollbar will be shown (the default)
        :type no_scrollbar:                  (bool)
        :param wrap_lines:                   If True, the lines will be wrapped automatically. Other parms affect this setting, but this one will override them all. Default is it does nothing and uses previous settings for wrapping.
        :type wrap_lines:                    (bool)
        :param sbar_trough_color:           Scrollbar color of the trough
        :type sbar_trough_color:            (str)
        :param sbar_background_color:       Scrollbar color of the background of the arrow buttons at the ends AND the color of the "thumb" (the thing you grab and slide). Switches to arrow color when mouse is over
        :type sbar_background_color:        (str)
        :param sbar_arrow_color:            Scrollbar color of the arrow at the ends of the scrollbar (it looks like a button). Switches to background color when mouse is over
        :type sbar_arrow_color:             (str)
        :param sbar_width:                  Scrollbar width in pixels
        :type sbar_width:                   (int)
        :param sbar_arrow_width:            Scrollbar width of the arrow on the scrollbar. It will potentially impact the overall width of the scrollbar
        :type sbar_arrow_width:             (int)
        :param sbar_frame_color:            Scrollbar Color of frame around scrollbar (available only on some ttk themes)
        :type sbar_frame_color:             (str)
        :param sbar_relief:                 Scrollbar relief that will be used for the "thumb" of the scrollbar (the thing you grab that slides). Should be a constant that is defined at starting with "RELIEF_" - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID
        :type sbar_relief:                  (str)
        :param expand_x:                     If True the element will automatically expand in the X direction to fill available space
        :type expand_x:                      (bool)
        :param expand_y:                     If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:                      (bool)
        :param rstrip:                       If True the value returned in will have whitespace stripped from the right side
        :type rstrip:                        (bool)
        :param right_click_menu:             A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:              List[List[ List[str] | str ]]
        :param visible:                      set visibility state of the element
        :type visible:                       (bool)
        :param metadata:                     User metadata that can be set to ANYTHING
        :type metadata:                      (Any)
        """

        self.DefaultText = str(default_text)
        self.EnterSubmits = enter_submits
        bg = background_color if background_color else DEFAULT_INPUT_ELEMENTS_COLOR
        self.Focus = focus
        self.do_not_clear = do_not_clear
        fg = text_color if text_color is not None else DEFAULT_INPUT_TEXT_COLOR
        fg = text_color if text_color is not None else DEFAULT_INPUT_TEXT_COLOR
        self.selected_text_color = selected_text_color
        self.selected_background_color = selected_background_color
        self.Autoscroll = autoscroll
        self.Disabled = disabled
        self.ChangeSubmits = change_submits or enable_events
        self.RightClickMenu = right_click_menu
        self.BorderWidth = border_width if border_width is not None else DEFAULT_BORDER_WIDTH
        self.TagCounter = 0
        self.TKText = self.Widget = None  # type: tk.Text
        self.element_frame = None  # type: tk.Frame
        self.HorizontalScroll = horizontal_scroll
        self.tags = set()
        self.WriteOnly = write_only
        self.AutoRefresh = auto_refresh
        key = key if key is not None else k
        self.reroute_cprint = reroute_cprint
        self.echo_stdout_stderr = echo_stdout_stderr
        self.Justification = 'left' if justification is None else justification
        self.justification_tag = self.just_center_tag = self.just_left_tag = self.just_right_tag = None
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y
        self.rstrip = rstrip
        self.wrap_lines = wrap_lines
        self.reroute_stdout = reroute_stdout
        self.reroute_stderr = reroute_stderr
        self.no_scrollbar = no_scrollbar
        self.hscrollbar = None      # The horizontal scrollbar
        self.auto_scroll_only_at_bottom = autoscroll_only_at_bottom
        sz = size if size != (None, None) else s
        if setting is not None:
            self.setting = str(setting)
            self.DefaultText = user_settings_get_entry(key, self.setting)

        super().__init__(ELEM_TYPE_INPUT_MULTILINE, size=sz, auto_size_text=auto_size_text, background_color=bg,
                         text_color=fg, key=key, pad=pad, tooltip=tooltip, font=font or DEFAULT_FONT, visible=visible, metadata=metadata,
                         sbar_trough_color=sbar_trough_color, sbar_background_color=sbar_background_color, sbar_arrow_color=sbar_arrow_color, sbar_width=sbar_width, sbar_arrow_width=sbar_arrow_width, sbar_frame_color=sbar_frame_color, sbar_relief=sbar_relief)
        return

    def update(self, value=None, disabled=None, append=False, font=None, text_color=None, background_color=None, text_color_for_value=None,
               background_color_for_value=None, visible=None, autoscroll=None, justification=None, font_for_value=None):
        """
        Changes some of the settings for the Multiline Element. Must call `Window.read` or set finalize=True when creating window.

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param value:                      new text to display
        :type value:                       (Any)
        :param disabled:                   disable or enable state of the element
        :type disabled:                    (bool)
        :param append:                     if True then new value will be added onto the end of the current value. if False then contents will be replaced.
        :type append:                      (bool)
        :param font:                       specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike for the entire element
        :type font:                        (str or (str, int[, str]) or None)
        :param text_color:                 color of the text
        :type text_color:                  (str)
        :param background_color:           color of background
        :type background_color:            (str)
        :param text_color_for_value:       color of the new text being added (the value paramter)
        :type text_color_for_value:        (str)
        :param background_color_for_value: color of the new background of the text being added (the value paramter)
        :type background_color_for_value:  (str)
        :param visible:                    set visibility state of the element
        :type visible:                     (bool)
        :param autoscroll:                 if True then contents of element are scrolled down when new text is added to the end
        :type autoscroll:                  (bool)
        :param justification:              text justification. left, right, center. Can use single characters l, r, c. Sets only for this value, not entire element
        :type justification:               (str)
        :param font_for_value:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike for the value being updated
        :type font_for_value:              str | (str, int)
        """

        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            # _error_popup_with_traceback('Error in Multiline.update - The window was closed')
            return

        if autoscroll is not None:
            self.Autoscroll = autoscroll
        current_scroll_position = self.TKText.yview()[1]

        if justification is not None:
            if justification.startswith('l'):
                just_tag = 'left'
            if justification.startswith('r'):
                just_tag = 'right'
            if justification.startswith('c'):
                just_tag = 'center'
        else:
            just_tag = self.justification_tag

        starting_point = self.Widget.index(tk.INSERT)
        tag = None
        if value is not None:
            value = str(value)
            if background_color_for_value is not None or text_color_for_value is not None or font_for_value is not None:
                try:
                    tag = 'Multiline(' + str(text_color_for_value) + ',' + str(background_color_for_value) + ',' + str(font_for_value) + ')'
                    if tag not in self.tags:
                        self.tags.add(tag)
                    if background_color_for_value is not None:
                        self.TKText.tag_configure(tag, background=background_color_for_value)
                    if text_color_for_value is not None:
                        self.TKText.tag_configure(tag, foreground=text_color_for_value)
                    if font_for_value is not None:
                        self.TKText.tag_configure(tag, font=font_for_value)
                except Exception as e:
                    print('* Multiline.update - bad color likely specified:', e)
            if self.Disabled:
                self.TKText.configure(state='normal')
            try:
                if not append:
                    self.TKText.delete('1.0', tk.END)
                if tag is not None or just_tag is not None:
                    self.TKText.insert(tk.END, value, (just_tag, tag))
                else:
                    self.TKText.insert(tk.END, value)

                # self.TKText.tag_add(just_tag, starting_point, starting_point)

            except Exception as e:
                print("* Error setting multiline *", e)
            if self.Disabled:
                self.TKText.configure(state='disabled')
            self.DefaultText = value

        # if self.Autoscroll:
        #     self.TKText.see(tk.END)
        if self.Autoscroll:
            if not self.auto_scroll_only_at_bottom or (self.auto_scroll_only_at_bottom and current_scroll_position == 1.0):
                self.TKText.see(tk.END)
        if disabled is True:
            self.TKText.configure(state='disabled')
        elif disabled is False:
            self.TKText.configure(state='normal')
        self.Disabled = disabled if disabled is not None else self.Disabled

        if background_color not in (None, COLOR_SYSTEM_DEFAULT):
            self.TKText.configure(background=background_color)
        if text_color not in (None, COLOR_SYSTEM_DEFAULT):
            self.TKText.configure(fg=text_color)
        if font is not None:
            self.TKText.configure(font=font)

        if visible is False:
            self._pack_forget_save_settings(alternate_widget=self.element_frame)
            # self.element_frame.pack_forget()
        elif visible is True:
            self._pack_restore_settings(alternate_widget=self.element_frame)
            # self.element_frame.pack(padx=self.pad_used[0], pady=self.pad_used[1])

        if self.AutoRefresh and self.ParentForm:
            try:  # in case the window was destroyed
                self.ParentForm.refresh()
            except:
                pass
        if visible is not None:
            self._visible = visible

    def get(self):
        """
        Return current contents of the Multiline Element

        :return: current contents of the Multiline Element (used as an input type of Multiline
        :rtype:  (str)
        """
        value = str(self.TKText.get(1.0, tk.END))
        if self.rstrip:
            return value.rstrip()
        return value

    def print(self, *args, end=None, sep=None, text_color=None, background_color=None, justification=None, font=None, colors=None, t=None, b=None, c=None,
              autoscroll=True):
        """
        Print like Python normally prints except route the output to a multiline element and also add colors if desired

        colors -(str, str) or str.  A combined text/background color definition in a single parameter

        There are also "aliases" for text_color, background_color and colors (t, b, c)
        t - An alias for color of the text (makes for shorter calls)
        b - An alias for the background_color parameter
        c - (str, str) - "shorthand" way of specifying color. (foreground, backgrouned)
        c - str - can also be a string of the format "foreground on background"  ("white on red")

        With the aliases it's possible to write the same print but in more compact ways:
        cprint('This will print white text on red background', c=('white', 'red'))
        cprint('This will print white text on red background', c='white on red')
        cprint('This will print white text on red background', text_color='white', background_color='red')
        cprint('This will print white text on red background', t='white', b='red')

        :param args:             The arguments to print
        :type args:              (Any)
        :param end:              The end char to use just like print uses
        :type end:               (str)
        :param sep:              The separation character like print uses
        :type sep:               (str)
        :param text_color:       The color of the text
        :type text_color:        (str)
        :param background_color: The background color of the line
        :type background_color:  (str)
        :param justification:    text justification. left, right, center. Can use single characters l, r, c. Sets only for this value, not entire element
        :type justification:     (str)
        :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike for the args being printed
        :type font:              (str or (str, int[, str]) or None)
        :param colors:           Either a tuple or a string that has both the text and background colors. Or just the text color
        :type colors:            (str) or (str, str)
        :param t:                Color of the text
        :type t:                 (str)
        :param b:                The background color of the line
        :type b:                 (str)
        :param c:                Either a tuple or a string that has both the text and background colors or just tex color (same as the color parm)
        :type c:                 (str) or (str, str)
        :param autoscroll:       If True the contents of the element will automatically scroll as more data added to the end
        :type autoscroll:        (bool)
        """

        kw_text_color = text_color or t
        kw_background_color = background_color or b
        dual_color = colors or c
        try:
            if isinstance(dual_color, tuple):
                kw_text_color = dual_color[0]
                kw_background_color = dual_color[1]
            elif isinstance(dual_color, str):
                if ' on ' in dual_color:  # if has "on" in the string, then have both text and background
                    kw_text_color = dual_color.split(' on ')[0]
                    kw_background_color = dual_color.split(' on ')[1]
                else:  # if no "on" then assume the color string is just the text color
                    kw_text_color = dual_color
        except Exception as e:
            print('* multiline print warning * you messed up with color formatting', e)

        _print_to_element(self, *args, end=end, sep=sep, text_color=kw_text_color, background_color=kw_background_color, justification=justification,
                          autoscroll=autoscroll, font=font)

    def reroute_stdout_to_here(self):
        """
        Sends stdout (prints) to this element
        """
        # if nothing on the stack, then need to save the very first stdout
        if len(Window._rerouted_stdout_stack) == 0:
            Window._original_stdout = sys.stdout
        Window._rerouted_stdout_stack.insert(0, (self.ParentForm, self))
        sys.stdout = self

    def reroute_stderr_to_here(self):
        """
        Sends stderr to this element
        """
        if len(Window._rerouted_stderr_stack) == 0:
            Window._original_stderr = sys.stderr
        Window._rerouted_stderr_stack.insert(0, (self.ParentForm, self))
        sys.stderr = self

    def restore_stdout(self):
        """
        Restore a previously re-reouted stdout back to the original destination
        """
        Window._restore_stdout()

    def restore_stderr(self):
        """
        Restore a previously re-reouted stderr back to the original destination
        """
        Window._restore_stderr()

    def write(self, txt):
        """
        Called by Python (not tkinter?) when stdout or stderr wants to write

        :param txt: text of output
        :type txt:  (str)
        """
        try:
            self.update(txt, append=True)
            # if need to echo, then send the same text to the destinatoin that isn't thesame as this one
            if self.echo_stdout_stderr:
                if sys.stdout != self:
                    sys.stdout.write(txt)
                elif sys.stderr != self:
                    sys.stderr.write(txt)
        except:
            pass

    def flush(self):
        """
        Flush parameter was passed into a print statement.
        For now doing nothing.  Not sure what action should be taken to ensure a flush happens regardless.
        """
        # try:
        #     self.previous_stdout.flush()
        # except:
        #     pass
        return





    def set_ibeam_color(self, ibeam_color=None):
        """
        Sets the color of the I-Beam that is used to "insert" characters. This is oftens called a "Cursor" by
        many users.  To keep from being confused with tkinter's definition of cursor (the mouse pointer), the term
        ibeam is used in this case.
        :param ibeam_color: color to set the "I-Beam" used to indicate where characters will be inserted
        :type ibeam_color:  (str)
        """

        if not self._widget_was_created():
            return
        if ibeam_color is not None:
            try:
                self.Widget.config(insertbackground=ibeam_color)
            except Exception as e:
                _error_popup_with_traceback('Error setting I-Beam color in set_ibeam_color',
                           'The element has a key:', self.Key,
                            'The color passed in was:', ibeam_color)



    def __del__(self):
        """
        AT ONE TIME --- If this Widget is deleted, be sure and restore the old stdout, stderr
        Now the restore is done differently. Do not want to RELY on Python to call this method
        in order for stdout and stderr to be restored.  Instead explicit restores are called.

        """

        return

    Get = get
    Update = update


ML = Multiline
MLine = Multiline


# ---------------------------------------------------------------------- #
#                                       Text                             #
# ---------------------------------------------------------------------- #
class Text(Element):
    """
    Text - Display some text in the window.  Usually this means a single line of text.  However, the text can also be multiple lines.  If multi-lined there are no scroll bars.
    """

    def __init__(self, text='', size=(None, None), s=(None, None), auto_size_text=None, click_submits=False, enable_events=False, relief=None, font=None,
                 text_color=None, background_color=None, colors=(None,None), border_width=None, justification=None, pad=None, p=None, key=None, k=None, right_click_menu=None, expand_x=False,
                 expand_y=False, grab=None, tooltip=None, visible=True, metadata=None):
        """
        :param text:             The text to display. Can include /n to achieve multiple lines.  Will convert (optional) parameter into a string
        :type text:              Any
        :param size:             (w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1
        :type size:              (int, int) |  (int, None) | (None, None) | (int, ) | int
        :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                 (int, int) |  (int, None) | (None, None) | (int, ) | int
        :param auto_size_text:   if True size of the Text Element will be sized to fit the string provided in 'text' parm
        :type auto_size_text:    (bool)
        :param click_submits:    DO NOT USE. Only listed for backwards compat - Use enable_events instead
        :type click_submits:     (bool)
        :param enable_events:    Turns on the element specific events. Text events happen when the text is clicked
        :type enable_events:     (bool)
        :param relief:           relief style around the text. Values are same as progress meter relief values. Should be a constant that is defined at starting with RELIEF - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID
        :type relief:            (str)
        :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:              (str or (str, int[, str]) or None)
        :param text_color:       color of the text
        :type text_color:        (str)
        :param background_color: color of background
        :type background_color:  (str)
        :param colors:           Optional quick specification of both text and background colors in 1 parameter. If a single color specified, then assumed to be text_color
        :type colors:            (str) or (str, str)
        :param border_width:     number of pixels for the border (if using a relief)
        :type border_width:      (int)
        :param justification:    how string should be aligned within space provided by size. Valid choices = `left`, `right`, `center`
        :type justification:     (str)
        :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param key:              Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element
        :type key:               str or int or tuple or object
        :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                 str | int | tuple | object
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:  List[List[ List[str] | str ]]
        :param expand_x:         If True the element will automatically expand in the X direction to fill available space
        :type expand_x:          (bool)
        :param expand_y:         If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:          (bool)
        :param grab:             If True can grab this element and move the window around. Default is False
        :type grab:              (bool)
        :param tooltip:          text, that will appear when mouse hovers over the element
        :type tooltip:           (str)
        :param visible:          set visibility state of the element
        :type visible:           (bool)
        :param metadata:         User metadata that can be set to ANYTHING
        :type metadata:          (Any)
        """

        self.DisplayText = str(text)
        tc = text_color if text_color else DEFAULT_TEXT_COLOR
        self.Justification = justification
        self.Relief = relief
        self.ClickSubmits = click_submits or enable_events
        if background_color is None:
            bg = DEFAULT_TEXT_ELEMENT_BACKGROUND_COLOR
        else:
            bg = background_color

        if colors != (None, None):
            dual_colors = _simplified_dual_color_to_tuple(colors)
            if dual_colors[0] is None and dual_colors[1] is not None:   # if first entry is None, then use second as text color
                tc = dual_colors[1]
            else:
                tc = dual_colors[0]
                bg = dual_colors[1]
        self.TextColor = tc
        self.RightClickMenu = right_click_menu
        self.TKRightClickMenu = None
        self.BorderWidth = border_width
        self.Grab = grab
        key = key if key is not None else k
        sz = size if size != (None, None) else s
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y

        super().__init__(ELEM_TYPE_TEXT, auto_size_text=auto_size_text, size=sz, background_color=bg, font=font if font else DEFAULT_FONT,
                         text_color=self.TextColor, pad=pad, key=key, tooltip=tooltip, visible=visible, metadata=metadata)

    def update(self, value=None, background_color=None, text_color=None, font=None, visible=None):
        """
        Changes some of the settings for the Text Element. Must call `Window.Read` or `Window.Finalize` prior

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param value:            new text to show
        :type value:             (Any)
        :param background_color: color of background
        :type background_color:  (str)
        :param text_color:       color of the text
        :type text_color:        (str)
        :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:              (str or (str, int[, str]) or None)
        :param visible:          set visibility state of the element
        :type visible:           (bool)
        """

        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Text.update - The window was closed')
            return

        if value is not None:
            self.DisplayText = str(value)
            self.TKStringVar.set(str(value))
        if background_color not in (None, COLOR_SYSTEM_DEFAULT):
            self.TKText.configure(background=background_color)
        if text_color not in (None, COLOR_SYSTEM_DEFAULT):
            self.TKText.configure(fg=text_color)
        if font is not None:
            self.TKText.configure(font=font)
        if visible is False:
            self._pack_forget_save_settings()
            # self.TKText.pack_forget()
        elif visible is True:
            self._pack_restore_settings()
            # self.TKText.pack(padx=self.pad_used[0], pady=self.pad_used[1])
        if visible is not None:
            self._visible = visible

    def get(self):
        """
        Gets the current value of the displayed text

        :return: The current value
        :rtype:  (str)
        """
        try:
            text = self.TKStringVar.get()
        except:
            text = ''
        return text

    @classmethod
    def fonts_installed_list(cls):
        """
        Returns a list of strings that tkinter reports as the installed fonts

        :return:          List of the installed font names
        :rtype:           List[str]
        """
        # A window must exist before can perform this operation. Create the hidden master root if it doesn't exist
        _get_hidden_master_root()

        fonts = list(tkinter.font.families())
        fonts.sort()

        return fonts

    @classmethod
    def char_width_in_pixels(cls, font, character='W'):
        """
        Get the with of the character "W" in pixels for the font being passed in or
        the character of your choosing if "W" is not a good representative character.
        Cannot be used until a window has been created.
        If an error occurs, 0 will be returned
        :param font:      specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike, to be measured
        :type font:       (str or (str, int[, str]) or None)
        :param character: specifies a SINGLE CHARACTER character to measure
        :type character:  (str)
        :return:          Width in pixels of "A"
        :rtype:           (int)
        """
        # A window must exist before can perform this operation. Create the hidden master root if it doesn't exist
        _get_hidden_master_root()

        size = 0
        try:
            size = tkinter.font.Font(font=font).measure(character)  # single character width
        except Exception as e:
            _error_popup_with_traceback('Exception retrieving char width in pixels', e)

        return size

    @classmethod
    def char_height_in_pixels(cls, font):
        """
        Get the height of a string if using the supplied font in pixels.
        Cannot be used until a window has been created.
        If an error occurs, 0 will be returned
        :param font: specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike, to be measured
        :type font:  (str or (str, int[, str]) or None)
        :return:     Height in pixels of "A"
        :rtype:      (int)
        """

        # A window must exist before can perform this operation. Create the hidden master root if it doesn't exist
        _get_hidden_master_root()

        size = 0
        try:
            size = tkinter.font.Font(font=font).metrics('linespace')
        except Exception as e:
            _error_popup_with_traceback('Exception retrieving char height in pixels', e)

        return size

    @classmethod
    def string_width_in_pixels(cls, font, string):
        """
        Get the with of the supplied string in pixels for the font being passed in.
        If an error occurs, 0 will be returned
        :param font:   specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike, to be measured
        :type font:    (str or (str, int[, str]) or None)
        :param string: the string to measure
        :type string:  str
        :return:       Width in pixels of string
        :rtype:        (int)
        """

        # A window must exist before can perform this operation. Create the hidden master root if it doesn't exist
        _get_hidden_master_root()

        size = 0
        try:
            size = tkinter.font.Font(font=font).measure(string)  # string's  width
        except Exception as e:
            _error_popup_with_traceback('Exception retrieving string width in pixels', e)

        return size

    def _print_to_element(self, *args, end=None, sep=None, text_color=None, background_color=None, autoscroll=None, justification=None, font=None, append=None):
        """
        Print like Python normally prints except route the output to a multiline element and also add colors if desired

        :param multiline_element: The multiline element to be output to
        :type multiline_element:  (Multiline)
        :param args:              The arguments to print
        :type args:               List[Any]
        :param end:               The end char to use just like print uses
        :type end:                (str)
        :param sep:               The separation character like print uses
        :type sep:                (str)
        :param text_color:        color of the text
        :type text_color:         (str)
        :param background_color:  The background color of the line
        :type background_color:   (str)
        :param autoscroll:        If True (the default), the element will scroll to bottom after updating
        :type autoscroll:         (bool)
        :param font:              specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike for the value being updated
        :type font:               str | (str, int)
        """
        end_str = str(end) if end is not None else '\n'
        sep_str = str(sep) if sep is not None else ' '

        outstring = ''
        num_args = len(args)
        for i, arg in enumerate(args):
            outstring += str(arg)
            if i != num_args - 1:
                outstring += sep_str
        outstring += end_str
        if append:
            outstring = self.get() + outstring

        self.update(outstring, text_color=text_color, background_color=background_color, font=font)

        try:  # if the element is set to autorefresh, then refresh the parent window
            if self.AutoRefresh:
                self.ParentForm.refresh()
        except:
            pass

    def print(self, *args, end=None, sep=None, text_color=None, background_color=None, justification=None, font=None, colors=None, t=None, b=None, c=None, autoscroll=True,
              append=True):
        """
        Print like Python normally prints except route the output to a multiline element and also add colors if desired

        colors -(str, str) or str.  A combined text/background color definition in a single parameter

        There are also "aliases" for text_color, background_color and colors (t, b, c)
        t - An alias for color of the text (makes for shorter calls)
        b - An alias for the background_color parameter
        c - (str, str) - "shorthand" way of specifying color. (foreground, backgrouned)
        c - str - can also be a string of the format "foreground on background"  ("white on red")

        With the aliases it's possible to write the same print but in more compact ways:
        cprint('This will print white text on red background', c=('white', 'red'))
        cprint('This will print white text on red background', c='white on red')
        cprint('This will print white text on red background', text_color='white', background_color='red')
        cprint('This will print white text on red background', t='white', b='red')

        :param args:             The arguments to print
        :type args:              (Any)
        :param end:              The end char to use just like print uses
        :type end:               (str)
        :param sep:              The separation character like print uses
        :type sep:               (str)
        :param text_color:       The color of the text
        :type text_color:        (str)
        :param background_color: The background color of the line
        :type background_color:  (str)
        :param justification:    text justification. left, right, center. Can use single characters l, r, c. Sets only for this value, not entire element
        :type justification:     (str)
        :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike for the args being printed
        :type font:              (str or (str, int[, str]) or None)
        :param colors:           Either a tuple or a string that has both the text and background colors. Or just the text color
        :type colors:            (str) or (str, str)
        :param t:                Color of the text
        :type t:                 (str)
        :param b:                The background color of the line
        :type b:                 (str)
        :param c:                Either a tuple or a string that has both the text and background colors or just tex color (same as the color parm)
        :type c:                 (str) or (str, str)
        :param autoscroll:       If True the contents of the element will automatically scroll as more data added to the end
        :type autoscroll:        (bool)
        """

        kw_text_color = text_color or t
        kw_background_color = background_color or b
        dual_color = colors or c
        try:
            if isinstance(dual_color, tuple):
                kw_text_color = dual_color[0]
                kw_background_color = dual_color[1]
            elif isinstance(dual_color, str):
                if ' on ' in dual_color:  # if has "on" in the string, then have both text and background
                    kw_text_color = dual_color.split(' on ')[0]
                    kw_background_color = dual_color.split(' on ')[1]
                else:  # if no "on" then assume the color string is just the text color
                    kw_text_color = dual_color
        except Exception as e:
            print('* multiline print warning * you messed up with color formatting', e)

        self._print_to_element(*args, end=end, sep=sep, text_color=kw_text_color, background_color=kw_background_color, justification=justification, autoscroll=autoscroll,
                               font=font, append=append)

    Get = get
    Update = update


# -------------------------  Text Element lazy functions  ------------------------- #

Txt = Text  # type: Text
T = Text  # type: Text


# ---------------------------------------------------------------------- #
#                                       StatusBar                        #
# ---------------------------------------------------------------------- #
class StatusBar(Element):
    """
    A StatusBar Element creates the sunken text-filled strip at the bottom. Many Windows programs have this line
    """

    def __init__(self, text, size=(None, None), s=(None, None), auto_size_text=None, click_submits=None, enable_events=False,
                 relief=RELIEF_SUNKEN, font=None, text_color=None, background_color=None, justification=None, pad=None, p=None,
                 key=None, k=None, right_click_menu=None, expand_x=False, expand_y=False, tooltip=None, visible=True, metadata=None):
        """
        :param text:             Text that is to be displayed in the widget
        :type text:              (str)
        :param size:             (w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1
        :type size:              (int, int) |  (int, None) | int
        :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                 (int, int)  | (None, None) | int
        :param auto_size_text:   True if size should fit the text length
        :type auto_size_text:    (bool)
        :param click_submits:    DO NOT USE. Only listed for backwards compat - Use enable_events instead
        :type click_submits:     (bool)
        :param enable_events:    Turns on the element specific events. StatusBar events occur when the bar is clicked
        :type enable_events:     (bool)
        :param relief:           relief style. Values are same as progress meter relief values.  Can be a constant or a string: `RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID`
        :type relief:            (enum)
        :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:              (str or (str, int[, str]) or None)
        :param text_color:       color of the text
        :type text_color:        (str)
        :param background_color: color of background
        :type background_color:  (str)
        :param justification:    how string should be aligned within space provided by size. Valid choices = `left`, `right`, `center`
        :type justification:     (str)
        :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param key:              Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element
        :type key:               str | int | tuple | object
        :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                 str | int | tuple | object
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:  List[List[ List[str] | str ]]
        :param expand_x:         If True the element will automatically expand in the X direction to fill available space
        :type expand_x:          (bool)
        :param expand_y:         If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:          (bool)
        :param tooltip:          text, that will appear when mouse hovers over the element
        :type tooltip:           (str)
        :param visible:          set visibility state of the element
        :type visible:           (bool)
        :param metadata:         User metadata that can be set to ANYTHING
        :type metadata:          (Any)
        """

        self.DisplayText = text
        self.TextColor = text_color if text_color else DEFAULT_TEXT_COLOR
        self.Justification = justification
        self.Relief = relief
        self.ClickSubmits = click_submits or enable_events
        if background_color is None:
            bg = DEFAULT_TEXT_ELEMENT_BACKGROUND_COLOR
        else:
            bg = background_color
        self.TKText = self.Widget = None  # type: tk.Label
        key = key if key is not None else k
        self.RightClickMenu = right_click_menu
        sz = size if size != (None, None) else s
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y

        super().__init__(ELEM_TYPE_STATUSBAR, size=sz, auto_size_text=auto_size_text, background_color=bg,
                         font=font or DEFAULT_FONT, text_color=self.TextColor, pad=pad, key=key, tooltip=tooltip,
                         visible=visible, metadata=metadata)
        return

    def update(self, value=None, background_color=None, text_color=None, font=None, visible=None):
        """
        Changes some of the settings for the Status Bar Element. Must call `Window.Read` or `Window.Finalize` prior

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param value:            new text to show
        :type value:             (str)
        :param background_color: color of background
        :type background_color:  (str)
        :param text_color:       color of the text
        :type text_color:        (str)
        :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:              (str or (str, int[, str]) or None)
        :param visible:          set visibility state of the element
        :type visible:           (bool)
        """

        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in StatusBar.update - The window was closed')
            return

        if value is not None:
            self.DisplayText = value
            stringvar = self.TKStringVar
            stringvar.set(value)
        if background_color not in (None, COLOR_SYSTEM_DEFAULT):
            self.TKText.configure(background=background_color)
        if text_color not in (None, COLOR_SYSTEM_DEFAULT):
            self.TKText.configure(fg=text_color)
        if font is not None:
            self.TKText.configure(font=font)
        if visible is False:
            self._pack_forget_save_settings()
            # self.TKText.pack_forget()
        elif visible is True:
            self._pack_restore_settings()
            # self.TKText.pack(padx=self.pad_used[0], pady=self.pad_used[1])
        if visible is not None:
            self._visible = visible

    Update = update


SBar = StatusBar


# ---------------------------------------------------------------------- #
#                       TKProgressBar                                    #
#  Emulate the TK ProgressBar using canvas and rectangles
# ---------------------------------------------------------------------- #

class TKProgressBar():
    uniqueness_counter = 0

    def __init__(self, root, max, length=400, width=DEFAULT_PROGRESS_BAR_SIZE[1], ttk_theme=DEFAULT_TTK_THEME, style_name='',
                 relief=DEFAULT_PROGRESS_BAR_RELIEF, border_width=DEFAULT_PROGRESS_BAR_BORDER_WIDTH,
                 orientation='horizontal', BarColor=(None, None), key=None):
        """
        :param root:         The root window bar is to be shown in
        :type root:          tk.Tk | tk.TopLevel
        :param max:          Maximum value the bar will be measuring
        :type max:           (int)
        :param length:       length in pixels of the bar
        :type length:        (int)
        :param width:        width in pixels of the bar
        :type width:         (int)
        :param style_name:   Progress bar style to use.  Set in the packer function
        :type style_name:    (str)
        :param ttk_theme:    Progress bar style defined as one of these 'default', 'winnative', 'clam', 'alt', 'classic', 'vista', 'xpnative'
        :type ttk_theme:     (str)
        :param relief:       relief style. Values are same as progress meter relief values.  Can be a constant or a string: `RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID` (Default value = DEFAULT_PROGRESS_BAR_RELIEF)
        :type relief:        (str)
        :param border_width: The amount of pixels that go around the outside of the bar
        :type border_width:  (int)
        :param orientation:  'horizontal' or 'vertical' ('h' or 'v' work) (Default value = 'vertical')
        :type orientation:   (str)
        :param BarColor:     The 2 colors that make up a progress bar. One is the background, the other is the bar
        :type BarColor:      (str, str)
        :param key:          Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element
        :type key:           str | int | tuple | object
        """

        self.Length = length
        self.Width = width
        self.Max = max
        self.Orientation = orientation
        self.Count = None
        self.PriorCount = 0
        self.style_name = style_name

        TKProgressBar.uniqueness_counter += 1

        if orientation.lower().startswith('h'):
            s = ttk.Style()
            _change_ttk_theme(s, ttk_theme)

            # self.style_name = str(key) + str(TKProgressBar.uniqueness_counter) + "my.Horizontal.TProgressbar"
            if BarColor != COLOR_SYSTEM_DEFAULT and BarColor[0] != COLOR_SYSTEM_DEFAULT:
                s.configure(self.style_name, background=BarColor[0], troughcolor=BarColor[1],
                            troughrelief=relief, borderwidth=border_width, thickness=width)
            else:
                s.configure(self.style_name, troughrelief=relief, borderwidth=border_width, thickness=width)

            self.TKProgressBarForReal = ttk.Progressbar(root, maximum=self.Max, style=self.style_name, length=length, orient=tk.HORIZONTAL, mode='determinate')
        else:
            s = ttk.Style()
            _change_ttk_theme(s, ttk_theme)
            # self.style_name = str(key) + str(TKProgressBar.uniqueness_counter) + "my.Vertical.TProgressbar"
            if BarColor != COLOR_SYSTEM_DEFAULT and BarColor[0] != COLOR_SYSTEM_DEFAULT:

                s.configure(self.style_name, background=BarColor[0],
                            troughcolor=BarColor[1], troughrelief=relief, borderwidth=border_width, thickness=width)
            else:
                s.configure(self.style_name, troughrelief=relief, borderwidth=border_width, thickness=width)

            self.TKProgressBarForReal = ttk.Progressbar(root, maximum=self.Max, style=self.style_name, length=length, orient=tk.VERTICAL, mode='determinate')

    def Update(self, count=None, max=None):
        """
        Update the current value of the bar and/or update the maximum value the bar can reach
        :param count: current value
        :type count:  (int)
        :param max:   the maximum value
        :type max:    (int)
        """
        if max is not None:
            self.Max = max
            try:
                self.TKProgressBarForReal.config(maximum=max)
            except:
                return False
        if count is not None:
            try:
                self.TKProgressBarForReal['value'] = count
            except:
                return False
        return True


# ---------------------------------------------------------------------- #
#                           Output                                       #
#  Routes stdout, stderr to a scrolled window                            #
# ---------------------------------------------------------------------- #
class Output(Multiline):
    """
    Output Element - a multi-lined text area to where stdout, stderr, cprint are rerouted.

    The Output Element is now based on the Multiline Element.  When you make an Output Element, you're
    creating a Multiline Element with some specific settings set:
        auto_refresh = True
        auto_scroll = True
        reroute_stdout = True
        reroute_stderr = True
        reroute_cprint = True
        write_only = True

    If you choose to use a Multiline element to replace an Output element, be sure an turn on the write_only paramter in the Multiline
    so that an item is not included in the values dictionary on every window.read call
    """

    def __init__(self, size=(None, None), s=(None, None), background_color=None, text_color=None, pad=None, p=None, autoscroll_only_at_bottom=False, echo_stdout_stderr=False, font=None, tooltip=None,
                 key=None, k=None, right_click_menu=None, expand_x=False, expand_y=False, visible=True, metadata=None, wrap_lines=None, horizontal_scroll=None,
                 sbar_trough_color=None, sbar_background_color=None, sbar_arrow_color=None,  sbar_width=None, sbar_arrow_width=None, sbar_frame_color=None, sbar_relief=None):
        """
        :param size:                        (w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1
        :type size:                         (int, int)  | (None, None) | int
        :param s:                           Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                            (int, int)  | (None, None) | int
        :param background_color:            color of background
        :type background_color:             (str)
        :param text_color:                  color of the text
        :type text_color:                   (str)
        :param pad:                         Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:                          (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                           Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                            (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param autoscroll_only_at_bottom:   If True the contents of the element will automatically scroll only if the scrollbar is at the bottom of the multiline
        :type autoscroll_only_at_bottom:    (bool)
        :param echo_stdout_stderr:          If True then output to stdout will be output to this element AND also to the normal console location
        :type echo_stdout_stderr:           (bool)
        :param font:                        specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:                         (str or (str, int[, str]) or None)
        :param tooltip:                     text, that will appear when mouse hovers over the element
        :type tooltip:                      (str)
        :param key:                         Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element
        :type key:                          str | int | tuple | object
        :param k:                           Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                            str | int | tuple | object
        :param right_click_menu:            A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:             List[List[ List[str] | str ]]
        :param expand_x:                    If True the element will automatically expand in the X direction to fill available space
        :type expand_x:                     (bool)
        :param expand_y:                    If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:                     (bool)
        :param visible:                     set visibility state of the element
        :type visible:                      (bool)
        :param metadata:                    User metadata that can be set to ANYTHING
        :type metadata:                     (Any)
        :param wrap_lines:                  If True, the lines will be wrapped automatically. Other parms affect this setting, but this one will override them all. Default is it does nothing and uses previous settings for wrapping.
        :type wrap_lines:                   (bool)
        :param horizontal_scroll:           Controls if a horizontal scrollbar should be shown. If True, then line wrapping will be off by default
        :type horizontal_scroll:            (bool)
        :param sbar_trough_color:           Scrollbar color of the trough
        :type sbar_trough_color:            (str)
        :param sbar_background_color:       Scrollbar color of the background of the arrow buttons at the ends AND the color of the "thumb" (the thing you grab and slide). Switches to arrow color when mouse is over
        :type sbar_background_color:        (str)
        :param sbar_arrow_color:            Scrollbar color of the arrow at the ends of the scrollbar (it looks like a button). Switches to background color when mouse is over
        :type sbar_arrow_color:             (str)
        :param sbar_width:                  Scrollbar width in pixels
        :type sbar_width:                   (int)
        :param sbar_arrow_width:            Scrollbar width of the arrow on the scrollbar. It will potentially impact the overall width of the scrollbar
        :type sbar_arrow_width:             (int)
        :param sbar_frame_color:            Scrollbar Color of frame around scrollbar (available only on some ttk themes)
        :type sbar_frame_color:             (str)
        :param sbar_relief:                 Scrollbar relief that will be used for the "thumb" of the scrollbar (the thing you grab that slides). Should be a constant that is defined at starting with "RELIEF_" - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID
        :type sbar_relief:                  (str)
        """


        super().__init__(size=size, s=s, background_color=background_color, autoscroll_only_at_bottom=autoscroll_only_at_bottom, text_color=text_color, pad=pad, p=p, echo_stdout_stderr=echo_stdout_stderr, font=font, tooltip=tooltip, wrap_lines=wrap_lines, horizontal_scroll=horizontal_scroll, key=key, k=k, right_click_menu=right_click_menu, write_only=True, reroute_stdout=True, reroute_stderr=True, reroute_cprint=True, autoscroll=True, auto_refresh=True, expand_x=expand_x, expand_y=expand_y, visible=visible, metadata=metadata, sbar_trough_color=sbar_trough_color, sbar_background_color=sbar_background_color, sbar_arrow_color=sbar_arrow_color, sbar_width=sbar_width, sbar_arrow_width=sbar_arrow_width, sbar_frame_color=sbar_frame_color, sbar_relief=sbar_relief)



# ---------------------------------------------------------------------- #
#                           Button Class                                 #
# ---------------------------------------------------------------------- #
class Button(Element):
    """
    Button Element - Defines all possible buttons. The shortcuts such as Submit, FileBrowse, ... each create a Button
    """

    def __init__(self, button_text='', button_type=BUTTON_TYPE_READ_FORM, target=(None, None), tooltip=None,
                 file_types=FILE_TYPES_ALL_FILES, initial_folder=None, default_extension='', disabled=False, change_submits=False,
                 enable_events=False, image_filename=None, image_data=None, image_size=(None, None),
                 image_subsample=None, image_zoom=None, image_source=None, border_width=None, size=(None, None), s=(None, None), auto_size_button=None, button_color=None,
                 disabled_button_color=None,
                 highlight_colors=None, mouseover_colors=(None, None), use_ttk_buttons=None, font=None, bind_return_key=False, focus=False, pad=None, p=None, key=None,
                 k=None, right_click_menu=None, expand_x=False, expand_y=False, visible=True, metadata=None):
        """
        :param button_text:           Text to be displayed on the button
        :type button_text:            (str)
        :param button_type:           You  should NOT be setting this directly. ONLY the shortcut functions set this
        :type button_type:            (int)
        :param target:                key or (row,col) target for the button. Note that -1 for column means 1 element to the left of this one. The constant ThisRow is used to indicate the current row. The Button itself is a valid target for some types of button
        :type target:                 str | (int, int)
        :param tooltip:               text, that will appear when mouse hovers over the element
        :type tooltip:                (str)
        :param file_types:            the filetypes that will be used to match files. To indicate all files: (("ALL Files", "*.* *"),).
        :type file_types:             Tuple[(str, str), ...]
        :param initial_folder:        starting path for folders and files
        :type initial_folder:         (str)
        :param default_extension:     If no extension entered by user, add this to filename (only used in saveas dialogs)
        :type default_extension:      (str)
        :param disabled:              If True button will be created disabled. If BUTTON_DISABLED_MEANS_IGNORE then the button will be ignored rather than disabled using tkinter
        :type disabled:               (bool | str)
        :param change_submits:        DO NOT USE. Only listed for backwards compat - Use enable_events instead
        :type change_submits:         (bool)
        :param enable_events:         Turns on the element specific events. If this button is a target, should it generate an event when filled in
        :type enable_events:          (bool)
        :param image_source:          Image to place on button. Use INSTEAD of the image_filename and image_data. Unifies these into 1 easier to use parm
        :type image_source:           (str | bytes)
        :param image_filename:        image filename if there is a button image. GIFs and PNGs only.
        :type image_filename:         (str)
        :param image_data:            Raw or Base64 representation of the image to put on button. Choose either filename or data
        :type image_data:             bytes | str
        :param image_size:            Size of the image in pixels (width, height)
        :type image_size:             (int, int)
        :param image_subsample:       amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc
        :type image_subsample:        (int)
        :param image_zoom:            amount to increase the size of the image. 2=twice size, 3=3 times, etc
        :type image_zoom:             (int)
        :param border_width:          width of border around button in pixels
        :type border_width:           (int)
        :param size:                  (w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1
        :type size:                   (int | None, int | None)  | (None, None) | int
        :param s:                     Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                      (int | None, int | None)  | (None, None) | int
        :param auto_size_button:      if True the button size is sized to fit the text
        :type auto_size_button:       (bool)
        :param button_color:          Color of button. default is from theme or the window. Easy to remember which is which if you say "ON" between colors. "red" on "green". Normally a tuple, but can be a simplified-button-color-string "foreground on background". Can be a single color if want to set only the background.
        :type button_color:           (str, str) | str
        :param disabled_button_color: colors to use when button is disabled (text, background). Use None for a color if don't want to change. Only ttk buttons support both text and background colors. tk buttons only support changing text color
        :type disabled_button_color:  (str, str) | str
        :param highlight_colors:      colors to use when button has focus (has focus, does not have focus). None will use colors based on theme. Only used by Linux and only for non-TTK button
        :type highlight_colors:       (str, str)
        :param mouseover_colors:      Important difference between Linux & Windows! Linux - Colors when mouse moved over button.  Windows - colors when button is pressed. The default is to switch the text and background colors (an inverse effect)
        :type mouseover_colors:       (str, str) | str
        :param use_ttk_buttons:       True = use ttk buttons. False = do not use ttk buttons.  None (Default) = use ttk buttons only if on a Mac and not with button images
        :type use_ttk_buttons:        (bool)
        :param font:                  specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:                   (str or (str, int[, str]) or None)
        :param bind_return_key:       If True then pressing the return key in an Input or Multiline Element will cause this button to appear to be clicked (generates event with this button's key
        :type bind_return_key:        (bool)
        :param focus:                 if True, initial focus will be put on this button
        :type focus:                  (bool)
        :param pad:                   Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:                    (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                     Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                      (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param key:                   Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element
        :type key:                    str | int | tuple | object
        :param k:                     Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                      str | int | tuple | object
        :param right_click_menu:      A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:       List[List[ List[str] | str ]]
        :param expand_x:              If True the element will automatically expand in the X direction to fill available space
        :type expand_x:               (bool)
        :param expand_y:              If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:               (bool)
        :param visible:               set visibility state of the element
        :type visible:                (bool)
        :param metadata:              User metadata that can be set to ANYTHING
        :type metadata:               (Any)
        """

        self.AutoSizeButton = auto_size_button
        self.BType = button_type
        if file_types is not None and len(file_types) == 2 and isinstance(file_types[0], str) and isinstance(file_types[1], str):
            warnings.warn('file_types parameter not correctly specified. This parameter is a LIST of TUPLES. You have passed (str,str) rather than ((str, str),). Fixing it for you this time.\nchanging {} to {}\nPlease correct your code'.format(file_types, ((file_types[0], file_types[1]),)), UserWarning)
            file_types = ((file_types[0], file_types[1]),)
        self.FileTypes = file_types
        self.Widget = self.TKButton = None  # type: tk.Button
        self.Target = target
        self.ButtonText = str(button_text)
        self.RightClickMenu = right_click_menu
        self.ButtonColor = button_color_to_tuple(button_color)

        self.DisabledButtonColor = button_color_to_tuple(disabled_button_color) if disabled_button_color is not None else (None, None)
        if image_source is not None:
            if isinstance(image_source, bytes):
                image_data = image_source
            elif isinstance(image_source, str):
                image_filename = image_source
        self.ImageFilename = image_filename
        self.ImageData = image_data
        self.ImageSize = image_size
        self.ImageSubsample = image_subsample
        self.zoom = int(image_zoom) if image_zoom is not None else None
        self.UserData = None
        self.BorderWidth = border_width if border_width is not None else DEFAULT_BORDER_WIDTH
        self.BindReturnKey = bind_return_key
        self.Focus = focus
        self.calendar_default_date_M_D_Y = (None, None, None)
        self.calendar_close_when_chosen = False
        self.calendar_locale = None
        self.calendar_format = None
        self.calendar_location = (None, None)
        self.calendar_no_titlebar = True
        self.calendar_begin_at_sunday_plus = 0
        self.calendar_month_names = None
        self.calendar_day_abbreviations = None
        self.calendar_title = ''
        self.calendar_selection = ''
        self.default_button = None
        self.InitialFolder = initial_folder
        self.DefaultExtension = default_extension
        self.Disabled = disabled
        self.ChangeSubmits = change_submits or enable_events
        self.UseTtkButtons = use_ttk_buttons
        self._files_delimiter = BROWSE_FILES_DELIMITER  # used by the file browse button. used when multiple files are selected by user
        if use_ttk_buttons is None and running_mac():
            self.UseTtkButtons = True
        # if image_filename or image_data:
        #     self.UseTtkButtons = False              # if an image is to be displayed, then force the button to not be a TTK Button
        if key is None and k is None:
            _key = self.ButtonText
            if DEFAULT_USE_BUTTON_SHORTCUTS is True:
                pos = _key.find(MENU_SHORTCUT_CHARACTER)
                if pos != -1:
                    if pos < len(MENU_SHORTCUT_CHARACTER) or _key[pos - len(MENU_SHORTCUT_CHARACTER)] != "\\":
                        _key = _key[:pos] + _key[pos + len(MENU_SHORTCUT_CHARACTER):]
                    else:
                        _key = _key.replace('\\'+MENU_SHORTCUT_CHARACTER, MENU_SHORTCUT_CHARACTER)
        else:
            _key = key if key is not None else k
        if highlight_colors is not None:
            self.HighlightColors = highlight_colors
        else:
            self.HighlightColors = self._compute_highlight_colors()

        if mouseover_colors != (None, None):
            self.MouseOverColors = button_color_to_tuple(mouseover_colors)
        elif button_color != None:
            self.MouseOverColors = (self.ButtonColor[1], self.ButtonColor[0])
        else:
            self.MouseOverColors = (theme_button_color()[1], theme_button_color()[0])
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y

        sz = size if size != (None, None) else s
        super().__init__(ELEM_TYPE_BUTTON, size=sz, font=font, pad=pad, key=_key, tooltip=tooltip, visible=visible, metadata=metadata)
        return

    def _compute_highlight_colors(self):
        """
        Determines the color to use to indicate the button has focus. This setting is only used by Linux.
        :return: Pair of colors. (Highlight, Highlight Background)
        :rtype:  (str, str)
        """
        highlight_color = highlight_background = COLOR_SYSTEM_DEFAULT
        if self.ButtonColor != COLOR_SYSTEM_DEFAULT and theme_background_color() != COLOR_SYSTEM_DEFAULT:
            highlight_background = theme_background_color()
        if self.ButtonColor != COLOR_SYSTEM_DEFAULT and self.ButtonColor[0] != COLOR_SYSTEM_DEFAULT:
            if self.ButtonColor[0] != theme_background_color():
                highlight_color = self.ButtonColor[0]
            else:
                highlight_color = 'red'
        return (highlight_color, highlight_background)

        # Realtime button release callback

    def ButtonReleaseCallBack(self, parm):
        """
        Not a user callable function.  Called by tkinter when a "realtime" button is released

        :param parm: the event info from tkinter
        :type parm:

        """
        self.LastButtonClickedWasRealtime = False
        self.ParentForm.LastButtonClicked = None

    # Realtime button callback
    def ButtonPressCallBack(self, parm):
        """
        Not a user callable method. Callback called by tkinter when a "realtime" button is pressed

        :param parm: Event info passed in by tkinter
        :type parm:

        """
        self.ParentForm.LastButtonClickedWasRealtime = True
        if self.Key is not None:
            self.ParentForm.LastButtonClicked = self.Key
        else:
            self.ParentForm.LastButtonClicked = self.ButtonText
        # if self.ParentForm.CurrentlyRunningMainloop:
        #     Window._window_that_exited = self.ParentForm
        #     self.ParentForm.TKroot.quit()  # kick out of loop if read was called
        _exit_mainloop(self.ParentForm)

    def _find_target(self):
        target = self.Target
        target_element = None

        if target[0] == ThisRow:
            target = [self.Position[0], target[1]]
            if target[1] < 0:
                target[1] = self.Position[1] + target[1]
        strvar = None
        should_submit_window = False
        if target == (None, None):
            strvar = self.TKStringVar
        else:
            # Need a try-block because if the target is not hashable, the "in" test will raise exception
            try:
                if target in self.ParentForm.AllKeysDict:
                    target_element = self.ParentForm.AllKeysDict[target]
            except:
                pass
            # if target not found or the above try got exception, then keep looking....
            if target_element is None:
                if not isinstance(target, str):
                    if target[0] < 0:
                        target = [self.Position[0] + target[0], target[1]]
                    target_element = self.ParentContainer._GetElementAtLocation(target)
                else:
                    target_element = self.ParentForm.find_element(target)
            try:
                strvar = target_element.TKStringVar
            except:
                pass
            try:
                if target_element.ChangeSubmits:
                    should_submit_window = True
            except:
                pass
        return target_element, strvar, should_submit_window

    # -------  Button Callback  ------- #
    def ButtonCallBack(self):
        """
        Not user callable! Called by tkinter when a button is clicked.  This is where all the fun begins!
        """

        if self.Disabled == BUTTON_DISABLED_MEANS_IGNORE:
            return
        target_element, strvar, should_submit_window = self._find_target()

        filetypes = FILE_TYPES_ALL_FILES if self.FileTypes is None else self.FileTypes

        if self.BType == BUTTON_TYPE_BROWSE_FOLDER:
            if running_mac():  # macs don't like seeing the parent window (go firgure)
                folder_name = tk.filedialog.askdirectory(initialdir=self.InitialFolder)  # show the 'get folder' dialog box
            else:
                folder_name = tk.filedialog.askdirectory(initialdir=self.InitialFolder, parent=self.ParentForm.TKroot)  # show the 'get folder' dialog box
            if folder_name:
                try:
                    strvar.set(folder_name)
                    self.TKStringVar.set(folder_name)
                except:
                    pass
            else:  # if "cancel" button clicked, don't generate an event
                should_submit_window = False
        elif self.BType == BUTTON_TYPE_BROWSE_FILE:
            if running_mac():
                # Workaround for the "*.*" issue on Mac
                is_all = [(x, y) for (x, y) in filetypes if all(ch in '* .' for ch in y)]
                if not len(set(filetypes)) > 1 and (len(is_all) != 0 or filetypes == FILE_TYPES_ALL_FILES):
                    file_name = tk.filedialog.askopenfilename(initialdir=self.InitialFolder)
                else:
                    file_name = tk.filedialog.askopenfilename(initialdir=self.InitialFolder, filetypes=filetypes)  # show the 'get file' dialog box
                # elif _mac_allow_filetypes():
                # file_name = tk.filedialog.askopenfilename(initialdir=self.InitialFolder, filetypes=filetypes)  # show the 'get file' dialog box
                # else:
                #     file_name = tk.filedialog.askopenfilename(initialdir=self.InitialFolder)  # show the 'get file' dialog box
            else:
                file_name = tk.filedialog.askopenfilename(filetypes=filetypes, initialdir=self.InitialFolder, parent=self.ParentForm.TKroot)  # show the 'get file' dialog box

            if file_name:
                strvar.set(file_name)
                self.TKStringVar.set(file_name)
            else:  # if "cancel" button clicked, don't generate an event
                should_submit_window = False
        elif self.BType == BUTTON_TYPE_COLOR_CHOOSER:
            color = tk.colorchooser.askcolor(parent=self.ParentForm.TKroot, color=self.default_color)  # show the 'get file' dialog box
            color = color[1]  # save only the #RRGGBB portion
            if color is not None:
                strvar.set(color)
                self.TKStringVar.set(color)
        elif self.BType == BUTTON_TYPE_BROWSE_FILES:
            if running_mac():
                # Workaround for the "*.*" issue on Mac
                is_all = [(x, y) for (x, y) in filetypes if all(ch in '* .' for ch in y)]
                if not len(set(filetypes)) > 1 and (len(is_all) != 0 or filetypes == FILE_TYPES_ALL_FILES):
                    file_name = tk.filedialog.askopenfilenames(initialdir=self.InitialFolder)
                else:
                    file_name = tk.filedialog.askopenfilenames(filetypes=filetypes, initialdir=self.InitialFolder)
            else:
                file_name = tk.filedialog.askopenfilenames(filetypes=filetypes, initialdir=self.InitialFolder, parent=self.ParentForm.TKroot)

            if file_name:
                file_name = self._files_delimiter.join(file_name)  # normally a ';'
                strvar.set(file_name)
                self.TKStringVar.set(file_name)
            else:  # if "cancel" button clicked, don't generate an event
                should_submit_window = False
        elif self.BType == BUTTON_TYPE_SAVEAS_FILE:
            # show the 'get file' dialog box
            if running_mac():
                # Workaround for the "*.*" issue on Mac
                is_all = [(x, y) for (x, y) in filetypes if all(ch in '* .' for ch in y)]
                if not len(set(filetypes)) > 1 and (len(is_all) != 0 or filetypes == FILE_TYPES_ALL_FILES):
                    file_name = tk.filedialog.asksaveasfilename(defaultextension=self.DefaultExtension, initialdir=self.InitialFolder)
                else:
                    file_name = tk.filedialog.asksaveasfilename(filetypes=filetypes, defaultextension=self.DefaultExtension, initialdir=self.InitialFolder)
            else:
                file_name = tk.filedialog.asksaveasfilename(filetypes=filetypes, defaultextension=self.DefaultExtension, initialdir=self.InitialFolder,
                                                            parent=self.ParentForm.TKroot)

            if file_name:
                strvar.set(file_name)
                self.TKStringVar.set(file_name)
            else:  # if "cancel" button clicked, don't generate an event
                should_submit_window = False
        elif self.BType == BUTTON_TYPE_CLOSES_WIN:  # this is a return type button so GET RESULTS and destroy window
            # first, get the results table built
            # modify the Results table in the parent FlexForm object
            if self.Key is not None:
                self.ParentForm.LastButtonClicked = self.Key
            else:
                self.ParentForm.LastButtonClicked = self.ButtonText
            self.ParentForm.FormRemainedOpen = False
            self.ParentForm._Close()
            _exit_mainloop(self.ParentForm)

            if self.ParentForm.NonBlocking:
                self.ParentForm.TKroot.destroy()
                Window._DecrementOpenCount()
        elif self.BType == BUTTON_TYPE_READ_FORM:  # LEAVE THE WINDOW OPEN!! DO NOT CLOSE
            # This is a PLAIN BUTTON
            # first, get the results table built
            # modify the Results table in the parent FlexForm object
            if self.Key is not None:
                self.ParentForm.LastButtonClicked = self.Key
            else:
                self.ParentForm.LastButtonClicked = self.ButtonText
            self.ParentForm.FormRemainedOpen = True
            _exit_mainloop(self.ParentForm)
        elif self.BType == BUTTON_TYPE_CLOSES_WIN_ONLY:  # special kind of button that does not exit main loop
            self.ParentForm._Close(without_event=True)
            self.ParentForm.TKroot.destroy()  # close the window with tkinter
            Window._DecrementOpenCount()
        elif self.BType == BUTTON_TYPE_CALENDAR_CHOOSER:  # this is a return type button so GET RESULTS and destroy window
            # ------------ new chooser code -------------
            self.ParentForm.LastButtonClicked = self.Key  # key should have been generated already if not set by user
            self.ParentForm.FormRemainedOpen = True
            should_submit_window = False
            _exit_mainloop(self.ParentForm)

        if should_submit_window:
            self.ParentForm.LastButtonClicked = target_element.Key
            self.ParentForm.FormRemainedOpen = True
            _exit_mainloop(self.ParentForm)

        return

    def update(self, text=None, button_color=(None, None), disabled=None, image_source=None, image_data=None, image_filename=None,
               visible=None, image_subsample=None, image_zoom=None, disabled_button_color=(None, None), image_size=None):
        """
        Changes some of the settings for the Button Element. Must call `Window.Read` or `Window.Finalize` prior

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param text:                  sets button text
        :type text:                   (str)
        :param button_color:          Color of button. default is from theme or the window. Easy to remember which is which if you say "ON" between colors. "red" on "green". Normally a tuple, but can be a simplified-button-color-string "foreground on background". Can be a single color if want to set only the background.
        :type button_color:           (str, str) | str
        :param disabled:              True/False to enable/disable at the GUI level. Use BUTTON_DISABLED_MEANS_IGNORE to ignore clicks (won't change colors)
        :type disabled:               (bool | str)
        :param image_source:          Image to place on button. Use INSTEAD of the image_filename and image_data. Unifies these into 1 easier to use parm
        :type image_source:           (str | bytes)
        :param image_data:            Raw or Base64 representation of the image to put on button. Choose either filename or data
        :type image_data:             bytes | str
        :param image_filename:        image filename if there is a button image. GIFs and PNGs only.
        :type image_filename:         (str)
        :param disabled_button_color: colors to use when button is disabled (text, background). Use None for a color if don't want to change. Only ttk buttons support both text and background colors. tk buttons only support changing text color
        :type disabled_button_color:  (str, str)
        :param visible:               control visibility of element
        :type visible:                (bool)
        :param image_subsample:       amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc
        :type image_subsample:        (int)
        :param image_zoom:            amount to increase the size of the image. 2=twice size, 3=3 times, etc
        :type image_zoom:             (int)
        :param image_size:            Size of the image in pixels (width, height)
        :type image_size:             (int, int)
        """

        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Button.update - The window was closed')
            return

        if image_source is not None:
            if isinstance(image_source, bytes):
                image_data = image_source
            elif isinstance(image_source, str):
                image_filename = image_source

        if self.UseTtkButtons:
            style_name = self.ttk_style_name  # created when made initial window (in the pack)
            # style_name = str(self.Key) + 'custombutton.TButton'
            button_style = ttk.Style()
        if text is not None:
            btext = text
            if DEFAULT_USE_BUTTON_SHORTCUTS is True:
                pos = btext.find(MENU_SHORTCUT_CHARACTER)
                if pos != -1:
                    if pos < len(MENU_SHORTCUT_CHARACTER) or btext[pos - len(MENU_SHORTCUT_CHARACTER)] != "\\":
                        btext = btext[:pos] + btext[pos + len(MENU_SHORTCUT_CHARACTER):]
                    else:
                        btext = btext.replace('\\'+MENU_SHORTCUT_CHARACTER, MENU_SHORTCUT_CHARACTER)
                        pos = -1
                if pos != -1:
                    self.TKButton.config(underline=pos)
            self.TKButton.configure(text=btext)
            self.ButtonText = text
        if button_color != (None, None) and button_color != COLOR_SYSTEM_DEFAULT:
            bc = button_color_to_tuple(button_color, self.ButtonColor)
            # if isinstance(button_color, str):
            #     try:
            #         button_color = button_color.split(' on ')
            #     except Exception as e:
            #         print('** Error in formatting your button color **', button_color, e)
            if self.UseTtkButtons:
                if bc[0] not in (None, COLOR_SYSTEM_DEFAULT):
                    button_style.configure(style_name, foreground=bc[0])
                if bc[1] not in (None, COLOR_SYSTEM_DEFAULT):
                    button_style.configure(style_name, background=bc[1])
            else:
                if bc[0] not in (None, COLOR_SYSTEM_DEFAULT):
                    self.TKButton.config(foreground=bc[0], activebackground=bc[0])
                if bc[1] not in (None, COLOR_SYSTEM_DEFAULT):
                    self.TKButton.config(background=bc[1], activeforeground=bc[1])
            self.ButtonColor = bc
        if disabled is True:
            self.TKButton['state'] = 'disabled'
        elif disabled is False:
            self.TKButton['state'] = 'normal'
        elif disabled == BUTTON_DISABLED_MEANS_IGNORE:
            self.TKButton['state'] = 'normal'
        self.Disabled = disabled if disabled is not None else self.Disabled

        if image_data is not None:
            image = tk.PhotoImage(data=image_data)
            if image_subsample:
                image = image.subsample(image_subsample)
            if image_zoom is not None:
                image = image.zoom(int(image_zoom))
            if image_size is not None:
                width, height = image_size
            else:
                width, height = image.width(), image.height()
            if self.UseTtkButtons:
                button_style.configure(style_name, image=image, width=width, height=height)
            else:
                self.TKButton.config(image=image, width=width, height=height)
            self.TKButton.image = image
        if image_filename is not None:
            image = tk.PhotoImage(file=image_filename)
            if image_subsample:
                image = image.subsample(image_subsample)
            if image_zoom is not None:
                image = image.zoom(int(image_zoom))
            if image_size is not None:
                width, height = image_size
            else:
                width, height = image.width(), image.height()
            if self.UseTtkButtons:
                button_style.configure(style_name, image=image, width=width, height=height)
            else:
                self.TKButton.config(highlightthickness=0, image=image, width=width, height=height)
            self.TKButton.image = image
        if visible is False:
            self._pack_forget_save_settings()
        elif visible is True:
            self._pack_restore_settings()
        if disabled_button_color != (None, None) and disabled_button_color != COLOR_SYSTEM_DEFAULT:
            if not self.UseTtkButtons:
                self.TKButton['disabledforeground'] = disabled_button_color[0]
            else:
                if disabled_button_color[0] is not None:
                    button_style.map(style_name, foreground=[('disabled', disabled_button_color[0])])
                if disabled_button_color[1] is not None:
                    button_style.map(style_name, background=[('disabled', disabled_button_color[1])])
            self.DisabledButtonColor = (disabled_button_color[0] if disabled_button_color[0] is not None else self.DisabledButtonColor[0],
                                        disabled_button_color[1] if disabled_button_color[1] is not None else self.DisabledButtonColor[1])

        if visible is not None:
            self._visible = visible

    def get_text(self):
        """
        Returns the current text shown on a button

        :return: The text currently displayed on the button
        :rtype:  (str)
        """
        return self.ButtonText

    def click(self):
        """
        Generates a click of the button as if the user clicked the button
        Calls the tkinter invoke method for the button
        """
        try:
            self.TKButton.invoke()
        except:
            print('Exception clicking button')

    Click = click
    GetText = get_text
    Update = update


# -------------------------  Button lazy functions  ------------------------- #
B = Button
Btn = Button


# ---------------------------------------------------------------------- #
#                           ButtonMenu Class                             #
# ---------------------------------------------------------------------- #
class ButtonMenu(Element):
    """
    The Button Menu Element.  Creates a button that when clicked will show a menu similar to right click menu
    """

    def __init__(self, button_text, menu_def, tooltip=None, disabled=False, image_source=None,
                 image_filename=None, image_data=None, image_size=(None, None), image_subsample=None, image_zoom=None, border_width=None,
                 size=(None, None), s=(None, None), auto_size_button=None, button_color=None, text_color=None, background_color=None, disabled_text_color=None,
                 font=None, item_font=None, pad=None, p=None, expand_x=False, expand_y=False, key=None, k=None, tearoff=False, visible=True,
                 metadata=None):
        """
        :param button_text:               Text to be displayed on the button
        :type button_text:                (str)
        :param menu_def:                  A list of lists of Menu items to show when this element is clicked. See docs for format as they are the same for all menu types
        :type menu_def:                   List[List[str]]
        :param tooltip:                   text, that will appear when mouse hovers over the element
        :type tooltip:                    (str)
        :param disabled:                  If True button will be created disabled
        :type disabled:                   (bool)
        :param image_source:              Image to place on button. Use INSTEAD of the image_filename and image_data. Unifies these into 1 easier to use parm
        :type image_source:               (str | bytes)
        :param image_filename:            image filename if there is a button image. GIFs and PNGs only.
        :type image_filename:             (str)
        :param image_data:                Raw or Base64 representation of the image to put on button. Choose either filename or data
        :type image_data:                 bytes | str
        :param image_size:                Size of the image in pixels (width, height)
        :type image_size:                 (int, int)
        :param image_subsample:           amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc
        :type image_subsample:            (int)
        :param image_zoom:                amount to increase the size of the image. 2=twice size, 3=3 times, etc
        :type image_zoom:                 (int)
        :param border_width:              width of border around button in pixels
        :type border_width:               (int)
        :param size:                      (w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1
        :type size:                       (int, int)  | (None, None) | int
        :param s:                         Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                          (int, int)  | (None, None) | int
        :param auto_size_button:          if True the button size is sized to fit the text
        :type auto_size_button:           (bool)
        :param button_color:              of button. Easy to remember which is which if you say "ON" between colors. "red" on "green"
        :type button_color:               (str, str) | str
        :param background_color:          color of the background
        :type background_color:           (str)
        :param text_color:                element's text color. Can be in #RRGGBB format or a color name "black"
        :type text_color:                 (str)
        :param disabled_text_color:       color to use for text when item is disabled. Can be in #RRGGBB format or a color name "black"
        :type disabled_text_color:        (str)
        :param font:                      specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:                       (str or (str, int[, str]) or None)
        :param item_font:                 specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike, for the menu items
        :type item_font:                  (str or (str, int[, str]) or None)
        :param pad:                       Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:                        (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                         Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                          (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param expand_x:                  If True the element will automatically expand in the X direction to fill available space
        :type expand_x:                   (bool)
        :param expand_y:                  If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:                   (bool)
        :param key:                       Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element
        :type key:                        str | int | tuple | object
        :param k:                         Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                          str | int | tuple | object
        :param tearoff:                   Determines if menus should allow them to be torn off
        :type tearoff:                    (bool)
        :param visible:                   set visibility state of the element
        :type visible:                    (bool)
        :param metadata:                  User metadata that can be set to ANYTHING
        :type metadata:                   (Any)
        """

        self.MenuDefinition = copy.deepcopy(menu_def)

        self.AutoSizeButton = auto_size_button
        self.ButtonText = button_text
        self.ButtonColor = button_color_to_tuple(button_color)
        # self.TextColor = self.ButtonColor[0]
        # self.BackgroundColor = self.ButtonColor[1]
        self.BackgroundColor = background_color if background_color is not None else theme_input_background_color()
        self.TextColor = text_color if text_color is not None else theme_input_text_color()
        self.DisabledTextColor = disabled_text_color if disabled_text_color is not None else COLOR_SYSTEM_DEFAULT
        self.ItemFont = item_font
        self.BorderWidth = border_width if border_width is not None else DEFAULT_BORDER_WIDTH
        if image_source is not None:
            if isinstance(image_source, str):
                image_filename = image_source
            elif isinstance(image_source, bytes):
                image_data = image_source
            else:
                warnings.warn('ButtonMenu element - image_source is not a valid type: {}'.format(type(image_source)), UserWarning)

        self.ImageFilename = image_filename
        self.ImageData = image_data
        self.ImageSize = image_size
        self.ImageSubsample = image_subsample
        self.zoom = int(image_zoom) if image_zoom is not None else None
        self.Disabled = disabled
        self.IsButtonMenu = True
        self.MenuItemChosen = None
        self.Widget = self.TKButtonMenu = None  # type: tk.Menubutton
        self.TKMenu = None  # type: tk.Menu
        self.part_of_custom_menubar = False
        self.custom_menubar_key = None
        # self.temp_size = size if size != (NONE, NONE) else
        key = key if key is not None else k
        sz = size if size != (None, None) else s
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y

        super().__init__(ELEM_TYPE_BUTTONMENU, size=sz, font=font, pad=pad, key=key, tooltip=tooltip,
                         text_color=self.TextColor, background_color=self.BackgroundColor, visible=visible, metadata=metadata)
        self.Tearoff = tearoff

    def _MenuItemChosenCallback(self, item_chosen):  # ButtonMenu Menu Item Chosen Callback
        """
        Not a user callable function.  Called by tkinter when an item is chosen from the menu.

        :param item_chosen: The menu item chosen.
        :type item_chosen:  (str)
        """
        # print('IN MENU ITEM CALLBACK', item_chosen)
        self.MenuItemChosen = item_chosen
        self.ParentForm.LastButtonClicked = self.Key
        self.ParentForm.FormRemainedOpen = True
        # if self.ParentForm.CurrentlyRunningMainloop:
        #     self.ParentForm.TKroot.quit()  # kick the users out of the mainloop
        _exit_mainloop(self.ParentForm)

    def update(self, menu_definition=None, visible=None, image_source=None, image_size=(None, None), image_subsample=None, image_zoom=None, button_text=None, button_color=None):
        """
        Changes some of the settings for the ButtonMenu Element. Must call `Window.Read` or `Window.Finalize` prior

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param menu_definition: (New menu definition (in menu definition format)
        :type menu_definition:  List[List]
        :param visible:         control visibility of element
        :type visible:          (bool)
        :param image_source:    new image if image is to be changed. Can be a filename or a base64 encoded byte-string
        :type image_source:     (str | bytes)
        :param image_size:      Size of the image in pixels (width, height)
        :type image_size:       (int, int)
        :param image_subsample: amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc
        :type image_subsample:  (int)
        :param image_zoom:      amount to increase the size of the image. 2=twice size, 3=3 times, etc
        :type image_zoom:       (int)
        :param button_text:     Text to be shown on the button
        :type button_text:      (str)
        :param button_color:    Normally a tuple, but can be a simplified-button-color-string "foreground on background". Can be a single color if want to set only the background.
        :type button_color:     (str, str) | str
        """

        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in ButtonMenu.update - The window was closed')
            return

        if menu_definition is not None:
            self.MenuDefinition = copy.deepcopy(menu_definition)
            top_menu = self.TKMenu = tk.Menu(self.TKButtonMenu, tearoff=self.Tearoff, font=self.ItemFont, tearoffcommand=self._tearoff_menu_callback)

            if self.BackgroundColor not in (COLOR_SYSTEM_DEFAULT, None):
                top_menu.config(bg=self.BackgroundColor)
            if self.TextColor not in (COLOR_SYSTEM_DEFAULT, None):
                top_menu.config(fg=self.TextColor)
            if self.DisabledTextColor not in (COLOR_SYSTEM_DEFAULT, None):
                top_menu.config(disabledforeground=self.DisabledTextColor)
            if self.ItemFont is not None:
                top_menu.config(font=self.ItemFont)
            AddMenuItem(self.TKMenu, self.MenuDefinition[1], self)
            self.TKButtonMenu.configure(menu=self.TKMenu)
        if image_source is not None:
            filename = data = None
            if image_source is not None:
                if isinstance(image_source, bytes):
                    data = image_source
                elif isinstance(image_source, str):
                    filename = image_source
                else:
                    warnings.warn('ButtonMenu element - image_source is not a valid type: {}'.format(type(image_source)), UserWarning)
            image = None
            if filename is not None:
                image = tk.PhotoImage(file=filename)
                if image_subsample is not None:
                    image = image.subsample(image_subsample)
                if image_zoom is not None:
                    image = image.zoom(int(image_zoom))
            elif data is not None:
                # if type(data) is bytes:
                try:
                    image = tk.PhotoImage(data=data)
                    if image_subsample is not None:
                        image = image.subsample(image_subsample)
                    if image_zoom is not None:
                        image = image.zoom(int(image_zoom))
                except Exception as e:
                    image = data

            if image is not None:
                if type(image) is not bytes:
                    width, height = image_size[0] if image_size[0] is not None else image.width(), image_size[1] if image_size[1] is not None else image.height()
                else:
                    width, height = image_size

                self.TKButtonMenu.config(image=image, compound=tk.CENTER, width=width, height=height)
                self.TKButtonMenu.image = image
        if button_text is not None:
            self.TKButtonMenu.configure(text=button_text)
            self.ButtonText = button_text
        if visible is False:
            self._pack_forget_save_settings()
        elif visible is True:
            self._pack_restore_settings()
        if visible is not None:
            self._visible = visible
        if button_color != (None, None) and button_color != COLOR_SYSTEM_DEFAULT:
            bc = button_color_to_tuple(button_color, self.ButtonColor)
            if bc[0] not in (None, COLOR_SYSTEM_DEFAULT):
                self.TKButtonMenu.config(foreground=bc[0], activeforeground=bc[0])
            if bc[1] not in (None, COLOR_SYSTEM_DEFAULT):
                self.TKButtonMenu.config(background=bc[1], activebackground=bc[1])
            self.ButtonColor = bc

    def click(self):
        """
        Generates a click of the button as if the user clicked the button
        Calls the tkinter invoke method for the button
        """
        try:
            self.TKMenu.invoke(1)
        except:
            print('Exception clicking button')

    Update = update
    Click = click


BMenu = ButtonMenu
BM = ButtonMenu


# ---------------------------------------------------------------------- #
#                           ProgreessBar                                 #
# ---------------------------------------------------------------------- #
class ProgressBar(Element):
    """
    Progress Bar Element - Displays a colored bar that is shaded as progress of some operation is made
    """

    def __init__(self, max_value, orientation=None, size=(None, None), s=(None, None), size_px=(None, None), auto_size_text=None, bar_color=None, style=None, border_width=None,
                 relief=None, key=None, k=None, pad=None, p=None, right_click_menu=None, expand_x=False, expand_y=False, visible=True, metadata=None):
        """
        :param max_value:        max value of progressbar
        :type max_value:         (int)
        :param orientation:      'horizontal' or 'vertical'
        :type orientation:       (str)
        :param size:             Size of the bar.  If horizontal (chars long, pixels wide), vert (chars high, pixels wide). Vert height measured using horizontal chars units.
        :type size:              (int, int) |  (int, None)
        :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                 (int, int)  | (None, None)
        :param size_px:          Size in pixels (length, width). Will be used in place of size parm if specified
        :type size_px:           (int, int) | (None, None)
        :param auto_size_text:   Not sure why this is here
        :type auto_size_text:    (bool)
        :param bar_color:        The 2 colors that make up a progress bar. Either a tuple of 2 strings or a string. Tuple - (bar, background). A string with 1 color changes the background of the bar only. A string with 2 colors separated by "on" like "red on blue" specifies a red bar on a blue background.
        :type bar_color:         (str, str) or str
        :param style:            Progress bar style defined as one of these 'default', 'winnative', 'clam', 'alt', 'classic', 'vista', 'xpnative'
        :type style:             (str)
        :param border_width:     The amount of pixels that go around the outside of the bar
        :type border_width:      (int)
        :param relief:           relief style. Values are same as progress meter relief values.  Can be a constant or a string: `RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID` (Default value = DEFAULT_PROGRESS_BAR_RELIEF)
        :type relief:            (str)
        :param key:              Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element
        :type key:               str | int | tuple | object
        :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                 str | int | tuple | object
        :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:  List[List[ List[str] | str ]]
        :param expand_x:         If True the element will automatically expand in the X direction to fill available space
        :type expand_x:          (bool)
        :param expand_y:         If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:          (bool)
        :param visible:          set visibility state of the element
        :type visible:           (bool)
        :param metadata:         User metadata that can be set to ANYTHING
        :type metadata:          (Any)
        """

        self.MaxValue = max_value
        self.TKProgressBar = None  # type: TKProgressBar
        self.Cancelled = False
        self.NotRunning = True
        self.Orientation = orientation if orientation else DEFAULT_METER_ORIENTATION
        self.RightClickMenu = right_click_menu
        # Progress Bar colors can be a tuple (text, background) or a string with format "bar on background" - examples "red on white" or ("red", "white")
        if bar_color is None:
            bar_color = DEFAULT_PROGRESS_BAR_COLOR
        else:
            bar_color = _simplified_dual_color_to_tuple(bar_color, default=DEFAULT_PROGRESS_BAR_COLOR)

        self.BarColor = bar_color  # should be a tuple at this point
        self.BarStyle = style if style else DEFAULT_TTK_THEME
        self.BorderWidth = border_width if border_width else DEFAULT_PROGRESS_BAR_BORDER_WIDTH
        self.Relief = relief if relief else DEFAULT_PROGRESS_BAR_RELIEF
        self.BarExpired = False
        key = key if key is not None else k
        sz = size if size != (None, None) else s
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y
        self.size_px = size_px

        super().__init__(ELEM_TYPE_PROGRESS_BAR, size=sz, auto_size_text=auto_size_text, key=key, pad=pad,
                         visible=visible, metadata=metadata)

    # returns False if update failed
    def update_bar(self, current_count, max=None):
        """
        DEPRECATED BUT STILL USABLE - has been combined with the normal ProgressBar.update method.
        Change what the bar shows by changing the current count and optionally the max count

        :param current_count: sets the current value
        :type current_count:  (int)
        :param max:           changes the max value
        :type max:            (int)
        """

        if self.ParentForm.TKrootDestroyed:
            return False
        self.TKProgressBar.Update(current_count, max=max)
        try:
            self.ParentForm.TKroot.update()
        except:
            Window._DecrementOpenCount()
            # _my_windows.Decrement()
            return False
        return True

    def update(self, current_count=None, max=None, bar_color=None, visible=None):
        """
        Changes some of the settings for the ProgressBar Element. Must call `Window.Read` or `Window.Finalize` prior
        Now has the ability to modify the count so that the update_bar method is not longer needed separately

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param current_count: sets the current value
        :type current_count:  (int)
        :param max:           changes the max value
        :type max:            (int)
        :param bar_color:     The 2 colors that make up a progress bar. Easy to remember which is which if you say "ON" between colors. "red" on "green".
        :type bar_color:      (str, str) or str
        :param visible:       control visibility of element
        :type visible:        (bool)
        :return:              Returns True if update was OK.  False means something wrong with window or it was closed
        :rtype:               (bool)
        """
        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return False

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in ProgressBar.update - The window was closed')
            return

        if self.ParentForm.TKrootDestroyed:
            return False

        if visible is False:
            self._pack_forget_save_settings()
        elif visible is True:
            self._pack_restore_settings()

        if visible is not None:
            self._visible = visible
        if bar_color is not None:
            bar_color = _simplified_dual_color_to_tuple(bar_color, default=DEFAULT_PROGRESS_BAR_COLOR)
            self.BarColor = bar_color
            style = ttk.Style()
            style.configure(self.ttk_style_name, background=bar_color[0], troughcolor=bar_color[1])
        if current_count is not None:
            self.TKProgressBar.Update(current_count, max=max)

        try:
            self.ParentForm.TKroot.update()
        except:
            # Window._DecrementOpenCount()
            # _my_windows.Decrement()
            return False
        return True

    Update = update
    UpdateBar = update_bar


PBar = ProgressBar
Prog = ProgressBar
Progress = ProgressBar


# ---------------------------------------------------------------------- #
#                           Image                                        #
# ---------------------------------------------------------------------- #
class Image(Element):
    """
    Image Element - show an image in the window. Should be a GIF or a PNG only
    """

    def __init__(self, source=None, filename=None, data=None, background_color=None, size=(None, None), s=(None, None), pad=None, p=None, key=None, k=None, tooltip=None,
                 subsample=None, zoom=None, right_click_menu=None, expand_x=False, expand_y=False, visible=True, enable_events=False, metadata=None):
        """
        :param source:           A filename or a base64 bytes. Will automatically detect the type and fill in filename or data for you.
        :type source:            str | bytes | None
        :param filename:         image filename if there is a button image. GIFs and PNGs only.
        :type filename:          str | None
        :param data:             Raw or Base64 representation of the image to put on button. Choose either filename or data
        :type data:              bytes | str | None
        :param background_color: color of background
        :type background_color:
        :param size:             (width, height) size of image in pixels
        :type size:              (int, int)
        :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                 (int, int)  | (None, None) | int
        :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param key:              Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element
        :type key:               str | int | tuple | object
        :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                 str | int | tuple | object
        :param tooltip:          text, that will appear when mouse hovers over the element
        :type tooltip:           (str)
        :param subsample:        amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc
        :type subsample:         (int)
        :param zoom:             amount to increase the size of the image.
        :type zoom:              (int)
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:  List[List[ List[str] | str ]]
        :param expand_x:         If True the element will automatically expand in the X direction to fill available space
        :type expand_x:          (bool)
        :param expand_y:         If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:          (bool)
        :param visible:          set visibility state of the element
        :type visible:           (bool)
        :param enable_events:    Turns on the element specific events. For an Image element, the event is "image clicked"
        :type enable_events:     (bool)
        :param metadata:         User metadata that can be set to ANYTHING
        :type metadata:          (Any)
        """

        if source is not None:
            if isinstance(source, bytes):
                data = source
            elif isinstance(source, str):
                filename = source
            else:
                warnings.warn('Image element - source is not a valid type: {}'.format(type(source)), UserWarning)

        self.Filename = filename
        self.Data = data
        self.Widget = self.tktext_label = None  # type: tk.Label
        self.BackgroundColor = background_color
        if data is None and filename is None:
            self.Filename = ''
        self.EnableEvents = enable_events
        self.RightClickMenu = right_click_menu
        self.AnimatedFrames = None
        self.CurrentFrameNumber = 0
        self.TotalAnimatedFrames = 0
        self.LastFrameTime = 0
        self.ImageSubsample = subsample
        self.zoom = int(zoom) if zoom is not None else None
        self.frame_num = 0
        self.Source = filename if filename is not None else data
        key = key if key is not None else k
        sz = size if size != (None, None) else s
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y

        super().__init__(ELEM_TYPE_IMAGE, size=sz, background_color=background_color, pad=pad, key=key,
                         tooltip=tooltip, visible=visible, metadata=metadata)
        return

    def update(self, source=None, filename=None, data=None, size=(None, None), subsample=None, zoom=None, visible=None):
        """
        Changes some of the settings for the Image Element. Must call `Window.Read` or `Window.Finalize` prior.
        To clear an image that's been displayed, call with NONE of the options set.  A blank update call will
        delete the previously shown image.

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param source:   A filename or a base64 bytes. Will automatically detect the type and fill in filename or data for you.
        :type source:    str | bytes | None
        :param filename: filename to the new image to display.
        :type filename:  (str)
        :param data:     Base64 encoded string OR a tk.PhotoImage object
        :type data:      str | tkPhotoImage
        :param size:     (width, height) size of image in pixels
        :type size:      Tuple[int,int]
        :param subsample: amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc
        :type subsample: (int)
        :param zoom:     amount to increase the size of the image
        :type zoom:      (int)
        :param visible:  control visibility of element
        :type visible:   (bool)
        """

        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Image.update - The window was closed')
            return

        if source is not None:
            if isinstance(source, bytes):
                data = source
            elif isinstance(source, str):
                filename = source
            else:
                warnings.warn('Image element - source is not a valid type: {}'.format(type(source)), UserWarning)

        image = None
        if filename is not None:
            try:
                image = tk.PhotoImage(file=filename)
                if subsample is not None:
                    image = image.subsample(subsample)
                if zoom is not None:
                    image = image.zoom(int(zoom))
            except Exception as e:
                _error_popup_with_traceback('Exception updating Image element', e)

        elif data is not None:
            # if type(data) is bytes:
            try:
                image = tk.PhotoImage(data=data)
                if subsample is not None:
                    image = image.subsample(subsample)
                if zoom is not None:
                    image = image.zoom(int(zoom))
            except Exception as e:
                image = data
                # return  # an error likely means the window has closed so exit

        if image is not None:
            self.tktext_label.configure(image='')  # clear previous image
            if self.tktext_label.image is not None:
                del self.tktext_label.image
            if type(image) is not bytes:
                width, height = size[0] if size[0] is not None else image.width(), size[1] if size[1] is not None else image.height()
            else:
                width, height = size
            try:  # sometimes crashes if user closed with X
                self.tktext_label.configure(image=image, width=width, height=height)
            except Exception as e:
                _error_popup_with_traceback('Exception updating Image element', e)
            self.tktext_label.image = image
        if visible is False:
            self._pack_forget_save_settings()
        elif visible is True:
            self._pack_restore_settings()

        # if everything is set to None, then delete the image
        if filename is None and image is None and visible is None and size == (None, None):
            # Using a try because the image may have been previously deleted and don't want an error if that's happened
            try:
                self.tktext_label.configure(image='', width=1, height=1, bd=0)
                self.tktext_label.image = None
            except:
                pass

        if visible is not None:
            self._visible = visible

    def update_animation(self, source, time_between_frames=0):
        """
        Show an Animated GIF. Call the function as often as you like. The function will determine when to show the next frame and will automatically advance to the next frame at the right time.
        NOTE - does NOT perform a sleep call to delay
        :param source:              Filename or Base64 encoded string containing Animated GIF
        :type source:               str | bytes | None
        :param time_between_frames: Number of milliseconds to wait between showing frames
        :type time_between_frames:  (int)
        :return:                    True if worked OK, False if out of frames, None is window was closed
        :rtype:                     True | False | None
        """

        if self.Source != source:
            self.AnimatedFrames = None
            self.Source = source

        done = False

        if self.AnimatedFrames is None:
            self.TotalAnimatedFrames = 0
            self.AnimatedFrames = []
            # Load up to 1000 frames of animation.  stops when a bad frame is returns by tkinter
            for i in range(1000):
                if type(source) is not bytes:
                    try:
                        self.AnimatedFrames.append(tk.PhotoImage(file=source, format='gif -index %i' % (i)))
                    except Exception as e:
                        break
                else:
                    try:
                        self.AnimatedFrames.append(tk.PhotoImage(data=source, format='gif -index %i' % (i)))
                    except Exception as e:
                        break
            self.TotalAnimatedFrames = len(self.AnimatedFrames)
            self.LastFrameTime = time.time()
            self.CurrentFrameNumber = -1  # start at -1 because it is incremented before every frame is shown
        # show the frame

        now = time.time()

        if time_between_frames:
            if self.CurrentFrameNumber+1 == self.TotalAnimatedFrames:
                done = True
            if (now - self.LastFrameTime) * 1000 > time_between_frames:
                self.LastFrameTime = now
                self.CurrentFrameNumber = (self.CurrentFrameNumber + 1) % self.TotalAnimatedFrames
            else:  # don't reshow the frame again if not time for new frame
                return True
        else:
            self.CurrentFrameNumber = (self.CurrentFrameNumber + 1) % self.TotalAnimatedFrames
        image = self.AnimatedFrames[self.CurrentFrameNumber]
        try:  # needed in case the window was closed with an "X"
            self.tktext_label.configure(image=image, width=image.width(), heigh=image.height())
        except Exception as e:
            print('Exception in update_animation', e)
            done = None
        return not done


    def update_animation_no_buffering(self, source, time_between_frames=0):
        """
        Show an Animated GIF. Call the function as often as you like. The function will determine when to show the next frame and will automatically advance to the next frame at the right time.
        NOTE - does NOT perform a sleep call to delay

        :param source:              Filename or Base64 encoded string containing Animated GIF
        :type source:               str | bytes
        :param time_between_frames: Number of milliseconds to wait between showing frames
        :type time_between_frames:  (int)
        :return:                    True if worked OK, False if out of frames, None is window was closed
        :rtype:                     True | False | None
        """

        if self.Source != source:
            self.AnimatedFrames = None
            self.Source = source
            self.frame_num = 0

        now = time.time()

        if time_between_frames:
            if (now - self.LastFrameTime) * 1000 > time_between_frames:
                self.LastFrameTime = now
            else:  # don't reshow the frame again if not time for new frame
                return True

        # read a frame
        done = False
        while True:
            if type(source) is not bytes:
                try:
                    self.image = tk.PhotoImage(file=source, format='gif -index %i' % (self.frame_num))
                    self.frame_num += 1
                except Exception as e:
                    self.frame_num = 0
                    done = True
            else:
                try:
                    self.image = tk.PhotoImage(data=source, format='gif -index %i' % (self.frame_num))
                    self.frame_num += 1
                except:
                    self.frame_num = 0
                    done = True

            if self.frame_num:
                break

        try:  # needed in case the window was closed with an "X"
            self.tktext_label.configure(image=self.image, width=self.image.width(), heigh=self.image.height())
        except:
            done = None
        return not done

    Update = update
    UpdateAnimation = update_animation


Im = Image


# ---------------------------------------------------------------------- #
#                           Canvas                                       #
# ---------------------------------------------------------------------- #
class Canvas(Element):

    def __init__(self, canvas=None, background_color=None, size=(None, None), s=(None, None), pad=None, p=None, key=None, k=None, tooltip=None,
                 right_click_menu=None, expand_x=False, expand_y=False, visible=True, border_width=0, metadata=None):
        """
        :param canvas:           Your own tk.Canvas if you already created it. Leave blank to create a Canvas
        :type canvas:            (tk.Canvas)
        :param background_color: color of background
        :type background_color:  (str)
        :param size:             (width in char, height in rows) size in pixels to make canvas
        :type size:              (int,int) | (None, None)
        :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                 (int, int)  | (None, None) | int
        :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param key:              Used with window.find_element and with return values to uniquely identify this element
        :type key:               str | int | tuple | object
        :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                 str | int | tuple | object
        :param tooltip:          text, that will appear when mouse hovers over the element
        :type tooltip:           (str)
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:  List[List[ List[str] | str ]]
        :param expand_x:         If True the element will automatically expand in the X direction to fill available space
        :type expand_x:          (bool)
        :param expand_y:         If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:          (bool)
        :param visible:          set visibility state of the element
        :type visible:           (bool)
        :param border_width:     width of border around element in pixels. Not normally used with Canvas element
        :type border_width:      (int)
        :param metadata:         User metadata that can be set to ANYTHING
        :type metadata:          (Any)
        """

        self.BackgroundColor = background_color if background_color is not None else DEFAULT_BACKGROUND_COLOR
        self._TKCanvas = self.Widget = canvas
        self.RightClickMenu = right_click_menu
        self.BorderWidth = border_width
        key = key if key is not None else k
        sz = size if size != (None, None) else s
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y

        super().__init__(ELEM_TYPE_CANVAS, background_color=background_color, size=sz, pad=pad, key=key,
                         tooltip=tooltip, visible=visible, metadata=metadata)
        return

    def update(self, background_color=None, visible=None):
        """

        :param background_color: color of background
        :type background_color:  (str)
        :param visible:          set visibility state of the element
        :type visible:           (bool)
        """

        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Canvas.update - The window was closed')
            return

        if background_color not in (None, COLOR_SYSTEM_DEFAULT):
            self._TKCanvas.configure(background=background_color)
        if visible is False:
            self._pack_forget_save_settings()
        elif visible is True:
            self._pack_restore_settings()
        if visible is not None:
            self._visible = visible

    @property
    def tk_canvas(self):
        """
        Returns the underlying tkiner Canvas widget

        :return: The tkinter canvas widget
        :rtype:  (tk.Canvas)
        """
        if self._TKCanvas is None:
            print('*** Did you forget to call Finalize()? Your code should look something like: ***')
            print('*** window = sg.Window("My Form", layout, finalize=True) ***')
        return self._TKCanvas

    TKCanvas = tk_canvas


# ---------------------------------------------------------------------- #
#                           Graph                                        #
# ---------------------------------------------------------------------- #
class Graph(Element):
    """
    Creates an area for you to draw on.  The MAGICAL property this Element has is that you interact
    with the element using your own coordinate system.  This is an important point!!  YOU define where the location
    is for (0,0).  Want (0,0) to be in the middle of the graph like a math 4-quadrant graph?  No problem!  Set your
    lower left corner to be (-100,-100) and your upper right to be (100,100) and you've got yourself a graph with
    (0,0) at the center.
    One of THE coolest of the Elements.
    You can also use float values. To do so, be sure and set the float_values parameter.
    Mouse click and drag events are possible and return the (x,y) coordinates of the mouse
    Drawing primitives return an "id" that is referenced when you want to operation on that item (e.g. to erase it)
    """

    def __init__(self, canvas_size, graph_bottom_left, graph_top_right, background_color=None, pad=None, p=None,
                 change_submits=False, drag_submits=False, enable_events=False, motion_events=False, key=None, k=None, tooltip=None,
                 right_click_menu=None, expand_x=False, expand_y=False, visible=True, float_values=False, border_width=0, metadata=None):
        """
        :param canvas_size:       size of the canvas area in pixels
        :type canvas_size:        (int, int)
        :param graph_bottom_left: (x,y) The bottoms left corner of your coordinate system
        :type graph_bottom_left:  (int, int)
        :param graph_top_right:   (x,y) The top right corner of  your coordinate system
        :type graph_top_right:    (int, int)
        :param background_color:  background color of the drawing area
        :type background_color:   (str)
        :param pad:               Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:                (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                 Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                  (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param change_submits:    * DEPRICATED DO NOT USE. Use `enable_events` instead
        :type change_submits:     (bool)
        :param drag_submits:      if True and Events are enabled for the Graph, will report Events any time the mouse moves while button down.  When the mouse button is released, you'll get an event = graph key + '+UP' (if key is a string.. if not a string, it'll be made into a tuple)
        :type drag_submits:       (bool)
        :param enable_events:     If True then clicks on the Graph are immediately reported as an event. Use this instead of change_submits
        :type enable_events:      (bool)
        :param motion_events:     If True then if no button is down and the mouse is moved, an event is generated with key = graph key + '+MOVE' (if key is a string, it not a string then a tuple is returned)
        :type motion_events:      (bool)
        :param key:               Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key:                str | int | tuple | object
        :param k:                 Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                  str | int | tuple | object
        :param tooltip:           text, that will appear when mouse hovers over the element
        :type tooltip:            (str)
        :param right_click_menu:  A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:   List[List[ List[str] | str ]]
        :param expand_x:          If True the element will automatically expand in the X direction to fill available space
        :type expand_x:           (bool)
        :param expand_y:          If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:           (bool)
        :param visible:           set visibility state of the element (Default = True)
        :type visible:            (bool)
        :param float_values:      If True x,y coordinates are returned as floats, not ints
        :type float_values:       (bool)
        :param border_width:      width of border around element in pixels. Not normally used for Graph Elements
        :type border_width:       (int)
        :param metadata:          User metadata that can be set to ANYTHING
        :type metadata:           (Any)
        """

        self.CanvasSize = canvas_size
        self.BottomLeft = graph_bottom_left
        self.TopRight = graph_top_right
        # self._TKCanvas = None               # type: tk.Canvas
        self._TKCanvas2 = self.Widget = None  # type: tk.Canvas
        self.ChangeSubmits = change_submits or enable_events
        self.DragSubmits = drag_submits
        self.ClickPosition = (None, None)
        self.MouseButtonDown = False
        self.Images = {}
        self.RightClickMenu = right_click_menu
        self.FloatValues = float_values
        self.BorderWidth = border_width
        key = key if key is not None else k
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y
        self.motion_events = motion_events

        super().__init__(ELEM_TYPE_GRAPH, background_color=background_color, size=canvas_size, pad=pad, key=key,
                         tooltip=tooltip, visible=visible, metadata=metadata)
        return

    def _convert_xy_to_canvas_xy(self, x_in, y_in):
        """
        Not user callable.  Used to convert user's coordinates into the ones used by tkinter
        :param x_in: The x coordinate to convert
        :type x_in:  int | float
        :param y_in: The y coordinate to convert
        :type y_in:  int | float
        :return:     (int, int) The converted canvas coordinates
        :rtype:      (int, int)
        """
        if None in (x_in, y_in):
            return None, None
        try:
            scale_x = (self.CanvasSize[0] - 0) / (self.TopRight[0] - self.BottomLeft[0])
            scale_y = (0 - self.CanvasSize[1]) / (self.TopRight[1] - self.BottomLeft[1])
        except:
            scale_x = scale_y = 0

        new_x = 0 + scale_x * (x_in - self.BottomLeft[0])
        new_y = self.CanvasSize[1] + scale_y * (y_in - self.BottomLeft[1])
        return new_x, new_y

    def _convert_canvas_xy_to_xy(self, x_in, y_in):
        """
        Not user callable.  Used to convert tkinter Canvas coords into user's coordinates

        :param x_in: The x coordinate in canvas coordinates
        :type x_in:  (int)
        :param y_in: (int) The y coordinate in canvas coordinates
        :type y_in:
        :return:     The converted USER coordinates
        :rtype:      (int, int) | Tuple[float, float]
        """
        if None in (x_in, y_in):
            return None, None
        scale_x = (self.CanvasSize[0] - 0) / (self.TopRight[0] - self.BottomLeft[0])
        scale_y = (0 - self.CanvasSize[1]) / (self.TopRight[1] - self.BottomLeft[1])

        new_x = x_in / scale_x + self.BottomLeft[0]
        new_y = (y_in - self.CanvasSize[1]) / scale_y + self.BottomLeft[1]
        if self.FloatValues:
            return new_x, new_y
        else:
            return floor(new_x), floor(new_y)

    def draw_line(self, point_from, point_to, color='black', width=1):
        """
        Draws a line from one point to another point using USER'S coordinates. Can set the color and width of line
        :param point_from: Starting point for line
        :type point_from:  (int, int) | Tuple[float, float]
        :param point_to:   Ending point for line
        :type point_to:    (int, int) | Tuple[float, float]
        :param color:      Color of the line
        :type color:       (str)
        :param width:      width of line in pixels
        :type width:       (int)
        :return:           id returned from tktiner or None if user closed the window. id is used when you
        :rtype:            int | None
        """
        if point_from == (None, None):
            return
        converted_point_from = self._convert_xy_to_canvas_xy(point_from[0], point_from[1])
        converted_point_to = self._convert_xy_to_canvas_xy(point_to[0], point_to[1])
        if self._TKCanvas2 is None:
            print('*** WARNING - The Graph element has not been finalized and cannot be drawn upon ***')
            print('Call Window.Finalize() prior to this operation')
            return None
        try:  # in case window was closed with an X
            id = self._TKCanvas2.create_line(converted_point_from, converted_point_to, width=width, fill=color)
        except:
            id = None
        return id

    def draw_lines(self, points, color='black', width=1):
        """
        Draw a series of lines given list of points

        :param points: list of points that define the polygon
        :type points:  List[(int, int) | Tuple[float, float]]
        :param color:  Color of the line
        :type color:   (str)
        :param width:  width of line in pixels
        :type width:   (int)
        :return:       id returned from tktiner or None if user closed the window. id is used when you
        :rtype:        int | None
        """
        converted_points = [self._convert_xy_to_canvas_xy(point[0], point[1]) for point in points]

        try:  # in case window was closed with an X
            id = self._TKCanvas2.create_line(*converted_points, width=width, fill=color)
        except:
            if self._TKCanvas2 is None:
                print('*** WARNING - The Graph element has not been finalized and cannot be drawn upon ***')
                print('Call Window.Finalize() prior to this operation')
            id = None
        return id

    def draw_point(self, point, size=2, color='black'):
        """
        Draws a "dot" at the point you specify using the USER'S coordinate system
        :param point: Center location using USER'S coordinate system
        :type point:  (int, int) | Tuple[float, float]
        :param size:  Radius? (Or is it the diameter?) in user's coordinate values.
        :type size:   int | float
        :param color: color of the point to draw
        :type color:  (str)
        :return:      id returned from tkinter that you'll need if you want to manipulate the point
        :rtype:       int | None
        """
        if point == (None, None):
            return
        converted_point = self._convert_xy_to_canvas_xy(point[0], point[1])
        size_converted = self._convert_xy_to_canvas_xy(point[0] + size, point[1])
        size = size_converted[0] - converted_point[0]
        if self._TKCanvas2 is None:
            print('*** WARNING - The Graph element has not been finalized and cannot be drawn upon ***')
            print('Call Window.Finalize() prior to this operation')
            return None
        try:  # needed in case window was closed with an X
            point1 = converted_point[0] - size // 2, converted_point[1] - size // 2
            point2 = converted_point[0] + size // 2, converted_point[1] + size // 2
            id = self._TKCanvas2.create_oval(point1[0], point1[1],
                                             point2[0], point2[1],
                                             width=0,
                                             fill=color,
                                             outline=color)
        except:
            id = None
        return id

    def draw_circle(self, center_location, radius, fill_color=None, line_color='black', line_width=1):
        """
        Draws a circle, cenetered at the location provided.  Can set the fill and outline colors
        :param center_location: Center location using USER'S coordinate system
        :type center_location:  (int, int) | Tuple[float, float]
        :param radius:          Radius in user's coordinate values.
        :type radius:           int | float
        :param fill_color:      color of the point to draw
        :type fill_color:       (str)
        :param line_color:      color of the outer line that goes around the circle (sorry, can't set thickness)
        :type line_color:       (str)
        :param line_width:      width of the line around the circle, the outline, in pixels
        :type line_width:       (int)
        :return:                id returned from tkinter that you'll need if you want to manipulate the circle
        :rtype:                 int | None
        """
        if center_location == (None, None):
            return
        converted_point = self._convert_xy_to_canvas_xy(center_location[0], center_location[1])
        radius_converted = self._convert_xy_to_canvas_xy(center_location[0] + radius, center_location[1])
        radius = radius_converted[0] - converted_point[0]
        # radius = radius_converted[1]-5
        if self._TKCanvas2 is None:
            print('*** WARNING - The Graph element has not been finalized and cannot be drawn upon ***')
            print('Call Window.Finalize() prior to this operation')
            return None
        # print('Oval parms', int(converted_point[0]) - int(radius), int(converted_point[1]) - int(radius),
        #                                      int(converted_point[0]) + int(radius), int(converted_point[1]) + int(radius))
        try:  # needed in case the window was closed with an X
            id = self._TKCanvas2.create_oval(int(converted_point[0]) - int(radius), int(converted_point[1]) - int(radius),
                                             int(converted_point[0]) + int(radius), int(converted_point[1]) + int(radius), fill=fill_color,
                                             outline=line_color, width=line_width)
        except:
            id = None
        return id

    def draw_oval(self, top_left, bottom_right, fill_color=None, line_color=None, line_width=1):
        """
        Draws an oval based on coordinates in user coordinate system. Provide the location of a "bounding rectangle"
        :param top_left:     the top left point of bounding rectangle
        :type top_left:      (int, int) | Tuple[float, float]
        :param bottom_right: the bottom right point of bounding rectangle
        :type bottom_right:  (int, int) | Tuple[float, float]
        :param fill_color:   color of the interrior
        :type fill_color:    (str)
        :param line_color:   color of outline of oval
        :type line_color:    (str)
        :param line_width:   width of the line around the oval, the outline, in pixels
        :type line_width:    (int)
        :return:             id returned from tkinter that you'll need if you want to manipulate the oval
        :rtype:              int | None
        """
        converted_top_left = self._convert_xy_to_canvas_xy(top_left[0], top_left[1])
        converted_bottom_right = self._convert_xy_to_canvas_xy(bottom_right[0], bottom_right[1])
        if self._TKCanvas2 is None:
            print('*** WARNING - The Graph element has not been finalized and cannot be drawn upon ***')
            print('Call Window.Finalize() prior to this operation')
            return None
        try:  # in case windows close with X
            id = self._TKCanvas2.create_oval(converted_top_left[0], converted_top_left[1], converted_bottom_right[0],
                                             converted_bottom_right[1], fill=fill_color, outline=line_color, width=line_width)
        except:
            id = None

        return id

    def draw_arc(self, top_left, bottom_right, extent, start_angle, style=None, arc_color='black', line_width=1, fill_color=None):
        """
        Draws different types of arcs.  Uses a "bounding box" to define location
        :param top_left:     the top left point of bounding rectangle
        :type top_left:      (int, int) | Tuple[float, float]
        :param bottom_right: the bottom right point of bounding rectangle
        :type bottom_right:  (int, int) | Tuple[float, float]
        :param extent:       Andle to end drawing. Used in conjunction with start_angle
        :type extent:        (float)
        :param start_angle:  Angle to begin drawing. Used in conjunction with extent
        :type start_angle:   (float)
        :param style:        Valid choices are One of these Style strings- 'pieslice', 'chord', 'arc', 'first', 'last', 'butt', 'projecting', 'round', 'bevel', 'miter'
        :type style:         (str)
        :param arc_color:    color to draw arc with
        :type arc_color:     (str)
        :param fill_color:   color to fill the area
        :type fill_color:    (str)
        :return:             id returned from tkinter that you'll need if you want to manipulate the arc
        :rtype:              int | None
        """
        converted_top_left = self._convert_xy_to_canvas_xy(top_left[0], top_left[1])
        converted_bottom_right = self._convert_xy_to_canvas_xy(bottom_right[0], bottom_right[1])
        tkstyle = tk.PIESLICE if style is None else style
        if self._TKCanvas2 is None:
            print('*** WARNING - The Graph element has not been finalized and cannot be drawn upon ***')
            print('Call Window.Finalize() prior to this operation')
            return None
        try:  # in case closed with X
            id = self._TKCanvas2.create_arc(converted_top_left[0], converted_top_left[1], converted_bottom_right[0],
                                            converted_bottom_right[1], extent=extent, start=start_angle, style=tkstyle,
                                            outline=arc_color, width=line_width, fill=fill_color)
        except Exception as e:
            print('Error encountered drawing arc.', e)
            id = None
        return id

    def draw_rectangle(self, top_left, bottom_right, fill_color=None, line_color=None, line_width=None):
        """
        Draw a rectangle given 2 points. Can control the line and fill colors

        :param top_left:     the top left point of rectangle
        :type top_left:      (int, int) | Tuple[float, float]
        :param bottom_right: the bottom right point of rectangle
        :type bottom_right:  (int, int) | Tuple[float, float]
        :param fill_color:   color of the interior
        :type fill_color:    (str)
        :param line_color:   color of outline
        :type line_color:    (str)
        :param line_width:   width of the line in pixels
        :type line_width:    (int)
        :return:             int | None id returned from tkinter that you'll need if you want to manipulate the rectangle
        :rtype:              int | None
        """

        converted_top_left = self._convert_xy_to_canvas_xy(top_left[0], top_left[1])
        converted_bottom_right = self._convert_xy_to_canvas_xy(bottom_right[0], bottom_right[1])
        if self._TKCanvas2 is None:
            print('*** WARNING - The Graph element has not been finalized and cannot be drawn upon ***')
            print('Call Window.Finalize() prior to this operation')
            return None
        if line_width is None:
            line_width = 1
        try:  # in case closed with X
            id = self._TKCanvas2.create_rectangle(converted_top_left[0], converted_top_left[1],
                                                  converted_bottom_right[0],
                                                  converted_bottom_right[1], fill=fill_color, outline=line_color, width=line_width)
        except:
            id = None
        return id

    def draw_polygon(self, points, fill_color=None, line_color=None, line_width=None):
        """
        Draw a polygon given list of points

        :param points:     list of points that define the polygon
        :type points:      List[(int, int) | Tuple[float, float]]
        :param fill_color: color of the interior
        :type fill_color:  (str)
        :param line_color: color of outline
        :type line_color:  (str)
        :param line_width: width of the line in pixels
        :type line_width:  (int)
        :return:           id returned from tkinter that you'll need if you want to manipulate the rectangle
        :rtype:            int | None
        """

        converted_points = [self._convert_xy_to_canvas_xy(point[0], point[1]) for point in points]
        if self._TKCanvas2 is None:
            print('*** WARNING - The Graph element has not been finalized and cannot be drawn upon ***')
            print('Call Window.Finalize() prior to this operation')
            return None
        try:  # in case closed with X
            id = self._TKCanvas2.create_polygon(converted_points, fill=fill_color, outline=line_color, width=line_width)
        except:
            id = None
        return id

    def draw_text(self, text, location, color='black', font=None, angle=0, text_location=TEXT_LOCATION_CENTER):
        """
        Draw some text on your graph.  This is how you label graph number lines for example

        :param text:          text to display
        :type text:           (Any)
        :param location:      location to place first letter
        :type location:       (int, int) | Tuple[float, float]
        :param color:         text color
        :type color:          (str)
        :param font:          specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:           (str or (str, int[, str]) or None)
        :param angle:         Angle 0 to 360 to draw the text.  Zero represents horizontal text
        :type angle:          (float)
        :param text_location: "anchor" location for the text. Values start with TEXT_LOCATION_
        :type text_location:  (enum)
        :return:              id returned from tkinter that you'll need if you want to manipulate the text
        :rtype:               int | None
        """
        text = str(text)
        if location == (None, None):
            return
        converted_point = self._convert_xy_to_canvas_xy(location[0], location[1])
        if self._TKCanvas2 is None:
            print('*** WARNING - The Graph element has not been finalized and cannot be drawn upon ***')
            print('Call Window.Finalize() prior to this operation')
            return None
        try:  # in case closed with X
            id = self._TKCanvas2.create_text(converted_point[0], converted_point[1], text=text, font=font, fill=color, angle=angle, anchor=text_location)
        except:
            id = None
        return id

    def draw_image(self, filename=None, data=None, location=(None, None)):
        """
        Places an image onto your canvas.  It's a really important method for this element as it enables so much

        :param filename: if image is in a file, path and filename for the image. (GIF and PNG only!)
        :type filename:  (str)
        :param data:     if image is in Base64 format or raw? format then use instead of filename
        :type data:      str | bytes
        :param location: the (x,y) location to place image's top left corner
        :type location:  (int, int) | Tuple[float, float]
        :return:         id returned from tkinter that you'll need if you want to manipulate the image
        :rtype:          int | None
        """
        if location == (None, None):
            return
        if filename is not None:
            image = tk.PhotoImage(file=filename)
        elif data is not None:
            # if type(data) is bytes:
            try:
                image = tk.PhotoImage(data=data)
            except:
                return None  # an error likely means the window has closed so exit
        converted_point = self._convert_xy_to_canvas_xy(location[0], location[1])
        if self._TKCanvas2 is None:
            print('*** WARNING - The Graph element has not been finalized and cannot be drawn upon ***')
            print('Call Window.Finalize() prior to this operation')
            return None
        try:  # in case closed with X
            id = self._TKCanvas2.create_image(converted_point, image=image, anchor=tk.NW)
            self.Images[id] = image
        except:
            id = None
        return id

    def erase(self):
        """
        Erase the Graph - Removes all figures previously "drawn" using the Graph methods (e.g. DrawText)
        """
        if self._TKCanvas2 is None:
            print('*** WARNING - The Graph element has not been finalized and cannot be drawn upon ***')
            print('Call Window.Finalize() prior to this operation')
            return None
        self.Images = {}
        try:  # in case window was closed with X
            self._TKCanvas2.delete('all')
        except:
            pass

    def delete_figure(self, id):
        """
        Remove from the Graph the figure represented by id. The id is given to you anytime you call a drawing primitive

        :param id: the id returned to you when calling one of the drawing methods
        :type id:  (int)
        """
        try:
            self._TKCanvas2.delete(id)
        except:
            print('DeleteFigure - bad ID {}'.format(id))
        try:
            del self.Images[id]  # in case was an image. If wasn't an image, then will get exception
        except:
            pass

    def update(self, background_color=None, visible=None):
        """
        Changes some of the settings for the Graph Element. Must call `Window.Read` or `Window.Finalize` prior

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param background_color: color of background
        :type background_color:  ???
        :param visible:          control visibility of element
        :type visible:           (bool)
        """
        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Graph.update - The window was closed')
            return

        if background_color is not None and background_color != COLOR_SYSTEM_DEFAULT:
            self._TKCanvas2.configure(background=background_color)

        if visible is False:
            self._pack_forget_save_settings()
        elif visible is True:
            self._pack_restore_settings()

        if visible is not None:
            self._visible = visible

    def move(self, x_direction, y_direction):
        """
        Moves the entire drawing area (the canvas) by some delta from the current position.  Units are indicated in your coordinate system indicated number of ticks in your coordinate system

        :param x_direction: how far to move in the "X" direction in your coordinates
        :type x_direction:  int | float
        :param y_direction: how far to move in the "Y" direction in your coordinates
        :type y_direction:  int | float
        """
        zero_converted = self._convert_xy_to_canvas_xy(0, 0)
        shift_converted = self._convert_xy_to_canvas_xy(x_direction, y_direction)
        shift_amount = (shift_converted[0] - zero_converted[0], shift_converted[1] - zero_converted[1])
        if self._TKCanvas2 is None:
            print('*** WARNING - The Graph element has not been finalized and cannot be drawn upon ***')
            print('Call Window.Finalize() prior to this operation')
            return None
        self._TKCanvas2.move('all', shift_amount[0], shift_amount[1])

    def move_figure(self, figure, x_direction, y_direction):
        """
        Moves a previously drawn figure using a "delta" from current position

        :param figure:      Previously obtained figure-id. These are returned from all Draw methods
        :type figure:       (id)
        :param x_direction: delta to apply to position in the X direction
        :type x_direction:  int | float
        :param y_direction: delta to apply to position in the Y direction
        :type y_direction:  int | float
        """
        zero_converted = self._convert_xy_to_canvas_xy(0, 0)
        shift_converted = self._convert_xy_to_canvas_xy(x_direction, y_direction)
        shift_amount = (shift_converted[0] - zero_converted[0], shift_converted[1] - zero_converted[1])
        if figure is None:
            print('* move_figure warning - your figure is None *')
            return None
        self._TKCanvas2.move(figure, shift_amount[0], shift_amount[1])

    def relocate_figure(self, figure, x, y):
        """
        Move a previously made figure to an arbitrary (x,y) location. This differs from the Move methods because it
        uses absolute coordinates versus relative for Move

        :param figure: Previously obtained figure-id. These are returned from all Draw methods
        :type figure:  (id)
        :param x:      location on X axis (in user coords) to move the upper left corner of the figure
        :type x:       int | float
        :param y:      location on Y axis (in user coords) to move the upper left corner of the figure
        :type y:       int | float
        """

        zero_converted = self._convert_xy_to_canvas_xy(0, 0)
        shift_converted = self._convert_xy_to_canvas_xy(x, y)
        shift_amount = (shift_converted[0] - zero_converted[0], shift_converted[1] - zero_converted[1])
        if figure is None:
            print('*** WARNING - Your figure is None. It most likely means your did not Finalize your Window ***')
            print('Call Window.Finalize() prior to all graph operations')
            return None
        xy = self._TKCanvas2.coords(figure)
        self._TKCanvas2.move(figure, shift_converted[0] - xy[0], shift_converted[1] - xy[1])

    def send_figure_to_back(self, figure):
        """
        Changes Z-order of figures on the Graph.  Sends the indicated figure to the back of all other drawn figures

        :param figure: value returned by tkinter when creating the figure / drawing
        :type figure:  (int)
        """
        self.TKCanvas.tag_lower(figure)  # move figure to the "bottom" of all other figure

    def bring_figure_to_front(self, figure):
        """
        Changes Z-order of figures on the Graph.  Brings the indicated figure to the front of all other drawn figures

        :param figure: value returned by tkinter when creating the figure / drawing
        :type figure:  (int)
        """
        self.TKCanvas.tag_raise(figure)  # move figure to the "top" of all other figures

    def get_figures_at_location(self, location):
        """
        Returns a list of figures located at a particular x,y location within the Graph

        :param location: point to check
        :type location:  (int, int) | Tuple[float, float]
        :return:         a list of previously drawn "Figures" (returned from the drawing primitives)
        :rtype:          List[int]
        """
        x, y = self._convert_xy_to_canvas_xy(location[0], location[1])
        ids = self.TKCanvas.find_overlapping(x, y, x, y)
        return ids

    def get_bounding_box(self, figure):
        """
        Given a figure, returns the upper left and lower right bounding box coordinates

        :param figure: a previously drawing figure
        :type figure:  object
        :return:       upper left x, upper left y, lower right x, lower right y
        :rtype:        Tuple[int, int, int, int] | Tuple[float, float, float, float]
        """
        box = self.TKCanvas.bbox(figure)
        top_left = self._convert_canvas_xy_to_xy(box[0], box[1])
        bottom_right = self._convert_canvas_xy_to_xy(box[2], box[3])
        return top_left, bottom_right

    def change_coordinates(self, graph_bottom_left, graph_top_right):
        """
        Changes the corrdinate system to a new one.  The same 2 points in space are used to define the coorinate
        system - the bottom left and the top right values of your graph.

        :param graph_bottom_left: The bottoms left corner of your coordinate system
        :type graph_bottom_left:  (int, int) (x,y)
        :param graph_top_right:   The top right corner of  your coordinate system
        :type graph_top_right:    (int, int)  (x,y)
        """
        self.BottomLeft = graph_bottom_left
        self.TopRight = graph_top_right

    @property
    def tk_canvas(self):
        """
        Returns the underlying tkiner Canvas widget

        :return: The tkinter canvas widget
        :rtype:  (tk.Canvas)
        """
        if self._TKCanvas2 is None:
            print('*** Did you forget to call Finalize()? Your code should look something like: ***')
            print('*** form = sg.Window("My Form").Layout(layout).Finalize() ***')
        return self._TKCanvas2

    # button release callback
    def button_release_call_back(self, event):
        """
        Not a user callable method.  Used to get Graph click events. Called by tkinter when button is released

        :param event: (event) event info from tkinter. Note not used in this method
        :type event:
        """
        if not self.DragSubmits:
            return  # only report mouse up for drag operations
        self.ClickPosition = self._convert_canvas_xy_to_xy(event.x, event.y)
        self.ParentForm.LastButtonClickedWasRealtime = False
        if self.Key is not None:
            self.ParentForm.LastButtonClicked = self.Key
        else:
            self.ParentForm.LastButtonClicked = '__GRAPH__'  # need to put something rather than None
        _exit_mainloop(self.ParentForm)
        if isinstance(self.ParentForm.LastButtonClicked, str):
            self.ParentForm.LastButtonClicked = self.ParentForm.LastButtonClicked + '+UP'
        else:
            self.ParentForm.LastButtonClicked = (self.ParentForm.LastButtonClicked, '+UP')
        self.MouseButtonDown = False

    # button callback
    def button_press_call_back(self, event):
        """
        Not a user callable method.  Used to get Graph click events. Called by tkinter when button is released

        :param event: (event) event info from tkinter. Contains the x and y coordinates of a click
        :type event:
        """

        self.ClickPosition = self._convert_canvas_xy_to_xy(event.x, event.y)
        self.ParentForm.LastButtonClickedWasRealtime = self.DragSubmits
        if self.Key is not None:
            self.ParentForm.LastButtonClicked = self.Key
        else:
            self.ParentForm.LastButtonClicked = '__GRAPH__'  # need to put something rather than None
        # if self.ParentForm.CurrentlyRunningMainloop:
        #     self.ParentForm.TKroot.quit()  # kick out of loop if read was called
        _exit_mainloop(self.ParentForm)
        self.MouseButtonDown = True

    def _update_position_for_returned_values(self, event):
        """
        Updates the variable that's used when the values dictionary is returned from a window read.

        Not called by the user.  It's called from another method/function that tkinter calledback

        :param event: (event) event info from tkinter. Contains the x and y coordinates of a click
        :type event:
        """
        """
        Updates the variable that's used when the values dictionary is returned from a window read.

        Not called by the user.  It's called from another method/function that tkinter calledback

        :param event: (event) event info from tkinter. Contains the x and y coordinates of a click
        :type event:
        """

        self.ClickPosition = self._convert_canvas_xy_to_xy(event.x, event.y)

    # button callback
    def motion_call_back(self, event):
        """
        Not a user callable method.  Used to get Graph mouse motion events. Called by tkinter when mouse moved

        :param event: (event) event info from tkinter. Contains the x and y coordinates of a mouse
        :type event:
        """

        if not self.MouseButtonDown and not self.motion_events:
            return
        self.ClickPosition = self._convert_canvas_xy_to_xy(event.x, event.y)
        self.ParentForm.LastButtonClickedWasRealtime = self.DragSubmits
        if self.Key is not None:
            self.ParentForm.LastButtonClicked = self.Key
        else:
            self.ParentForm.LastButtonClicked = '__GRAPH__'  # need to put something rather than None
        # if self.ParentForm.CurrentlyRunningMainloop:
        #     self.ParentForm.TKroot.quit()  # kick out of loop if read was called
        if self.motion_events and not self.MouseButtonDown:
            if isinstance(self.ParentForm.LastButtonClicked, str):
                self.ParentForm.LastButtonClicked = self.ParentForm.LastButtonClicked + '+MOVE'
            else:
                self.ParentForm.LastButtonClicked = (self.ParentForm.LastButtonClicked, '+MOVE')
        _exit_mainloop(self.ParentForm)

    BringFigureToFront = bring_figure_to_front
    ButtonPressCallBack = button_press_call_back
    ButtonReleaseCallBack = button_release_call_back
    DeleteFigure = delete_figure
    DrawArc = draw_arc
    DrawCircle = draw_circle
    DrawImage = draw_image
    DrawLine = draw_line
    DrawOval = draw_oval
    DrawPoint = draw_point
    DrawPolygon = draw_polygon
    DrawLines = draw_lines
    DrawRectangle = draw_rectangle
    DrawText = draw_text
    GetFiguresAtLocation = get_figures_at_location
    GetBoundingBox = get_bounding_box
    Erase = erase
    MotionCallBack = motion_call_back
    Move = move
    MoveFigure = move_figure
    RelocateFigure = relocate_figure
    SendFigureToBack = send_figure_to_back
    TKCanvas = tk_canvas
    Update = update


G = Graph


# ---------------------------------------------------------------------- #
#                           Frame                                        #
# ---------------------------------------------------------------------- #
class Frame(Element):
    """
    A Frame Element that contains other Elements. Encloses with a line around elements and a text label.
    """

    def __init__(self, title, layout, title_color=None, background_color=None, title_location=None,
                 relief=DEFAULT_FRAME_RELIEF, size=(None, None), s=(None, None), font=None, pad=None, p=None, border_width=None, key=None, k=None,
                 tooltip=None, right_click_menu=None, expand_x=False, expand_y=False, grab=None, visible=True, element_justification='left', vertical_alignment=None,
                 metadata=None):
        """
        :param title:                 text that is displayed as the Frame's "label" or title
        :type title:                  (str)
        :param layout:                The layout to put inside the Frame
        :type layout:                 List[List[Elements]]
        :param title_color:           color of the title text
        :type title_color:            (str)
        :param background_color:      background color of the Frame
        :type background_color:       (str)
        :param title_location:        location to place the text title.  Choices include: TITLE_LOCATION_TOP TITLE_LOCATION_BOTTOM TITLE_LOCATION_LEFT TITLE_LOCATION_RIGHT TITLE_LOCATION_TOP_LEFT TITLE_LOCATION_TOP_RIGHT TITLE_LOCATION_BOTTOM_LEFT TITLE_LOCATION_BOTTOM_RIGHT
        :type title_location:         (enum)
        :param relief:                relief style. Values are same as other elements with reliefs. Choices include RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID
        :type relief:                 (enum)
        :param size:                  (width, height) Sets an initial hard-coded size for the Frame. This used to be a problem, but was fixed in 4.53.0 and works better than Columns when using the size paramter
        :type size:                   (int, int)
        :param s:                     Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                      (int, int)  | (None, None) | int
        :param font:                  specifies the  font family, size, etc. for the TITLE. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:                   (str or (str, int[, str]) or None)
        :param pad:                   Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:                    (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                     Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                      (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param border_width:          width of border around element in pixels
        :type border_width:           (int)
        :param key:                   Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key:                    str | int | tuple | object
        :param k:                     Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                      str | int | tuple | object
        :param tooltip:               text, that will appear when mouse hovers over the element
        :type tooltip:                (str)
        :param right_click_menu:      A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:       List[List[ List[str] | str ]]
        :param expand_x:              If True the element will automatically expand in the X direction to fill available space
        :type expand_x:               (bool)
        :param expand_y:              If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:               (bool)
        :param grab:                  If True can grab this element and move the window around. Default is False
        :type grab:                   (bool)
        :param visible:               set visibility state of the element
        :type visible:                (bool)
        :param element_justification: All elements inside the Frame will have this justification 'left', 'right', 'center' are valid values
        :type element_justification:  (str)
        :param vertical_alignment:    Place the Frame at the 'top', 'center', 'bottom' of the row (can also use t,c,r). Defaults to no setting (tkinter decides)
        :type vertical_alignment:     (str)
        :param metadata:              User metadata that can be set to ANYTHING
        :type metadata:               (Any)
        """

        self.UseDictionary = False
        self.ReturnValues = None
        self.ReturnValuesList = []
        self.ReturnValuesDictionary = {}
        self.DictionaryKeyCounter = 0
        self.ParentWindow = None
        self.Rows = []
        # self.ParentForm = None
        self.TKFrame = None
        self.Title = title
        self.Relief = relief
        self.TitleLocation = title_location
        self.BorderWidth = border_width
        self.BackgroundColor = background_color if background_color is not None else DEFAULT_BACKGROUND_COLOR
        self.RightClickMenu = right_click_menu
        self.ContainerElemementNumber = Window._GetAContainerNumber()
        self.ElementJustification = element_justification
        self.VerticalAlignment = vertical_alignment
        self.Widget = None  # type: tk.LabelFrame
        self.Grab = grab
        self.Layout(layout)
        key = key if key is not None else k
        sz = size if size != (None, None) else s
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y

        super().__init__(ELEM_TYPE_FRAME, background_color=background_color, text_color=title_color, size=sz,
                         font=font, pad=pad, key=key, tooltip=tooltip, visible=visible, metadata=metadata)
        return

    def add_row(self, *args):
        """
        Not recommended user call.  Used to add rows of Elements to the Frame Element.

        :param *args: The list of elements for this row
        :type *args:  List[Element]
        """
        NumRows = len(self.Rows)  # number of existing rows is our row number
        CurrentRowNumber = NumRows  # this row's number
        CurrentRow = []  # start with a blank row and build up
        # -------------------------  Add the elements to a row  ------------------------- #
        for i, element in enumerate(args):  # Loop through list of elements and add them to the row
            if isinstance(element, tuple) or isinstance(element, list):
                self.add_row(*element)
                continue

            if type(element) == list:
                PopupError('Error creating Frame layout',
                           'Layout has a LIST instead of an ELEMENT',
                           'This sometimes means you have a badly placed ]',
                           'The offensive list is:',
                           element,
                           'This list will be stripped from your layout',
                           keep_on_top=True
                           )
                continue
            elif callable(element) and not isinstance(element, Element):
                PopupError('Error creating Frame layout',
                           'Layout has a FUNCTION instead of an ELEMENT',
                           'This likely means you are missing () from your layout',
                           'The offensive list is:',
                           element,
                           'This item will be stripped from your layout',
                           keep_on_top=True)
                continue
            if element.ParentContainer is not None:
                warnings.warn(
                    '*** YOU ARE ATTEMPTING TO REUSE AN ELEMENT IN YOUR LAYOUT! Once placed in a layout, an element cannot be used in another layout. ***',
                    UserWarning)
                _error_popup_with_traceback('Error creating Frame layout',
                                            'The layout specified has already been used',
                                            'You MUST start witha "clean", unused layout every time you create a window',
                                            'The offensive Element = ',
                                            element,
                                            'and has a key = ', element.Key,
                                            'This item will be stripped from your layout',
                                            'Hint - try printing your layout and matching the IDs "print(layout)"',
                                            )
                continue
            element.Position = (CurrentRowNumber, i)
            element.ParentContainer = self
            CurrentRow.append(element)
            if element.Key is not None:
                self.UseDictionary = True
        # -------------------------  Append the row to list of Rows  ------------------------- #
        self.Rows.append(CurrentRow)

    def layout(self, rows):
        """
        Can use like the Window.Layout method, but it's better to use the layout parameter when creating

        :param rows: The rows of Elements
        :type rows:  List[List[Element]]
        :return:     Used for chaining
        :rtype:      (Frame)
        """

        for row in rows:
            try:
                iter(row)
            except TypeError:
                PopupError('Error creating Frame layout',
                           'Your row is not an iterable (e.g. a list)',
                           'Instead of a list, the type found was {}'.format(type(row)),
                           'The offensive row = ',
                           row,
                           'This item will be stripped from your layout', keep_on_top=True, image=_random_error_emoji())
                continue
            self.AddRow(*row)
        return self

    def _GetElementAtLocation(self, location):
        """
        Not user callable. Used to find the Element at a row, col position within the layout

        :param location: (row, column) position of the element to find in layout
        :type location:  (int, int)
        :return:         (Element) The element found at the location
        :rtype:          (Element)
        """

        (row_num, col_num) = location
        row = self.Rows[row_num]
        element = row[col_num]
        return element

    def update(self, value=None, visible=None):
        """
        Changes some of the settings for the Frame Element. Must call `Window.Read` or `Window.Finalize` prior

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param value:   New text value (Title) to show on frame
        :type value:    (Any)
        :param visible: control visibility of element
        :type visible:  (bool)
        """
        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Frame.update - The window was closed')
            return

        if visible is False:
            self._pack_forget_save_settings()
            # self.TKFrame.pack_forget()
        elif visible is True:
            self._pack_restore_settings()
            # self.TKFrame.pack(padx=self.pad_used[0], pady=self.pad_used[1])
        if value is not None:
            self.TKFrame.config(text=str(value))
        if visible is not None:
            self._visible = visible

    AddRow = add_row
    Layout = layout
    Update = update


Fr = Frame


# ---------------------------------------------------------------------- #
#                           Vertical Separator                           #
# ---------------------------------------------------------------------- #
class VerticalSeparator(Element):
    """
    Vertical Separator Element draws a vertical line at the given location. It will span 1 "row". Usually paired with
    Column Element if extra height is needed
    """

    def __init__(self, color=None, pad=None, p=None, key=None, k=None):
        """
        :param color: Color of the line. Defaults to theme's text color. Can be name or #RRGGBB format
        :type color:  (str)
        :param pad:   Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:    (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:     Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:      (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param key:   Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key:    str | int | tuple | object
        :param k:     Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:      str | int | tuple | object
        """
        key = key if key is not None else k
        pad = pad if pad is not None else p
        self.expand_x = None
        self.expand_y = None
        self.Orientation = 'vertical'  # for now only vertical works
        self.color = color if color is not None else theme_text_color()
        super().__init__(ELEM_TYPE_SEPARATOR, pad=pad, key=key)


VSeperator = VerticalSeparator
VSeparator = VerticalSeparator
VSep = VerticalSeparator


# ---------------------------------------------------------------------- #
#                           Horizontal Separator                           #
# ---------------------------------------------------------------------- #
class HorizontalSeparator(Element):
    """
    Horizontal Separator Element draws a Horizontal line at the given location.
    """

    def __init__(self, color=None, pad=None, p=None, key=None, k=None):
        """
        :param color: Color of the line. Defaults to theme's text color. Can be name or #RRGGBB format
        :type color:  (str)
        :param pad:   Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:    (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:     Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:      (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param key:   Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key:    str | int | tuple | object
        :param k:     Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:      str | int | tuple | object
        """

        self.Orientation = 'horizontal'  # for now only vertical works
        self.color = color if color is not None else theme_text_color()
        self.expand_x = True
        self.expand_y = None
        key = key if key is not None else k
        pad = pad if pad is not None else p

        super().__init__(ELEM_TYPE_SEPARATOR, pad=pad, key=key)


HSeparator = HorizontalSeparator
HSep = HorizontalSeparator


# ---------------------------------------------------------------------- #
#                           Sizegrip                                     #
# ---------------------------------------------------------------------- #
class Sizegrip(Element):
    """
        Sizegrip element will be added to the bottom right corner of your window.
        It should be placed on the last row of your window along with any other elements on that row.
        The color will match the theme's background color.
    """

    def __init__(self, background_color=None, pad=None, p=(0, 0), key=None, k=None):
        """
        Sizegrip Element
        :param background_color: color to use for the background of the grip
        :type background_color:  str
        :param pad:   Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:    (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:     Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:      (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param key:   Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key:    str | int | tuple | object
        :param k:     Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:      str | int | tuple | object
        """

        bg = background_color if background_color is not None else theme_background_color()
        pad = pad if pad is not None else p
        key = key if key is not None else k

        super().__init__(ELEM_TYPE_SIZEGRIP, background_color=bg, key=key, pad=pad)


SGrip = Sizegrip


# ---------------------------------------------------------------------- #
#                           Tab                                          #
# ---------------------------------------------------------------------- #
class Tab(Element):
    """
    Tab Element is another "Container" element that holds a layout and displays a tab with text. Used with TabGroup only
    Tabs are never placed directly into a layout.  They are always "Contained" in a TabGroup layout
    """

    def __init__(self, title, layout, title_color=None, background_color=None, font=None, pad=None, p=None, disabled=False,
                 border_width=None, key=None, k=None, tooltip=None, right_click_menu=None, expand_x=False, expand_y=False, visible=True, element_justification='left',
                 image_source=None, image_subsample=None, image_zoom=None, metadata=None):
        """
        :param title:                 text to show on the tab
        :type title:                  (str)
        :param layout:                The element layout that will be shown in the tab
        :type layout:                 List[List[Element]]
        :param title_color:           color of the tab text (note not currently working on tkinter)
        :type title_color:            (str)
        :param background_color:      color of background of the entire layout
        :type background_color:       (str)
        :param font:                  NOT USED in the tkinter port
        :type font:                   (str or (str, int[, str]) or None)
        :param pad:                   Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:                    (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                     Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                      (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param disabled:              If True button will be created disabled
        :type disabled:               (bool)
        :param border_width:          NOT USED in tkinter port
        :type border_width:           (int)
        :param key:                   Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key:                    str | int | tuple | object
        :param k:                     Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                      str | int | tuple | object
        :param tooltip:               text, that will appear when mouse hovers over the element
        :type tooltip:                (str)
        :param right_click_menu:      A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:       List[List[ List[str] | str ]]
        :param expand_x:              If True the element will automatically expand in the X direction to fill available space
        :type expand_x:               (bool)
        :param expand_y:              If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:               (bool)
        :param visible:               set visibility state of the element
        :type visible:                (bool)
        :param element_justification: All elements inside the Tab will have this justification 'left', 'right', 'center' are valid values
        :type element_justification:  (str)
        :param image_source:          A filename or a base64 bytes of an image to place on the Tab
        :type image_source:            str | bytes | None
        :param image_subsample:       amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc
        :type image_subsample:        (int)
        :param image_zoom:            amount to increase the size of the image. 2=twice size, 3=3 times, etc
        :type image_zoom:             (int)
        :param metadata:              User metadata that can be set to ANYTHING
        :type metadata:               (Any)
        """

        filename = data = None
        if image_source is not None:
            if isinstance(image_source, bytes):
                data = image_source
            elif isinstance(image_source, str):
                filename = image_source
            else:
                warnings.warn('Image element - source is not a valid type: {}'.format(type(image_source)), UserWarning)

        self.Filename = filename
        self.Data = data
        self.ImageSubsample = image_subsample
        self.zoom = int(image_zoom) if image_zoom is not None else None
        self.UseDictionary = False
        self.ReturnValues = None
        self.ReturnValuesList = []
        self.ReturnValuesDictionary = {}
        self.DictionaryKeyCounter = 0
        self.ParentWindow = None
        self.Rows = []
        self.TKFrame = None
        self.Widget = None  # type: tk.Frame
        self.Title = title
        self.BorderWidth = border_width
        self.Disabled = disabled
        self.ParentNotebook = None
        self.TabID = None
        self.BackgroundColor = background_color if background_color is not None else DEFAULT_BACKGROUND_COLOR
        self.RightClickMenu = right_click_menu
        self.ContainerElemementNumber = Window._GetAContainerNumber()
        self.ElementJustification = element_justification
        key = key if key is not None else k
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y

        self.Layout(layout)

        super().__init__(ELEM_TYPE_TAB, background_color=background_color, text_color=title_color, font=font, pad=pad, key=key, tooltip=tooltip,
                         visible=visible, metadata=metadata)
        return

    def add_row(self, *args):
        """
        Not recommended use call.  Used to add rows of Elements to the Frame Element.

        :param *args: The list of elements for this row
        :type *args:  List[Element]
        """
        NumRows = len(self.Rows)  # number of existing rows is our row number
        CurrentRowNumber = NumRows  # this row's number
        CurrentRow = []  # start with a blank row and build up
        # -------------------------  Add the elements to a row  ------------------------- #
        for i, element in enumerate(args):  # Loop through list of elements and add them to the row
            if type(element) == list:
                popup_error_with_traceback('Error creating Tab layout',
                           'Layout has a LIST instead of an ELEMENT',
                           'This sometimes means you have a badly placed ]',
                           'The offensive list is:',
                           element,
                           'This list will be stripped from your layout')
                continue
            elif callable(element) and not isinstance(element, Element):
                popup_error_with_traceback('Error creating Tab layout',
                           'Layout has a FUNCTION instead of an ELEMENT',
                           'This likely means you are missing () from your layout',
                           'The offensive list is:',
                           element,
                           'This item will be stripped from your layout')
                continue
            if element.ParentContainer is not None:
                warnings.warn(
                    '*** YOU ARE ATTEMPTING TO REUSE AN ELEMENT IN YOUR LAYOUT! Once placed in a layout, an element cannot be used in another layout. ***',
                    UserWarning)
                popup_error_with_traceback('Error creating Tab layout',
                           'The layout specified has already been used',
                           'You MUST start witha "clean", unused layout every time you create a window',
                           'The offensive Element = ',
                           element,
                           'and has a key = ', element.Key,
                           'This item will be stripped from your layout',
                           'Hint - try printing your layout and matching the IDs "print(layout)"')
                continue
            element.Position = (CurrentRowNumber, i)
            element.ParentContainer = self
            CurrentRow.append(element)
            if element.Key is not None:
                self.UseDictionary = True
        # -------------------------  Append the row to list of Rows  ------------------------- #
        self.Rows.append(CurrentRow)

    def layout(self, rows):
        """
        Not user callable.  Use layout parameter instead. Creates the layout using the supplied rows of Elements

        :param rows: List[List[Element]] The list of rows
        :type rows:  List[List[Element]]
        :return:     (Tab) used for chaining
        :rtype:
        """

        for row in rows:
            try:
                iter(row)
            except TypeError:
                PopupError('Error creating Tab layout',
                           'Your row is not an iterable (e.g. a list)',
                           'Instead of a list, the type found was {}'.format(type(row)),
                           'The offensive row = ',
                           row,
                           'This item will be stripped from your layout', keep_on_top=True, image=_random_error_emoji())
                continue
            self.AddRow(*row)
        return self

    def update(self, title=None, disabled=None, visible=None):
        """
        Changes some of the settings for the Tab Element. Must call `Window.Read` or `Window.Finalize` prior

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param title:    tab title
        :type title:     (str)
        :param disabled: disable or enable state of the element
        :type disabled:  (bool)
        :param visible:  control visibility of element
        :type visible:   (bool)
        """
        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Tab.update - The window was closed')
            return

        state = 'normal'
        if disabled is not None:
            self.Disabled = disabled
            if disabled:
                state = 'disabled'
        if visible is False:
            state = 'hidden'
        if visible is not None:
            self._visible = visible

        self.ParentNotebook.tab(self.TabID, state=state)

        if title is not None:
            self.Title = str(title)
            self.ParentNotebook.tab(self.TabID, text=self.Title)
            # self.ParentNotebook.tab(self.ContainerElemementNumber-1, text=self.Title)

        # if visible is False:
        #     self.ParentNotebook.pack_forget()
        # elif visible is True:
        #     self.ParentNotebook.pack()
        return self

    def _GetElementAtLocation(self, location):
        """
        Not user callable. Used to find the Element at a row, col position within the layout

        :param location: (row, column) position of the element to find in layout
        :type location:  (int, int)
        :return:         The element found at the location
        :rtype:          (Element)
        """

        (row_num, col_num) = location
        row = self.Rows[row_num]
        element = row[col_num]
        return element

    def select(self):
        """
        Create a tkinter event that mimics user clicking on a tab. Must have called window.Finalize / Read first!

        """
        # Use a try in case the window has been destoyed
        try:
            self.ParentNotebook.select(self.TabID)
        except Exception as e:
            print('Exception Selecting Tab {}'.format(e))

    AddRow = add_row
    Layout = layout
    Select = select
    Update = update


# ---------------------------------------------------------------------- #
#                           TabGroup                                     #
# ---------------------------------------------------------------------- #
class TabGroup(Element):
    """
    TabGroup Element groups together your tabs into the group of tabs you see displayed in your window
    """

    def __init__(self, layout, tab_location=None, title_color=None, tab_background_color=None, selected_title_color=None, selected_background_color=None,
                 background_color=None, focus_color=None, font=None, change_submits=False, enable_events=False, pad=None, p=None, border_width=None, tab_border_width=None,
                 theme=None, key=None, k=None,
                 size=(None, None), s=(None, None), tooltip=None, right_click_menu=None, expand_x=False, expand_y=False, visible=True, metadata=None):
        """
        :param layout:                    Layout of Tabs. Different than normal layouts. ALL Tabs should be on first row
        :type layout:                     List[List[Tab]]
        :param tab_location:              location that tabs will be displayed. Choices are left, right, top, bottom, lefttop, leftbottom, righttop, rightbottom, bottomleft, bottomright, topleft, topright
        :type tab_location:               (str)
        :param title_color:               color of text on tabs
        :type title_color:                (str)
        :param tab_background_color:      color of all tabs that are not selected
        :type tab_background_color:       (str)
        :param selected_title_color:      color of tab text when it is selected
        :type selected_title_color:       (str)
        :param selected_background_color: color of tab when it is selected
        :type selected_background_color:  (str)
        :param background_color:          color of background area that tabs are located on
        :type background_color:           (str)
        :param focus_color:               color of focus indicator on the tabs
        :type focus_color:                (str)
        :param font:                      specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:                       (str or (str, int[, str]) or None)
        :param change_submits:            * DEPRICATED DO NOT USE. Use `enable_events` instead
        :type change_submits:             (bool)
        :param enable_events:             If True then switching tabs will generate an Event
        :type enable_events:              (bool)
        :param pad:                       Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:                        (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                         Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                          (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param border_width:              width of border around element in pixels
        :type border_width:               (int)
        :param tab_border_width:          width of border around the tabs
        :type tab_border_width:           (int)
        :param theme:                     DEPRICATED - You can only specify themes using set options or when window is created. It's not possible to do it on an element basis
        :type theme:                      (enum)
        :param key:                       Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key:                        str | int | tuple | object
        :param k:                         Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                          str | int | tuple | object
        :param size:                      (width, height) w=pixels-wide, h=pixels-high. Either item in tuple can be None to indicate use the computed value and set only 1 direction
        :type size:                       (int|None, int|None)
        :param s:                         Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                          (int|None, int|None)
        :param tooltip:                   text, that will appear when mouse hovers over the element
        :type tooltip:                    (str)
        :param right_click_menu:          A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:           List[List[ List[str] | str ]]
        :param expand_x:                  If True the element will automatically expand in the X direction to fill available space
        :type expand_x:                   (bool)
        :param expand_y:                  If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:                   (bool)
        :param visible:                   DEPRECATED  - Should you need to control visiblity for the TabGroup as a whole, place it into a Column element
        :type visible:                    (bool)
        :param metadata:                  User metadata that can be set to ANYTHING
        :type metadata:                   (Any)
        """

        self.UseDictionary = False
        self.ReturnValues = None
        self.ReturnValuesList = []
        self.ReturnValuesDictionary = {}
        self.DictionaryKeyCounter = 0
        self.ParentWindow = None
        self.SelectedTitleColor = selected_title_color if selected_title_color is not None else LOOK_AND_FEEL_TABLE[CURRENT_LOOK_AND_FEEL]['TEXT']
        self.SelectedBackgroundColor = selected_background_color if selected_background_color is not None else LOOK_AND_FEEL_TABLE[CURRENT_LOOK_AND_FEEL][
            'BACKGROUND']
        title_color = title_color if title_color is not None else LOOK_AND_FEEL_TABLE[CURRENT_LOOK_AND_FEEL]['TEXT_INPUT']
        self.TabBackgroundColor = tab_background_color if tab_background_color is not None else LOOK_AND_FEEL_TABLE[CURRENT_LOOK_AND_FEEL]['INPUT']
        self.Rows = []
        self.TKNotebook = None  # type: ttk.Notebook
        self.Widget = None  # type: ttk.Notebook
        self.tab_index_to_key = {}      # has a list of the tabs in the notebook and their associated key
        self.TabCount = 0
        self.BorderWidth = border_width
        self.BackgroundColor = background_color if background_color is not None else DEFAULT_BACKGROUND_COLOR
        self.ChangeSubmits = change_submits or enable_events
        self.TabLocation = tab_location
        self.ElementJustification = 'left'
        self.RightClickMenu = right_click_menu
        self.TabBorderWidth = tab_border_width
        self.FocusColor = focus_color

        key = key if key is not None else k
        sz = size if size != (None, None) else s
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y

        self.Layout(layout)

        super().__init__(ELEM_TYPE_TAB_GROUP, size=sz, background_color=background_color, text_color=title_color, font=font,
                         pad=pad, key=key, tooltip=tooltip, visible=visible, metadata=metadata)
        return

    def add_row(self, *args):
        """
        Not recommended user call.  Used to add rows of Elements to the Frame Element.

        :param *args:     The list of elements for this row
        :type *args:      List[Element]
        """

        NumRows = len(self.Rows)  # number of existing rows is our row number
        CurrentRowNumber = NumRows  # this row's number
        CurrentRow = []  # start with a blank row and build up
        # -------------------------  Add the elements to a row  ------------------------- #
        for i, element in enumerate(args):  # Loop through list of elements and add them to the row
            if type(element) == list:
                PopupError('Error creating Tab layout',
                           'Layout has a LIST instead of an ELEMENT',
                           'This sometimes means you have a badly placed ]',
                           'The offensive list is:',
                           element,
                           'This list will be stripped from your layout', keep_on_top=True, image=_random_error_emoji()
                           )
                continue
            elif callable(element) and not isinstance(element, Element):
                PopupError('Error creating Tab layout',
                           'Layout has a FUNCTION instead of an ELEMENT',
                           'This likely means you are missing () from your layout',
                           'The offensive list is:',
                           element,
                           'This item will be stripped from your layout', keep_on_top=True, image=_random_error_emoji())
                continue
            if element.ParentContainer is not None:
                warnings.warn(
                    '*** YOU ARE ATTEMPTING TO REUSE AN ELEMENT IN YOUR LAYOUT! Once placed in a layout, an element cannot be used in another layout. ***',
                    UserWarning)
                PopupError('Error creating Tab layout',
                           'The layout specified has already been used',
                           'You MUST start witha "clean", unused layout every time you create a window',
                           'The offensive Element = ',
                           element,
                           'and has a key = ', element.Key,
                           'This item will be stripped from your layout',
                           'Hint - try printing your layout and matching the IDs "print(layout)"', keep_on_top=True, image=_random_error_emoji())
                continue
            element.Position = (CurrentRowNumber, i)
            element.ParentContainer = self
            CurrentRow.append(element)
            if element.Key is not None:
                self.UseDictionary = True
        # -------------------------  Append the row to list of Rows  ------------------------- #
        self.Rows.append(CurrentRow)

    def layout(self, rows):
        """
        Can use like the Window.Layout method, but it's better to use the layout parameter when creating

        :param rows: The rows of Elements
        :type rows:  List[List[Element]]
        :return:     Used for chaining
        :rtype:      (Frame)
        """
        for row in rows:
            try:
                iter(row)
            except TypeError:
                PopupError('Error creating Tab layout',
                           'Your row is not an iterable (e.g. a list)',
                           'Instead of a list, the type found was {}'.format(type(row)),
                           'The offensive row = ',
                           row,
                           'This item will be stripped from your layout', keep_on_top=True, image=_random_error_emoji())
                continue
            self.AddRow(*row)
        return self

    def _GetElementAtLocation(self, location):
        """
        Not user callable. Used to find the Element at a row, col position within the layout

        :param location: (row, column) position of the element to find in layout
        :type location:  (int, int)
        :return:         The element found at the location
        :rtype:          (Element)
        """

        (row_num, col_num) = location
        row = self.Rows[row_num]
        element = row[col_num]
        return element

    def find_key_from_tab_name(self, tab_name):
        """
        Searches through the layout to find the key that matches the text on the tab. Implies names should be unique

        :param tab_name: name of a tab
        :type tab_name:  str
        :return:         Returns the key or None if no key found
        :rtype:          key | None
        """
        for row in self.Rows:
            for element in row:
                if element.Title == tab_name:
                    return element.Key
        return None


    def find_currently_active_tab_key(self):
        """
        Returns the key for the currently active tab in this TabGroup
        :return:    Returns the key or None of no key found
        :rtype:     key | None
        """
        try:
            current_index = self.TKNotebook.index('current')
            key = self.tab_index_to_key.get(current_index, None)
        except:
            key = None

        return key

    def get(self):
        """
        Returns the current value for the Tab Group, which will be the currently selected tab's KEY or the text on
        the tab if no key is defined.  Returns None if an error occurs.
        Note that this is exactly the same data that would be returned from a call to Window.read. Are you sure you
        are using this method correctly?

        :return: The key of the currently selected tab or None if there is an error
        :rtype:  Any | None
        """

        try:
            current_index = self.TKNotebook.index('current')
            key = self.tab_index_to_key.get(current_index, None)
        except:
            key = None

        return key

    def add_tab(self, tab_element):
        """
        Add a new tab to an existing TabGroup
        This call was written so that tabs can be added at runtime as your user performs operations.
        Your Window should already be created and finalized.

        :param tab_element: A Tab Element that has a layout in it
        :type tab_element:  Tab
        """

        self.add_row(tab_element)
        tab_element.TKFrame = tab_element.Widget = tk.Frame(self.TKNotebook)
        form = self.ParentForm
        form._BuildKeyDictForWindow(form, tab_element, form.AllKeysDict)
        form.AllKeysDict[tab_element.Key] = tab_element
        # Pack the tab's layout into the tab. NOTE - This does NOT pack the Tab itself... for that see below...
        PackFormIntoFrame(tab_element, tab_element.TKFrame, self.ParentForm)

        # - This is below -    Perform the same operation that is performed when a Tab is packed into the window.
        # If there's an image in the tab, then do the imagey-stuff
        # ------------------- start of imagey-stuff -------------------
        try:
            if tab_element.Filename is not None:
                photo = tk.PhotoImage(file=tab_element.Filename)
            elif tab_element.Data is not None:
                photo = tk.PhotoImage(data=tab_element.Data)
            else:
                photo = None

            if tab_element.ImageSubsample and photo is not None:
                photo = photo.subsample(tab_element.ImageSubsample)
                # print('*ERROR laying out form.... Image Element has no image specified*')
        except Exception as e:
            photo = None
            _error_popup_with_traceback('Your Window has an Tab Element with an IMAGE problem',
                                        'The traceback will show you the Window with the problem layout',
                                        'Look in this Window\'s layout for an Image tab_element that has a key of {}'.format(tab_element.Key),
                                        'The error occuring is:', e)

        tab_element.photo = photo
        # add the label
        if photo is not None:
            width, height = photo.width(), photo.height()
            tab_element.tktext_label = tk.Label(tab_element.ParentRowFrame, image=photo, width=width, height=height, bd=0)
        else:
            tab_element.tktext_label = tk.Label(tab_element.ParentRowFrame, bd=0)
        # ------------------- end of imagey-stuff -------------------

        state = 'normal'
        if tab_element.Disabled:
            state = 'disabled'
        if tab_element.visible is False:
            state = 'hidden'
        if photo is not None:
            self.TKNotebook.add(tab_element.TKFrame, text=tab_element.Title, compound=tk.LEFT, state=state, image=photo)
        else:
            self.TKNotebook.add(tab_element.TKFrame, text=tab_element.Title, state=state)
        tab_element.ParentNotebook = self.TKNotebook
        tab_element.TabID = self.TabCount
        tab_element.ParentForm = self.ParentForm
        self.TabCount += 1
        if tab_element.BackgroundColor != COLOR_SYSTEM_DEFAULT and tab_element.BackgroundColor is not None:
            tab_element.TKFrame.configure(background=tab_element.BackgroundColor, highlightbackground=tab_element.BackgroundColor,
                                          highlightcolor=tab_element.BackgroundColor)
        if tab_element.BorderWidth is not None:
            tab_element.TKFrame.configure(borderwidth=tab_element.BorderWidth)
        if tab_element.Tooltip is not None:
            tab_element.TooltipObject = ToolTip(tab_element.TKFrame, text=tab_element.Tooltip, timeout=DEFAULT_TOOLTIP_TIME)
        _add_right_click_menu(tab_element, form)

    def update(self, visible=None):
        """
        Enables changing the visibility

        :param visible:  control visibility of element
        :type visible:   (bool)
        """
        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in TabGroup.update - The window was closed')
            return

        if visible is False:
            self._pack_forget_save_settings()
        elif visible is True:
            self._pack_restore_settings()

        if visible is not None:
            self._visible = visible

    AddRow = add_row
    FindKeyFromTabName = find_key_from_tab_name
    Get = get
    Layout = layout


# ---------------------------------------------------------------------- #
#                           Slider                                       #
# ---------------------------------------------------------------------- #
class Slider(Element):
    """
    A slider, horizontal or vertical
    """

    def __init__(self, range=(None, None), default_value=None, resolution=None, tick_interval=None, orientation=None,
                 disable_number_display=False, setting=None, border_width=None, relief=None, change_submits=False,
                 enable_events=False, disabled=False, size=(None, None), s=(None, None), font=None, background_color=None,
                 text_color=None, trough_color=None, key=None, k=None, pad=None, p=None, expand_x=False, expand_y=False, tooltip=None, visible=True, metadata=None):
        """
        :param range:                  slider's range (min value, max value)
        :type range:                   (int, int) | Tuple[float, float]
        :param default_value:          starting value for the slider
        :type default_value:           int | float
        :param resolution:             the smallest amount the slider can be moved
        :type resolution:              int | float
        :param tick_interval:          how often a visible tick should be shown next to slider
        :type tick_interval:           int | float
        :param orientation:            'horizontal' or 'vertical' ('h' or 'v' also work)
        :type orientation:             (str)
        :param disable_number_display: if True no number will be displayed by the Slider Element
        :type disable_number_display:  (bool)
        :param setting:                If not None, then this element will be saved in a settings file using the key for the element
        :type setting:                 (Any)
        :param border_width:           width of border around element in pixels
        :type border_width:            (int)
        :param relief:                 relief style. Use constants - RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID
        :type relief:                  str | None
        :param change_submits:         * DEPRICATED DO NOT USE. Use `enable_events` instead
        :type change_submits:          (bool)
        :param enable_events:          If True then moving the slider will generate an Event
        :type enable_events:           (bool)
        :param disabled:               set disable state for element
        :type disabled:                (bool)
        :param size:                   (l=length chars/rows, w=width pixels)
        :type size:                    (int, int)
        :param s:                      Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                       (int, int)  | (None, None)
        :param font:                   specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:                    (str or (str, int[, str]) or None)
        :param background_color:       color of slider's background
        :type background_color:        (str)
        :param text_color:             color of the slider's text
        :type text_color:              (str)
        :param trough_color:           color of the slider's trough
        :type trough_color:            (str)
        :param key:                    Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key:                     str | int | tuple | object
        :param k:                      Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                       str | int | tuple | object
        :param pad:                    Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:                     (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                      Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                       (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param expand_x:               If True the element will automatically expand in the X direction to fill available space
        :type expand_x:                (bool)
        :param expand_y:               If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:                (bool)
        :param tooltip:                text, that will appear when mouse hovers over the element
        :type tooltip:                 (str)
        :param visible:                set visibility state of the element
        :type visible:                 (bool)
        :param metadata:               User metadata that can be set to ANYTHING
        :type metadata:                (Any)
        """

        self.TKScale = self.Widget = None  # type: tk.Scale
        self.Range = (1, 10) if range == (None, None) else range
        self.DefaultValue = self.Range[0] if default_value is None else default_value
        self.Orientation = orientation if orientation else DEFAULT_SLIDER_ORIENTATION
        self.BorderWidth = border_width if border_width else DEFAULT_SLIDER_BORDER_WIDTH
        self.Relief = relief if relief else DEFAULT_SLIDER_RELIEF
        self.Resolution = 1 if resolution is None else resolution
        self.ChangeSubmits = change_submits or enable_events
        self.Disabled = disabled
        self.TickInterval = tick_interval
        self.DisableNumericDisplay = disable_number_display
        self.TroughColor = trough_color or DEFAULT_SCROLLBAR_COLOR
        sz = size if size != (None, None) else s
        temp_size = sz
        if temp_size == (None, None):
            temp_size = (20, 20) if self.Orientation.startswith('h') else (8, 20)
        key = key if key is not None else k
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y
        if setting is not None:
            self.setting = setting
            self.DefaultValue = user_settings_get_entry(key, setting)

        super().__init__(ELEM_TYPE_INPUT_SLIDER, size=temp_size, font=font, background_color=background_color,
                         text_color=text_color, key=key, pad=pad, tooltip=tooltip, visible=visible, metadata=metadata)
        return

    def update(self, value=None, range=(None, None), disabled=None, visible=None):
        """
        Changes some of the settings for the Slider Element. Must call `Window.Read` or `Window.Finalize` prior

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param value:    sets current slider value
        :type value:     int | float
        :param range:    Sets a new range for slider
        :type range:     (int, int) | Tuple[float, float
        :param disabled: disable or enable state of the element
        :type disabled:  (bool)
        :param visible:  control visibility of element
        :type visible:   (bool)
        """
        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Slider.update - The window was closed')
            return

        if range != (None, None):
            self.TKScale.config(from_=range[0], to_=range[1])
        if value is not None:
            try:
                self.TKIntVar.set(value)
            except:
                pass
            self.DefaultValue = value
        if disabled is True:
            self.TKScale['state'] = 'disabled'
        elif disabled is False:
            self.TKScale['state'] = 'normal'
        self.Disabled = disabled if disabled is not None else self.Disabled

        if visible is False:
            self._pack_forget_save_settings()
        elif visible is True:
            self._pack_restore_settings()

        if visible is not None:
            self._visible = visible

    def _SliderChangedHandler(self, event):
        """
        Not user callable.  Callback function for when slider is moved.

        :param event: (event) the event data provided by tkinter. Unknown format. Not used.
        :type event:
        """

        if self.Key is not None:
            self.ParentForm.LastButtonClicked = self.Key
        else:
            self.ParentForm.LastButtonClicked = ''
        self.ParentForm.FormRemainedOpen = True
        # if self.ParentForm.CurrentlyRunningMainloop:
        #     self.ParentForm.TKroot.quit()  # kick the users out of the mainloop
        _exit_mainloop(self.ParentForm)

    Update = update


Sl = Slider


# ---------------------------------------------------------------------- #
#                          TkFixedFrame (Used by Column)                 #
# ---------------------------------------------------------------------- #
class TkFixedFrame(tk.Frame):
    """
    A tkinter frame that is used with Column Elements that do not have a scrollbar
    """

    def __init__(self, master, **kwargs):
        """
        :param master:   The parent widget
        :type master:    (tk.Widget)
        :param **kwargs: The keyword args
        :type **kwargs:
        """
        tk.Frame.__init__(self, master, **kwargs)

        self.canvas = tk.Canvas(self)

        self.canvas.pack(side="left", fill="both", expand=True)

        # reset the view
        self.canvas.xview_moveto(0)
        self.canvas.yview_moveto(0)

        # create a frame inside the canvas which will be scrolled with it
        self.TKFrame = tk.Frame(self.canvas, **kwargs)
        self.frame_id = self.canvas.create_window(0, 0, window=self.TKFrame, anchor="nw")
        self.canvas.config(borderwidth=0, highlightthickness=0)
        self.TKFrame.config(borderwidth=0, highlightthickness=0)
        self.config(borderwidth=0, highlightthickness=0)


# ---------------------------------------------------------------------- #
#                          TkScrollableFrame (Used by Column)            #
# ---------------------------------------------------------------------- #
class TkScrollableFrame(tk.Frame):
    """
    A frame with one or two scrollbars.  Used to make Columns with scrollbars
    """

    def __init__(self, master, vertical_only, element, window, **kwargs):
        """
        :param master:        The parent widget
        :type master:         (tk.Widget)
        :param vertical_only: if True the only a vertical scrollbar will be shown
        :type vertical_only:  (bool)
        :param element:       The element containing this object
        :type element:        (Column)
        """
        tk.Frame.__init__(self, master, **kwargs)
        # create a canvas object and a vertical scrollbar for scrolling it

        self.canvas = tk.Canvas(self)
        element.Widget = self.canvas
        # Okay, we're gonna make a list. Containing the y-min, x-min, y-max, and x-max of the frame
        element.element_frame = self
        _make_ttk_scrollbar(element, 'v', window)
        # element.vsb = tk.Scrollbar(self, orient=tk.VERTICAL)
        element.vsb.pack(side='right', fill="y", expand="false")

        if not vertical_only:
            _make_ttk_scrollbar(element, 'h', window)
            # self.hscrollbar = tk.Scrollbar(self, orient=tk.HORIZONTAL)
            element.hsb.pack(side='bottom', fill="x", expand="false")
            self.canvas.config(xscrollcommand=element.hsb.set)
            # self.canvas = tk.Canvas(self, )
        # else:
        #     self.canvas = tk.Canvas(self)

        self.canvas.config(yscrollcommand=element.vsb.set)
        self.canvas.pack(side="left", fill="both", expand=True)
        element.vsb.config(command=self.canvas.yview)
        if not vertical_only:
            element.hsb.config(command=self.canvas.xview)

        # reset the view
        self.canvas.xview_moveto(0)
        self.canvas.yview_moveto(0)

        # create a frame inside the canvas which will be scrolled with it
        self.TKFrame = tk.Frame(self.canvas, **kwargs)
        self.frame_id = self.canvas.create_window(0, 0, window=self.TKFrame, anchor="nw")
        self.canvas.config(borderwidth=0, highlightthickness=0)
        self.TKFrame.config(borderwidth=0, highlightthickness=0)
        self.config(borderwidth=0, highlightthickness=0)

        # Canvas can be: master, canvas, TKFrame

        # Chr0nic

        # self.unhookMouseWheel(None)
        # self.TKFrame.bind("<Enter>", self.hookMouseWheel)
        # self.TKFrame.bind("<Leave>", self.unhookMouseWheel)
        # self.bind('<Configure>', self.set_scrollregion)

        self.unhookMouseWheel(None)
        self.canvas.bind("<Enter>", self.hookMouseWheel)
        self.canvas.bind("<Leave>", self.unhookMouseWheel)
        self.bind('<Configure>', self.set_scrollregion)

    # Chr0nic
    def hookMouseWheel(self, e):
        # print("enter")
        VarHolder.canvas_holder = self.canvas
        self.canvas.bind_all('<4>', self.yscroll, add='+')
        self.canvas.bind_all('<5>', self.yscroll, add='+')
        self.canvas.bind_all("<MouseWheel>", self.yscroll, add='+')
        self.canvas.bind_all("<Shift-MouseWheel>", self.xscroll, add='+')

    # Chr0nic
    def unhookMouseWheel(self, e):
        # print("leave")
        VarHolder.canvas_holder = None
        self.canvas.unbind_all('<4>')
        self.canvas.unbind_all('<5>')
        self.canvas.unbind_all("<MouseWheel>")
        self.canvas.unbind_all("<Shift-MouseWheel>")

    def resize_frame(self, e):
        self.canvas.itemconfig(self.frame_id, height=e.height, width=e.width)

    def yscroll(self, event):
        if self.canvas.yview() == (0.0, 1.0):
            return
        if event.num == 5 or event.delta < 0:
            self.canvas.yview_scroll(1, "unit")
        elif event.num == 4 or event.delta > 0:
            self.canvas.yview_scroll(-1, "unit")

    def xscroll(self, event):
        if event.num == 5 or event.delta < 0:
            self.canvas.xview_scroll(1, "unit")
        elif event.num == 4 or event.delta > 0:
            self.canvas.xview_scroll(-1, "unit")

    def bind_mouse_scroll(self, parent, mode):
        # ~~ Windows only
        parent.bind("<MouseWheel>", mode)
        # ~~ Unix only
        parent.bind("<Button-4>", mode)
        parent.bind("<Button-5>", mode)

    def set_scrollregion(self, event=None):
        """ Set the scroll region on the canvas """
        self.canvas.configure(scrollregion=self.canvas.bbox('all'))


# ---------------------------------------------------------------------- #
#                           Column                                       #
# ---------------------------------------------------------------------- #
class Column(Element):
    """
    A container element that is used to create a layout within your window's layout
    """

    def __init__(self, layout, background_color=None, size=(None, None), s=(None, None), size_subsample_width=1, size_subsample_height=2, pad=None, p=None, scrollable=False,
                 vertical_scroll_only=False, right_click_menu=None, key=None, k=None, visible=True, justification=None, element_justification=None,
                 vertical_alignment=None, grab=None, expand_x=None, expand_y=None, metadata=None,
                 sbar_trough_color=None, sbar_background_color=None, sbar_arrow_color=None, sbar_width=None, sbar_arrow_width=None,
                 sbar_frame_color=None, sbar_relief=None):
        """
        :param layout:                      Layout that will be shown in the Column container
        :type layout:                       List[List[Element]]
        :param background_color:            color of background of entire Column
        :type background_color:             (str)
        :param size:                        (width, height) size in pixels (doesn't work quite right, sometimes only 1 dimension is set by tkinter. Use a Sizer Element to help set sizes
        :type size:                         (int | None, int | None)
        :param s:                           Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                            (int | None, int | None)
        :param size_subsample_width:        Determines the size of a scrollable column width based on 1/size_subsample * required size. 1 = match the contents exactly, 2 = 1/2 contents size, 3 = 1/3. Can be a fraction to make larger than required.
        :type size_subsample_width:         (float)
        :param size_subsample_height:       Determines the size of a scrollable height based on 1/size_subsample * required size. 1 = match the contents exactly, 2 = 1/2 contents size, 3 = 1/3. Can be a fraction to make larger than required..
        :type size_subsample_height:        (float)
        :param pad:                         Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:                          (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                           Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                            (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param scrollable:                  if True then scrollbars will be added to the column. If you update the contents of a scrollable column, be sure and call Column.contents_changed also
        :type scrollable:                   (bool)
        :param vertical_scroll_only:        if True then no horizontal scrollbar will be shown if a scrollable column
        :type vertical_scroll_only:         (bool)
        :param right_click_menu:            A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:             List[List[ List[str] | str ]]
        :param key:                         Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key:                          str | int | tuple | object
        :param k:                           Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                            str | int | tuple | object
        :param visible:                     set visibility state of the element
        :type visible:                      (bool)
        :param justification:               set justification for the Column itself. Note entire row containing the Column will be affected
        :type justification:                (str)
        :param element_justification:       All elements inside the Column will have this justification 'left', 'right', 'center' are valid values
        :type element_justification:        (str)
        :param vertical_alignment:          Place the column at the 'top', 'center', 'bottom' of the row (can also use t,c,r). Defaults to no setting (tkinter decides)
        :type vertical_alignment:           (str)
        :param grab:                        If True can grab this element and move the window around. Default is False
        :type grab:                         (bool)
        :param expand_x:                    If True the column will automatically expand in the X direction to fill available space
        :type expand_x:                     (bool)
        :param expand_y:                    If True the column will automatically expand in the Y direction to fill available space
        :type expand_y:                     (bool)
        :param metadata:                    User metadata that can be set to ANYTHING
        :type metadata:                     (Any)
        :param sbar_trough_color:           Scrollbar color of the trough
        :type sbar_trough_color:            (str)
        :param sbar_background_color:       Scrollbar color of the background of the arrow buttons at the ends AND the color of the "thumb" (the thing you grab and slide). Switches to arrow color when mouse is over
        :type sbar_background_color:        (str)
        :param sbar_arrow_color:            Scrollbar color of the arrow at the ends of the scrollbar (it looks like a button). Switches to background color when mouse is over
        :type sbar_arrow_color:             (str)
        :param sbar_width:                  Scrollbar width in pixels
        :type sbar_width:                   (int)
        :param sbar_arrow_width:            Scrollbar width of the arrow on the scrollbar. It will potentially impact the overall width of the scrollbar
        :type sbar_arrow_width:             (int)
        :param sbar_frame_color:            Scrollbar Color of frame around scrollbar (available only on some ttk themes)
        :type sbar_frame_color:             (str)
        :param sbar_relief:                 Scrollbar relief that will be used for the "thumb" of the scrollbar (the thing you grab that slides). Should be a constant that is defined at starting with "RELIEF_" - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID
        :type sbar_relief:                  (str)
        """

        self.UseDictionary = False
        self.ReturnValues = None
        self.ReturnValuesList = []
        self.ReturnValuesDictionary = {}
        self.DictionaryKeyCounter = 0
        self.ParentWindow = None
        self.ParentPanedWindow = None
        self.Rows = []
        self.TKFrame = None
        self.TKColFrame = None  # type: tk.Frame
        self.Scrollable = scrollable
        self.VerticalScrollOnly = vertical_scroll_only

        self.RightClickMenu = right_click_menu
        bg = background_color if background_color is not None else DEFAULT_BACKGROUND_COLOR
        self.ContainerElemementNumber = Window._GetAContainerNumber()
        self.ElementJustification = element_justification
        self.Justification = justification
        self.VerticalAlignment = vertical_alignment
        key = key if key is not None else k
        self.Grab = grab
        self.expand_x = expand_x
        self.expand_y = expand_y
        self.Layout(layout)
        sz = size if size != (None, None) else s
        pad = pad if pad is not None else p
        self.size_subsample_width = size_subsample_width
        self.size_subsample_height = size_subsample_height

        super().__init__(ELEM_TYPE_COLUMN, background_color=bg, size=sz, pad=pad, key=key, visible=visible, metadata=metadata,
                         sbar_trough_color=sbar_trough_color, sbar_background_color=sbar_background_color, sbar_arrow_color=sbar_arrow_color, sbar_width=sbar_width,
                         sbar_arrow_width=sbar_arrow_width, sbar_frame_color=sbar_frame_color, sbar_relief=sbar_relief)
        return

    def add_row(self, *args):
        """
        Not recommended user call.  Used to add rows of Elements to the Column Element.

        :param *args: The list of elements for this row
        :type *args:  List[Element]
        """

        NumRows = len(self.Rows)  # number of existing rows is our row number
        CurrentRowNumber = NumRows  # this row's number
        CurrentRow = []  # start with a blank row and build up
        # -------------------------  Add the elements to a row  ------------------------- #
        for i, element in enumerate(args):  # Loop through list of elements and add them to the row
            if type(element) == list:
                PopupError('Error creating Column layout',
                           'Layout has a LIST instead of an ELEMENT',
                           'This sometimes means you have a badly placed ]',
                           'The offensive list is:',
                           element,
                           'This list will be stripped from your layout', keep_on_top=True, image=_random_error_emoji()
                           )
                continue
            elif callable(element) and not isinstance(element, Element):
                PopupError('Error creating Column layout',
                           'Layout has a FUNCTION instead of an ELEMENT',
                           'This likely means you are missing () from your layout',
                           'The offensive list is:',
                           element,
                           'This item will be stripped from your layout', keep_on_top=True, image=_random_error_emoji())
                continue
            if element.ParentContainer is not None:
                warnings.warn(
                    '*** YOU ARE ATTEMPTING TO REUSE AN ELEMENT IN YOUR LAYOUT! Once placed in a layout, an element cannot be used in another layout. ***',
                    UserWarning)
                PopupError('Error creating Column layout',
                           'The layout specified has already been used',
                           'You MUST start witha "clean", unused layout every time you create a window',
                           'The offensive Element = ',
                           element,
                           'and has a key = ', element.Key,
                           'This item will be stripped from your layout',
                           'Hint - try printing your layout and matching the IDs "print(layout)"', keep_on_top=True, image=_random_error_emoji())
                continue
            element.Position = (CurrentRowNumber, i)
            element.ParentContainer = self
            CurrentRow.append(element)
            if element.Key is not None:
                self.UseDictionary = True
        # -------------------------  Append the row to list of Rows  ------------------------- #
        self.Rows.append(CurrentRow)

    def layout(self, rows):
        """
        Can use like the Window.Layout method, but it's better to use the layout parameter when creating

        :param rows: The rows of Elements
        :type rows:  List[List[Element]]
        :return:     Used for chaining
        :rtype:      (Column)
        """

        for row in rows:
            try:
                iter(row)
            except TypeError:
                PopupError('Error creating Column layout',
                           'Your row is not an iterable (e.g. a list)',
                           'Instead of a list, the type found was {}'.format(type(row)),
                           'The offensive row = ',
                           row,
                           'This item will be stripped from your layout', keep_on_top=True, image=_random_error_emoji())
                continue
            self.AddRow(*row)
        return self

    def _GetElementAtLocation(self, location):
        """
        Not user callable. Used to find the Element at a row, col position within the layout

        :param location:     (row, column) position of the element to find in layout
        :type  location:     (int, int)
        :return:             The element found at the location
        :rtype:              (Element)
        """

        (row_num, col_num) = location
        row = self.Rows[row_num]
        element = row[col_num]
        return element

    def update(self, visible=None):
        """
        Changes some of the settings for the Column Element. Must call `Window.Read` or `Window.Finalize` prior

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param visible: control visibility of element
        :type visible:  (bool)
        """
        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Column.update - The window was closed')
            return

        if self.expand_x and self.expand_y:
            expand = tk.BOTH
        elif self.expand_x:
            expand = tk.X
        elif self.expand_y:
            expand = tk.Y
        else:
            expand = None

        if visible is False:
            if self.TKColFrame:
                self._pack_forget_save_settings()
                # self.TKColFrame.pack_forget()
            if self.ParentPanedWindow:
                self.ParentPanedWindow.remove(self.TKColFrame)
        elif visible is True:
            if self.TKColFrame:
                self._pack_restore_settings()
                # self.TKColFrame.pack(padx=self.pad_used[0], pady=self.pad_used[1], fill=expand)
            if self.ParentPanedWindow:
                self.ParentPanedWindow.add(self.TKColFrame)
        if visible is not None:
            self._visible = visible

    def contents_changed(self):
        """
        When a scrollable column has part of its layout changed by making elements visible or invisible or the
        layout is extended for the Column, then this method needs to be called so that the new scroll area
        is computed to match the new contents.
        """
        self.TKColFrame.canvas.config(scrollregion=self.TKColFrame.canvas.bbox('all'))

    AddRow = add_row
    Layout = layout
    Update = update


Col = Column


# ---------------------------------------------------------------------- #
#                           Pane                                         #
# ---------------------------------------------------------------------- #
class Pane(Element):
    """
    A sliding Pane that is unique to tkinter.  Uses Columns to create individual panes
    """

    def __init__(self, pane_list, background_color=None, size=(None, None), s=(None, None), pad=None, p=None, orientation='vertical',
                 show_handle=True, relief=RELIEF_RAISED, handle_size=None, border_width=None, key=None, k=None, expand_x=None, expand_y=None, visible=True, metadata=None):
        """
        :param pane_list:        Must be a list of Column Elements. Each Column supplied becomes one pane that's shown
        :type pane_list:         List[Column] | Tuple[Column]
        :param background_color: color of background
        :type background_color:  (str)
        :param size:             (width, height) w=characters-wide, h=rows-high How much room to reserve for the Pane
        :type size:              (int, int)
        :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                 (int, int)  | (None, None)
        :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param orientation:      'horizontal' or 'vertical' or ('h' or 'v'). Direction the Pane should slide
        :type orientation:       (str)
        :param show_handle:      if True, the handle is drawn that makes it easier to grab and slide
        :type show_handle:       (bool)
        :param relief:           relief style. Values are same as other elements that use relief values. RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID
        :type relief:            (enum)
        :param handle_size:      Size of the handle in pixels
        :type handle_size:       (int)
        :param border_width:     width of border around element in pixels
        :type border_width:      (int)
        :param key:              Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key:               str | int | tuple | object
        :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                 str | int | tuple | object
        :param expand_x:         If True the column will automatically expand in the X direction to fill available space
        :type expand_x:          (bool)
        :param expand_y:         If True the column will automatically expand in the Y direction to fill available space
        :type expand_y:          (bool)
        :param visible:          set visibility state of the element
        :type visible:           (bool)
        :param metadata:         User metadata that can be set to ANYTHING
        :type metadata:          (Any)
        """

        self.UseDictionary = False
        self.ReturnValues = None
        self.ReturnValuesList = []
        self.ReturnValuesDictionary = {}
        self.DictionaryKeyCounter = 0
        self.ParentWindow = None
        self.Rows = []
        self.TKFrame = None
        self.PanedWindow = None
        self.Orientation = orientation
        self.PaneList = pane_list
        self.ShowHandle = show_handle
        self.Relief = relief
        self.HandleSize = handle_size or 8
        self.BorderDepth = border_width
        bg = background_color if background_color is not None else DEFAULT_BACKGROUND_COLOR

        self.Rows = [pane_list]
        key = key if key is not None else k
        sz = size if size != (None, None) else s
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y

        super().__init__(ELEM_TYPE_PANE, background_color=bg, size=sz, pad=pad, key=key, visible=visible, metadata=metadata)
        return

    def update(self, visible=None):
        """
        Changes some of the settings for the Pane Element. Must call `Window.Read` or `Window.Finalize` prior

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param visible: control visibility of element
        :type visible:  (bool)
        """
        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Pane.update - The window was closed')
            return

        if visible is False:
            self._pack_forget_save_settings()
        elif visible is True:
            self._pack_restore_settings()

        if visible is not None:
            self._visible = visible

    Update = update


# ---------------------------------------------------------------------- #
#                           Menu                                         #
# ---------------------------------------------------------------------- #
class Menu(Element):
    """
    Menu Element is the Element that provides a Menu Bar that goes across the top of the window, just below titlebar.
    Here is an example layout.  The "&" are shortcut keys ALT+key.
    Is a List of -  "Item String" + List
    Where Item String is what will be displayed on the Menubar itself.
    The List that follows the item represents the items that are shown then Menu item is clicked
    Notice how an "entry" in a mennu can be a list which means it branches out and shows another menu, etc. (resursive)
    menu_def = [['&File', ['!&Open', '&Save::savekey', '---', '&Properties', 'E&xit']],
                ['!&Edit', ['!&Paste', ['Special', 'Normal', ], 'Undo'], ],
                ['&Debugger', ['Popout', 'Launch Debugger']],
                ['&Toolbar', ['Command &1', 'Command &2', 'Command &3', 'Command &4']],
                ['&Help', '&About...'], ]
    Important Note!  The colors, font, look of the Menubar itself cannot be changed, only the menus shown AFTER clicking the menubar
    can be changed.  If you want to change the style/colors the Menubar, then you will have to use the MenubarCustom element.
    Finally, "keys" can be added to entries so make them unique.  The "Save" entry has a key associated with it. You
    can see it has a "::" which signifies the beginning of a key.  The user will not see the key portion when the
    menu is shown.  The key portion is returned as part of the event.
    """

    def __init__(self, menu_definition, background_color=None, text_color=None, disabled_text_color=None, size=(None, None), s=(None, None), tearoff=False,
                 font=None, pad=None, p=None, key=None, k=None, visible=True, metadata=None):
        """
        :param menu_definition:           The Menu definition specified using lists (docs explain the format)
        :type menu_definition:            List[List[Tuple[str, List[str]]]
        :param background_color:          color of the background of menus, NOT the Menubar
        :type background_color:           (str)
        :param text_color:                text color for menus, NOT the Menubar. Can be in #RRGGBB format or a color name "black".
        :type text_color:                 (str)
        :param disabled_text_color:       color to use for text when item in submenu, not the menubar itself, is disabled. Can be in #RRGGBB format or a color name "black"
        :type disabled_text_color:        (str)
        :param size:                      Not used in the tkinter port
        :type size:                       (int, int)
        :param s:                         Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
        :type s:                          (int, int)  | (None, None)
        :param tearoff:                   if True, then can tear the menu off from the window ans use as a floating window. Very cool effect
        :type tearoff:                    (bool)
        :param pad:                       Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:                        (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                         Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                          (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param font:                      specifies the  font family, size, etc. of submenus. Does NOT apply to the Menubar itself. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:                       (str or (str, int[, str]) or None)
        :param key:                       Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key:                        str | int | tuple | object
        :param k:                         Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                          str | int | tuple | object
        :param visible:                   set visibility state of the element
        :type visible:                    (bool)
        :param metadata:                  User metadata that can be set to ANYTHING
        :type metadata:                   (Any)
        """

        self.BackgroundColor = background_color if background_color is not None else theme_input_background_color()
        self.TextColor = text_color if text_color is not None else theme_input_text_color()

        self.DisabledTextColor = disabled_text_color if disabled_text_color is not None else COLOR_SYSTEM_DEFAULT
        self.MenuDefinition = copy.deepcopy(menu_definition)
        self.Widget = self.TKMenu = None  # type: tk.Menu
        self.MenuItemChosen = None
        key = key if key is not None else k
        sz = size if size != (None, None) else s
        pad = pad if pad is not None else p

        super().__init__(ELEM_TYPE_MENUBAR, background_color=self.BackgroundColor, text_color=self.TextColor, size=sz, pad=pad, key=key, visible=visible,
                         font=font, metadata=metadata)
        # super().__init__(ELEM_TYPE_MENUBAR, background_color=COLOR_SYSTEM_DEFAULT, text_color=COLOR_SYSTEM_DEFAULT, size=sz, pad=pad, key=key, visible=visible, font=None, metadata=metadata)

        self.Tearoff = tearoff

        return

    def _MenuItemChosenCallback(self, item_chosen):  # Menu Menu Item Chosen Callback
        """
        Not user callable.  Called when some end-point on the menu (an item) has been clicked.  Send the information back to the application as an event.  Before event can be sent

        :param item_chosen: the text that was clicked on / chosen from the menu
        :type item_chosen:  (str)
        """
        # print('IN MENU ITEM CALLBACK', item_chosen)
        self.MenuItemChosen = item_chosen
        self.ParentForm.LastButtonClicked = item_chosen
        self.ParentForm.FormRemainedOpen = True
        # if self.ParentForm.CurrentlyRunningMainloop:
        #     self.ParentForm.TKroot.quit()  # kick the users out of the mainloop
        _exit_mainloop(self.ParentForm)

    def update(self, menu_definition=None, visible=None):
        """
        Update a menubar - can change the menu definition and visibility.  The entire menu has to be specified

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param menu_definition: The menu definition list
        :type menu_definition:  List[List[Tuple[str, List[str]]]
        :param visible:         control visibility of element
        :type visible:          (bool)
        """
        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Menu.update - The window was closed')
            return

        if menu_definition is not None:
            self.MenuDefinition = copy.deepcopy(menu_definition)
            if self.TKMenu is None:  # if no menu exists, make one
                self.TKMenu = tk.Menu(self.ParentForm.TKroot, tearoff=self.Tearoff, tearoffcommand=self._tearoff_menu_callback)  # create the menubar
            menubar = self.TKMenu
            # Delete all the menu items (assuming 10000 should be a high enough number to cover them all)
            menubar.delete(0, 10000)
            self.Widget = self.TKMenu  # same the new menu so user can access to extend PySimpleGUI
            for menu_entry in self.MenuDefinition:
                baritem = tk.Menu(menubar, tearoff=self.Tearoff, tearoffcommand=self._tearoff_menu_callback)

                if self.BackgroundColor not in (COLOR_SYSTEM_DEFAULT, None):
                    baritem.config(bg=self.BackgroundColor)
                if self.TextColor not in (COLOR_SYSTEM_DEFAULT, None):
                    baritem.config(fg=self.TextColor)
                if self.DisabledTextColor not in (COLOR_SYSTEM_DEFAULT, None):
                    baritem.config(disabledforeground=self.DisabledTextColor)
                if self.Font is not None:
                    baritem.config(font=self.Font)

                if self.Font is not None:
                    baritem.config(font=self.Font)
                pos = menu_entry[0].find(MENU_SHORTCUT_CHARACTER)
                # print(pos)
                if pos != -1:
                    if pos == 0 or menu_entry[0][pos - len(MENU_SHORTCUT_CHARACTER)] != "\\":
                        menu_entry[0] = menu_entry[0][:pos] + menu_entry[0][pos + len(MENU_SHORTCUT_CHARACTER):]
                if menu_entry[0][0] == MENU_DISABLED_CHARACTER:
                    menubar.add_cascade(label=menu_entry[0][len(MENU_DISABLED_CHARACTER):], menu=baritem, underline=pos)
                    menubar.entryconfig(menu_entry[0][len(MENU_DISABLED_CHARACTER):], state='disabled')
                else:
                    menubar.add_cascade(label=menu_entry[0], menu=baritem, underline=pos)

                if len(menu_entry) > 1:
                    AddMenuItem(baritem, menu_entry[1], self)

        if visible is False:
            self.ParentForm.TKroot.configure(menu=[])  # this will cause the menubar to disappear
        elif self.TKMenu is not None:
            self.ParentForm.TKroot.configure(menu=self.TKMenu)
        if visible is not None:
            self._visible = visible

    Update = update


MenuBar = Menu  # another name for Menu to make it clear it's the Menu Bar
Menubar = Menu  # another name for Menu to make it clear it's the Menu Bar


# ---------------------------------------------------------------------- #
#                           Table                                        #
# ---------------------------------------------------------------------- #
class Table(Element):

    def __init__(self, values, headings=None, visible_column_map=None, col_widths=None, cols_justification=None, def_col_width=10,
                 auto_size_columns=True, max_col_width=20, select_mode=None, display_row_numbers=False, starting_row_number=0, num_rows=None,
                 row_height=None, font=None, justification='right', text_color=None, background_color=None,
                 alternating_row_color=None, selected_row_colors=(None, None), header_text_color=None, header_background_color=None, header_font=None, header_border_width=None,
                 header_relief=None,
                 row_colors=None, vertical_scroll_only=True, hide_vertical_scroll=False, border_width=None,
                 sbar_trough_color=None, sbar_background_color=None, sbar_arrow_color=None, sbar_width=None, sbar_arrow_width=None, sbar_frame_color=None, sbar_relief=None,
                 size=(None, None), s=(None, None), change_submits=False, enable_events=False, enable_click_events=False, right_click_selects=False, bind_return_key=False,
                 pad=None, p=None,
                 key=None, k=None, tooltip=None, right_click_menu=None, expand_x=False, expand_y=False, visible=True, metadata=None):
        """
        :param values:                  Your table data represented as a 2-dimensions table... a list of rows, with each row representing a row in your table.
        :type values:                   List[List[str | int | float]]
        :param headings:                The headings to show on the top line
        :type headings:                 List[str]
        :param visible_column_map:      One entry for each column. False indicates the column is not shown
        :type visible_column_map:       List[bool]
        :param col_widths:              Number of characters that each column will occupy
        :type col_widths:               List[int]
        :param cols_justification:      Justification for EACH column. Is a list of strings with the value 'l', 'r', 'c' that indicates how the column will be justified. Either no columns should be set, or have to have one for every colun
        :type cols_justification:       List[str] or Tuple[str] or None
        :param def_col_width:           Default column width in characters
        :type def_col_width:            (int)
        :param auto_size_columns:       if True columns will be sized automatically
        :type auto_size_columns:        (bool)
        :param max_col_width:           Maximum width for all columns in characters
        :type max_col_width:            (int)
        :param select_mode:             Select Mode. Valid values start with "TABLE_SELECT_MODE_".  Valid values are: TABLE_SELECT_MODE_NONE TABLE_SELECT_MODE_BROWSE TABLE_SELECT_MODE_EXTENDED
        :type select_mode:              (enum)
        :param display_row_numbers:     if True, the first column of the table will be the row #
        :type display_row_numbers:      (bool)
        :param starting_row_number:     The row number to use for the first row. All following rows will be based on this starting value. Default is 0.
        :type starting_row_number:      (int)
        :param num_rows:                The number of rows of the table to display at a time
        :type num_rows:                 (int)
        :param row_height:              height of a single row in pixels
        :type row_height:               (int)
        :param font:                    specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:                     (str or (str, int[, str]) or None)
        :param justification:           'left', 'right', 'center' are valid choices
        :type justification:            (str)
        :param text_color:              color of the text
        :type text_color:               (str)
        :param background_color:        color of background
        :type background_color:         (str)
        :param alternating_row_color:   if set then every other row will have this color in the background.
        :type alternating_row_color:    (str)
        :param selected_row_colors:     Sets the text color and background color for a selected row. Same format as button colors - tuple ('red', 'yellow') or string 'red on yellow'. Defaults to theme's button color
        :type selected_row_colors:      str or (str, str)
        :param header_text_color:       sets the text color for the header
        :type header_text_color:        (str)
        :param header_background_color: sets the background color for the header
        :type header_background_color:  (str)
        :param header_font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type header_font:              (str or (str, int[, str]) or None)
        :param header_border_width:     Border width for the header portion
        :type header_border_width:      (int | None)
        :param header_relief:           Relief style for the header. Values are same as other elements that use relief. RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID
        :type header_relief:            (str | None)
        :param row_colors:              list of tuples of (row, background color) OR (row, foreground color, background color). Sets the colors of listed rows to the color(s) provided (note the optional foreground color)
        :type row_colors:               List[Tuple[int, str] | Tuple[Int, str, str]]
        :param vertical_scroll_only:    if True only the vertical scrollbar will be visible
        :type vertical_scroll_only:     (bool)
        :param hide_vertical_scroll:    if True vertical scrollbar will be hidden
        :type hide_vertical_scroll:     (bool)
        :param border_width:            Border width/depth in pixels
        :type border_width:             (int)
        :param sbar_trough_color:           Scrollbar color of the trough
        :type sbar_trough_color:            (str)
        :param sbar_background_color:       Scrollbar color of the background of the arrow buttons at the ends AND the color of the "thumb" (the thing you grab and slide). Switches to arrow color when mouse is over
        :type sbar_background_color:        (str)
        :param sbar_arrow_color:            Scrollbar color of the arrow at the ends of the scrollbar (it looks like a button). Switches to background color when mouse is over
        :type sbar_arrow_color:             (str)
        :param sbar_width:                  Scrollbar width in pixels
        :type sbar_width:                   (int)
        :param sbar_arrow_width:            Scrollbar width of the arrow on the scrollbar. It will potentially impact the overall width of the scrollbar
        :type sbar_arrow_width:             (int)
        :param sbar_frame_color:            Scrollbar Color of frame around scrollbar (available only on some ttk themes)
        :type sbar_frame_color:             (str)
        :param sbar_relief:                 Scrollbar relief that will be used for the "thumb" of the scrollbar (the thing you grab that slides). Should be a constant that is defined at starting with "RELIEF_" - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID
        :type sbar_relief:                  (str)
        :param size:                    DO NOT USE! Use num_rows instead
        :type size:                     (int, int)
        :param change_submits:          DO NOT USE. Only listed for backwards compat - Use enable_events instead
        :type change_submits:           (bool)
        :param enable_events:           Turns on the element specific events. Table events happen when row is clicked
        :type enable_events:            (bool)
        :param enable_click_events:     Turns on the element click events that will give you (row, col) click data when the table is clicked
        :type enable_click_events:      (bool)
        :param right_click_selects:     If True, then right clicking a row will select that row if multiple rows are not currently selected
        :type right_click_selects:      (bool)
        :param bind_return_key:         if True, pressing return key will cause event coming from Table, ALSO a left button double click will generate an event if this parameter is True
        :type bind_return_key:          (bool)
        :param pad:                     Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:                      (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                       Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                        (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param key:                     Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element
        :type key:                      str | int | tuple | object
        :param k:                       Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                        str | int | tuple | object
        :param tooltip:                 text, that will appear when mouse hovers over the element
        :type tooltip:                  (str)
        :param right_click_menu:        A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:         List[List[ List[str] | str ]]
        :param expand_x:                If True the element will automatically expand in the X direction to fill available space
        :type expand_x:                 (bool)
        :param expand_y:                If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:                 (bool)
        :param visible:                 set visibility state of the element
        :type visible:                  (bool)
        :param metadata:                User metadata that can be set to ANYTHING
        :type metadata:                 (Any)
        """

        self.Values = values
        self.ColumnHeadings = headings
        self.ColumnsToDisplay = visible_column_map
        self.ColumnWidths = col_widths
        self.cols_justification = cols_justification
        self.MaxColumnWidth = max_col_width
        self.DefaultColumnWidth = def_col_width
        self.AutoSizeColumns = auto_size_columns
        self.BackgroundColor = background_color if background_color is not None else DEFAULT_BACKGROUND_COLOR
        self.TextColor = text_color
        self.HeaderTextColor = header_text_color if header_text_color is not None else LOOK_AND_FEEL_TABLE[CURRENT_LOOK_AND_FEEL]['TEXT_INPUT']
        self.HeaderBackgroundColor = header_background_color if header_background_color is not None else LOOK_AND_FEEL_TABLE[CURRENT_LOOK_AND_FEEL]['INPUT']
        self.HeaderFont = header_font
        self.Justification = justification
        self.InitialState = None
        self.SelectMode = select_mode
        self.DisplayRowNumbers = display_row_numbers
        self.NumRows = num_rows if num_rows is not None else size[1]
        self.RowHeight = row_height
        self.Widget = self.TKTreeview = None  # type: ttk.Treeview
        self.AlternatingRowColor = alternating_row_color
        self.VerticalScrollOnly = vertical_scroll_only
        self.HideVerticalScroll = hide_vertical_scroll
        self.SelectedRows = []
        self.ChangeSubmits = change_submits or enable_events
        self.BindReturnKey = bind_return_key
        self.StartingRowNumber = starting_row_number  # When displaying row numbers, where to start
        self.RowHeaderText = 'Row'
        self.enable_click_events = enable_click_events
        self.right_click_selects = right_click_selects
        self.last_clicked_position = (None, None)
        self.HeaderBorderWidth = header_border_width
        self.BorderWidth = border_width
        self.HeaderRelief = header_relief
        self.table_ttk_style_name = None  # the ttk style name for the Table itself
        if selected_row_colors == (None, None):
            # selected_row_colors = DEFAULT_TABLE_AND_TREE_SELECTED_ROW_COLORS
            selected_row_colors = theme_button_color()
        else:
            try:
                if isinstance(selected_row_colors, str):
                    selected_row_colors = selected_row_colors.split(' on ')
            except Exception as e:
                print('* Table Element Warning * you messed up with color formatting of Selected Row Color', e)
        self.SelectedRowColors = selected_row_colors

        self.RightClickMenu = right_click_menu
        self.RowColors = row_colors
        self.tree_ids = []  # ids returned when inserting items into table - will use to delete colors
        key = key if key is not None else k
        sz = size if size != (None, None) else s
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y

        super().__init__(ELEM_TYPE_TABLE, text_color=text_color, background_color=background_color, font=font,
                         size=sz, pad=pad, key=key, tooltip=tooltip, visible=visible, metadata=metadata,
                         sbar_trough_color=sbar_trough_color, sbar_background_color=sbar_background_color, sbar_arrow_color=sbar_arrow_color, sbar_width=sbar_width,
                         sbar_arrow_width=sbar_arrow_width, sbar_frame_color=sbar_frame_color, sbar_relief=sbar_relief)
        return

    def update(self, values=None, num_rows=None, visible=None, select_rows=None, alternating_row_color=None, row_colors=None):
        """
        Changes some of the settings for the Table Element. Must call `Window.Read` or `Window.Finalize` prior

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param values:                A new 2-dimensional table to show
        :type values:                 List[List[str | int | float]]
        :param num_rows:              How many rows to display at a time
        :type num_rows:               (int)
        :param visible:               if True then will be visible
        :type visible:                (bool)
        :param select_rows:           List of rows to select as if user did
        :type select_rows:            List[int]
        :param alternating_row_color: the color to make every other row
        :type alternating_row_color:  (str)
        :param row_colors:            list of tuples of (row, background color) OR (row, foreground color, background color). Changes the colors of listed rows to the color(s) provided (note the optional foreground color)
        :type row_colors:             List[Tuple[int, str] | Tuple[Int, str, str]]
        """
        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Table.update - The window was closed')
            return

        if values is not None:
            for id in self.tree_ids:
                self.TKTreeview.item(id, tags=())
                if self.BackgroundColor is not None and self.BackgroundColor != COLOR_SYSTEM_DEFAULT:
                    self.TKTreeview.tag_configure(id, background=self.BackgroundColor)
                else:
                    self.TKTreeview.tag_configure(id, background='#FFFFFF', foreground='#000000')
                if self.TextColor is not None and self.TextColor != COLOR_SYSTEM_DEFAULT:
                    self.TKTreeview.tag_configure(id, foreground=self.TextColor)
                else:
                    self.TKTreeview.tag_configure(id, foreground='#000000')

            children = self.TKTreeview.get_children()
            for i in children:
                self.TKTreeview.detach(i)
                self.TKTreeview.delete(i)
            children = self.TKTreeview.get_children()

            self.tree_ids = []
            for i, value in enumerate(values):
                if self.DisplayRowNumbers:
                    value = [i + self.StartingRowNumber] + value
                id = self.TKTreeview.insert('', 'end', text=value, iid=i + 1, values=value, tag=i)
                if self.BackgroundColor is not None and self.BackgroundColor != COLOR_SYSTEM_DEFAULT:
                    self.TKTreeview.tag_configure(id, background=self.BackgroundColor)
                else:
                    self.TKTreeview.tag_configure(id, background='#FFFFFF')
                self.tree_ids.append(id)
            self.Values = values
            self.SelectedRows = []
        if visible is False:
            self._pack_forget_save_settings(self.element_frame)
        elif visible is True:
            self._pack_restore_settings(self.element_frame)

        if num_rows is not None:
            self.TKTreeview.config(height=num_rows)
        if select_rows is not None:
            rows_to_select = [i + 1 for i in select_rows]
            self.TKTreeview.selection_set(rows_to_select)

        if alternating_row_color is not None:  # alternating colors
            self.AlternatingRowColor = alternating_row_color

        if self.AlternatingRowColor is not None:
            for row in range(0, len(self.Values), 2):
                self.TKTreeview.tag_configure(row, background=self.AlternatingRowColor)
        if row_colors is not None:  # individual row colors
            self.RowColors = row_colors
            for row_def in self.RowColors:
                if len(row_def) == 2:  # only background is specified
                    self.TKTreeview.tag_configure(row_def[0], background=row_def[1])
                else:
                    self.TKTreeview.tag_configure(row_def[0], background=row_def[2], foreground=row_def[1])
        if visible is not None:
            self._visible = visible

    def _treeview_selected(self, event):
        """
        Not user callable.  Callback function that is called when something is selected from Table.
        Stores the selected rows in Element as they are being selected. If events enabled, then returns from Read

        :param event: event information from tkinter
        :type event:  (unknown)
        """
        # print('**-- in treeview selected --**')
        selections = self.TKTreeview.selection()
        self.SelectedRows = [int(x) - 1 for x in selections]
        if self.ChangeSubmits:
            if self.Key is not None:
                self.ParentForm.LastButtonClicked = self.Key
            else:
                self.ParentForm.LastButtonClicked = ''
            self.ParentForm.FormRemainedOpen = True
            # if self.ParentForm.CurrentlyRunningMainloop:
            #     self.ParentForm.TKroot.quit()
            _exit_mainloop(self.ParentForm)

    def _treeview_double_click(self, event):
        """
        Not user callable.  Callback function that is called when something is selected from Table.
        Stores the selected rows in Element as they are being selected. If events enabled, then returns from Read

        :param event: event information from tkinter
        :type event:  (unknown)
        """
        selections = self.TKTreeview.selection()
        self.SelectedRows = [int(x) - 1 for x in selections]
        if self.BindReturnKey:  # Signifies BOTH a return key AND a double click
            if self.Key is not None:
                self.ParentForm.LastButtonClicked = self.Key
            else:
                self.ParentForm.LastButtonClicked = ''
            self.ParentForm.FormRemainedOpen = True
            # if self.ParentForm.CurrentlyRunningMainloop:
            #     self.ParentForm.TKroot.quit()
            _exit_mainloop(self.ParentForm)

    def _table_clicked(self, event):
        """
        Not user callable.  Callback function that is called a click happens on a table.
        Stores the selected rows in Element as they are being selected. If events enabled, then returns from Read

        :param event: event information from tkinter
        :type event:  (unknown)
        """
        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return
        # popup(obj_to_string_single_obj(event))
        try:
            region = self.Widget.identify('region', event.x, event.y)
            if region == 'heading':
                row = -1
            elif region == 'cell':
                row = int(self.Widget.identify_row(event.y))-1
            elif region == 'separator':
                row = None
            else:
                row = None
            col_identified = self.Widget.identify_column(event.x)
            if col_identified:      # Sometimes tkinter returns a value of '' which would cause an error if cast to an int
                column = int(self.Widget.identify_column(event.x)[1:])-1-int(self.DisplayRowNumbers is True)
            else:
                column = None
        except Exception as e:
            warnings.warn('Error getting table click data for table with key= {}\nError: {}'.format(self.Key, e), UserWarning)
            if not SUPPRESS_ERROR_POPUPS:
                _error_popup_with_traceback('Unable to complete operation getting the clicked event for table with key {}'.format(self.Key), _create_error_message(), e, 'Event data:', obj_to_string_single_obj(event))
            row = column = None

        self.last_clicked_position = (row, column)

        # update the rows being selected if appropriate
        self.ParentForm.TKroot.update()
        # self.TKTreeview.()
        selections = self.TKTreeview.selection()
        if self.right_click_selects and len(selections) <= 1:
            if (event.num == 3 and not running_mac()) or (event.num == 2 and running_mac()):
                if row != -1 and row is not None:
                    selections = [row+1]
                    self.TKTreeview.selection_set(selections)
        # print(selections)
        self.SelectedRows = [int(x) - 1 for x in selections]
        # print('The new selected rows = ', self.SelectedRows)
        if self.enable_click_events is True:
            if self.Key is not None:
                self.ParentForm.LastButtonClicked = (self.Key, TABLE_CLICKED_INDICATOR, (row, column))
            else:
                self.ParentForm.LastButtonClicked = ''
            self.ParentForm.FormRemainedOpen = True
            _exit_mainloop(self.ParentForm)

    def get(self):
        """
        Get the selected rows using tktiner's selection method.  Returns a list of the selected rows.

        :return: a list of the index of the selected rows (a list of ints)
        :rtype:  List[int]
        """

        selections = self.TKTreeview.selection()
        selected_rows = [int(x) - 1 for x in selections]
        return selected_rows

    def get_last_clicked_position(self):
        """
        Returns a tuple with the row and column of the cell that was last clicked.
        Headers will have a row == -1 and the Row Number Column (if present) will have a column == -1
        :return: The (row,col) position of the last cell clicked in the table
        :rtype:  (int | None, int | None)
        """
        return self.last_clicked_position

    Update = update
    Get = get


# ---------------------------------------------------------------------- #
#                           Tree                                         #
# ---------------------------------------------------------------------- #
class Tree(Element):
    """
    Tree Element - Presents data in a tree-like manner, much like a file/folder browser.  Uses the TreeData class
    to hold the user's data and pass to the element for display.
    """

    def __init__(self, data=None, headings=None, visible_column_map=None, col_widths=None, col0_width=10, col0_heading='',
                 def_col_width=10, auto_size_columns=True, max_col_width=20, select_mode=None, show_expanded=False,
                 change_submits=False, enable_events=False, click_toggles_select=None, font=None, justification='right', text_color=None, border_width=None,
                 background_color=None, selected_row_colors=(None, None), header_text_color=None, header_background_color=None, header_font=None, header_border_width=None,
                 header_relief=None, num_rows=None,
                 sbar_trough_color=None, sbar_background_color=None, sbar_arrow_color=None, sbar_width=None, sbar_arrow_width=None, sbar_frame_color=None, sbar_relief=None,
                 row_height=None, vertical_scroll_only=True, hide_vertical_scroll=False, pad=None, p=None, key=None, k=None, tooltip=None,
                 right_click_menu=None, expand_x=False, expand_y=False, visible=True, metadata=None):
        """
        :param data:                    The data represented using a PySimpleGUI provided TreeData class
        :type data:                     (TreeData)
        :param headings:                List of individual headings for each column
        :type headings:                 List[str]
        :param visible_column_map:      Determines if a column should be visible. If left empty, all columns will be shown
        :type visible_column_map:       List[bool]
        :param col_widths:              List of column widths so that individual column widths can be controlled
        :type col_widths:               List[int]
        :param col0_width:              Size of Column 0 which is where the row numbers will be optionally shown
        :type col0_width:               (int)
        :param col0_heading:            Text to be shown in the header for the left-most column
        :type col0_heading:             (str)
        :param def_col_width:           default column width
        :type def_col_width:            (int)
        :param auto_size_columns:       if True, the size of a column is determined  using the contents of the column
        :type auto_size_columns:        (bool)
        :param max_col_width:           the maximum size a column can be
        :type max_col_width:            (int)
        :param select_mode:             Use same values as found on Table Element.  Valid values include: TABLE_SELECT_MODE_NONE TABLE_SELECT_MODE_BROWSE TABLE_SELECT_MODE_EXTENDED
        :type select_mode:              (enum)
        :param show_expanded:           if True then the tree will be initially shown with all nodes completely expanded
        :type show_expanded:            (bool)
        :param change_submits:          DO NOT USE. Only listed for backwards compat - Use enable_events instead
        :type change_submits:           (bool)
        :param enable_events:           Turns on the element specific events. Tree events happen when row is clicked
        :type enable_events:            (bool)
        :param click_toggles_select:    If True then clicking a row will cause the selection for that row to toggle between selected and deselected
        :type click_toggles_select:     (bool)
        :param font:                    specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:                     (str or (str, int[, str]) or None)
        :param justification:           'left', 'right', 'center' are valid choices
        :type justification:            (str)
        :param text_color:              color of the text
        :type text_color:               (str)
        :param border_width:            Border width/depth in pixels
        :type border_width:             (int)
        :param background_color:        color of background
        :type background_color:         (str)
        :param selected_row_colors:     Sets the text color and background color for a selected row. Same format as button colors - tuple ('red', 'yellow') or string 'red on yellow'. Defaults to theme's button color
        :type selected_row_colors:      str or (str, str)
        :param header_text_color:       sets the text color for the header
        :type header_text_color:        (str)
        :param header_background_color: sets the background color for the header
        :type header_background_color:  (str)
        :param header_font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type header_font:              (str or (str, int[, str]) or None)
        :param header_border_width:     Border width for the header portion
        :type header_border_width:      (int | None)
        :param header_relief:           Relief style for the header. Values are same as other elements that use relief. RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID
        :type header_relief:            (str | None)
        :param num_rows:                The number of rows of the table to display at a time
        :type num_rows:                 (int)
        :param row_height:              height of a single row in pixels
        :type row_height:               (int)
        :param vertical_scroll_only:    if True only the vertical scrollbar will be visible
        :type vertical_scroll_only:     (bool)
        :param hide_vertical_scroll:    if True vertical scrollbar will be hidden
        :type hide_vertical_scroll:     (bool)
        :param sbar_trough_color:           Scrollbar color of the trough
        :type sbar_trough_color:            (str)
        :param sbar_background_color:       Scrollbar color of the background of the arrow buttons at the ends AND the color of the "thumb" (the thing you grab and slide). Switches to arrow color when mouse is over
        :type sbar_background_color:        (str)
        :param sbar_arrow_color:            Scrollbar color of the arrow at the ends of the scrollbar (it looks like a button). Switches to background color when mouse is over
        :type sbar_arrow_color:             (str)
        :param sbar_width:                  Scrollbar width in pixels
        :type sbar_width:                   (int)
        :param sbar_arrow_width:            Scrollbar width of the arrow on the scrollbar. It will potentially impact the overall width of the scrollbar
        :type sbar_arrow_width:             (int)
        :param sbar_frame_color:            Scrollbar Color of frame around scrollbar (available only on some ttk themes)
        :type sbar_frame_color:             (str)
        :param sbar_relief:                 Scrollbar relief that will be used for the "thumb" of the scrollbar (the thing you grab that slides). Should be a constant that is defined at starting with "RELIEF_" - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID
        :type sbar_relief:                  (str)
        :param pad:                     Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
        :type pad:                      (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param p:                       Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
        :type p:                        (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
        :param key:                     Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element
        :type key:                      str | int | tuple | object
        :param k:                       Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k:                        str | int | tuple | object
        :param tooltip:                 text, that will appear when mouse hovers over the element
        :type tooltip:                  (str)
        :param right_click_menu:        A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:         List[List[str] | str]]
        :param expand_x:                If True the element will automatically expand in the X direction to fill available space
        :type expand_x:                 (bool)
        :param expand_y:                If True the element will automatically expand in the Y direction to fill available space
        :type expand_y:                 (bool)
        :param visible:                 set visibility state of the element
        :type visible:                  (bool)
        :param metadata:                User metadata that can be set to ANYTHING
        :type metadata:                 (Any)
        """

        self.image_dict = {}

        self.TreeData = data
        self.ColumnHeadings = headings
        self.ColumnsToDisplay = visible_column_map
        self.ColumnWidths = col_widths
        self.MaxColumnWidth = max_col_width
        self.DefaultColumnWidth = def_col_width
        self.AutoSizeColumns = auto_size_columns
        self.BackgroundColor = background_color if background_color is not None else DEFAULT_BACKGROUND_COLOR
        self.TextColor = text_color
        self.HeaderTextColor = header_text_color if header_text_color is not None else LOOK_AND_FEEL_TABLE[CURRENT_LOOK_AND_FEEL]['TEXT_INPUT']
        self.HeaderBackgroundColor = header_background_color if header_background_color is not None else LOOK_AND_FEEL_TABLE[CURRENT_LOOK_AND_FEEL]['INPUT']
        self.HeaderBorderWidth = header_border_width
        self.BorderWidth = border_width
        self.HeaderRelief = header_relief
        self.click_toggles_select = click_toggles_select
        if selected_row_colors == (None, None):
            # selected_row_colors = DEFAULT_TABLE_AND_TREE_SELECTED_ROW_COLORS
            selected_row_colors = theme_button_color()
        else:
            try:
                if isinstance(selected_row_colors, str):
                    selected_row_colors = selected_row_colors.split(' on ')
            except Exception as e:
                print('* Table Element Warning * you messed up with color formatting of Selected Row Color', e)
        self.SelectedRowColors = selected_row_colors

        self.HeaderFont = header_font
        self.Justification = justification
        self.InitialState = None
        self.SelectMode = select_mode
        self.ShowExpanded = show_expanded
        self.NumRows = num_rows
        self.Col0Width = col0_width
        self.col0_heading = col0_heading
        self.TKTreeview = None  # type: ttk.Treeview
        self.element_frame = None  # type: tk.Frame
        self.VerticalScrollOnly = vertical_scroll_only
        self.HideVerticalScroll = hide_vertical_scroll
        self.SelectedRows = []
        self.ChangeSubmits = change_submits or enable_events
        self.RightClickMenu = right_click_menu
        self.RowHeight = row_height
        self.IconList = {}
        self.IdToKey = {'': ''}
        self.KeyToID = {'': ''}
        key = key if key is not None else k
        pad = pad if pad is not None else p
        self.expand_x = expand_x
        self.expand_y = expand_y

        super().__init__(ELEM_TYPE_TREE, text_color=text_color, background_color=background_color, font=font, pad=pad, key=key, tooltip=tooltip,
                         visible=visible, metadata=metadata,
                         sbar_trough_color=sbar_trough_color, sbar_background_color=sbar_background_color, sbar_arrow_color=sbar_arrow_color, sbar_width=sbar_width,
                         sbar_arrow_width=sbar_arrow_width, sbar_frame_color=sbar_frame_color, sbar_relief=sbar_relief)
        return

    def _treeview_selected(self, event):
        """
        Not a user function.  Callback function that happens when an item is selected from the tree.  In this
        method, it saves away the reported selections so they can be properly returned.

        :param event: An event parameter passed in by tkinter.  Not used
        :type event:  (Any)
        """

        selections = self.TKTreeview.selection()
        selected_rows = [self.IdToKey[x] for x in selections]
        if self.click_toggles_select:
            if set(self.SelectedRows) == set(selected_rows):
                for item in selections:
                    self.TKTreeview.selection_remove(item)
                selections = []
        self.SelectedRows = [self.IdToKey[x] for x in selections]

        if self.ChangeSubmits:
            MyForm = self.ParentForm
            if self.Key is not None:
                self.ParentForm.LastButtonClicked = self.Key
            else:
                self.ParentForm.LastButtonClicked = ''
            self.ParentForm.FormRemainedOpen = True
            # if self.ParentForm.CurrentlyRunningMainloop:
            #     self.ParentForm.TKroot.quit()
            _exit_mainloop(self.ParentForm)

    def add_treeview_data(self, node):
        """
        Not a user function.  Recursive method that inserts tree data into the tkinter treeview widget.

        :param node: The node to insert.  Will insert all nodes from starting point downward, recursively
        :type node:  (TreeData)
        """
        if node.key != '':
            if node.icon:
                try:
                    if node.icon not in self.image_dict:
                        if type(node.icon) is bytes:
                            photo = tk.PhotoImage(data=node.icon)
                        else:
                            photo = tk.PhotoImage(file=node.icon)
                        self.image_dict[node.icon] = photo
                    else:
                        photo = self.image_dict.get(node.icon)

                    node.photo = photo
                    id = self.TKTreeview.insert(self.KeyToID[node.parent], 'end', iid=None, text=node.text,
                                                values=node.values, open=self.ShowExpanded, image=node.photo)
                    self.IdToKey[id] = node.key
                    self.KeyToID[node.key] = id
                except:
                    self.photo = None
            else:
                id = self.TKTreeview.insert(self.KeyToID[node.parent], 'end', iid=None, text=node.text,
                                            values=node.values, open=self.ShowExpanded)
                self.IdToKey[id] = node.key
                self.KeyToID[node.key] = id

        for node in node.children:
            self.add_treeview_data(node)

    def update(self, values=None, key=None, value=None, text=None, icon=None, visible=None, expand_node=None):
        """
        Changes some of the settings for the Tree Element. Must call `Window.Read` or `Window.Finalize` prior

        Changes will not be visible in your window until you call window.read or window.refresh.

        If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
        function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
        when made visible.

        :param values:      Representation of the tree
        :type values:       (TreeData)
        :param key:         identifies a particular item in tree to update
        :type key:          str | int | tuple | object
        :param value:       sets the node identified by key to a particular value
        :type value:        (Any)
        :param text:        sets the node identified by key to this string
        :type text:         (str)
        :param icon:        can be either a base64 icon or a filename for the icon
        :type icon:         bytes | str
        :param visible:     control visibility of element
        :type visible:      (bool)
        :param expand_node: if True the node specified by key parameter will be expanded
        :type expand_node:  (bool)
        """

        if not self._widget_was_created():  # if widget hasn't been created yet, then don't allow
            return

        if self._this_elements_window_closed():
            _error_popup_with_traceback('Error in Tree.update - The window was closed')
            return

        if values is not None:
            children = self.TKTreeview.get_children()
            for i in children:
                self.TKTreeview.detach(i)
                self.TKTreeview.delete(i)
            children = self.TKTreeview.get_children()
            self.TreeData = values
            self.IdToKey = {'': ''}
            self.KeyToID = {'': ''}
            self.add_treeview_data(self.TreeData.root_node)
            self.SelectedRows = []
        if key is not None:
            for id in self.IdToKey.keys():
                if key == self.IdToKey[id]:
                    break
            else:
                id = None
                print('** Key not found **')
        else:
            id = None
        if id:
            # item = self.TKTreeview.item(id)
            if value is not None:
                self.TKTreeview.item(id, values=value)
            if text is not None:
                self.TKTreeview.item(id, text=text)
            if icon is not None:
                try:
                    if type(icon) is bytes:
                        photo = tk.PhotoImage(data=icon)
                    else:
                        photo = tk.PhotoImage(file=icon)
                    self.TKTreeview.item(id, image=photo)
                    self.IconList[key] = photo  # save so that it's not deleted (save reference)
                except:
                    pass
            # item = self.TKTreeview.item(id)
        if visible is False:
            self._pack_forget_save_settings(self.element_frame)
        elif visible is True:
            self._pack_restore_settings(self.element_frame)

        if visible is not None:
            self._visible = visible
        if expand_node is not None:
            if id:
                self.TKTreeview.item(id, open=True if expand_node else False)
        return self

    Update = update


class TreeData(object):
    """
    Class that user fills in to represent their tree data. It's a very simple tree representation with a root "Node"
    with possibly one or more children "Nodes".  Each Node contains a key, text to display, list of values to display
    and an icon.  The entire tree is built using a single method, Insert.  Nothing else is required to make the tree.
    """

    class Node(object):
        """
        Contains information about the individual node in the tree
        """

        def __init__(self, parent, key, text, values, icon=None):
            """
            Represents a node within the TreeData class

            :param parent: The parent Node
            :type parent:  (TreeData.Node)
            :param key:    Used to uniquely identify this node
            :type key:     str | int | tuple | object
            :param text:   The text that is displayed at this node's location
            :type text:    (str)
            :param values: The list of values that are displayed at this node
            :type values:  List[Any]
            :param icon:   just a icon
            :type icon:    str | bytes
            """

            self.parent = parent  # type: TreeData.Node
            self.children = []  # type: List[TreeData.Node]
            self.key = key  # type: str
            self.text = text  # type: str
            self.values = values  # type: List[Any]
            self.icon = icon  # type: str | bytes

        def _Add(self, node):
            self.children.append(node)

    def __init__(self):
        """
        Instantiate the object, initializes the Tree Data, creates a root node for you
        """
        self.tree_dict = {}  # type: Dict[str, TreeData.Node]
        self.root_node = self.Node("", "", 'root', [], None)  # The root node
        self.tree_dict[""] = self.root_node  # Start the tree out with the root node

    def _AddNode(self, key, node):
        """
        Adds a node to tree dictionary (not user callable)

        :param key:  Uniquely identifies this Node
        :type key:   (str)
        :param node: Node being added
        :type node:  (TreeData.Node)
        """
        self.tree_dict[key] = node

    def insert(self, parent, key, text, values, icon=None):
        """
        Inserts a node into the tree. This is how user builds their tree, by Inserting Nodes
        This is the ONLY user callable method in the TreeData class

        :param parent: the parent Node
        :type parent:  (Node)
        :param key:    Used to uniquely identify this node
        :type key:     str | int | tuple | object
        :param text:   The text that is displayed at this node's location
        :type text:    (str)
        :param values: The list of values that are displayed at this node
        :type values:  List[Any]
        :param icon:   icon
        :type icon:    str | bytes
        """

        node = self.Node(parent, key, text, values, icon)
        self.tree_dict[key] = node
        parent_node = self.tree_dict[parent]
        parent_node._Add(node)

    def __repr__(self):
        """
        Converts the TreeData into a printable version, nicely formatted

        :return: (str) A formatted, text version of the TreeData
        :rtype:
        """
        return self._NodeStr(self.root_node, 1)

    def _NodeStr(self, node, level):
        """
        Does the magic of converting the TreeData into a nicely formatted string version

        :param node:  The node to begin printing the tree
        :type node:   (TreeData.Node)
        :param level: The indentation level for string formatting
        :type level:  (int)
        """
        return '\n'.join(
            [str(node.key) + ' : ' + str(node.text) + ' [ ' + ', '.join([str(v) for v in node.values]) + ' ]'] +
            [' ' * 4 * level + self._NodeStr(child, level + 1) for child in node.children])

    Insert = insert


# ---------------------------------------------------------------------- #
#                           Error Element                                #
# ---------------------------------------------------------------------- #
class ErrorElement(Element):
    """
    A "dummy Element" that is returned when there are error conditions, like trying to find an element that's invalid
    """

    def __init__(self, key=None, metadata=None):
        """
        :param key: Used with window.find_element and with return values to uniquely identify this element
        :type key:
        """
        self.Key = key

        super().__init__(ELEM_TYPE_ERROR, key=key, metadata=metadata)

    def update(self, silent_on_error=True, *args, **kwargs):
        """
        Update method for the Error Element, an element that should not be directly used by developer

        :param silent_on_error: if False, then a Popup window will be shown
        :type silent_on_error:  (bool)
        :param *args:           meant to "soak up" any normal parameters passed in
        :type *args:            (Any)
        :param **kwargs:        meant to "soak up" any keyword parameters that were passed in
        :type **kwargs:         (Any)
        :return:                returns 'self' so call can be chained
        :rtype:                 (ErrorElement)
        """
        print('** Your update is being ignored because you supplied a bad key earlier **')
        return self

    def get(self):
        """
        One of the method names found in other Elements. Used here to return an error string in case it's called

        :return: A warning text string.
        :rtype:  (str)
        """
        return 'This is NOT a valid Element!\nSTOP trying to do things with it or I will have to crash at some point!'

    Get = get
    Update = update


# ---------------------------------------------------------------------- #
#                           Stretch Element                              #
# ---------------------------------------------------------------------- #
# This is for source code compatibility with tkinter version. No tkinter equivalent but you can fake it using a Text element that expands in the X direction
def Push(background_color=None):
    """
    Acts like a Stretch element found in the Qt port.
    Used in a Horizontal fashion.  Placing one on each side of an element will enter the element.
    Place one to the left and the element to the right will be right justified.  See VStretch for vertical type
    :param background_color: color of background may be needed because of how this is implemented
    :type background_color:  (str)
    :return:                 (Text)
    """
    return Text(font='_ 1', background_color=background_color, pad=(0, 0), expand_x=True)


P = Push
Stretch = Push


def VPush(background_color=None):
    """
    Acts like a Stretch element found in the Qt port.
    Used in a Vertical fashion.
    :param background_color: color of background may be needed because of how this is implemented
    :type background_color:  (str)
    :return:                 (Text)
    """
    return Text(font='_ 1', background_color=background_color, pad=(0, 0), expand_y=True)


VStretch = VPush
VP = VPush


# ------------------------------------------------------------------------- #
#                       _TimerPeriodic CLASS                                #
# ------------------------------------------------------------------------- #

class _TimerPeriodic:
    id_counter = 1
    # Dictionary containing the active timers.  Format is {id : _TimerPeriodic object}
    active_timers = {}  # type: dict[int:_TimerPeriodic]

    def __init__(self, window, frequency_ms, key=EVENT_TIMER, repeating=True):
        """
        :param window:          The window to send events to
        :type window:           Window
        :param frequency_ms:    How often to send events in milliseconds
        :type frequency_ms:     int
        :param repeating:       If True then the timer will run, repeatedly sending events, until stopped
        :type repeating:        bool
        """
        self.window = window
        self.frequency_ms = frequency_ms
        self.repeating = repeating
        self.key = key
        self.id = _TimerPeriodic.id_counter
        _TimerPeriodic.id_counter += 1
        self.start()

    @classmethod
    def stop_timer_with_id(cls, timer_id):
        """
        Not user callable!
        :return: A simple counter that makes each container element unique
        :rtype:
        """
        timer = cls.active_timers.get(timer_id, None)
        if timer is not None:
            timer.stop()

    @classmethod
    def stop_all_timers_for_window(cls, window):
        """
        Stops all timers for a given window
        :param window:      The window to stop timers for
        :type window:       Window
        """
        for timer in _TimerPeriodic.active_timers.values():
            if timer.window == window:
                timer.running = False

    @classmethod
    def get_all_timers_for_window(cls, window):
        """
        Returns a list of timer IDs for a given window
        :param window:      The window to find timers for
        :type window:       Window
        :return:            List of timer IDs for the window
        :rtype:             List[int]
        """
        timers = []
        for timer in _TimerPeriodic.active_timers.values():
            if timer.window == window:
                timers.append(timer.id)

        return timers

    def timer_thread(self):
        """
        The thread that sends events to the window.  Runs either once or in a loop until timer is stopped
        """

        if not self.running:  # if timer has been cancelled, abort
            del _TimerPeriodic.active_timers[self.id]
            return
        while True:
            time.sleep(self.frequency_ms / 1000)
            if not self.running:  # if timer has been cancelled, abort
                del _TimerPeriodic.active_timers[self.id]
                return
            self.window.write_event_value(self.key, self.id)

            if not self.repeating:  # if timer does not repeat, then exit thread
                del _TimerPeriodic.active_timers[self.id]
                return

    def start(self):
        """
        Starts a timer by starting a timer thread
        Adds timer to the list of active timers
        """
        self.running = True
        self.thread = threading.Thread(target=self.timer_thread, daemon=True)
        self.thread.start()
        _TimerPeriodic.active_timers[self.id] = self

    def stop(self):
        """
        Stops a timer
        """
        self.running = False


# ------------------------------------------------------------------------- #
#                       Window CLASS                                        #
# ------------------------------------------------------------------------- #
class Window:
    """
    Represents a single Window
    """
    NumOpenWindows = 0
    _user_defined_icon = None
    hidden_master_root = None  # type: tk.Tk
    _animated_popup_dict = {}  # type: Dict
    _active_windows = {}  # type: Dict[Window, tk.Tk()]
    _move_all_windows = False  # if one window moved, they will move
    _window_that_exited = None  # type: Window
    _root_running_mainloop = None  # type: tk.Tk()    # (may be the hidden root or a window's root)
    _timeout_key = None
    _TKAfterID = None  # timer that is used to run reads with timeouts
    _window_running_mainloop = None  # The window that is running the mainloop
    _container_element_counter = 0  # used to get a number of Container Elements (Frame, Column, Tab)
    _read_call_from_debugger = False
    _timeout_0_counter = 0  # when timeout=0 then go through each window one at a time
    _counter_for_ttk_widgets = 0
    _floating_debug_window_build_needed = False
    _main_debug_window_build_needed = False
    # rereouted stdout info. List of tuples (window, element, previous destination)
    _rerouted_stdout_stack = []  # type: List[Tuple[Window, Element]]
    _rerouted_stderr_stack = []  # type: List[Tuple[Window, Element]]
    _original_stdout = None
    _original_stderr = None


    def __init__(self, title, layout=None, default_element_size=None,
                 default_button_element_size=(None, None),
                 auto_size_text=None, auto_size_buttons=None, location=(None, None), relative_location=(None, None), auto_save_location=False, size=(None, None),
                 element_padding=None, margins=(None, None), button_color=None, font=None,
                 progress_bar_color=(None, None), background_color=None, border_depth=None, auto_close=False,
                 auto_close_duration=DEFAULT_AUTOCLOSE_TIME, icon=None, force_toplevel=False,
                 alpha_channel=None, return_keyboard_events=False, use_default_focus=True, text_justification=None,
                 no_titlebar=False, grab_anywhere=False, grab_anywhere_using_control=True, keep_on_top=None, resizable=False, disable_close=False,
                 disable_minimize=False, right_click_menu=None, transparent_color=None, debugger_enabled=False,
                 right_click_menu_background_color=None, right_click_menu_text_color=None, right_click_menu_disabled_text_color=None, right_click_menu_selected_colors=(None, None),
                 right_click_menu_font=None, right_click_menu_tearoff=False,
                 finalize=False, element_justification='left', ttk_theme=None, use_ttk_buttons=None, modal=False, enable_close_attempted_event=False,
                 enable_window_config_events=False,
                 titlebar_background_color=None, titlebar_text_color=None, titlebar_font=None, titlebar_icon=None,
                 use_custom_titlebar=None, scaling=None,
                 sbar_trough_color=None, sbar_background_color=None, sbar_arrow_color=None, sbar_width=None, sbar_arrow_width=None, sbar_frame_color=None, sbar_relief=None, watermark=None, print_event_values=None,
                 metadata=None):
        """
        :param title:                                The title that will be displayed in the Titlebar and on the Taskbar
        :type title:                                 (str)
        :param layout:                               The layout for the window. Can also be specified in the Layout method
        :type layout:                                List[List[Element]] | Tuple[Tuple[Element]]
        :param default_element_size:                 size in characters (wide) and rows (high) for all elements in this window
        :type default_element_size:                  (int, int) - (width, height)
        :param default_button_element_size:          (width, height) size in characters (wide) and rows (high) for all Button elements in this window
        :type default_button_element_size:           (int, int)
        :param auto_size_text:                       True if Elements in Window should be sized to exactly fir the length of text
        :type auto_size_text:                        (bool)
        :param auto_size_buttons:                    True if Buttons in this Window should be sized to exactly fit the text on this.
        :type auto_size_buttons:                     (bool)
        :param location:                             (x,y) location, in pixels, to locate the upper left corner of the window on the screen. Default is to center on screen. None will not set any location meaning the OS will decide
        :type location:                              (int, int) or (None, None) or None
        :param relative_location:                    (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
        :type relative_location:                     (int, int)
        :param auto_save_location:                   If True the windows location will be automatically saved to a settings file and will be reloaded next time the program is run. Save happens when window close is detected
        :type auto_save_location:                    (bool)
        :param size:                                 (width, height) size in pixels for this window. Normally the window is autosized to fit contents, not set to an absolute size by the user. Try not to set this value. You risk, the contents being cut off, etc. Let the layout determine the window size instead
        :type size:                                  (int, int)
        :param element_padding:                      Default amount of padding to put around elements in window (left/right, top/bottom) or ((left, right), (top, bottom)), or an int. If an int, then it's converted into a tuple (int, int)
        :type element_padding:                       (int, int) or ((int, int),(int,int)) or int
        :param margins:                              (left/right, top/bottom) Amount of pixels to leave inside the window's frame around the edges before your elements are shown.
        :type margins:                               (int, int)
        :param button_color:                         Default button colors for all buttons in the window
        :type button_color:                          (str, str) | str
        :param font:                                 specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:                                  (str or (str, int[, str]) or None)
        :param progress_bar_color:                   (bar color, background color) Sets the default colors for all progress bars in the window
        :type progress_bar_color:                    (str, str)
        :param background_color:                     color of background
        :type background_color:                      (str)
        :param border_depth:                         Default border depth (width) for all elements in the window
        :type border_depth:                          (int)
        :param auto_close:                           If True, the window will automatically close itself
        :type auto_close:                            (bool)
        :param auto_close_duration:                  Number of seconds to wait before closing the window
        :type auto_close_duration:                   (int)
        :param icon:                                 Can be either a filename or Base64 value. For Windows if filename, it MUST be ICO format. For Linux, must NOT be ICO. Most portable is to use a Base64 of a PNG file. This works universally across all OS's
        :type icon:                                  (str | bytes)
        :param force_toplevel:                       If True will cause this window to skip the normal use of a hidden master window
        :type force_toplevel:                        (bool)
        :param alpha_channel:                        Sets the opacity of the window. 0 = invisible 1 = completely visible. Values bewteen 0 & 1 will produce semi-transparent windows in SOME environments (The Raspberry Pi always has this value at 1 and cannot change.
        :type alpha_channel:                         (float)
        :param return_keyboard_events:               if True key presses on the keyboard will be returned as Events from Read calls
        :type return_keyboard_events:                (bool)
        :param use_default_focus:                    If True will use the default focus algorithm to set the focus to the "Correct" element
        :type use_default_focus:                     (bool)
        :param text_justification:                   Default text justification for all Text Elements in window
        :type text_justification:                    'left' | 'right' | 'center'
        :param no_titlebar:                          If true, no titlebar nor frame will be shown on window. This means you cannot minimize the window and it will not show up on the taskbar
        :type no_titlebar:                           (bool)
        :param grab_anywhere:                        If True can use mouse to click and drag to move the window. Almost every location of the window will work except input fields on some systems
        :type grab_anywhere:                         (bool)
        :param grab_anywhere_using_control:          If True can use CONTROL key + left mouse mouse to click and drag to move the window. DEFAULT is TRUE. Unlike normal grab anywhere, it works on all elements.
        :type grab_anywhere_using_control:           (bool)
        :param keep_on_top:                          If True, window will be created on top of all other windows on screen. It can be bumped down if another window created with this parm
        :type keep_on_top:                           (bool)
        :param resizable:                            If True, allows the user to resize the window. Note the not all Elements will change size or location when resizing.
        :type resizable:                             (bool)
        :param disable_close:                        If True, the X button in the top right corner of the window will no work.  Use with caution and always give a way out toyour users
        :type disable_close:                         (bool)
        :param disable_minimize:                     if True the user won't be able to minimize window.  Good for taking over entire screen and staying that way.
        :type disable_minimize:                      (bool)
        :param right_click_menu:                     A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu:                      List[List[ List[str] | str ]]
        :param transparent_color:                    Any portion of the window that has this color will be completely transparent. You can even click through these spots to the window under this window.
        :type transparent_color:                     (str)
        :param debugger_enabled:                     If True then the internal debugger will be enabled.  Also controllable via the global settings.  If global settings is true then will be enabled for all windows
        :type debugger_enabled:                      (bool)
        :param right_click_menu_background_color:    Background color for right click menus
        :type right_click_menu_background_color:     (str)
        :param right_click_menu_text_color:          Text color for right click menus
        :type right_click_menu_text_color:           (str)
        :param right_click_menu_disabled_text_color: Text color for disabled right click menu items
        :type right_click_menu_disabled_text_color:  (str)
        :param right_click_menu_selected_colors:     Text AND background colors for a selected item. Can be a Tuple OR a color string. simplified-button-color-string "foreground on background". Can be a single color if want to set only the background. Normally a tuple, but can be a simplified-dual-color-string "foreground on background". Can be a single color if want to set only the background.
        :type right_click_menu_selected_colors:      (str, str) | str | Tuple
        :param right_click_menu_font:                Font for right click menus
        :type right_click_menu_font:                 (str or (str, int[, str]) or None)
        :param right_click_menu_tearoff:             If True then all right click menus can be torn off
        :type right_click_menu_tearoff:              bool
        :param finalize:                             If True then the Finalize method will be called. Use this rather than chaining .Finalize for cleaner code
        :type finalize:                              (bool)
        :param element_justification:                All elements in the Window itself will have this justification 'left', 'right', 'center' are valid values
        :type element_justification:                 (str)
        :param ttk_theme:                            Set the tkinter ttk "theme" of the window.  Default = DEFAULT_TTK_THEME.  Sets all ttk widgets to this theme as their default
        :type ttk_theme:                             (str)
        :param use_ttk_buttons:                      Affects all buttons in window. True = use ttk buttons. False = do not use ttk buttons.  None = use ttk buttons only if on a Mac
        :type use_ttk_buttons:                       (bool)
        :param modal:                                If True then this window will be the only window a user can interact with until it is closed
        :type modal:                                 (bool)
        :param enable_close_attempted_event:         If True then the window will not close when "X" clicked. Instead an event WINDOW_CLOSE_ATTEMPTED_EVENT if returned from window.read
        :type enable_close_attempted_event:          (bool)
        :param enable_window_config_events:          If True then window configuration events (resizing or moving the window) will return WINDOW_CONFIG_EVENT from window.read. Note you will get several when Window is created.
        :type enable_window_config_events:           (bool)
        :param titlebar_background_color:            If custom titlebar indicated by use_custom_titlebar, then use this as background color
        :type titlebar_background_color:             (str | None)
        :param titlebar_text_color:                  If custom titlebar indicated by use_custom_titlebar, then use this as text color
        :type titlebar_text_color:                   (str | None)
        :param titlebar_font:                        If custom titlebar indicated by use_custom_titlebar, then use this as title font
        :type titlebar_font:                         (str or (str, int[, str]) or None)
        :param titlebar_icon:                        If custom titlebar indicated by use_custom_titlebar, then use this as the icon (file or base64 bytes)
        :type titlebar_icon:                         (bytes | str)
        :param use_custom_titlebar:                  If True, then a custom titlebar will be used instead of the normal titlebar
        :type use_custom_titlebar:                   bool
        :param scaling:                              Apply scaling to the elements in the window. Can be set on a global basis using set_options
        :type scaling:                               float
        :param sbar_trough_color:                    Scrollbar color of the trough
        :type sbar_trough_color:                     (str)
        :param sbar_background_color:                Scrollbar color of the background of the arrow buttons at the ends AND the color of the "thumb" (the thing you grab and slide). Switches to arrow color when mouse is over
        :type sbar_background_color:                 (str)
        :param sbar_arrow_color:                     Scrollbar color of the arrow at the ends of the scrollbar (it looks like a button). Switches to background color when mouse is over
        :type sbar_arrow_color:                      (str)
        :param sbar_width:                           Scrollbar width in pixels
        :type sbar_width:                            (int)
        :param sbar_arrow_width:                     Scrollbar width of the arrow on the scrollbar. It will potentially impact the overall width of the scrollbar
        :type sbar_arrow_width:                      (int)
        :param sbar_frame_color:                     Scrollbar Color of frame around scrollbar (available only on some ttk themes)
        :type sbar_frame_color:                      (str)
        :param sbar_relief:                          Scrollbar relief that will be used for the "thumb" of the scrollbar (the thing you grab that slides). Should be a constant that is defined at starting with "RELIEF_" - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID
        :type sbar_relief:                           (str)
        :param watermark:                            If True, then turns on watermarking temporarily for ALL windows created from this point forward. See global settings doc for more info
        :type watermark:                             bool
        :param print_event_values:                   If True then the event and values will be automatically printed when you call the window's read method. GREAT for debugging! Global setting also available to control this.
        :type print_event_values:                    bool
        :param metadata:                             User metadata that can be set to ANYTHING
        :type metadata:                              (Any)
        """

        self._metadata = None  # type: Any
        self.AutoSizeText = auto_size_text if auto_size_text is not None else DEFAULT_AUTOSIZE_TEXT
        self.AutoSizeButtons = auto_size_buttons if auto_size_buttons is not None else DEFAULT_AUTOSIZE_BUTTONS
        self.Title = str(title)
        self.Rows = []  # a list of ELEMENTS for this row
        self.DefaultElementSize = default_element_size if default_element_size is not None else DEFAULT_ELEMENT_SIZE
        self.DefaultButtonElementSize = default_button_element_size if default_button_element_size != (
            None, None) else DEFAULT_BUTTON_ELEMENT_SIZE
        if DEFAULT_WINDOW_LOCATION != (None, None) and location == (None, None):
            self.Location = DEFAULT_WINDOW_LOCATION
        else:
            self.Location = location
        self.RelativeLoction = relative_location
        self.ButtonColor = button_color_to_tuple(button_color)
        self.BackgroundColor = background_color if background_color else DEFAULT_BACKGROUND_COLOR
        self.ParentWindow = None
        self.Font = font if font else DEFAULT_FONT
        self.RadioDict = {}
        self.BorderDepth = border_depth
        if icon:
            self.WindowIcon = icon
        elif Window._user_defined_icon is not None:
            self.WindowIcon = Window._user_defined_icon
        else:
            self.WindowIcon = DEFAULT_WINDOW_ICON
        self.AutoClose = auto_close
        self.NonBlocking = False
        self.TKroot = None  # type: tk.Tk
        self.TKrootDestroyed = False
        self.CurrentlyRunningMainloop = False
        self.FormRemainedOpen = False
        self.TKAfterID = None
        self.ProgressBarColor = progress_bar_color
        self.AutoCloseDuration = auto_close_duration
        self.RootNeedsDestroying = False
        self.Shown = False
        self.ReturnValues = None
        self.ReturnValuesList = []
        self.ReturnValuesDictionary = {}
        self.DictionaryKeyCounter = 0
        self.LastButtonClicked = None
        self.LastButtonClickedWasRealtime = False
        self.UseDictionary = False
        self.UseDefaultFocus = use_default_focus
        self.ReturnKeyboardEvents = return_keyboard_events
        self.LastKeyboardEvent = None
        self.TextJustification = text_justification
        self.NoTitleBar = no_titlebar
        self.Grab = grab_anywhere
        self.GrabAnywhere = grab_anywhere
        self.GrabAnywhereUsingControlKey = grab_anywhere_using_control
        if keep_on_top is None and DEFAULT_KEEP_ON_TOP is not None:
            keep_on_top = DEFAULT_KEEP_ON_TOP
        elif keep_on_top is None:
            keep_on_top = False
        self.KeepOnTop = keep_on_top
        self.ForceTopLevel = force_toplevel
        self.Resizable = resizable
        self._AlphaChannel = alpha_channel if alpha_channel is not None else DEFAULT_ALPHA_CHANNEL
        self.Timeout = None
        self.TimeoutKey = TIMEOUT_KEY
        self.TimerCancelled = False
        self.DisableClose = disable_close
        self.DisableMinimize = disable_minimize
        self._Hidden = False
        self._Size = size
        self.XFound = False
        if element_padding is not None:
            if isinstance(element_padding, int):
                element_padding = (element_padding, element_padding)

        if element_padding is None:
            self.ElementPadding = DEFAULT_ELEMENT_PADDING
        else:
            self.ElementPadding = element_padding
        self.RightClickMenu = right_click_menu
        self.Margins = margins if margins != (None, None) else DEFAULT_MARGINS
        self.ContainerElemementNumber = Window._GetAContainerNumber()
        # The dictionary containing all elements and keys for the window
        # The keys are the keys for the elements and the values are the elements themselves.
        self.AllKeysDict = {}
        self.TransparentColor = transparent_color
        self.UniqueKeyCounter = 0
        if pysimplegui_user_settings.get('-enable debugger-', False) or debugger_enabled:
            self.DebuggerEnabled = True
        else:
            self.DebuggerEnabled = False
        self.WasClosed = False
        self.ElementJustification = element_justification
        self.FocusSet = False
        self.metadata = metadata
        self.TtkTheme = ttk_theme or DEFAULT_TTK_THEME
        self.UseTtkButtons = use_ttk_buttons if use_ttk_buttons is not None else USE_TTK_BUTTONS
        self.user_bind_dict = {}  # Used when user defines a tkinter binding using bind method - convert bind string to key modifier
        self.user_bind_event = None  # Used when user defines a tkinter binding using bind method - event data from tkinter
        self.modal = modal
        self.thread_queue = None  # type: queue.Queue
        self.thread_lock = None  # type: threading.Lock
        self.thread_timer = None  # type: tk.Misc
        self.thread_strvar = None  # type: tk.StringVar
        self.read_closed_window_count = 0
        self.config_last_size = (None, None)
        self.config_last_location = (None, None)
        self.starting_window_position = (None, None)
        self.not_completed_initial_movement = True
        self.config_count = 0
        self.saw_00 = False
        self.maximized = False
        self.right_click_menu_background_color = right_click_menu_background_color if right_click_menu_background_color is not None else theme_input_background_color()
        self.right_click_menu_text_color = right_click_menu_text_color if right_click_menu_text_color is not None else theme_input_text_color()
        self.right_click_menu_disabled_text_color = right_click_menu_disabled_text_color if right_click_menu_disabled_text_color is not None else COLOR_SYSTEM_DEFAULT
        self.right_click_menu_font = right_click_menu_font if right_click_menu_font is not None else self.Font
        self.right_click_menu_tearoff = right_click_menu_tearoff
        self.auto_close_timer_needs_starting = False
        self.finalize_in_progress = False
        self.close_destroys_window = not enable_close_attempted_event if enable_close_attempted_event is not None else None
        self.enable_window_config_events = enable_window_config_events
        self.override_custom_titlebar = False
        self.use_custom_titlebar = use_custom_titlebar or theme_use_custom_titlebar()
        self.titlebar_background_color = titlebar_background_color
        self.titlebar_text_color = titlebar_text_color
        self.titlebar_font = titlebar_font
        self.titlebar_icon = titlebar_icon
        self.right_click_menu_selected_colors = _simplified_dual_color_to_tuple(right_click_menu_selected_colors,
                                                                                (self.right_click_menu_background_color, self.right_click_menu_text_color))
        self.TKRightClickMenu = None
        self._grab_anywhere_ignore_these_list = []
        self._grab_anywhere_include_these_list = []
        self._has_custom_titlebar = use_custom_titlebar
        self._mousex = self._mousey = 0
        self._startx = self._starty = 0
        self._last_location = (None, None)              # used by a property
        self.auto_save_location = auto_save_location
        if auto_save_location is True:
            self.Location = user_settings_get_entry('-LAST WINDOW LOCATION-'+title, self.Location)
        self.scaling = scaling if scaling is not None else DEFAULT_SCALING

        if self.use_custom_titlebar:
            self.Margins = (0, 0)
            self.NoTitleBar = True
        self._mouse_offset_x = self._mouse_offset_y = 0
        self.watermark = watermark
        # use the print event values setting if explicitly turned on or disable if explicitly turned off in this window
        if print_event_values is True or (pysimplegui_user_settings.get('-print event values-', False) and print_event_values is not False):
            self.print_event_values = True
        else:
            self.print_event_values = False

        self.ttk_part_overrides = TTKPartOverrides(sbar_trough_color=sbar_trough_color, sbar_background_color=sbar_background_color, sbar_arrow_color=sbar_arrow_color, sbar_width=sbar_width, sbar_arrow_width=sbar_arrow_width, sbar_frame_color=sbar_frame_color, sbar_relief=sbar_relief)

        if no_titlebar is True:
            self.override_custom_titlebar = True

        if layout is not None and type(layout) not in (list, tuple):
            warnings.warn('Your layout is not a list or tuple... this is not good!')

        if layout is not None:
            self.Layout(layout)
            if finalize:
                self.Finalize()

        if CURRENT_LOOK_AND_FEEL == 'Default':
            print("Window will be a boring gray. Try removing the theme call entirely\n",
                  "You will get the default theme or the one set in global settings\n"
                  "If you seriously want this gray window and no more nagging, add  theme('DefaultNoMoreNagging')  or theme('Gray Gray Gray') for completely gray/System Defaults")

    @classmethod
    def _GetAContainerNumber(cls):
        """
        Not user callable!
        :return: A simple counter that makes each container element unique
        :rtype:
        """
        cls._container_element_counter += 1
        return cls._container_element_counter

    @classmethod
    def _IncrementOpenCount(self):
        """
        Not user callable!  Increments the number of open windows
        Note - there is a bug where this count easily gets out of sync. Issue has been opened already. No ill effects
        """
        self.NumOpenWindows += 1
        # print('+++++ INCREMENTING Num Open Windows = {} ---'.format(Window.NumOpenWindows))

    @classmethod
    def _DecrementOpenCount(self):
        """
        Not user callable!  Decrements the number of open windows
        """
        self.NumOpenWindows -= 1 * (self.NumOpenWindows != 0)  # decrement if not 0
        # print('----- DECREMENTING Num Open Windows = {} ---'.format(Window.NumOpenWindows))

    @classmethod
    def get_screen_size(self):
        """
        This is a "Class Method" meaning you call it by writing: width, height = Window.get_screen_size()
        Returns the size of the "screen" as determined by tkinter.  This can vary depending on your operating system and the number of monitors installed on your system.  For Windows, the primary monitor's size is returns. On some multi-monitored Linux systems, the monitors are combined and the total size is reported as if one screen.

        :return: Size of the screen in pixels as determined by tkinter
        :rtype:  (int, int)
        """
        root = _get_hidden_master_root()
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        return screen_width, screen_height

    @property
    def metadata(self):
        """
        Metadata is available for all windows. You can set to any value.
        :return: the current metadata value
        :rtype:  (Any)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, value):
        """
        Metadata is available for all windows. You can set to any value.
        :param value: Anything you want it to be
        :type value:  (Any)
        """
        self._metadata = value


    def last_location(self):
        """
        The last known location of the window (x,y).  Set by config events from tkinter
        :return:    The last location of the window
        :rtype:  (int, int)
        """
        return self._last_location


    # ------------------------- Add ONE Row to Form ------------------------- #
    def add_row(self, *args):
        """
        Adds a single row of elements to a window's self.Rows variables.
        Generally speaking this is NOT how users should be building Window layouts.
        Users, create a single layout (a list of lists) and pass as a parameter to Window object, or call Window.Layout(layout)

        :param *args: List[Elements]
        :type *args:
        """
        NumRows = len(self.Rows)  # number of existing rows is our row number
        CurrentRowNumber = NumRows  # this row's number
        CurrentRow = []  # start with a blank row and build up
        # -------------------------  Add the elements to a row  ------------------------- #
        for i, element in enumerate(args):  # Loop through list of elements and add them to the row

            if isinstance(element, tuple) or isinstance(element, list):
                self.add_row(*element)
                continue
                _error_popup_with_traceback('Error creating Window layout',
                                            'Layout has a LIST instead of an ELEMENT',
                                            'This sometimes means you have a badly placed ]',
                                            'The offensive list is:',
                                            element,
                                            'This list will be stripped from your layout'
                                            )
                continue
            elif callable(element) and not isinstance(element, Element):
                _error_popup_with_traceback('Error creating Window layout',
                                            'Layout has a FUNCTION instead of an ELEMENT',
                                            'This likely means you are missing () from your layout',
                                            'The offensive list is:',
                                            element,
                                            'This item will be stripped from your layout')
                continue
            if element.ParentContainer is not None:
                warnings.warn(
                    '*** YOU ARE ATTEMPTING TO REUSE AN ELEMENT IN YOUR LAYOUT! Once placed in a layout, an element cannot be used in another layout. ***',
                    UserWarning)
                _error_popup_with_traceback('Error detected in layout - Contains an element that has already been used.',
                                            'You have attempted to reuse an element in your layout.',
                                            "The layout specified has an element that's already been used.",
                                            'You MUST start with a "clean", unused layout every time you create a window',
                                            'The offensive Element = ',
                                            element,
                                            'and has a key = ', element.Key,
                                            'This item will be stripped from your layout',
                                            'Hint - try printing your layout and matching the IDs "print(layout)"')
                continue
            element.Position = (CurrentRowNumber, i)
            element.ParentContainer = self
            CurrentRow.append(element)
            # if this element is a titlebar, then automatically set the window margins to (0,0) and turn off normal titlebar
            if element.metadata == TITLEBAR_METADATA_MARKER:
                self.Margins = (0, 0)
                self.NoTitleBar = True
        # -------------------------  Append the row to list of Rows  ------------------------- #
        self.Rows.append(CurrentRow)

    # ------------------------- Add Multiple Rows to Form ------------------------- #
    def add_rows(self, rows):
        """
        Loops through a list of lists of elements and adds each row, list, to the layout.
        This is NOT the best way to go about creating a window.  Sending the entire layout at one time and passing
        it as a parameter to the Window call is better.

        :param rows: A list of a list of elements
        :type rows:  List[List[Elements]]
        """
        for row in rows:
            try:
                iter(row)
            except TypeError:
                _error_popup_with_traceback('Error Creating Window Layout', 'Error creating Window layout',
                           'Your row is not an iterable (e.g. a list)',
                           'Instead of a list, the type found was {}'.format(type(row)),
                           'The offensive row = ',
                           row,
                           'This item will be stripped from your layout')
                continue
            self.add_row(*row)


    def layout(self, rows):
        """
        Second of two preferred ways of telling a Window what its layout is. The other way is to pass the layout as
        a parameter to Window object.  The parameter method is the currently preferred method. This call to Layout
        has been removed from examples contained in documents and in the Demo Programs. Trying to remove this call
        from history and replace with sending as a parameter to Window.

        :param rows: Your entire layout
        :type rows:  List[List[Elements]]
        :return:     self so that you can chain method calls
        :rtype:      (Window)
        """
        if self.use_custom_titlebar and not self.override_custom_titlebar:
            if self.titlebar_icon is not None:
                icon = self.titlebar_icon
            elif CUSTOM_TITLEBAR_ICON is not None:
                icon = CUSTOM_TITLEBAR_ICON
            elif self.titlebar_icon is not None:
                icon = self.titlebar_icon
            elif self.WindowIcon == DEFAULT_WINDOW_ICON:
                icon = DEFAULT_BASE64_ICON_16_BY_16
            else:
                icon = None

            new_rows = [[Titlebar(title=self.Title, icon=icon, text_color=self.titlebar_text_color, background_color=self.titlebar_background_color,
                                  font=self.titlebar_font)]] + rows
        else:
            new_rows = rows
        self.add_rows(new_rows)
        self._BuildKeyDict()

        if self._has_custom_titlebar_element():
            self.Margins = (0, 0)
            self.NoTitleBar = True
            self._has_custom_titlebar = True
        return self

    def extend_layout(self, container, rows):
        """
        Adds new rows to an existing container element inside of this window
        If the container is a scrollable Column, you need to also call the contents_changed() method

        :param container: The container Element the layout will be placed inside of
        :type container:  Frame | Column | Tab
        :param rows:      The layout to be added
        :type rows:       (List[List[Element]])
        :return:          (Window) self so could be chained
        :rtype:           (Window)
        """
        column = Column(rows, pad=(0, 0), background_color=container.BackgroundColor)
        if self == container:
            frame = self.TKroot
        elif isinstance(container.Widget, TkScrollableFrame):
            frame = container.Widget.TKFrame
        else:
            frame = container.Widget
        PackFormIntoFrame(column, frame, self)
        # sg.PackFormIntoFrame(col, window.TKroot, window)
        self.AddRow(column)
        self.AllKeysDict = self._BuildKeyDictForWindow(self, column, self.AllKeysDict)
        return self

    def LayoutAndRead(self, rows, non_blocking=False):
        """
        Deprecated!!  Now your layout your window's rows (layout) and then separately call Read.

        :param rows:         The layout of the window
        :type rows:          List[List[Element]]
        :param non_blocking: if True the Read call will not block
        :type non_blocking:  (bool)
        """
        _error_popup_with_traceback('LayoutAndRead Depricated', 'Wow!  You have been using PySimpleGUI for a very long time.',
                                                                'The Window.LayoutAndRead call is no longer supported')

        raise DeprecationWarning(
            'LayoutAndRead is no longer supported... change your call window.Layout(layout).Read()\nor window(title, layout).Read()')
        # self.AddRows(rows)
        # self._Show(non_blocking=non_blocking)
        # return self.ReturnValues

    def LayoutAndShow(self, rows):
        """
        Deprecated - do not use any longer.  Layout your window and then call Read.  Or can add a Finalize call before the Read
        """
        raise DeprecationWarning('LayoutAndShow is no longer supported... ')

    def _Show(self, non_blocking=False):
        """
        NOT TO BE CALLED BY USERS.  INTERNAL ONLY!
        It's this method that first shows the window to the user, collects results

        :param non_blocking: if True, this is a non-blocking call
        :type non_blocking:  (bool)
        :return:             Tuple[Any, Dict] The event, values turple that is returned from Read calls
        :rtype:
        """
        self.Shown = True
        # Compute num rows & num cols (it'll come in handy debugging)
        self.NumRows = len(self.Rows)
        self.NumCols = max(len(row) for row in self.Rows)
        self.NonBlocking = non_blocking

        # Search through entire form to see if any elements set the focus
        # if not, then will set the focus to the first input element
        found_focus = False
        for row in self.Rows:
            for element in row:
                try:
                    if element.Focus:
                        found_focus = True
                except:
                    pass
                try:
                    if element.Key is not None:
                        self.UseDictionary = True
                except:
                    pass

        if not found_focus and self.UseDefaultFocus:
            self.UseDefaultFocus = True
        else:
            self.UseDefaultFocus = False
        # -=-=-=-=-=-=-=-=- RUN the GUI -=-=-=-=-=-=-=-=- ##
        StartupTK(self)
        # If a button or keyboard event happened but no results have been built, build the results
        if self.LastKeyboardEvent is not None or self.LastButtonClicked is not None:
            return _BuildResults(self, False, self)
        return self.ReturnValues

    # ------------------------- SetIcon - set the window's fav icon ------------------------- #
    def set_icon(self, icon=None, pngbase64=None):
        """
        Changes the icon that is shown on the title bar and on the task bar.
        NOTE - The file type is IMPORTANT and depends on the OS!
        Can pass in:
        * filename which must be a .ICO icon file for windows, PNG file for Linux
        * bytes object
        * BASE64 encoded file held in a variable

        :param icon:      Filename or bytes object
        :type icon:       (str)
        :param pngbase64: Base64 encoded image
        :type pngbase64:  (bytes)
        """
        if type(icon) is bytes or pngbase64 is not None:
            wicon = tkinter.PhotoImage(data=icon if icon is not None else pngbase64)
            try:
                self.TKroot.tk.call('wm', 'iconphoto', self.TKroot._w, wicon)
            except:
                wicon = tkinter.PhotoImage(data=DEFAULT_BASE64_ICON)
                try:
                    self.TKroot.tk.call('wm', 'iconphoto', self.TKroot._w, wicon)
                except:
                    pass
            self.WindowIcon = wicon
            return

        wicon = icon
        try:
            self.TKroot.iconbitmap(icon)
        except:
            try:
                wicon = tkinter.PhotoImage(file=icon)
                self.TKroot.tk.call('wm', 'iconphoto', self.TKroot._w, wicon)
            except:
                try:
                    wicon = tkinter.PhotoImage(data=DEFAULT_BASE64_ICON)
                    try:
                        self.TKroot.tk.call('wm', 'iconphoto', self.TKroot._w, wicon)
                    except:
                        pass
                except:
                    pass
        self.WindowIcon = wicon

    def _GetElementAtLocation(self, location):
        """
        Given a (row, col) location in a layout, return the element located at that position

        :param location: (int, int) Return the element located at (row, col) in layout
        :type location:
        :return:         (Element) The Element located at that position in this window
        :rtype:
        """

        (row_num, col_num) = location
        row = self.Rows[row_num]
        element = row[col_num]
        return element

    def _GetDefaultElementSize(self):
        """
        Returns the default elementSize

        :return: (width, height) of the default element size
        :rtype:  (int, int)
        """

        return self.DefaultElementSize

    def _AutoCloseAlarmCallback(self):
        """
        Function that's called by tkinter when autoclode timer expires.  Closes the window

        """
        try:
            window = self
            if window:
                if window.NonBlocking:
                    self.Close()
                else:
                    window._Close()
                    self.TKroot.quit()
                    self.RootNeedsDestroying = True
        except:
            pass

    def _TimeoutAlarmCallback(self):
        """
        Read Timeout Alarm callback. Will kick a mainloop call out of the tkinter event loop and cause it to return
        """
        # first, get the results table built
        # modify the Results table in the parent FlexForm object
        # print('TIMEOUT CALLBACK')
        if self.TimerCancelled:
            # print('** timer was cancelled **')
            return
        self.LastButtonClicked = self.TimeoutKey
        self.FormRemainedOpen = True
        self.TKroot.quit()  # kick the users out of the mainloop

    def _calendar_chooser_button_clicked(self, elem):
        """

        :param elem:
        :type elem:
        :return:
        :rtype:
        """
        target_element, strvar, should_submit_window = elem._find_target()

        if elem.calendar_default_date_M_D_Y == (None, None, None):
            now = datetime.datetime.now()
            cur_month, cur_day, cur_year = now.month, now.day, now.year
        else:
            cur_month, cur_day, cur_year = elem.calendar_default_date_M_D_Y

        date_chosen = popup_get_date(start_mon=cur_month, start_day=cur_day, start_year=cur_year, close_when_chosen=elem.calendar_close_when_chosen,
                                     no_titlebar=elem.calendar_no_titlebar, begin_at_sunday_plus=elem.calendar_begin_at_sunday_plus,
                                     locale=elem.calendar_locale, location=elem.calendar_location, month_names=elem.calendar_month_names,
                                     day_abbreviations=elem.calendar_day_abbreviations, title=elem.calendar_title)
        if date_chosen is not None:
            month, day, year = date_chosen
            now = datetime.datetime.now()
            hour, minute, second = now.hour, now.minute, now.second
            try:
                date_string = calendar.datetime.datetime(year, month, day, hour, minute, second).strftime(elem.calendar_format)
            except Exception as e:
                print('Bad format string in calendar chooser button', e)
                date_string = 'Bad format string'

            if target_element is not None and target_element != elem:
                target_element.update(date_string)
            elif target_element == elem:
                elem.calendar_selection = date_string

            strvar.set(date_string)
            elem.TKStringVar.set(date_string)
            if should_submit_window:
                self.LastButtonClicked = target_element.Key
                results = _BuildResults(self, False, self)
        else:
            should_submit_window = False
        return should_submit_window

    # @_timeit_summary
    def read(self, timeout=None, timeout_key=TIMEOUT_KEY, close=False):
        """
        THE biggest deal method in the Window class! This is how you get all of your data from your Window.
            Pass in a timeout (in milliseconds) to wait for a maximum of timeout milliseconds. Will return timeout_key
            if no other GUI events happen first.

        :param timeout:     Milliseconds to wait until the Read will return IF no other GUI events happen first
        :type timeout:      (int)
        :param timeout_key: The value that will be returned from the call if the timer expired
        :type timeout_key:  (Any)
        :param close:       if True the window will be closed prior to returning
        :type close:        (bool)
        :return:            (event, values)
        :rtype:             Tuple[(Any), Dict[Any, Any], List[Any], None]
        """

        if Window._floating_debug_window_build_needed is True:
            Window._floating_debug_window_build_needed = False
            _Debugger.debugger._build_floating_window()

        if Window._main_debug_window_build_needed is True:
            Window._main_debug_window_build_needed = False
            _Debugger.debugger._build_main_debugger_window()

        # ensure called only 1 time through a single read cycle
        if not Window._read_call_from_debugger:
            _refresh_debugger()

        # if the user has not added timeout and a debug window is open, then set a timeout for them so the debugger continuously refreshes
        if _debugger_window_is_open() and not Window._read_call_from_debugger:
            if timeout is None or timeout > 3000:
                timeout = 200


        while True:
            Window._root_running_mainloop = self.TKroot
            results = self._read(timeout=timeout, timeout_key=timeout_key)
            if results is not None:
                if results[0] == DEFAULT_WINDOW_SNAPSHOT_KEY:
                    self.save_window_screenshot_to_disk()
                    popup_quick_message('Saved window screenshot to disk', background_color='#1c1e23', text_color='white', keep_on_top=True, font='_ 30')
                    continue
            # Post processing for Calendar Chooser Button
            try:
                if results[0] == timeout_key:  # if a timeout, then not a calendar button
                    break
                elem = self.find_element(results[0], silent_on_error=True)  # get the element that caused the event
                if elem.Type == ELEM_TYPE_BUTTON:
                    if elem.BType == BUTTON_TYPE_CALENDAR_CHOOSER:
                        if self._calendar_chooser_button_clicked(elem):  # returns True if should break out
                            # results[0] = self.LastButtonClicked
                            results = self.ReturnValues
                            break
                        else:
                            continue
                break
            except:
                break  # wasn't a calendar button for sure


        if close:
            self.close()

        if self.print_event_values:
            try:        # just in casee something weird about the results being printed
                if not (pysimplegui_user_settings.get('-do not print timeouts-', True) and results[0] == TIMEOUT_EVENT):
                    print(f'{results[0]}\n   {results[1]}')
            except Exception as e:
                pass

        return results

    # @_timeit
    def _read(self, timeout=None, timeout_key=TIMEOUT_KEY):
        """
        THE biggest deal method in the Window class! This is how you get all of your data from your Window.
            Pass in a timeout (in milliseconds) to wait for a maximum of timeout milliseconds. Will return timeout_key
            if no other GUI events happen first.

        :param timeout:     Milliseconds to wait until the Read will return IF no other GUI events happen first
        :type timeout:      (int)
        :param timeout_key: The value that will be returned from the call if the timer expired
        :type timeout_key:  (Any)
        :return:            (event, values) (event or timeout_key or None, Dictionary of values or List of values from all elements in the Window)
        :rtype:             Tuple[(Any), Dict[Any, Any], List[Any], None]
        """

        # if there are events in the thread event queue, then return those events before doing anything else.
        if self._queued_thread_event_available():
            self.ReturnValues = results = _BuildResults(self, False, self)
            return results

        if self.finalize_in_progress and self.auto_close_timer_needs_starting:
            self._start_autoclose_timer()
            self.auto_close_timer_needs_starting = False

        timeout = int(timeout) if timeout is not None else None
        if timeout == 0:  # timeout of zero runs the old readnonblocking
            event, values = self._ReadNonBlocking()
            if event is None:
                event = timeout_key
            if values is None:
                event = None
            return event, values  # make event None if values was None and return
        # Read with a timeout
        self.Timeout = timeout
        self.TimeoutKey = timeout_key
        self.NonBlocking = False
        if self.TKrootDestroyed:
            self.read_closed_window_count += 1
            if self.read_closed_window_count > 100:
                popup_error_with_traceback('Trying to read a closed window', 'You have tried 100 times to read a closed window.', 'You need to add a check for event == WIN_CLOSED',)
            return None, None
        if not self.Shown:
            self._Show()
        else:
            # if already have a button waiting, the return previously built results
            if self.LastButtonClicked is not None and not self.LastButtonClickedWasRealtime:
                results = _BuildResults(self, False, self)
                self.LastButtonClicked = None
                return results
            InitializeResults(self)

            if self._queued_thread_event_available():
                self.ReturnValues = results = _BuildResults(self, False, self)
                return results

            # if the last button clicked was realtime, emulate a read non-blocking
            # the idea is to quickly return realtime buttons without any blocks until released
            if self.LastButtonClickedWasRealtime:
                # clear the realtime flag if the element is not a button element (for example a graph element that is dragging)
                if self.AllKeysDict.get(self.LastButtonClicked, None):
                    if self.AllKeysDict.get(self.LastButtonClicked).Type != ELEM_TYPE_BUTTON:
                        self.LastButtonClickedWasRealtime = False  # stops from generating events until something changes
                else:  # it is possible for the key to not be in the dicitonary because it has a modifier. If so, then clear the realtime button flag
                    self.LastButtonClickedWasRealtime = False  # stops from generating events until something changes

                try:
                    rc = self.TKroot.update()
                except:
                    self.TKrootDestroyed = True
                    Window._DecrementOpenCount()
                    # _my_windows.Decrement()
                    # print('ROOT Destroyed')
                results = _BuildResults(self, False, self)
                if results[0] != None and results[0] != timeout_key:
                    return results
                else:
                    pass

                # else:
                #     print("** REALTIME PROBLEM FOUND **", results)

            if self.RootNeedsDestroying:
                # print('*** DESTROYING really late***')
                try:
                    self.TKroot.destroy()
                except:
                    pass
                # _my_windows.Decrement()
                self.LastButtonClicked = None
                return None, None

            # normal read blocking code....
            if timeout != None:
                self.TimerCancelled = False
                self.TKAfterID = self.TKroot.after(timeout, self._TimeoutAlarmCallback)
            self.CurrentlyRunningMainloop = True
            # self.TKroot.protocol("WM_DESTROY_WINDOW", self._OnClosingCallback)
            # self.TKroot.protocol("WM_DELETE_WINDOW", self._OnClosingCallback)
            Window._window_running_mainloop = self
            try:
                Window._root_running_mainloop.mainloop()
            except:
                print('**** EXITING ****')
                exit(-1)
            # print('Out main')
            self.CurrentlyRunningMainloop = False
            # if self.LastButtonClicked != TIMEOUT_KEY:
            try:
                self.TKroot.after_cancel(self.TKAfterID)
                del self.TKAfterID
            except:
                pass
                # print('** tkafter cancel failed **')
            self.TimerCancelled = True
            if self.RootNeedsDestroying:
                # print('*** DESTROYING LATE ***')
                try:
                    self.TKroot.destroy()
                except:
                    pass
                Window._DecrementOpenCount()
                # _my_windows.Decrement()
                self.LastButtonClicked = None
                return None, None
            # if form was closed with X
            if self.LastButtonClicked is None and self.LastKeyboardEvent is None and self.ReturnValues[0] is None:
                Window._DecrementOpenCount()
                # _my_windows.Decrement()
        # Determine return values
        if self.LastKeyboardEvent is not None or self.LastButtonClicked is not None:
            results = _BuildResults(self, False, self)
            if not self.LastButtonClickedWasRealtime:
                self.LastButtonClicked = None
            return results
        else:
            if self._queued_thread_event_available():
                self.ReturnValues = results = _BuildResults(self, False, self)
                return results
            if not self.XFound and self.Timeout != 0 and self.Timeout is not None and self.ReturnValues[
                0] is None:  # Special Qt case because returning for no reason so fake timeout
                self.ReturnValues = self.TimeoutKey, self.ReturnValues[1]  # fake a timeout
            elif not self.XFound and self.ReturnValues[0] is None:  # Return a timeout event... can happen when autoclose used on another window
                # print("*** Faking timeout ***")
                self.ReturnValues = self.TimeoutKey, self.ReturnValues[1]  # fake a timeout
            return self.ReturnValues

    def _ReadNonBlocking(self):
        """
        Should be NEVER called directly by the user.  The user can call Window.read(timeout=0) to get same effect

        :return: (event, values). (event or timeout_key or None, Dictionary of values or List of values from all elements in the Window)
        :rtype:  Tuple[(Any), Dict[Any, Any] | List[Any] | None]
        """
        if self.TKrootDestroyed:
            try:
                self.TKroot.quit()
                self.TKroot.destroy()
            except:
                pass
                # print('DESTROY FAILED')
            return None, None
        if not self.Shown:
            self._Show(non_blocking=True)
        try:
            rc = self.TKroot.update()
        except:
            self.TKrootDestroyed = True
            Window._DecrementOpenCount()
            # _my_windows.Decrement()
            # print("read failed")
            # return None, None
        if self.RootNeedsDestroying:
            # print('*** DESTROYING LATE ***', self.ReturnValues)
            self.TKroot.destroy()
            Window._DecrementOpenCount()
            # _my_windows.Decrement()
            self.Values = None
            self.LastButtonClicked = None
            return None, None
        return _BuildResults(self, False, self)

    def _start_autoclose_timer(self):
        duration = DEFAULT_AUTOCLOSE_TIME if self.AutoCloseDuration is None else self.AutoCloseDuration
        self.TKAfterID = self.TKroot.after(int(duration * 1000), self._AutoCloseAlarmCallback)

    def finalize(self):
        """
        Use this method to cause your layout to built into a real tkinter window.  In reality this method is like
        Read(timeout=0).  It doesn't block and uses your layout to create tkinter widgets to represent the elements.
        Lots of action!

        :return: Returns 'self' so that method "Chaining" can happen (read up about it as it's very cool!)
        :rtype:  (Window)
        """

        if self.TKrootDestroyed:
            return self
        self.finalize_in_progress = True

        self.Read(timeout=1)

        if self.AutoClose:
            self.auto_close_timer_needs_starting = True
        # add the window to the list of active windows
        Window._active_windows[self] = Window.hidden_master_root
        return self
        # OLD CODE FOLLOWS
        if not self.Shown:
            self._Show(non_blocking=True)
        try:
            rc = self.TKroot.update()
        except:
            self.TKrootDestroyed = True
            Window._DecrementOpenCount()
            print('** Finalize failed **')
            # _my_windows.Decrement()
            # return None, None
        return self

    def refresh(self):
        """
        Refreshes the window by calling tkroot.update().  Can sometimes get away with a refresh instead of a Read.
        Use this call when you want something to appear in your Window immediately (as soon as this function is called).
        If you change an element in a window, your change will not be visible until the next call to Window.read
        or a call to Window.refresh()

        :return: `self` so that method calls can be easily "chained"
        :rtype:  (Window)
        """

        if self.TKrootDestroyed:
            return self
        try:
            rc = self.TKroot.update()
        except:
            pass
        return self

    def fill(self, values_dict):
        """
        Fill in elements that are input fields with data based on a 'values dictionary'

        :param values_dict: pairs
        :type values_dict:  (Dict[Any, Any]) - {Element_key : value}
        :return:            returns self so can be chained with other methods
        :rtype:             (Window)
        """

        FillFormWithValues(self, values_dict)
        return self

    def _find_closest_key(self, search_key):
        if not isinstance(search_key, str):
            search_key = str(search_key)
        matches = difflib.get_close_matches(search_key, [str(k) for k in self.AllKeysDict.keys()])
        if not len(matches):
            return None
        for k in self.AllKeysDict.keys():
            if matches[0] == str(k):
                return k
        return matches[0] if len(matches) else None

    def FindElement(self, key, silent_on_error=False):
        """
        ** Warning ** This call will eventually be depricated. **

        It is suggested that you modify your code to use the recommended window[key] lookup or the PEP8 compliant window.find_element(key)

        For now, you'll only see a message printed and the call will continue to funcation as before.

        :param key:             Used with window.find_element and with return values to uniquely identify this element
        :type key:              str | int | tuple | object
        :param silent_on_error: If True do not display popup nor print warning of key errors
        :type silent_on_error:  (bool)
        :return:                Return value can be: the Element that matches the supplied key if found; an Error Element if silent_on_error is False; None if silent_on_error True;
        :rtype:                 Element | Error Element | None
        """

        warnings.warn('Use of FindElement is not recommended.\nEither switch to the recommended window[key] format\nor the PEP8 compliant find_element',
                      UserWarning)
        print('** Warning - FindElement should not be used to look up elements. window[key] or window.find_element are recommended. **')

        return self.find_element(key, silent_on_error=silent_on_error)

    def find_element(self, key, silent_on_error=False, supress_guessing=None, supress_raise=None):
        """
        Find element object associated with the provided key.
        THIS METHOD IS NO LONGER NEEDED to be called by the user

        You can perform the same operation by writing this statement:
        element = window[key]

        You can drop the entire "find_element" function name and use [ ] instead.

        However, if you wish to perform a lookup without error checking, and don't have error popups turned
        off globally, you'll need to make this call so that you can disable error checks on this call.

        find_element is typically used in combination with a call to element's update method (or any other element method!):
        window[key].update(new_value)

        Versus the "old way"
        window.FindElement(key).Update(new_value)

        This call can be abbreviated to any of these:
        find_element = FindElement == Element == Find
        With find_element being the PEP8 compliant call that should be used.

        Rememeber that this call will return None if no match is found which may cause your code to crash if not
        checked for.

        :param key:              Used with window.find_element and with return values to uniquely identify this element
        :type key:               str | int | tuple | object
        :param silent_on_error:  If True do not display popup nor print warning of key errors
        :type silent_on_error:   (bool)
        :param supress_guessing: Override for the global key guessing setting.
        :type supress_guessing:  (bool | None)
        :param supress_raise:    Override for the global setting that determines if a key error should raise an exception
        :type supress_raise:     (bool | None)
        :return:                 Return value can be: the Element that matches the supplied key if found; an Error Element if silent_on_error is False; None if silent_on_error True
        :rtype:                  Element | ErrorElement | None
        """

        key_error = False
        closest_key = None
        supress_guessing = supress_guessing if supress_guessing is not None else SUPPRESS_KEY_GUESSING
        supress_raise = supress_raise if supress_raise is not None else SUPPRESS_RAISE_KEY_ERRORS
        try:
            element = self.AllKeysDict[key]
        except KeyError:
            key_error = True
            closest_key = self._find_closest_key(key)
            if not silent_on_error:
                print('** Error looking up your element using the key: ', key, 'The closest matching key: ', closest_key)
                _error_popup_with_traceback('Key Error', 'Problem finding your key ' + str(key), 'Closest match = ' + str(closest_key), emoji=EMOJI_BASE64_KEY)
                element = ErrorElement(key=key)
            else:
                element = None
            if not supress_raise:
                raise KeyError(key)

        if key_error:
            if not supress_guessing and closest_key is not None:
                element = self.AllKeysDict[closest_key]

        return element

    Element = find_element  # Shortcut function
    Find = find_element  # Shortcut function, most likely not used by many people.
    Elem = find_element  # NEW for 2019!  More laziness... Another shortcut

    def find_element_with_focus(self):
        """
        Returns the Element that currently has focus as reported by tkinter. If no element is found None is returned!
        :return: An Element if one has been found with focus or None if no element found
        :rtype:  Element | None
        """
        element = _FindElementWithFocusInSubForm(self)
        return element

    def widget_to_element(self, widget):
        """
        Returns the element that matches a supplied tkinter widget.
        If no matching element is found, then None is returned.


        :return:    Element that uses the specified widget
        :rtype:     Element | None
        """
        if self.AllKeysDict is None or len(self.AllKeysDict) == 0:
            return None
        for key, element in self.AllKeysDict.items():
            if element.Widget == widget:
                return element
        return None

    def _BuildKeyDict(self):
        """
        Used internally only! Not user callable
        Builds a dictionary containing all elements with keys for this window.
        """
        dict = {}
        self.AllKeysDict = self._BuildKeyDictForWindow(self, self, dict)

    def _BuildKeyDictForWindow(self, top_window, window, key_dict):
        """
        Loop through all Rows and all Container Elements for this window and create the keys for all of them.
        Note that the calls are recursive as all pathes must be walked

        :param top_window: The highest level of the window
        :type top_window:  (Window)
        :param window:     The "sub-window" (container element) to be searched
        :type window:      Column | Frame | TabGroup | Pane | Tab
        :param key_dict:   The dictionary as it currently stands.... used as part of recursive call
        :type key_dict:
        :return:           (dict) Dictionary filled with all keys in the window
        :rtype:
        """
        for row_num, row in enumerate(window.Rows):
            for col_num, element in enumerate(row):
                if element.Type == ELEM_TYPE_COLUMN:
                    key_dict = self._BuildKeyDictForWindow(top_window, element, key_dict)
                if element.Type == ELEM_TYPE_FRAME:
                    key_dict = self._BuildKeyDictForWindow(top_window, element, key_dict)
                if element.Type == ELEM_TYPE_TAB_GROUP:
                    key_dict = self._BuildKeyDictForWindow(top_window, element, key_dict)
                if element.Type == ELEM_TYPE_PANE:
                    key_dict = self._BuildKeyDictForWindow(top_window, element, key_dict)
                if element.Type == ELEM_TYPE_TAB:
                    key_dict = self._BuildKeyDictForWindow(top_window, element, key_dict)
                if element.Key is None:  # if no key has been assigned.... create one for input elements
                    if element.Type == ELEM_TYPE_BUTTON:
                        element.Key = element.ButtonText
                    elif element.Type == ELEM_TYPE_TAB:
                        element.Key = element.Title
                    if element.Type in (ELEM_TYPE_MENUBAR, ELEM_TYPE_BUTTONMENU,
                                        ELEM_TYPE_INPUT_SLIDER, ELEM_TYPE_GRAPH, ELEM_TYPE_IMAGE,
                                        ELEM_TYPE_INPUT_CHECKBOX, ELEM_TYPE_INPUT_LISTBOX, ELEM_TYPE_INPUT_COMBO,
                                        ELEM_TYPE_INPUT_MULTILINE, ELEM_TYPE_INPUT_OPTION_MENU, ELEM_TYPE_INPUT_SPIN,
                                        ELEM_TYPE_INPUT_RADIO, ELEM_TYPE_INPUT_TEXT, ELEM_TYPE_PROGRESS_BAR,
                                        ELEM_TYPE_TABLE, ELEM_TYPE_TREE,
                                        ELEM_TYPE_TAB_GROUP, ELEM_TYPE_SEPARATOR):
                        element.Key = top_window.DictionaryKeyCounter
                        top_window.DictionaryKeyCounter += 1
                if element.Key is not None:
                    if element.Key in key_dict.keys():
                        if element.Type == ELEM_TYPE_BUTTON and WARN_DUPLICATE_BUTTON_KEY_ERRORS:  # for Buttons see if should complain
                            warnings.warn('*** Duplicate key found in your layout {} ***'.format(element.Key), UserWarning)
                            warnings.warn('*** Replaced new key with {} ***'.format(str(element.Key) + str(self.UniqueKeyCounter)))
                            if not SUPPRESS_ERROR_POPUPS:
                                _error_popup_with_traceback('Duplicate key found in your layout', 'Dupliate key: {}'.format(element.Key),
                                                            'Is being replaced with: {}'.format(str(element.Key) + str(self.UniqueKeyCounter)),
                                                            'The line of code above shows you which layout, but does not tell you exactly where the element was defined',
                                                            'The element type is {}'.format(element.Type))
                        element.Key = str(element.Key) + str(self.UniqueKeyCounter)
                        self.UniqueKeyCounter += 1
                    key_dict[element.Key] = element
        return key_dict

    def element_list(self):
        """
        Returns a list of all elements in the window

        :return: List of all elements in the window and container elements in the window
        :rtype:  List[Element]
        """
        return self._build_element_list()

    def _build_element_list(self):
        """
        Used internally only! Not user callable
        Builds a dictionary containing all elements with keys for this window.
        """
        elem_list = []
        elem_list = self._build_element_list_for_form(self, self, elem_list)
        return elem_list

    def _build_element_list_for_form(self, top_window, window, elem_list):
        """
        Loop through all Rows and all Container Elements for this window and create a list
        Note that the calls are recursive as all pathes must be walked

        :param top_window: The highest level of the window
        :type top_window:  (Window)
        :param window:     The "sub-window" (container element) to be searched
        :type window:      Column | Frame | TabGroup | Pane | Tab
        :param elem_list:  The element list as it currently stands.... used as part of recursive call
        :type elem_list:   ???
        :return:           List of all elements in this sub-window
        :rtype:            List[Element]
        """
        for row_num, row in enumerate(window.Rows):
            for col_num, element in enumerate(row):
                elem_list.append(element)
                if element.Type in (ELEM_TYPE_COLUMN, ELEM_TYPE_FRAME, ELEM_TYPE_TAB_GROUP, ELEM_TYPE_PANE, ELEM_TYPE_TAB):
                    elem_list = self._build_element_list_for_form(top_window, element, elem_list)
        return elem_list


    def settings_save(self, values):
        """
        Saves settings to settings file using the values dictionary that is passed in.

        :param values:  Dictionary of values to potentially save
        :type values:   (Dict)
        """
        if values is None:      # sometimes users may accidently pass in None, so just ignore it
            return
        for key, value in values.items():
            try:
                element = self.find_element(key)
                if element.setting is not None:
                    user_settings_set_entry(key, value)
            except Exception as e:
                _error_popup_with_traceback('Error saving settings', e)

    def settings_restore(self):
        """
        Reads settings and sets the window's Elements to those values.

        TODO - NOTE - may have trouble on some elements due to how update calls work

        """
        for key in self.key_dict.keys():
            try:
                element = self.find_element(key)
                if element.setting is not None:
                    value = user_settings_get_entry(key, '')
                    element.update(value)
            except Exception as e:
                _error_popup_with_traceback('Error restoring settings', e)


    def save_to_disk(self, filename):
        """
        Saves the values contained in each of the input areas of the form. Basically saves what would be returned from a call to Read.  It takes these results and saves them to disk using pickle.
         Note that every element in your layout that is to be saved must have a key assigned to it.

        :param filename: Filename to save the values to in pickled form
        :type filename:  str
        """
        try:
            event, values = _BuildResults(self, False, self)
            remove_these = []
            for key in values:
                if self.Element(key).Type == ELEM_TYPE_BUTTON:
                    remove_these.append(key)
            for key in remove_these:
                del values[key]
            with open(filename, 'wb') as sf:
                pickle.dump(values, sf)
        except:
            print('*** Error saving Window contents to disk ***')

    def load_from_disk(self, filename):
        """
        Restore values from a previous call to SaveToDisk which saves the returned values dictionary in Pickle format

        :param filename: Pickle Filename to load
        :type filename:  (str)
        """
        try:
            with open(filename, 'rb') as df:
                self.Fill(pickle.load(df))
        except:
            print('*** Error loading form to disk ***')

    def get_screen_dimensions(self):
        """
        Get the screen dimensions.  NOTE - you must have a window already open for this to work (blame tkinter not me)

        :return: Tuple containing width and height of screen in pixels
        :rtype:  Tuple[None, None] | Tuple[width, height]
        """

        if self.TKrootDestroyed or self.TKroot is None:
            return Window.get_screen_size()
        screen_width = self.TKroot.winfo_screenwidth()  # get window info to move to middle of screen
        screen_height = self.TKroot.winfo_screenheight()
        return screen_width, screen_height

    def move(self, x, y):
        """
        Move the upper left corner of this window to the x,y coordinates provided
        :param x: x coordinate in pixels
        :type x:  (int)
        :param y: y coordinate in pixels
        :type y:  (int)
        """
        try:
            self.TKroot.geometry("+%s+%s" % (x, y))
            self.config_last_location = (int(x), (int(y)))

        except:
            pass

    def move_to_center(self):
        """
        Recenter your window after it's been moved or the size changed.

        This is a conveinence method. There are no tkinter calls involved, only pure PySimpleGUI API calls.
        """
        if not self._is_window_created('tried Window.move_to_center'):
            return
        screen_width, screen_height = self.get_screen_dimensions()
        win_width, win_height = self.size
        x, y = (screen_width - win_width) // 2, (screen_height - win_height) // 2
        self.move(x, y)

    def minimize(self):
        """
        Minimize this window to the task bar
        """
        if not self._is_window_created('tried Window.minimize'):
            return
        if self.use_custom_titlebar is True:
            self._custom_titlebar_minimize()
        else:
            self.TKroot.iconify()
        self.maximized = False

    def maximize(self):
        """
        Maximize the window. This is done differently on a windows system versus a linux or mac one.  For non-Windows
        the root attribute '-fullscreen' is set to True.  For Windows the "root" state is changed to "zoomed"
        The reason for the difference is the title bar is removed in some cases when using fullscreen option
        """

        if not self._is_window_created('tried Window.maximize'):
            return
        if not running_linux():
            self.TKroot.state('zoomed')
        else:
            self.TKroot.attributes('-fullscreen', True)
        # this method removes the titlebar too
        # self.TKroot.attributes('-fullscreen', True)
        self.maximized = True

    def normal(self):
        """
        Restore a window to a non-maximized state.  Does different things depending on platform.  See Maximize for more.
        """
        if not self._is_window_created('tried Window.normal'):
            return
        if self.use_custom_titlebar:
            self._custom_titlebar_restore()
        else:
            if self.TKroot.state() == 'iconic':
                self.TKroot.deiconify()
            else:
                if not running_linux():
                    self.TKroot.state('normal')
                else:
                    self.TKroot.attributes('-fullscreen', False)
            self.maximized = False

    def _StartMoveUsingControlKey(self, event):
        """
        Used by "Grab Anywhere" style windows. This function is bound to mouse-down. It marks the beginning of a drag.
        :param event: event information passed in by tkinter. Contains x,y position of mouse
        :type event:  (event)
        """
        self._start_move_save_offset(event)
        return


    def _StartMoveGrabAnywhere(self, event):

        """
        Used by "Grab Anywhere" style windows. This function is bound to mouse-down. It marks the beginning of a drag.
        :param event: event information passed in by tkinter. Contains x,y position of mouse
        :type event:  (event)
        """
        if (isinstance(event.widget, GRAB_ANYWHERE_IGNORE_THESE_WIDGETS) or event.widget in self._grab_anywhere_ignore_these_list) and event.widget not in self._grab_anywhere_include_these_list:
            # print('Found widget to ignore in grab anywhere...')
            return
        self._start_move_save_offset(event)

    def _StartMove(self, event):
        self._start_move_save_offset(event)
        return

    def _StopMove(self, event):
        """
        Used by "Grab Anywhere" style windows. This function is bound to mouse-up. It marks the ending of a drag.
        Sets the position of the window to this final x,y coordinates
        :param event: event information passed in by tkinter. Contains x,y position of mouse
        :type event:  (event)
        """
        return

    def _start_move_save_offset(self, event):
        self._mousex = event.x + event.widget.winfo_rootx()
        self._mousey = event.y + event.widget.winfo_rooty()
        geometry = self.TKroot.geometry()
        location = geometry[geometry.find('+') + 1:].split('+')
        self._startx = int(location[0])
        self._starty = int(location[1])
        self._mouse_offset_x = self._mousex - self._startx
        self._mouse_offset_y = self._mousey - self._starty
        # ------ Move All Windows code ------
        if Window._move_all_windows:
            # print('Moving all')
            for win in Window._active_windows:
                if win == self:
                    continue
                geometry = win.TKroot.geometry()
                location = geometry[geometry.find('+') + 1:].split('+')
                _startx = int(location[0])
                _starty = int(location[1])
                win._mouse_offset_x = event.x_root - _startx
                win._mouse_offset_y = event.y_root - _starty


    def _OnMotionUsingControlKey(self, event):
        self._OnMotion(event)


    def _OnMotionGrabAnywhere(self, event):

        """
        Used by "Grab Anywhere" style windows. This function is bound to mouse motion. It actually moves the window
        :param event: event information passed in by tkinter. Contains x,y position of mouse
        :type event:  (event)
        """
        if (isinstance(event.widget, GRAB_ANYWHERE_IGNORE_THESE_WIDGETS) or event.widget in self._grab_anywhere_ignore_these_list) and event.widget not in self._grab_anywhere_include_these_list:
            # print('Found widget to ignore in grab anywhere...')
            return

        self._OnMotion(event)


    def _OnMotion(self, event):

        self.TKroot.geometry(f"+{event.x_root-self._mouse_offset_x}+{event.y_root-self._mouse_offset_y}")
        # print(f"+{event.x_root}+{event.y_root}")
        # ------ Move All Windows code ------
        try:
            if Window._move_all_windows:
                for win in Window._active_windows:
                    if win == self:
                        continue
                    win.TKroot.geometry(f"+{event.x_root-win._mouse_offset_x}+{event.y_root-win._mouse_offset_y}")
        except Exception as e:
            print('on motion error', e)

    def _focus_callback(self, event):
        print('Focus event = {} window = {}'.format(event, self.Title))

    def _config_callback(self, event):
        """
        Called when a config event happens for the window

        :param event:            From tkinter and is not used
        :type event:             Any
        """
        # do the location auto-save stuff. If the location changes, then the location is written to the settings file
        if self.auto_save_location:
            try:
                cur_location = self.current_location()
                old_location = self._last_location
                if None not in cur_location:
                    self._last_location= cur_location
                    if old_location != cur_location:
                        self._auto_save_location()
            except Exception as e:
                pass

        if self.enable_window_config_events is True:
            self.LastButtonClicked = WINDOW_CONFIG_EVENT
            self.FormRemainedOpen = True
            self.user_bind_event = event
            _exit_mainloop(self)

    def _move_callback(self, event):
        """
        Called when a control + arrow key is pressed.
        This is a built-in window positioning key sequence

        :param event:            From tkinter and is not used
        :type event:             Any
        """
        if not self._is_window_created('Tried to move window using arrow keys'):
            return
        x,y = self.current_location()
        if event.keysym == 'Up':
            self.move(x, y-1)
        elif event.keysym == 'Down':
            self.move(x, y+1)
        elif event.keysym == 'Left':
            self.move(x-1, y)
        elif event.keysym == 'Right':
            self.move(x+1, y)

    """
    def _config_callback(self, event):
        new_x = event.x
        new_y = event.y


        if self.not_completed_initial_movement:
            if self.starting_window_position != (new_x, new_y):
                return
            self.not_completed_initial_movement = False
            return

        if not self.saw_00:
            if new_x == 0 and new_y == 0:
                self.saw_00 = True

        # self.config_count += 1
        # if self.config_count < 40:
        #     return

        print('Move LOGIC')

        if self.config_last_size != (event.width, event.height):
            self.config_last_size = (event.width, event.height)

        if self.config_last_location[0] != new_x or self.config_last_location[1] != new_y:
            if self.config_last_location == (None, None):
                self.config_last_location = (new_x, new_y)
                return

        deltax = self.config_last_location[0] - event.x
        deltay = self.config_last_location[1] - event.y
        if deltax == 0 and deltay == 0:
            print('not moving so returning')
            return
        if Window._move_all_windows:
            print('checking all windows')
            for window in Window._active_windows:
                if window == self:
                    continue
                x = window.TKroot.winfo_x() + deltax
                y = window.TKroot.winfo_y() + deltay
                # window.TKroot.geometry("+%s+%s" % (x, y))  # this is what really moves the window
                # window.config_last_location = (x,y)
    """

    def _KeyboardCallback(self, event):
        """
        Window keyboard callback. Called by tkinter.  Will kick user out of the tkinter event loop. Should only be
        called if user has requested window level keyboard events

        :param event: object provided by tkinter that contains the key information
        :type event:  (event)
        """
        self.LastButtonClicked = None
        self.FormRemainedOpen = True
        if event.char != '':
            self.LastKeyboardEvent = event.char
        else:
            self.LastKeyboardEvent = str(event.keysym) + ':' + str(event.keycode)
        # if not self.NonBlocking:
        #     _BuildResults(self, False, self)
        _exit_mainloop(self)

    def _MouseWheelCallback(self, event):
        """
        Called by tkinter when a mouse wheel event has happened. Only called if keyboard events for the window
        have been enabled

        :param event: object sent in by tkinter that has the wheel direction
        :type event:  (event)
        """
        self.LastButtonClicked = None
        self.FormRemainedOpen = True
        self.LastKeyboardEvent = 'MouseWheel:Down' if event.delta < 0 or event.num == 5 else 'MouseWheel:Up'
        # if not self.NonBlocking:
        #     _BuildResults(self, False, self)
        _exit_mainloop(self)

    def _Close(self, without_event=False):
        """
        The internal close call that does the real work of building. This method basically sets up for closing
        but doesn't destroy the window like the User's version of Close does

        :parm without_event: if True, then do not cause an event to be generated, "silently" close the window
        :type without_event: (bool)
        """

        try:
            self.TKroot.update()
        except:
            pass

        if not self.NonBlocking or not without_event:
            _BuildResults(self, False, self)
        if self.TKrootDestroyed:
            return
        self.TKrootDestroyed = True
        self.RootNeedsDestroying = True
        return

    def close(self):
        """
        Closes window.  Users can safely call even if window has been destroyed.   Should always call when done with
        a window so that resources are properly freed up within your thread.
        """
        self._auto_save_location()

        try:
            del Window._active_windows[self]  # will only be in the list if window was explicitly finalized
        except:
            pass

        try:
            self.TKroot.update()  # On Linux must call update if the user closed with X or else won't actually close the window
        except:
            pass

        self._restore_stdout()
        self._restore_stderr()

        _TimerPeriodic.stop_all_timers_for_window(self)

        if self.TKrootDestroyed:
            return
        try:
            self.TKroot.destroy()
            self.TKroot.update()
            Window._DecrementOpenCount()
        except:
            pass
        # if down to 1 window, try and destroy the hidden window, if there is one
        # if Window.NumOpenWindows == 1:
        #     try:
        #         Window.hidden_master_root.destroy()
        #         Window.NumOpenWindows = 0  # if no hidden window, then this won't execute
        #     except:
        #         pass
        self.TKrootDestroyed = True

        # Free up anything that was held in the layout and the root variables
        self.Rows = None
        self.TKroot = None

    def is_closed(self, quick_check=None):
        """
        Returns True is the window is maybe closed.  Can be difficult to tell sometimes
        NOTE - the call to TKroot.update was taking over 500 ms sometimes so added a flag to bypass the lengthy call.
        :param quick_quick: If True, then don't use the root.update call, only check the flags
        :type quick_check:  bool
        :return:            True if the window was closed or destroyed
        :rtype:             (bool)
        """

        if self.TKrootDestroyed or self.TKroot is None:
            return True

        # if performing a quick check only, then skip calling tkinter for performance reasons
        if quick_check is True:
            return False

        # see if can do an update... if not, then it's been destroyed
        try:
            rc = self.TKroot.update()
        except:
            return True
        return False

    def _auto_save_location(self):
        """
        Internal function to save the location of the window in the settings file
        :return:
        """
        if self.auto_save_location:
            user_settings_set_entry('-LAST WINDOW LOCATION-'+self.Title, self._last_location)



    # IT FINALLY WORKED! 29-Oct-2018 was the first time this damned thing got called
    def _OnClosingCallback(self):
        """
        Internally used method ONLY. Not sure callable.  tkinter calls this when the window is closed by clicking X
        """
        # global _my_windows
        # print('Got closing callback', self.DisableClose)
        if self.DisableClose:
            return
        self._auto_save_location()
        if self.CurrentlyRunningMainloop:  # quit if this is the current mainloop, otherwise don't quit!
            _exit_mainloop(self)
            if self.close_destroys_window:
                self.TKroot.destroy()  # destroy this window
                self.TKrootDestroyed = True
                self.XFound = True
            else:
                self.LastButtonClicked = WINDOW_CLOSE_ATTEMPTED_EVENT
        elif Window._root_running_mainloop == Window.hidden_master_root:
            _exit_mainloop(self)
        else:
            if self.close_destroys_window:
                self.TKroot.destroy()  # destroy this window
                self.XFound = True
            else:
                self.LastButtonClicked = WINDOW_CLOSE_ATTEMPTED_EVENT
        if self.close_destroys_window:
            self.RootNeedsDestroying = True
        self._restore_stdout()
        self._restore_stderr()

    def disable(self):
        """
        Disables window from taking any input from the user
        """
        if not self._is_window_created('tried Window.disable'):
            return
        self.TKroot.attributes('-disabled', 1)
        # self.TKroot.grab_set_global()

    def enable(self):
        """
        Re-enables window to take user input after having it be Disabled previously
        """
        if not self._is_window_created('tried Window.enable'):
            return
        self.TKroot.attributes('-disabled', 0)
        # self.TKroot.grab_release()

    def hide(self):
        """
        Hides the window from the screen and the task bar
        """
        if not self._is_window_created('tried Window.hide'):
            return
        self._Hidden = True
        self.TKroot.withdraw()

    def un_hide(self):
        """
        Used to bring back a window that was previously hidden using the Hide method
        """
        if not self._is_window_created('tried Window.un_hide'):
            return
        if self._Hidden:
            self.TKroot.deiconify()
            self._Hidden = False

    def is_hidden(self):
        """
            Returns True if the window is currently hidden
        :return:    Returns True if the window is currently hidden
        :rtype:     bool
        """
        return self._Hidden

    def disappear(self):
        """
        Causes a window to "disappear" from the screen, but remain on the taskbar. It does this by turning the alpha
        channel to 0.  NOTE that on some platforms alpha is not supported. The window will remain showing on these
        platforms.  The Raspberry Pi for example does not have an alpha setting
        """
        if not self._is_window_created('tried Window.disappear'):
            return
        self.TKroot.attributes('-alpha', 0)

    def reappear(self):
        """
        Causes a window previously made to "Disappear" (using that method). Does this by restoring the alpha channel
        """
        if not self._is_window_created('tried Window.reappear'):
            return
        self.TKroot.attributes('-alpha', 255)

    def set_alpha(self, alpha):
        """
        Sets the Alpha Channel for a window.  Values are between 0 and 1 where 0 is completely transparent

        :param alpha: 0 to 1. 0 is completely transparent.  1 is completely visible and solid (can't see through)
        :type alpha:  (float)
        """
        if not self._is_window_created('tried Window.set_alpha'):
            return
        self._AlphaChannel = alpha
        self.TKroot.attributes('-alpha', alpha)

    @property
    def alpha_channel(self):
        """
        A property that changes the current alpha channel value (internal value)
        :return: the current alpha channel setting according to self, not read directly from tkinter
        :rtype:  (float)
        """
        return self._AlphaChannel

    @alpha_channel.setter
    def alpha_channel(self, alpha):
        """
        The setter method for this "property".
        Planning on depricating so that a Set call is always used by users. This is more in line with the SDK
        :param alpha: 0 to 1. 0 is completely transparent.  1 is completely visible and solid (can't see through)
        :type alpha:  (float)
        """
        if not self._is_window_created('tried Window.alpha_channel'):
            return
        self._AlphaChannel = alpha
        self.TKroot.attributes('-alpha', alpha)

    def bring_to_front(self):
        """
        Brings this window to the top of all other windows (perhaps may not be brought before a window made to "stay
        on top")
        """
        if not self._is_window_created('tried Window.bring_to_front'):
            return
        if running_windows():
            try:
                self.TKroot.wm_attributes("-topmost", 0)
                self.TKroot.wm_attributes("-topmost", 1)
                if not self.KeepOnTop:
                    self.TKroot.wm_attributes("-topmost", 0)
            except Exception as e:
                warnings.warn('Problem in Window.bring_to_front' + str(e), UserWarning)
        else:
            try:
                self.TKroot.lift()
            except:
                pass

    def send_to_back(self):
        """
        Pushes this window to the bottom of the stack of windows. It is the opposite of BringToFront
        """
        if not self._is_window_created('tried Window.send_to_back'):
            return
        try:
            self.TKroot.lower()
        except:
            pass

    def keep_on_top_set(self):
        """
        Sets keep_on_top after a window has been created.  Effect is the same
        as if the window was created with this set.  The Window is also brought
        to the front
        """
        if not self._is_window_created('tried Window.keep_on_top_set'):
            return
        self.KeepOnTop = True
        self.bring_to_front()
        try:
            self.TKroot.wm_attributes("-topmost", 1)
        except Exception as e:
            warnings.warn('Problem in Window.keep_on_top_set trying to set wm_attributes topmost' + str(e), UserWarning)

    def keep_on_top_clear(self):
        """
        Clears keep_on_top after a window has been created.  Effect is the same
        as if the window was created with this set.
        """
        if not self._is_window_created('tried Window.keep_on_top_clear'):
            return
        self.KeepOnTop = False
        try:
            self.TKroot.wm_attributes("-topmost", 0)
        except Exception as e:
            warnings.warn('Problem in Window.keep_on_top_clear trying to clear wm_attributes topmost' + str(e), UserWarning)

    def current_location(self, more_accurate=False, without_titlebar=False):
        """
        Get the current location of the window's top left corner.
        Sometimes, depending on the environment, the value returned does not include the titlebar,etc
        A new option, more_accurate, can be used to get the theoretical upper leftmost corner of the window.
        The titlebar and menubar are crated by the OS. It gets really confusing when running in a webpage (repl, trinket)
        Thus, the values can appear top be "off" due to the sometimes unpredictable way the location is calculated.
        If without_titlebar is set then the location of the root x,y is used which should not include the titlebar but
            may be OS dependent.

        :param more_accurate:    If True, will use the window's geometry to get the topmost location with titlebar, menubar taken into account
        :type more_accurate:     (bool)
        :param without_titlebar: If True, return location of top left of main window area without the titlebar (may be OS dependent?)
        :type without_titlebar:  (bool)
        :return:                 The x and y location in tuple form (x,y)
        :rtype:                  Tuple[(int | None), (int | None)]
        """

        if not self._is_window_created('tried Window.current_location'):
            return (None, None)
        try:
            if without_titlebar is True:
                x, y = self.TKroot.winfo_rootx(), self.TKroot.winfo_rooty()
            elif more_accurate:
                geometry = self.TKroot.geometry()
                location = geometry[geometry.find('+') + 1:].split('+')
                x, y = int(location[0]), int(location[1])
            else:
                x, y =  int(self.TKroot.winfo_x()), int(self.TKroot.winfo_y())
        except Exception as e:
            warnings.warn('Error in Window.current_location. Trouble getting x,y location\n' + str(e), UserWarning)
            x, y = (None, None)
        return (x,y)

    def current_size_accurate(self):
        """
        Get the current location of the window based on tkinter's geometry setting

        :return:              The x and y size in tuple form (x,y)
        :rtype:               Tuple[(int | None), (int | None)]
        """

        if not self._is_window_created('tried Window.current_location'):
            return (None, None)
        try:
            geometry = self.TKroot.geometry()
            geometry_tuple = geometry.split('+')
            window_size = geometry_tuple[0].split('x')
            x, y = int(window_size[0]), int(window_size[1])
        except Exception as e:
            warnings.warn('Error in Window.current_size_accurate. Trouble getting x,y size\n{} {}'.format(geometry, geometry_tuple) + str(e), UserWarning)
            x, y = (None, None)
        return (x,y)

    @property
    def size(self):
        """
        Return the current size of the window in pixels

        :return: (width, height) of the window
        :rtype:  Tuple[(int), (int)] or Tuple[None, None]
        """
        if not self._is_window_created('Tried to use Window.size property'):
            return (None, None)
        win_width = self.TKroot.winfo_width()
        win_height = self.TKroot.winfo_height()
        return win_width, win_height

    @size.setter
    def size(self, size):
        """
        Changes the size of the window, if possible

        :param size: (width, height) of the desired window size
        :type size:  (int, int)
        """
        try:
            self.TKroot.geometry("%sx%s" % (size[0], size[1]))
            self.TKroot.update_idletasks()
        except:
            pass

    def set_size(self, size):
        """
        Changes the size of the window, if possible. You can also use the Window.size prooerty
        to set/get the size.

        :param size: (width, height) of the desired window size
        :type size:  (int, int)
        """
        if not self._is_window_created('Tried to change the size of the window prior to creation.'):
            return
        try:
            self.TKroot.geometry("%sx%s" % (size[0], size[1]))
            self.TKroot.update_idletasks()
        except:
            pass

    def set_min_size(self, size):
        """
        Changes the minimum size of the window. Note Window must be read or finalized first.

        :param size: (width, height) tuple (int, int) of the desired window size in pixels
        :type size:  (int, int)
        """
        if not self._is_window_created('tried Window.set_min_size'):
            return
        self.TKroot.minsize(size[0], size[1])
        self.TKroot.update_idletasks()

    def set_resizable(self, x_axis_enable, y_axis_enable):
        """
        Changes if a window can be resized in either the X or the Y direction.
        Note Window must be read or finalized first.

        :param x_axis_enable: If True, the window can be changed in the X-axis direction. If False, it cannot
        :type x_axis_enable: (bool)
        :param y_axis_enable: If True, the window can be changed in the Y-axis direction. If False, it cannot
        :type y_axis_enable: (bool)
        """

        if not self._is_window_created('tried Window.set_resixable'):
            return
        try:
            self.TKroot.resizable(x_axis_enable, y_axis_enable)
        except Exception as e:
            _error_popup_with_traceback('Window.set_resizable - tkinter reported error', e)

    def visibility_changed(self):
        """
        When making an element in a column or someplace that has a scrollbar, then you'll want to call this function
        prior to the column's contents_changed() method.
        """
        self.refresh()

    def set_transparent_color(self, color):
        """
        Set the color that will be transparent in your window. Areas with this color will be SEE THROUGH.

        :param color: Color string that defines the transparent color
        :type color:  (str)
        """
        if not self._is_window_created('tried Window.set_transparent_color'):
            return
        try:
            self.TKroot.attributes('-transparentcolor', color)
            self.TransparentColor = color
        except:
            print('Transparent color not supported on this platform (windows only)')

    def mouse_location(self):
        """
        Return the (x,y) location of the mouse relative to the entire screen.  It's the same location that
        you would use to create a window, popup, etc.

        :return:    The location of the mouse pointer
        :rtype:     (int, int)
        """
        if not self._is_window_created('tried Window.mouse_location'):
            return (0, 0)

        return (self.TKroot.winfo_pointerx(), self.TKroot.winfo_pointery())

    def grab_any_where_on(self):
        """
        Turns on Grab Anywhere functionality AFTER a window has been created.  Don't try on a window that's not yet
        been Finalized or Read.
        """
        if not self._is_window_created('tried Window.grab_any_where_on'):
            return
        self.TKroot.bind("<ButtonPress-1>", self._StartMoveGrabAnywhere)
        self.TKroot.bind("<ButtonRelease-1>", self._StopMove)
        self.TKroot.bind("<B1-Motion>", self._OnMotionGrabAnywhere)

    def grab_any_where_off(self):
        """
        Turns off Grab Anywhere functionality AFTER a window has been created.  Don't try on a window that's not yet
        been Finalized or Read.
        """
        if not self._is_window_created('tried Window.grab_any_where_off'):
            return
        self.TKroot.unbind("<ButtonPress-1>")
        self.TKroot.unbind("<ButtonRelease-1>")
        self.TKroot.unbind("<B1-Motion>")

    def _user_bind_callback(self, bind_string, event, propagate=True):
        """
        Used when user binds a tkinter event directly to an element

        :param bind_string: The event that was bound so can lookup the key modifier
        :type bind_string:  (str)
        :param event:       Event data passed in by tkinter (not used)
        :type event:
        :param propagate:   If True then tkinter will be told to propagate the event
        :type propagate:    (bool)
        """
        # print('bind callback', bind_string, event)
        key = self.user_bind_dict.get(bind_string, '')
        self.user_bind_event = event
        if key is not None:
            self.LastButtonClicked = key
        else:
            self.LastButtonClicked = bind_string
        self.FormRemainedOpen = True
        # if self.CurrentlyRunningMainloop:
        #     self.TKroot.quit()
        _exit_mainloop(self)
        return 'break' if propagate is not True else None

    def bind(self, bind_string, key, propagate=True):
        """
        Used to add tkinter events to a Window.
        The tkinter specific data is in the Window's member variable user_bind_event
        :param bind_string: The string tkinter expected in its bind function
        :type bind_string:  (str)
        :param key:         The event that will be generated when the tkinter event occurs
        :type key:          str | int | tuple | object
        :param propagate:   If True then tkinter will be told to propagate the event
        :type propagate:    (bool)
        """
        if not self._is_window_created('tried Window.bind'):
            return
        try:
            self.TKroot.bind(bind_string, lambda evt: self._user_bind_callback(bind_string, evt, propagate))
        except Exception as e:
            self.TKroot.unbind_all(bind_string)
            return
            # _error_popup_with_traceback('Window.bind error', e)
        self.user_bind_dict[bind_string] = key

    def unbind(self, bind_string):
        """
        Used to remove tkinter events to a Window.
        This implementation removes ALL of the binds of the bind_string from the Window.  If there
        are multiple binds for the Window itself, they will all be removed.  This can be extended later if there
        is a need.
        :param bind_string: The string tkinter expected in its bind function
        :type bind_string:  (str)
        """
        if not self._is_window_created('tried Window.unbind'):
            return
        self.TKroot.unbind(bind_string)

    def _callback_main_debugger_window_create_keystroke(self, event):
        """
        Called when user presses the key that creates the main debugger window
        March 2022 - now causes the user reads to return timeout events automatically
        :param event: (event) not used. Passed in event info
        :type event:
        """
        Window._main_debug_window_build_needed = True
        # exit the event loop in a way that resembles a timeout occurring
        self.LastButtonClicked = self.TimeoutKey
        self.FormRemainedOpen = True
        self.TKroot.quit()  # kick the users out of the mainloop

    def _callback_popout_window_create_keystroke(self, event):
        """
        Called when user presses the key that creates the floating debugger window
        March 2022 - now causes the user reads to return timeout events automatically
        :param event: (event) not used. Passed in event info
        :type event:
        """
        Window._floating_debug_window_build_needed = True
        # exit the event loop in a way that resembles a timeout occurring
        self.LastButtonClicked = self.TimeoutKey
        self.FormRemainedOpen = True
        self.TKroot.quit()  # kick the users out of the mainloop

    def enable_debugger(self):
        """
        Enables the internal debugger. By default, the debugger IS enabled
        """
        if not self._is_window_created('tried Window.enable_debugger'):
            return
        self.TKroot.bind('<Cancel>', self._callback_main_debugger_window_create_keystroke)
        self.TKroot.bind('<Pause>', self._callback_popout_window_create_keystroke)
        self.DebuggerEnabled = True

    def disable_debugger(self):
        """
        Disable the internal debugger. By default the debugger is ENABLED
        """
        if not self._is_window_created('tried Window.disable_debugger'):
            return
        self.TKroot.unbind("<Cancel>")
        self.TKroot.unbind("<Pause>")
        self.DebuggerEnabled = False

    def set_title(self, title):
        """
        Change the title of the window

        :param title: The string to set the title to
        :type title:  (str)
        """
        if not self._is_window_created('tried Window.set_title'):
            return
        if self._has_custom_titlebar:
            try:  # just in case something goes badly, don't crash
                self.find_element(TITLEBAR_TEXT_KEY).update(title)
            except:
                pass
        # even with custom titlebar, set the main window's title too so it'll match when minimized
        self.TKroot.wm_title(str(title))

    def make_modal(self):
        """
        Makes a window into a "Modal Window"
        This means user will not be able to interact with other windows until this one is closed

        NOTE - Sorry Mac users - you can't have modal windows.... lobby your tkinter Mac devs
        """
        if not self._is_window_created('tried Window.make_modal'):
            return

        if running_mac() and ENABLE_MAC_MODAL_DISABLE_PATCH:
            return

        # if modal windows have been disabled globally
        if not DEFAULT_MODAL_WINDOWS_ENABLED and not DEFAULT_MODAL_WINDOWS_FORCED:
            # if not DEFAULT_MODAL_WINDOWS_ENABLED:
            return

        try:
            self.TKroot.transient()
            self.TKroot.grab_set()
            self.TKroot.focus_force()
        except Exception as e:
            print('Exception trying to make modal', e)

    def force_focus(self):
        """
        Forces this window to take focus
        """
        if not self._is_window_created('tried Window.force_focus'):
            return
        self.TKroot.focus_force()

    def was_closed(self):
        """
        Returns True if the window was closed

        :return: True if the window is closed
        :rtype:  bool
        """
        return self.TKrootDestroyed

    def set_cursor(self, cursor):
        """
        Sets the cursor for the window.
        If you do not want any mouse pointer, then use the string "none"

        :param cursor: The tkinter cursor name
        :type cursor:  (str)
        """

        if not self._is_window_created('tried Window.set_cursor'):
            return
        try:
            self.TKroot.config(cursor=cursor)
        except Exception as e:
            print('Warning bad cursor specified ', cursor)
            print(e)

    def ding(self, display_number=0):
        """
        Make a "bell" sound. A capability provided by tkinter.  Your window needs to be finalized prior to calling.
        Ring a display's bell is the tkinter description of the call.
        :param display_number: Passed to tkinter's bell method as parameter "displayof".
        :type display_number:  int
        """
        if not self._is_window_created('tried Window.ding'):
            return
        try:
            self.TKroot.bell(display_number)
        except Exception as e:
            if not SUPPRESS_ERROR_POPUPS:
                _error_popup_with_traceback('Window.ding() - tkinter reported error from bell() call', e)

    def _window_tkvar_changed_callback(self, *args):
        """
        Internal callback function for when the thread

        :param event: Information from tkinter about the callback
        :type event:

        """
        # print('Thread callback info', threading.current_thread())
        # print(event)
        # trace_details = traceback.format_stack()
        # print(''.join(trace_details))
        # self.thread_lock.acquire()
        # if self.thread_timer:
        # self.TKroot.after_cancel(id=self.thread_timer)
        # self.thread_timer = None
        # self.thread_lock.release()

        if self._queued_thread_event_available():
            self.FormRemainedOpen = True
            _exit_mainloop(self)

    def _create_thread_queue(self):
        """
        Creates the queue used by threads to communicate with this window
        """

        if self.thread_queue is None:
            self.thread_queue = queue.Queue()

        if self.thread_lock is None:
            self.thread_lock = threading.Lock()

        if self.thread_strvar is None:
            self.thread_strvar = tk.StringVar()
            self.thread_strvar.trace('w', self._window_tkvar_changed_callback)

    def write_event_value(self, key, value):
        """
        Adds a key & value tuple to the queue that is used by threads to communicate with the window

        :param key:   The key that will be returned as the event when reading the window
        :type key:    Any
        :param value: The value that will be in the values dictionary
        :type value:  Any
        """

        if self.thread_queue is None:
            print('*** Warning Window.write_event_value - no thread queue found ***')
            return
        # self.thread_lock.acquire()  # first lock the critical section
        self.thread_queue.put(item=(key, value))
        self.TKroot.tk.willdispatch()  # brilliant bit of code provided by Giuliano who I owe a million thank yous!
        self.thread_strvar.set('new item')

        # self.thread_queue.put(item=(key, value))
        # self.thread_strvar.set('new item')
        # March 28 2021 - finally found a solution!  It needs a little more work and a lock
        # if no timer is running, then one should be started
        # if self.thread_timer is None:
        #     print('Starting a timer')
        #     self.thread_timer = self.TKroot.after(1, self._window_tkvar_changed_callback)
        # self.thread_lock.release()

    def _queued_thread_event_read(self):
        if self.thread_queue is None:
            return None

        try:  # see if something has been posted to Queue
            message = self.thread_queue.get_nowait()
        except queue.Empty:  # get_nowait() will get exception when Queue is empty
            return None

        return message

    def _queued_thread_event_available(self):

        if self.thread_queue is None:
            return False
        # self.thread_lock.acquire()
        qsize = self.thread_queue.qsize()
        if qsize == 0:
            self.thread_timer = None
        # self.thread_lock.release()
        return qsize != 0

    def _RightClickMenuCallback(self, event):
        """
        When a right click menu is specified for an entire window, then this callback catches right clicks
        that happen to the window itself, when there are no elements that are in that area.

        The only portion that is not currently covered correctly is the row frame itself.  There will still
        be parts of the window, at the moment, that don't respond to a right click.  It's getting there, bit
        by bit.

        Callback function that's called when a right click happens. Shows right click menu as result.

        :param event: information provided by tkinter about the event including x,y location of click
        :type event:
        """
        # if there are widgets under the mouse, then see if it's the root only.  If not, then let the widget (element) show their menu instead
        x, y = self.TKroot.winfo_pointerxy()
        widget = self.TKroot.winfo_containing(x, y)
        if widget != self.TKroot:
            return
        self.TKRightClickMenu.tk_popup(event.x_root, event.y_root, 0)
        self.TKRightClickMenu.grab_release()

    def save_window_screenshot_to_disk(self, filename=None):
        """
        Saves an image of the PySimpleGUI window provided into the filename provided

        :param filename:        Optional filename to save screenshot to. If not included, the User Settinds are used to get the filename
        :return:                A PIL ImageGrab object that can be saved or manipulated
        :rtype:                 (PIL.ImageGrab | None)
        """
        global pil_import_attempted, pil_imported, PIL, ImageGrab, Image

        if not pil_import_attempted:
            try:
                import PIL as PIL
                from PIL import ImageGrab
                from PIL import Image
                pil_imported = True
                pil_import_attempted = True
            except:
                pil_imported = False
                pil_import_attempted = True
                print('FAILED TO IMPORT PIL!')
                return None
        try:
            # Get location of window to save
            pos = self.current_location()
            # Add a little to the X direction if window has a titlebar
            if not self.NoTitleBar:
                pos = (pos[0] + 7, pos[1])
            # Get size of wiondow
            size = self.current_size_accurate()
            # Get size of the titlebar
            titlebar_height = self.TKroot.winfo_rooty() - self.TKroot.winfo_y()
            # Add titlebar to size of window so that titlebar and window will be saved
            size = (size[0], size[1] + titlebar_height)
            if not self.NoTitleBar:
                size_adjustment = (2, 1)
            else:
                size_adjustment = (0, 0)
            # Make the "Bounding rectangle" used by PLK to do the screen grap "operation
            rect = (pos[0], pos[1], pos[0] + size[0] + size_adjustment[0], pos[1] + size[1] + size_adjustment[1])
            # Grab the image
            grab = ImageGrab.grab(bbox=rect)
            # Save the grabbed image to disk
        except Exception as e:
            # print(e)
            popup_error_with_traceback('Screen capture failure', 'Error happened while trying to save screencapture', e)

            return None
        # return grab
        if filename is None:
            folder = pysimplegui_user_settings.get('-screenshots folder-', '')
            filename = pysimplegui_user_settings.get('-screenshots filename-', '')
            full_filename = os.path.join(folder, filename)
        else:
            full_filename = filename
        if full_filename:
            try:
                grab.save(full_filename)
            except Exception as e:
                popup_error_with_traceback('Screen capture failure', 'Error happened while trying to save screencapture', e)
        else:
            popup_error_with_traceback('Screen capture failure', 'You have attempted a screen capture but have not set up a good filename to save to')
        return grab

    def perform_long_operation(self, func, end_key=None):
        """
        Call your function that will take a long time to execute.  When it's complete, send an event
        specified by the end_key.

        Starts a thread on your behalf.

        This is a way for you to "ease into" threading without learning the details of threading.
        Your function will run, and when it returns 2 things will happen:
        1. The value you provide for end_key will be returned to you when you call window.read()
        2. If your function returns a value, then the value returned will also be included in your windows.read call in the values dictionary

        IMPORTANT - This method uses THREADS... this means you CANNOT make any PySimpleGUI calls from
        the function you provide with the exception of one function, Window.write_event_value.

        :param func:    A lambda or a function name with no parms
        :type func:     Any
        :param end_key: Optional key that will be generated when the function returns
        :type end_key:  (Any | None)
        :return:        The id of the thread
        :rtype:         threading.Thread
        """

        thread = threading.Thread(target=_long_func_thread, args=(self, end_key, func), daemon=True)
        thread.start()
        return thread

    @property
    def key_dict(self):
        """
        Returns a dictionary with all keys and their corresponding elements
        { key : Element }
        :return: Dictionary of keys and elements
        :rtype:  Dict[Any, Element]
        """
        return self.AllKeysDict

    def key_is_good(self, key):
        """
        Checks to see if this is a good key for this window
        If there's an element with the key provided, then True is returned
        :param key:     The key to check
        :type key:      str | int | tuple | object
        :return:        True if key is an element in this window
        :rtype:         bool
        """
        if key in self.key_dict:
            return True
        return False

    def get_scaling(self):
        """
        Returns the current scaling value set for this window

        :return:    Scaling according to tkinter. Returns DEFAULT_SCALING if error
        :rtype:     float
        """

        if not self._is_window_created('Tried Window.set_scaling'):
            return DEFAULT_SCALING
        try:
            scaling = self.TKroot.tk.call('tk', 'scaling')
        except Exception as e:
            if not SUPPRESS_ERROR_POPUPS:
                _error_popup_with_traceback('Window.get_scaling() - tkinter reported error', e)
            scaling = DEFAULT_SCALING

        return scaling

    def _custom_titlebar_restore_callback(self, event):
        self._custom_titlebar_restore()

    def _custom_titlebar_restore(self):
        if running_linux():
            # if self._skip_first_restore_callback:
            #     self._skip_first_restore_callback = False
            #     return
            self.TKroot.unbind('<Button-1>')
            self.TKroot.deiconify()

            # self.ParentForm.TKroot.wm_overrideredirect(True)
            self.TKroot.wm_attributes("-type", 'dock')

        else:
            self.TKroot.unbind('<Expose>')
            self.TKroot.wm_overrideredirect(True)
        if self.TKroot.state() == 'iconic':
            self.TKroot.deiconify()
        else:
            if not running_linux():
                self.TKroot.state('normal')
            else:
                self.TKroot.attributes('-fullscreen', False)
        self.maximized = False

    def _custom_titlebar_minimize(self):
        if running_linux():
            self.TKroot.wm_attributes("-type", "normal")
            # self.ParentForm.TKroot.state('icon')
            # return
            # self.ParentForm.maximize()
            self.TKroot.wm_overrideredirect(False)
            # self.ParentForm.minimize()
            # self.ParentForm.TKroot.wm_overrideredirect(False)
            self.TKroot.iconify()
            # self._skip_first_restore_callback = True
            self.TKroot.bind('<Button-1>', self._custom_titlebar_restore_callback)
        else:
            self.TKroot.wm_overrideredirect(False)
            self.TKroot.iconify()
            self.TKroot.bind('<Expose>', self._custom_titlebar_restore_callback)

    def _custom_titlebar_callback(self, key):
        """
        One of the Custom Titlbar buttons was clicked
        :param key:
        :return:
        """
        if key == TITLEBAR_MINIMIZE_KEY:
            if not self.DisableMinimize:
                self._custom_titlebar_minimize()
        elif key == TITLEBAR_MAXIMIZE_KEY:
            if self.Resizable:
                if self.maximized:
                    self.normal()
                else:
                    self.maximize()
        elif key == TITLEBAR_CLOSE_KEY:
            if not self.DisableClose:
                self._OnClosingCallback()

    def timer_start(self, frequency_ms, key=EVENT_TIMER, repeating=True):
        """
        Starts a timer that gnerates Timer Events.  The default is to repeat the timer events until timer is stopped.
        You can provide your own key or a default key will be used.  The default key is defined
        with the constants EVENT_TIMER or TIMER_KEY.  They both equal the same value.
        The values dictionary will contain the timer ID that is returned from this function.

        :param frequency_ms:    How often to generate timer events in milliseconds
        :type frequency_ms:     int
        :param key:             Key to be returned as the timer event
        :type key:              str | int | tuple | object
        :param repeating:       If True then repeat timer events until timer is explicitly stopped
        :type repeating:        bool
        :return:                Timer ID for the timer
        :rtype:                 int
        """
        timer = _TimerPeriodic(self, frequency_ms=frequency_ms, key=key, repeating=repeating)
        return timer.id

    def timer_stop(self, timer_id):
        """
        Stops a timer with a given ID

        :param timer_id:        Timer ID of timer to stop
        :type timer_id:         int
        :return:
        """
        _TimerPeriodic.stop_timer_with_id(timer_id)

    def timer_stop_all(self):
        """
        Stops all timers for THIS window
        """
        _TimerPeriodic.stop_all_timers_for_window(self)

    def timer_get_active_timers(self):
        """
        Returns a list of currently active timers for a window
        :return:    List of timers for the window
        :rtype:     List[int]
        """
        return _TimerPeriodic.get_all_timers_for_window(self)

    @classmethod
    def _restore_stdout(cls):
        for item in cls._rerouted_stdout_stack:
            (window, element) = item  # type: (Window, Element)
            if not window.is_closed():
                sys.stdout = element
                break
        cls._rerouted_stdout_stack = [item for item in cls._rerouted_stdout_stack if not item[0].is_closed()]
        if len(cls._rerouted_stdout_stack) == 0 and cls._original_stdout is not None:
            sys.stdout = cls._original_stdout
        # print('Restored stdout... new stack:',  [item[0].Title for item in cls._rerouted_stdout_stack ])

    @classmethod
    def _restore_stderr(cls):
        for item in cls._rerouted_stderr_stack:
            (window, element) = item  # type: (Window, Element)
            if not window.is_closed():
                sys.stderr = element
                break
        cls._rerouted_stderr_stack = [item for item in cls._rerouted_stderr_stack if not item[0].is_closed()]
        if len(cls._rerouted_stderr_stack) == 0 and cls._original_stderr is not None:
            sys.stderr = cls._original_stderr
        # print('Restored stderr... new stack:',  [item[0].Title for item in cls._rerouted_stderr_stack ])


    def __getitem__(self, key):
        """
        Returns Element that matches the passed in key.
        This is "called" by writing code as thus:
        window['element key'].update

        :param key: The key to find
        :type key:  str | int | tuple | object
        :return:    The element found
        :rtype:     Element | Input | Combo | OptionMenu | Listbox | Radio | Checkbox | Spin | Multiline | Text | StatusBar | Output | Button | ButtonMenu | ProgressBar | Image | Canvas | Graph | Frame | VerticalSeparator | HorizontalSeparator | Tab | TabGroup | Slider | Column | Pane | Menu | Table | Tree | ErrorElement | None
        """

        return self.find_element(key)

    def __call__(self, *args, **kwargs):
        """
        Call window.read but without having to type it out.
        window() == window.read()
        window(timeout=50) == window.read(timeout=50)

        :return: The famous event, values that read returns.
        :rtype:  Tuple[Any, Dict[Any, Any]]
        """
        return self.read(*args, **kwargs)

    def _is_window_created(self, additional_message=''):
        msg = str(additional_message)
        if self.TKroot is None:
            warnings.warn(
                'You cannot perform operations on a Window until it is read or finalized. Adding a "finalize=True" parameter to your Window creation will fix this. ' + msg,
                UserWarning)
            if not SUPPRESS_ERROR_POPUPS:
                _error_popup_with_traceback('You cannot perform operations on a Window until it is read or finalized.',
                                            'Adding a "finalize=True" parameter to your Window creation will likely fix this', msg)
            return False
        return True

    def _has_custom_titlebar_element(self):
        for elem in self.AllKeysDict.values():
            if elem.Key in (TITLEBAR_MAXIMIZE_KEY, TITLEBAR_CLOSE_KEY, TITLEBAR_IMAGE_KEY):
                return True
            if elem.metadata == TITLEBAR_METADATA_MARKER:
                return True
        return False

    AddRow = add_row
    AddRows = add_rows
    AlphaChannel = alpha_channel
    BringToFront = bring_to_front
    Close = close
    CurrentLocation = current_location
    Disable = disable
    DisableDebugger = disable_debugger
    Disappear = disappear
    Enable = enable
    EnableDebugger = enable_debugger
    Fill = fill
    Finalize = finalize
    # FindElement = find_element
    FindElementWithFocus = find_element_with_focus
    GetScreenDimensions = get_screen_dimensions
    GrabAnyWhereOff = grab_any_where_off
    GrabAnyWhereOn = grab_any_where_on
    Hide = hide
    Layout = layout
    LoadFromDisk = load_from_disk
    Maximize = maximize
    Minimize = minimize
    Move = move
    Normal = normal
    Read = read
    Reappear = reappear
    Refresh = refresh
    SaveToDisk = save_to_disk
    SendToBack = send_to_back
    SetAlpha = set_alpha
    SetIcon = set_icon
    SetTransparentColor = set_transparent_color
    Size = size
    UnHide = un_hide
    VisibilityChanged = visibility_changed
    CloseNonBlocking = close
    CloseNonBlockingForm = close
    start_thread = perform_long_operation


# -------------------------------- PEP8-ify the Window Class USER Interfaces -------------------------------- #


FlexForm = Window


def _long_func_thread(window, end_key, original_func):
    """
    Used to run long operations on the user's behalf. Called by the window object

    :param window:        The window that will get the event
    :type window:         (Window)
    :param end_key:       The event that will be sent when function returns. If None then no event will be sent when exiting thread
    :type end_key:        (Any|None)
    :param original_func: The user's function that is called. Can be a function with no arguments or a lambda experession
    :type original_func:  (Any)
    """

    return_value = original_func()
    if end_key is not None:
        window.write_event_value(end_key, return_value)


def _exit_mainloop(exiting_window):
    if exiting_window == Window._window_running_mainloop or Window._root_running_mainloop == Window.hidden_master_root:
        Window._window_that_exited = exiting_window
        if Window._root_running_mainloop is not None:
            Window._root_running_mainloop.quit()
        # print('** Exited window mainloop **')


def _timeout_alarm_callback_hidden():
    """
    Read Timeout Alarm callback. Will kick a mainloop call out of the tkinter event loop and cause it to return
    """

    del Window._TKAfterID

    # first, get the results table built
    # modify the Results table in the parent FlexForm object
    # print('TIMEOUT CALLBACK')
    Window._root_running_mainloop.quit()  # kick the users out of the mainloop

    # Get window that caused return
    Window._window_that_exited = None


def read_all_windows(timeout=None, timeout_key=TIMEOUT_KEY):
    """
    Reads all windows that are "active" when the call is made. "Active" means that it's been finalized or read.
    If a window has not been finalized then it will not be considered an "active window"

    If any of the active windows returns a value then the window and its event and values
    are returned.

    If no windows are open, then the value (None, WIN_CLOSED, None) will be returned
        Since WIN_CLOSED is None, it means (None, None, None) is what's returned when no windows remain opened

    :param timeout:     Time in milliseconds to delay before a returning a timeout event
    :type timeout:      (int)
    :param timeout_key: Key to return when a timeout happens. Defaults to the standard TIMEOUT_KEY
    :type timeout_key:  (Any)
    :return:            A tuple with the  (Window, event, values dictionary/list)
    :rtype:             (Window, Any, Dict | List)
    """

    if len(Window._active_windows) == 0:
        return None, WIN_CLOSED, None

    # first see if any queued events are waiting for any of the windows
    for window in Window._active_windows.keys():
        if window._queued_thread_event_available():
            _BuildResults(window, False, window)
            event, values = window.ReturnValues
            return window, event, values

    Window._root_running_mainloop = Window.hidden_master_root
    Window._timeout_key = timeout_key

    if timeout == 0:
        window = list(Window._active_windows.keys())[Window._timeout_0_counter]
        event, values = window._ReadNonBlocking()
        if event is None:
            event = timeout_key
        if values is None:
            event = None
        Window._timeout_0_counter = (Window._timeout_0_counter + 1) % len(Window._active_windows)
        return window, event, values

    Window._timeout_0_counter = 0  # reset value if not reading with timeout 0 so ready next time needed

    # setup timeout timer
    if timeout != None:
        try:
            Window.hidden_master_root.after_cancel(Window._TKAfterID)
            del Window._TKAfterID
        except:
            pass

        Window._TKAfterID = Window.hidden_master_root.after(timeout, _timeout_alarm_callback_hidden)

    # ------------ Call Mainloop ------------
    Window._root_running_mainloop.mainloop()

    try:
        Window.hidden_master_root.after_cancel(Window._TKAfterID)
        del Window._TKAfterID
    except:
        pass
        # print('** tkafter cancel failed **')

    # Get window that caused return

    window = Window._window_that_exited

    if window is None:
        return None, timeout_key, None

    if window.XFound:
        event, values = None, None
        window.close()
        try:
            del Window._active_windows[window]
        except:
            pass
            # print('Error deleting window, but OK')
    else:
        _BuildResults(window, False, window)
        event, values = window.ReturnValues

    return window, event, values


# MP""""""`MM                     dP
# M  mmmmm..M                     88
# M.      `YM dP    dP .d8888b. d8888P .d8888b. 88d8b.d8b.
# MMMMMMM.  M 88    88 Y8ooooo.   88   88ooood8 88'`88'`88
# M. .MMM'  M 88.  .88       88   88   88.  ... 88  88  88
# Mb.     .dM `8888P88 `88888P'   dP   `88888P' dP  dP  dP
# MMMMMMMMMMM      .88
#              d8888P
# M""""""""M
# Mmmm  mmmM
# MMMM  MMMM 88d888b. .d8888b. dP    dP
# MMMM  MMMM 88'  `88 88'  `88 88    88
# MMMM  MMMM 88       88.  .88 88.  .88
# MMMM  MMMM dP       `88888P8 `8888P88
# MMMMMMMMMM                        .88
#                               d8888P

# ------------------------------------------------------------------------- #
#                       SystemTray - class for implementing a psyeudo tray  #
# ------------------------------------------------------------------------- #

# -------------------------------- System Tray Begins Here -------------------------------- #
# Feb 2020 - Just starting on this so code commented out for now. Basing on PySimpleGUIQt's implementation / call format


# -------------------------------------------------------------------
# fade in/out info and default window alpha
SYSTEM_TRAY_WIN_MARGINS = 160, 60  # from right edge of screen, from bottom of screen
SYSTEM_TRAY_MESSAGE_MAX_LINE_LENGTH = 50
# colors
SYSTEM_TRAY_MESSAGE_WIN_COLOR = "#282828"
SYSTEM_TRAY_MESSAGE_TEXT_COLOR = "#ffffff"

SYSTEM_TRAY_MESSAGE_DISPLAY_DURATION_IN_MILLISECONDS = 3000  # how long to display the window
SYSTEM_TRAY_MESSAGE_FADE_IN_DURATION = 1000  # how long to fade in / fade out the window

EVENT_SYSTEM_TRAY_ICON_DOUBLE_CLICKED = '__DOUBLE_CLICKED__'
EVENT_SYSTEM_TRAY_ICON_ACTIVATED = '__ACTIVATED__'
EVENT_SYSTEM_TRAY_MESSAGE_CLICKED = '__MESSAGE_CLICKED__'

# Base64 Images to use as icons in the window
_tray_icon_error = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAA3NCSVQICAjb4U/gAAAACXBIWXMAAADlAAAA5QGP5Zs8AAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAAIpQTFRF////20lt30Bg30pg4FJc409g4FBe4E9f4U9f4U9g4U9f4E9g31Bf4E9f4E9f4E9f4E9f4E9f4FFh4Vdm4lhn42Bv5GNx5W575nJ/6HqH6HyI6YCM6YGM6YGN6oaR8Kev9MPI9cbM9snO9s3R+Nfb+dzg+d/i++vt/O7v/fb3/vj5//z8//7+////KofnuQAAABF0Uk5TAAcIGBktSYSXmMHI2uPy8/XVqDFbAAAA8UlEQVQ4y4VT15LCMBBTQkgPYem9d9D//x4P2I7vILN68kj2WtsAhyDO8rKuyzyLA3wjSnvi0Eujf3KY9OUP+kno651CvlB0Gr1byQ9UXff+py5SmRhhIS0oPj4SaUUCAJHxP9+tLb/ezU0uEYDUsCc+l5/T8smTIVMgsPXZkvepiMj0Tm5txQLENu7gSF7HIuMreRxYNkbmHI0u5Hk4PJOXkSMz5I3nyY08HMjbpOFylF5WswdJPmYeVaL28968yNfGZ2r9gvqFalJNUy2UWmq1Wa7di/3Kxl3tF1671YHRR04dWn3s9cXRV09f3vb1fwPD7z9j1WgeRgAAAABJRU5ErkJggg=='
_tray_icon_success = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAA3NCSVQICAjb4U/gAAAACXBIWXMAAAEKAAABCgEWpLzLAAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAAHJQTFRF////ZsxmbbZJYL9gZrtVar9VZsJcbMRYaMZVasFYaL9XbMFbasRZaMFZacRXa8NYasFaasJaasFZasJaasNZasNYasJYasJZasJZasJZasJZasJZasJYasJZasJZasJZasJZasJaasJZasJZasJZasJZ2IAizQAAACV0Uk5TAAUHCA8YGRobHSwtPEJJUVtghJeYrbDByNjZ2tvj6vLz9fb3/CyrN0oAAADnSURBVDjLjZPbWoUgFIQnbNPBIgNKiwwo5v1fsQvMvUXI5oqPf4DFOgCrhLKjC8GNVgnsJY3nKm9kgTsduVHU3SU/TdxpOp15P7OiuV/PVzk5L3d0ExuachyaTWkAkLFtiBKAqZHPh/yuAYSv8R7XE0l6AVXnwBNJUsE2+GMOzWL8k3OEW7a/q5wOIS9e7t5qnGExvF5Bvlc4w/LEM4Abt+d0S5BpAHD7seMcf7+ZHfclp10TlYZc2y2nOqc6OwruxUWx0rDjNJtyp6HkUW4bJn0VWdf/a7nDpj1u++PBOR694+Ftj/8PKNdnDLn/V8YAAAAASUVORK5CYII='
_tray_icon_halt = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAANswNuMPDO8HBO8FCe0HCu4IBu4IB+oLDeoLDu8JC+wKCu4JDO4LDOwKEe4OEO4OEeUQDewQDe0QDucVEuYcG+ccHOsQFuwWHe4fH/EGAvMEBfMFBvAHBPMGBfEGBvYCAfYDAvcDA/cDBPcDBfUDBvYEAPYEAfYEAvYEA/QGAPQGAfQGAvYEBPUEBvYFB/QGBPQGBfQHB/EFCvIHCPMHCfIHC/IFDfMHDPQGCPQGCfQGCvEIBPIIBfAIB/UIB/QICPYICfoBAPoBAfoBAvsBA/kCAPkCAfkCAvkCA/oBBPkCBPkCBfkCBvgCB/gEAPkEAfgEAvkEA/gGAfkGAvkEBPgEBfkEBv0AAP0AAfwAAvwAA/wCAPwCAfwCAvwCA/wABP0ABfwCBfwEAPwFA/ASD/ESFPAUEvAUE/EXFvAdH+kbIOobIeofIfEfIOcmKOohIukgJOggJesiKuwiKewoLe0tLO0oMOQ3OO43Oew4OfAhIPAhIfAiIPEiI+dDRe9ES+lQTOdSWupSUOhTUehSV+hUVu1QUO1RUe1SV+tTWe5SWOxXWOpYV+pZWelYXexaW+xaXO9aX+lZYeNhYOxjZ+lna+psbOttbehsbupscepucuxtcuxucep3fet7e+p/ffB6gOmKiu2Iie2Sk+2Qle2QluySlOyTleuYmvKFivCOjgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIxGNZsAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAACVElEQVQ4T22S93PTMBhADQdl791SSsuRARTKKHsn+STZBptAi6zIacous+w9yyxl7z1T1h8ptHLhrrzLD5+/987R2XZElZ/39tZsbGg42NdvF4pqcGMs4XEcozAB/oQeu6wGr5fkAZcKOUIIRgQXR723wgaXt/NSgcwlO1r3oARkATfhbmNMMCnlMZdz5J8RN9fVhglS5JA/pJUOJiYXoShCkz/flheDvpzlBCBmya5KcDG1sMSB+r/VQtG+YoFXlwN0Us4yeBXujPmWCOqNlVwX5zHntLH5iQ420YiqX9pqTZFSCrBGBc+InBUDAsbwLRlMC40fGJT8YLRwfnhY3v6/AUtDc9m5z0tRJBOAvHUaFchdY6+zDzEghHv1tUnrNCaIOw84Q2WQmkeO/Xopj1xFBREFr8ZZjuRhA++PEB+t05ggwBucpbH8i/n5C1ZU0EEEmRZnSMxoIYcarKigA0Cb1zpHAyZnGj21xqICAA9dcvo4UgEdZ41FBZSTzEOn30f6QeE3Vhl0gLN+2RGDzZPMHLHKoAO3MFy+ix4sDxFlvMXfrdNgFezy7qrXPaaJg0u27j5nneKrCjJ4pf4e3m4DVMcjNNNKxWnpo6jtnfnkunExB4GbuGKk5FNanpB1nJCjCsThJPAAJ8lVdSF5sSrklM2ZqmYdiC40G7Dfnhp57ZsQz6c3hylEO6ZoZQJxqiVgbhoQK3T6AIgU4rbjxthAPF6NAwAOAcS+ixlp/WBFJRDi0fj2RtcjWRwif8Qdu/w3EKLcu3/YslnrZzwo24UQQvwFCrp/iM1NnHwAAAAASUVORK5CYII='
_tray_icon_notallowed = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAAPcICPcLC/cMDPcQEPcSEvcXF/cYGPcaGvcbG/ccHPgxMfgyMvg0NPg5Ofg6Ovg7O/hBQfhCQvlFRflGRvljY/pkZPplZfpnZ/p2dggEwNYAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAABE0lEQVQ4T4WT65bDIAiExWbbtN0m3Uua+P4P6g4jGtN4NvNL4DuCCC5WWobe++uwmEmtwNxJUTebcwWCt5jJBwsYcKf3NE4hTOOJxj1FEnBTz4NH6qH2jUcCGr/QLLpkQgHe/6VWJXVqFgBB4yI/KVCkBCoFgPrPHw0CWbwCL8RibBFwzQDQH62/QeAtHQBeADUIDbkF/UnmnkB1ixtERrN3xCgyuF5kMntHTCJXh2vyv+wIdMhvgTeCQJ0C2hBMgSKfZlM1wSLXZ5oqgs8sjSpaCQ2VVlfKhLU6fdZGSvyWz9JMb+NE4jt/Nwfm0yJZSkBpYDg7TcJGrjm0Z7jK0B6P/fHiHK8e9Pp/eSmuf1+vf4x/ralnCN9IrncAAAAASUVORK5CYII='
_tray_icon_stop = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAANsAANsBAdsCAtwEBNwFBdwHB9wICNwLC90MDN0NDd0PD90REd0SEt4TE94UFN4WFt4XF94ZGeAjI+AlJeEnJ+EpKeEqKuErK+EsLOEuLuIvL+IyMuIzM+M1NeM2NuM3N+M6OuM8POQ9PeQ+PuQ/P+RAQOVISOVJSeVKSuZLS+ZOTuZQUOZRUedSUudVVehbW+lhYeljY+poaOtvb+twcOtxcetzc+t0dOx3d+x4eOx6eu19fe1+fu2AgO2Cgu6EhO6Ghu6Hh+6IiO6Jie+Kiu+Li++MjO+Nje+Oju+QkPCUlPCVlfKgoPKkpPKlpfKmpvOrq/SurvSxsfSysvW4uPW6uvW7u/W8vPa9vfa+vvbAwPbCwvfExPfFxffGxvfHx/fIyPfJyffKyvjLy/jNzfjQ0PjR0fnS0vnU1PnY2Pvg4Pvi4vvj4/vl5fvm5vzo6Pzr6/3u7v3v7/3x8f3z8/309P719f729v739/74+P75+f76+v77+//8/P/9/f/+/v///wyoUAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAABnUlEQVQ4T33S50PTQBgG8D6lzLbsIUv2kD0FFWTvPWTvISDIUBGV1ecvj+8luZTR9P1wSe755XK5O4+hK4gn5bc7DcMBz/InQoMXeVjY4FXuCAtEyLUwQcTcFgq45JYQ4JqbwhMtV8IjeUJDjQ+5paqCyG9srEsGgoUlpeXpIjxA1nfyi2+Jqmo7Q9JeV+ODerpvBQTM8/ySzQ3t+xxoL7h7nJve5jd85M7wJq9McHaT8o6TwBTfIIfHQGzoAZ/YiSTSq8D5dSDQVqFADrJ5KFMLPaKLHQiQMQoscClezdgCB4CXD/jM90izR8g85UaKA3YAn4AejhV189acA5LX+DVOg00gnvfoVX/BRQsgbplNGqzLusgIffx1tDchiyRgdRbVHNdgRRZHQD9H1asm+PMzYyYMtoBU/sYgRxxgrmGtBRL/cnf5RL4zzCEHZF2QE14LoOWf6B9vMcJBG/iBxKo8dVtYnyStv6yuUq7FLfmqTzbLEOFest1GNGEemCjCPnKuwjm0LsLMbRBJWLkGr4WdO+Cl0HkYPBc6N4z//HcQqVwcOuIAAAAASUVORK5CYII='
_tray_icon_exclamation = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAAN0zM900NN01Nd02Nt03N944ON45Od46Ot47O98/P99BQd9CQt9DQ+FPT+JSUuJTU+JUVOJVVeJWVuNbW+ReXuVjY+Zra+dxceh4eOl7e+l8fOl+ful/f+qBgeqCguqDg+qFheuJieuLi+yPj+yQkO2Wlu+cnO+hofGqqvGtrfre3vrf3/ri4vvn5/75+f76+v/+/v///wkAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAABJElEQVQ4T4WS63KCMBBGsyBai62X0otY0aq90ZZa3v/dtpvsJwTijOfXt7tnILOJYY9tNonjNCtQOlqhuKKG0RrNVjgkmIHBHgMId+h7zHSiwg2a9FNVVYScupETmjkd67o+CWpYwft+R6CpCgeUlq5AOyf45+8JsRUKFI6eQLkI3n5CIREBUekLxGaLpATCymRISiAszARJCYSxiZGUQKDLQoqgnPnFhUPOTWeRoZD3FvVZlmVHkE2OEM9iV71GVoZDBGUpAg9QWN5/jx+Ilsi9hz0q4VHOWD+hEF70yc1QEr1a4Q0F0S3eJDfLuv8T4QEFXduZE1rj+et7g6hzCDxF08N+X4DAu+6lUSTnc5wE5tx73ckSTV8QVoux3N88Rykw/wP3i+vwPKk17AAAAABJRU5ErkJggg=='
_tray_icon_none = None

SYSTEM_TRAY_MESSAGE_ICON_INFORMATION = _tray_icon_success
SYSTEM_TRAY_MESSAGE_ICON_WARNING = _tray_icon_exclamation
SYSTEM_TRAY_MESSAGE_ICON_CRITICAL = _tray_icon_stop
SYSTEM_TRAY_MESSAGE_ICON_NOICON = _tray_icon_none


# ------------------------------------------------------------------------- #
#                       Tray CLASS                                      #
# ------------------------------------------------------------------------- #
class SystemTray:
    """
    A "Simulated System Tray" that duplicates the API calls available to PySimpleGUIWx and PySimpleGUIQt users.

    All of the functionality works. The icon is displayed ABOVE the system tray rather than inside of it.
    """

    def __init__(self, menu=None, filename=None, data=None, data_base64=None, tooltip=None, metadata=None):
        """
        SystemTray - create an icon in the system tray
        :param menu:        Menu definition. Example - ['UNUSED', ['My', 'Simple', '---', 'Menu', 'Exit']]
        :type menu:         List[List[List[str] or str]]
        :param filename:    filename for icon
        :type filename:     (str)
        :param data:        in-ram image for icon (same as data_base64 parm)
        :type data:         (bytes)
        :param data_base64: base-64 data for icon
        :type data_base64:  (bytes)
        :param tooltip:     tooltip string
        :type tooltip:      (str)
        :param metadata:    User metadata that can be set to ANYTHING
        :type metadata:     (Any)
        """
        self._metadata = None
        self.Menu = menu
        self.TrayIcon = None
        self.Shown = False
        self.MenuItemChosen = TIMEOUT_KEY
        self.metadata = metadata
        self.last_message_event = None

        screen_size = Window.get_screen_size()

        if filename:
            image_elem = Image(filename=filename, background_color='red', enable_events=True, tooltip=tooltip, key='-IMAGE-')
        elif data_base64:
            image_elem = Image(data=data_base64, background_color='red', enable_events=True, tooltip=tooltip, key='-IMAGE-')
        elif data:
            image_elem = Image(data=data, background_color='red', enable_events=True, tooltip=tooltip, key='-IMAGE-')
        else:
            image_elem = Image(background_color='red', enable_events=True, tooltip=tooltip, key='-IMAGE-')
        layout = [
            [image_elem],
        ]
        self.window = Window('Window Title', layout, element_padding=(0, 0), margins=(0, 0), grab_anywhere=True, no_titlebar=True, transparent_color='red',
                             keep_on_top=True, right_click_menu=menu, location=(screen_size[0] - 100, screen_size[1] - 100), finalize=True)

        self.window['-IMAGE-'].bind('<Double-Button-1>', '+DOUBLE_CLICK')

    @property
    def metadata(self):
        """
        Metadata is an SystemTray property that you can use at any time to hold any value
        :return: the current metadata value
        :rtype:  (Any)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, value):
        """
        Metadata is an SystemTray property that you can use at any time to hold any value
        :param value: Anything you want it to be
        :type value:  (Any)
        """
        self._metadata = value

    def read(self, timeout=None):
        """
        Reads the context menu
        :param timeout: Optional.  Any value other than None indicates a non-blocking read
        :type timeout:
        :return:
        :rtype:
        """
        if self.last_message_event != TIMEOUT_KEY and self.last_message_event is not None:
            event = self.last_message_event
            self.last_message_event = None
            return event
        event, values = self.window.read(timeout=timeout)
        if event.endswith('DOUBLE_CLICK'):
            return EVENT_SYSTEM_TRAY_ICON_DOUBLE_CLICKED
        elif event == '-IMAGE-':
            return EVENT_SYSTEM_TRAY_ICON_ACTIVATED

        return event

    def hide(self):
        """
        Hides the icon
        """
        self.window.hide()

    def un_hide(self):
        """
        Restores a previously hidden icon
        """
        self.window.un_hide()

    def show_message(self, title, message, filename=None, data=None, data_base64=None, messageicon=None,
                     time=(SYSTEM_TRAY_MESSAGE_FADE_IN_DURATION, SYSTEM_TRAY_MESSAGE_DISPLAY_DURATION_IN_MILLISECONDS)):
        """
        Shows a balloon above icon in system tray
        :param title:       Title shown in balloon
        :type title:        str
        :param message:     Message to be displayed
        :type message:      str
        :param filename:    Optional icon filename
        :type filename:     str
        :param data:        Optional in-ram icon
        :type data:         b''
        :param data_base64: Optional base64 icon
        :type data_base64:  b''
        :param time:        Amount of time to display message in milliseconds. If tuple, first item is fade in/out duration
        :type time:         int | (int, int)
        :return:            The event that happened during the display such as user clicked on message
        :rtype:             Any
        """

        if isinstance(time, tuple):
            fade_duration, display_duration = time
        else:
            fade_duration = SYSTEM_TRAY_MESSAGE_FADE_IN_DURATION
            display_duration = time

        user_icon = data_base64 or filename or data or messageicon

        event = self.notify(title, message, icon=user_icon, fade_in_duration=fade_duration, display_duration_in_ms=display_duration)
        self.last_message_event = event
        return event

    def close(self):
        """
        Close the system tray window
        """
        self.window.close()

    def update(self, menu=None, tooltip=None, filename=None, data=None, data_base64=None, ):
        """
        Updates the menu, tooltip or icon
        :param menu:        menu defintion
        :type menu:         ???
        :param tooltip:     string representing tooltip
        :type tooltip:      ???
        :param filename:    icon filename
        :type filename:     ???
        :param data:        icon raw image
        :type data:         ???
        :param data_base64: icon base 64 image
        :type data_base64:  ???
        """
        # Menu
        if menu is not None:
            top_menu = tk.Menu(self.window.TKroot, tearoff=False)
            AddMenuItem(top_menu, menu[1], self.window['-IMAGE-'])
            self.window['-IMAGE-'].TKRightClickMenu = top_menu

        if filename:
            self.window['-IMAGE-'].update(filename=filename)
        elif data_base64:
            self.window['-IMAGE-'].update(data=data_base64)
        elif data:
            self.window['-IMAGE-'].update(data=data)

        if tooltip:
            self.window['-IMAGE-'].set_tooltip(tooltip)

    @classmethod
    def notify(cls, title, message, icon=_tray_icon_success, display_duration_in_ms=SYSTEM_TRAY_MESSAGE_DISPLAY_DURATION_IN_MILLISECONDS,
               fade_in_duration=SYSTEM_TRAY_MESSAGE_FADE_IN_DURATION, alpha=0.9, location=None):
        """
        Displays a "notification window", usually in the bottom right corner of your display.  Has an icon, a title, and a message
        The window will slowly fade in and out if desired.  Clicking on the window will cause it to move through the end the current "phase". For example, if the window was fading in and it was clicked, then it would immediately stop fading in and instead be fully visible.  It's a way for the user to quickly dismiss the window.
        :param title:                  Text to be shown at the top of the window in a larger font
        :type title:                   (str)
        :param message:                Text message that makes up the majority of the window
        :type message:                 (str)
        :param icon:                   A base64 encoded PNG/GIF image or PNG/GIF filename that will be displayed in the window
        :type icon:                    bytes | str
        :param display_duration_in_ms: Number of milliseconds to show the window
        :type display_duration_in_ms:  (int)
        :param fade_in_duration:       Number of milliseconds to fade window in and out
        :type fade_in_duration:        (int)
        :param alpha:                  Alpha channel. 0 - invisible 1 - fully visible
        :type alpha:                   (float)
        :param location:               Location on the screen to display the window
        :type location:                (int, int)
        :return:                       (int) reason for returning
        :rtype:                        (int)
        """

        messages = message.split('\n')
        full_msg = ''
        for m in messages:
            m_wrap = textwrap.fill(m, SYSTEM_TRAY_MESSAGE_MAX_LINE_LENGTH)
            full_msg += m_wrap + '\n'
        message = full_msg[:-1]

        win_msg_lines = message.count("\n") + 1
        max_line = max(message.split('\n'))

        screen_res_x, screen_res_y = Window.get_screen_size()
        win_margin = SYSTEM_TRAY_WIN_MARGINS  # distance from screen edges
        win_width, win_height = 364, 66 + (14.8 * win_msg_lines)

        layout = [[Graph(canvas_size=(win_width, win_height), graph_bottom_left=(0, win_height), graph_top_right=(win_width, 0), key="-GRAPH-",
                         background_color=SYSTEM_TRAY_MESSAGE_WIN_COLOR, enable_events=True)]]

        win_location = location if location is not None else (screen_res_x - win_width - win_margin[0], screen_res_y - win_height - win_margin[1])
        window = Window(title, layout, background_color=SYSTEM_TRAY_MESSAGE_WIN_COLOR, no_titlebar=True,
                        location=win_location, keep_on_top=True, alpha_channel=0, margins=(0, 0), element_padding=(0, 0), grab_anywhere=True, finalize=True)

        window["-GRAPH-"].draw_rectangle((win_width, win_height), (-win_width, -win_height), fill_color=SYSTEM_TRAY_MESSAGE_WIN_COLOR,
                                         line_color=SYSTEM_TRAY_MESSAGE_WIN_COLOR)
        if type(icon) is bytes:
            window["-GRAPH-"].draw_image(data=icon, location=(20, 20))
        elif icon is not None:
            window["-GRAPH-"].draw_image(filename=icon, location=(20, 20))
        window["-GRAPH-"].draw_text(title, location=(64, 20), color=SYSTEM_TRAY_MESSAGE_TEXT_COLOR, font=("Helvetica", 12, "bold"),
                                    text_location=TEXT_LOCATION_TOP_LEFT)
        window["-GRAPH-"].draw_text(message, location=(64, 44), color=SYSTEM_TRAY_MESSAGE_TEXT_COLOR, font=("Helvetica", 9),
                                    text_location=TEXT_LOCATION_TOP_LEFT)
        window["-GRAPH-"].set_cursor('hand2')

        if fade_in_duration:
            for i in range(1, int(alpha * 100)):  # fade in
                window.set_alpha(i / 100)
                event, values = window.read(timeout=fade_in_duration // 100)
                if event != TIMEOUT_KEY:
                    window.set_alpha(1)
                    break
            if event != TIMEOUT_KEY:
                window.close()
                return EVENT_SYSTEM_TRAY_MESSAGE_CLICKED if event == '-GRAPH-' else event
            event, values = window(timeout=display_duration_in_ms)
            if event == TIMEOUT_KEY:
                for i in range(int(alpha * 100), 1, -1):  # fade out
                    window.set_alpha(i / 100)
                    event, values = window.read(timeout=fade_in_duration // 100)
                    if event != TIMEOUT_KEY:
                        break
        else:
            window.set_alpha(alpha)
            event, values = window(timeout=display_duration_in_ms)
        window.close()

        return EVENT_SYSTEM_TRAY_MESSAGE_CLICKED if event == '-GRAPH-' else event

    Close = close
    Hide = hide
    Read = read
    ShowMessage = show_message
    UnHide = un_hide
    Update = update


# ################################################################################
# ################################################################################
#  END OF ELEMENT DEFINITIONS
# ################################################################################
# ################################################################################


# =========================================================================== #
# Button Lazy Functions so the caller doesn't have to define a bunch of stuff #
# =========================================================================== #

# ------------------------- A fake Element... the Sizer Element ------------------------- #
def Sizer(h_pixels=0, v_pixels=0):
    """
    "Pushes" out the size of whatever it is placed inside of.  This includes Columns, Frames, Tabs and Windows

    :param h_pixels: number of horizontal pixels
    :type h_pixels:  (int)
    :param v_pixels: number of vertical pixels
    :type v_pixels:  (int)
    :return:         (Canvas) A canvas element that has a pad setting set according to parameters
    :rtype:          (Canvas)
    """

    return Canvas(size=(0, 0), pad=((h_pixels, 0), (v_pixels, 0)))

def pin(elem, vertical_alignment=None, shrink=True, expand_x=None, expand_y=None):
    """
    Pin's an element provided into a layout so that when it's made invisible and visible again, it will
     be in the correct place.  Otherwise it will be placed at the end of its containing window/column.

     The element you want to pin is the element that you'll be making visibile/invisible.

    The pin helper function also causes containers to shrink to fit the contents correct after something inside
     has changed visiblity.  Note that setting a hardcoded size on your window can impact this ability to shrink.

    :param elem:               the element to put into the layout
    :type elem:                Element
    :param vertical_alignment: Aligns elements vertically. 'top', 'center', 'bottom'. Can be shortened to 't', 'c', 'b'
    :type vertical_alignment:  str | None
    :param shrink:             If True, then the space will shrink down to a single pixel when hidden. False leaves the area large and blank
    :type shrink:              bool
    :param expand_x:           If True/False the value will be passed to the Column Elements used to make this feature
    :type expand_x:            (bool)
    :param expand_y:           If True/False the value will be passed to the Column Elements used to make this feature
    :type expand_y:            (bool)
    :return:                   A column element containing the provided element
    :rtype:                    Column
    """
    if shrink:
        # return Column([[elem, Canvas(size=(0, 0),background_color=elem.BackgroundColor, pad=(0, 0))]], pad=(0, 0), vertical_alignment=vertical_alignment, expand_x=expand_x, expand_y=expand_y)
        return Column([[elem, Column([[]], pad=(0, 0))]], pad=(0, 0), vertical_alignment=vertical_alignment, expand_x=expand_x, expand_y=expand_y)
    else:
        return Column([[elem]], pad=(0, 0), vertical_alignment=vertical_alignment, expand_x=expand_x, expand_y=expand_y)


def vtop(elem_or_row, expand_x=None, expand_y=None, background_color=None):
    """
    Align an element or a row of elements to the top of the row that contains it

    :param elem_or_row:      the element or row of elements
    :type elem_or_row:       Element | List[Element] | Tuple[Element]
    :param expand_x:         If True/False the value will be passed to the Column Elements used to make this feature
    :type expand_x:          (bool)
    :param expand_y:         If True/False the value will be passed to the Column Elements used to make this feature
    :type expand_y:          (bool)
    :param background_color: Background color for container that is used by vtop to do the alignment
    :type background_color:  str | None
    :return:                 A column element containing the provided element aligned to the top or list of elements (a row)
    :rtype:                  Column | List[Column]
    """

    if isinstance(elem_or_row, list) or isinstance(elem_or_row, tuple):
        return [Column([[e]], pad=(0, 0), vertical_alignment='top', expand_x=expand_x, expand_y=expand_y, background_color=background_color) for e in elem_or_row]

    return Column([[elem_or_row]], pad=(0, 0), vertical_alignment='top', expand_x=expand_x, expand_y=expand_y, background_color=background_color)


def vcenter(elem_or_row, expand_x=None, expand_y=None, background_color=None):
    """
    Align an element or a row of elements to the center of the row that contains it

    :param elem_or_row:      the element or row of elements
    :type elem_or_row:       Element | List[Element] | Tuple[Element]
    :param expand_x:         If True/False the value will be passed to the Column Elements used to make this feature
    :type expand_x:          (bool)
    :param expand_y:         If True/False the value will be passed to the Column Elements used to make this feature
    :type expand_y:          (bool)
    :param background_color: Background color for container that is used by vcenter to do the alignment
    :type background_color:  str | None
    :return:                 A column element containing the provided element aligned to the center or list of elements (a row)
    :rtype:                  Column | List[Column]
    """

    if isinstance(elem_or_row, list) or isinstance(elem_or_row, tuple):
        return [Column([[e]], pad=(0, 0), vertical_alignment='center', expand_x=expand_x, expand_y=expand_y, background_color=background_color) for e in elem_or_row]

    return Column([[elem_or_row]], pad=(0, 0), vertical_alignment='center', expand_x=expand_x, expand_y=expand_y, background_color=background_color)


def vbottom(elem_or_row, expand_x=None, expand_y=None, background_color=None):
    """
    Align an element or a row of elements to the bottom of the row that contains it

    :param elem_or_row:      the element or row of elements
    :type elem_or_row:       Element | List[Element] | Tuple[Element]
    :param expand_x:         If True/False the value will be passed to the Column Elements used to make this feature
    :type expand_x:          (bool)
    :param expand_y:         If True/False the value will be passed to the Column Elements used to make this feature
    :type expand_y:          (bool)
    :param background_color: Background color for container that is used by vcenter to do the alignment
    :type background_color:  str | None
    :return:                 A column element containing the provided element aligned to the bottom or list of elements (a row)
    :rtype:                  Column | List[Column]
    """

    if isinstance(elem_or_row, list) or isinstance(elem_or_row, tuple):
        return [Column([[e]], pad=(0, 0), vertical_alignment='bottom', expand_x=expand_x, expand_y=expand_y, background_color=background_color) for e in elem_or_row]

    return Column([[elem_or_row]], pad=(0, 0), vertical_alignment='bottom', expand_x=expand_x, expand_y=expand_y, background_color=background_color)


def Titlebar(title='', icon=None, text_color=None, background_color=None, font=None, key=None, k=None):
    """
    A custom titlebar that replaces the OS provided titlebar, thus giving you control
    the is not possible using the OS provided titlebar such as the color.

    NOTE LINUX USERS - at the moment the minimize function is not yet working.  Windows users
    should have no problem and it should function as a normal window would.

    This titlebar is created from a row of elements that is then encapsulated into a
    one Column element which is what this Titlebar function returns to you.

    A custom titlebar removes the margins from your window.  If you want the  remainder
    of your Window to have margins, place the layout after the Titlebar into a Column and
    set the pad of that Column to the dimensions you would like your margins to have.

    The Titlebar is a COLUMN element.  You can thus call the update method for the column and
    perform operations such as making the column visible/invisible

    :param icon:             Can be either a filename or Base64 byte string of a PNG or GIF. This is used in an Image element to create the titlebar
    :type icon:              str or bytes or None
    :param title:            The "title" to show in the titlebar
    :type title:             str
    :param text_color:       Text color for titlebar
    :type text_color:        str | None
    :param background_color: Background color for titlebar
    :type background_color:  str | None
    :param font:             Font to be used for the text and the symbols
    :type font:              (str or (str, int[, str]) or None)
    :param key:              Identifies an Element. Should be UNIQUE to this window.
    :type key:               str | int | tuple | object | None
    :param k:                Exactly the same as key.  Choose one of them to use
    :type k:                 str | int | tuple | object | None
    :return:                 A single Column element that has eveything in 1 element
    :rtype:                  Column
    """
    bc = background_color or CUSTOM_TITLEBAR_BACKGROUND_COLOR or theme_button_color()[1]
    tc = text_color or CUSTOM_TITLEBAR_TEXT_COLOR or theme_button_color()[0]
    font = font or CUSTOM_TITLEBAR_FONT or ('Helvetica', 12)
    key = k or key
    if key is None:
        key = TITLEBAR_KEY
    if isinstance(icon, bytes):
        icon_and_text_portion = [Image(data=icon, background_color=bc, key=TITLEBAR_IMAGE_KEY)]
    elif icon == TITLEBAR_DO_NOT_USE_AN_ICON:
        icon_and_text_portion = []
    elif icon is not None:
        icon_and_text_portion = [Image(filename=icon, background_color=bc, key=TITLEBAR_IMAGE_KEY)]
    elif CUSTOM_TITLEBAR_ICON is not None:
        if isinstance(CUSTOM_TITLEBAR_ICON, bytes):
            icon_and_text_portion = [Image(data=CUSTOM_TITLEBAR_ICON, background_color=bc, key=TITLEBAR_IMAGE_KEY)]
        else:
            icon_and_text_portion = [Image(filename=CUSTOM_TITLEBAR_ICON, background_color=bc, key=TITLEBAR_IMAGE_KEY)]
    else:
        icon_and_text_portion = [Image(data=DEFAULT_BASE64_ICON_16_BY_16, background_color=bc, key=TITLEBAR_IMAGE_KEY)]

    icon_and_text_portion += [T(title, text_color=tc, background_color=bc, font=font, grab=True, key=TITLEBAR_TEXT_KEY)]

    return Column([[Column([icon_and_text_portion], pad=(0, 0), background_color=bc),
                    Column([[T(SYMBOL_TITLEBAR_MINIMIZE, text_color=tc, background_color=bc, enable_events=True, font=font, key=TITLEBAR_MINIMIZE_KEY),
                             Text(SYMBOL_TITLEBAR_MAXIMIZE, text_color=tc, background_color=bc, enable_events=True, font=font, key=TITLEBAR_MAXIMIZE_KEY),
                             Text(SYMBOL_TITLEBAR_CLOSE, text_color=tc, background_color=bc, font=font, enable_events=True, key=TITLEBAR_CLOSE_KEY), ]],
                           element_justification='r', expand_x=True, grab=True, pad=(0, 0), background_color=bc)]], expand_x=True, grab=True,
                  background_color=bc, pad=(0, 0), metadata=TITLEBAR_METADATA_MARKER, key=key)


def MenubarCustom(menu_definition, disabled_text_color=None, bar_font=None, font=None, tearoff=False, pad=0, p=None, background_color=None, text_color=None,
                  bar_background_color=None, bar_text_color=None, key=None, k=None):
    """
    A custom Menubar that replaces the OS provided Menubar

    Why?
    Two reasons - 1. they look great (see custom titlebar) 2. if you have a custom titlebar, then you have to use a custom menubar if you want a menubar

    :param menu_definition:      The Menu definition specified using lists (docs explain the format)
    :type menu_definition:       List[List[Tuple[str, List[str]]]
    :param disabled_text_color:  color to use for text when item is disabled. Can be in #RRGGBB format or a color name "black"
    :type disabled_text_color:   (str)
    :param bar_font:             specifies the font family, size to be used for the chars in the bar itself
    :type bar_font:              (str or (str, int[, str]) or None)
    :param font:                 specifies the font family, size to be used for the menu items
    :type font:                  (str or (str, int[, str]) or None)
    :param tearoff:              if True, then can tear the menu off from the window ans use as a floating window. Very cool effect
    :type tearoff:               (bool)
    :param pad:                  Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int).  TIP - 0 will make flush with titlebar
    :type pad:                   (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                    Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                     (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param background_color:     color to use for background of the menus that are displayed after making a section. Can be in #RRGGBB format or a color name "black". Defaults to the color of the bar text
    :type background_color:      (str)
    :param text_color:           color to use for the text of the many items in the displayed menus. Can be in #RRGGBB format or a color name "black". Defaults to the bar background
    :type text_color:            (str)
    :param bar_background_color: color to use for the menubar. Can be in #RRGGBB format or a color name "black". Defaults to theme's button text color
    :type bar_background_color:  (str)
    :param bar_text_color:       color to use for the menu items text. Can be in #RRGGBB format or a color name "black". Defaults to theme's button background color
    :type bar_text_color:        (str)
    :param key:                  Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
    :type key:                   str | int | tuple | object
    :param k:                    Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                     str | int | tuple | object
    :returns:                    A Column element that has a series of ButtonMenu elements
    :rtype:                      Column
    """

    bar_bg = bar_background_color if bar_background_color is not None else theme_button_color()[0]
    bar_text = bar_text_color if bar_text_color is not None else theme_button_color()[1]
    menu_bg = background_color if background_color is not None else bar_text
    menu_text = text_color if text_color is not None else bar_bg
    pad = pad if pad is not None else p

    row = []
    for menu in menu_definition:
        text = menu[0]
        if MENU_SHORTCUT_CHARACTER in text:
            text = text.replace(MENU_SHORTCUT_CHARACTER, '')
        if text.startswith(MENU_DISABLED_CHARACTER):
            disabled = True
            text = text[len(MENU_DISABLED_CHARACTER):]
        else:
            disabled = False

        button_menu = ButtonMenu(text, menu, border_width=0, button_color=(bar_text, bar_bg), key=text, pad=(0, 0), disabled=disabled, font=bar_font,
                                 item_font=font, disabled_text_color=disabled_text_color, text_color=menu_text, background_color=menu_bg, tearoff=tearoff)
        button_menu.part_of_custom_menubar = True
        button_menu.custom_menubar_key = key if key is not None else k
        row += [button_menu]
    return Column([row], pad=pad, background_color=bar_bg, expand_x=True, key=key if key is not None else k)


# -------------------------  FOLDER BROWSE Element lazy function  ------------------------- #
def FolderBrowse(button_text='Browse', target=(ThisRow, -1), initial_folder=None, tooltip=None, size=(None, None), s=(None, None),
                 auto_size_button=None, button_color=None, disabled=False, change_submits=False, enable_events=False,
                 font=None, pad=None, p=None, key=None, k=None, visible=True, metadata=None, expand_x=False, expand_y=False):
    """
    :param button_text:      text in the button (Default value = 'Browse')
    :type button_text:       (str)
    :param target:           target for the button (Default value = (ThisRow, -1))
    :type target:            str | (int, int)
    :param initial_folder:   starting path for folders and files
    :type initial_folder:    (str)
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param change_submits:   If True, pressing Enter key submits window (Default = False)
    :type enable_events:     (bool)
    :param enable_events:    Turns on the element specific events.(Default = False)
    :type enable_events:     (bool)
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              Used with window.find_element and with return values to uniquely identify this element
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param visible:          set initial visibility state of the Button
    :type visible:           (bool)
    :param metadata:         Anything you want to store along with this button
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 The Button created
    :rtype:                  (Button)
    """

    return Button(button_text=button_text, button_type=BUTTON_TYPE_BROWSE_FOLDER, target=target,
                  initial_folder=initial_folder, tooltip=tooltip, size=size, s=s, auto_size_button=auto_size_button,
                  disabled=disabled, button_color=button_color, change_submits=change_submits,
                  enable_events=enable_events, font=font, pad=pad, p=p, key=key, k=k, visible=visible, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


# -------------------------  FILE BROWSE Element lazy function  ------------------------- #
def FileBrowse(button_text='Browse', target=(ThisRow, -1), file_types=FILE_TYPES_ALL_FILES, initial_folder=None,
               tooltip=None, size=(None, None), s=(None, None), auto_size_button=None, button_color=None, change_submits=False,
               enable_events=False, font=None, disabled=False,
               pad=None, p=None, key=None, k=None, visible=True, metadata=None, expand_x=False, expand_y=False):
    """

    :param button_text:      text in the button (Default value = 'Browse')
    :type button_text:       (str)
    :param target:           key or (row,col) target for the button (Default value = (ThisRow, -1))
    :type target:            str | (int, int)
    :param file_types:       filter file types Default value = (("ALL Files", "*.* *"),).
    :type file_types:        Tuple[(str, str), ...]
    :param initial_folder:   starting path for folders and files
    :type initial_folder:
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param change_submits:   If True, pressing Enter key submits window (Default = False)
    :type change_submits:    (bool)
    :param enable_events:    Turns on the element specific events.(Default = False)
    :type enable_events:     (bool)
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              key for uniquely identify this element (for window.find_element)
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param visible:          set initial visibility state of the Button
    :type visible:           (bool)
    :param metadata:         Anything you want to store along with this button
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 returns a button
    :rtype:                  (Button)
    """
    return Button(button_text=button_text, button_type=BUTTON_TYPE_BROWSE_FILE, target=target, file_types=file_types,
                  initial_folder=initial_folder, tooltip=tooltip, size=size, s=s, auto_size_button=auto_size_button,
                  change_submits=change_submits, enable_events=enable_events, disabled=disabled,
                  button_color=button_color, font=font, pad=pad, p=p, key=key, k=k, visible=visible, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


# -------------------------  FILES BROWSE Element (Multiple file selection) lazy function  ------------------------- #
def FilesBrowse(button_text='Browse', target=(ThisRow, -1), file_types=FILE_TYPES_ALL_FILES, disabled=False,
                initial_folder=None, tooltip=None, size=(None, None), s=(None, None), auto_size_button=None, button_color=None,
                change_submits=False, enable_events=False,
                font=None, pad=None, p=None, key=None, k=None, visible=True, files_delimiter=BROWSE_FILES_DELIMITER, metadata=None, expand_x=False, expand_y=False):
    """
    Allows browsing of multiple files. File list is returned as a single list with the delimiter defined using the files_delimiter parameter.

    :param button_text:      text in the button (Default value = 'Browse')
    :type button_text:       (str)
    :param target:           key or (row,col) target for the button (Default value = (ThisRow, -1))
    :type target:            str | (int, int)
    :param file_types:       Default value = (("ALL Files", "*.* *"),).
    :type file_types:        Tuple[(str, str), ...]
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param initial_folder:   starting path for folders and files
    :type initial_folder:    (str)
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param change_submits:   If True, pressing Enter key submits window (Default = False)
    :type change_submits:    (bool)
    :param enable_events:    Turns on the element specific events.(Default = False)
    :type enable_events:     (bool)
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              key for uniquely identify this element (for window.find_element)
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param visible:          set initial visibility state of the Button
    :type visible:           (bool)
    :param files_delimiter:  String to place between files when multiple files are selected. Normally a ;
    :type files_delimiter:   str
    :param metadata:         Anything you want to store along with this button
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 returns a button
    :rtype:                  (Button)
    """
    button = Button(button_text=button_text, button_type=BUTTON_TYPE_BROWSE_FILES, target=target, file_types=file_types,
                    initial_folder=initial_folder, change_submits=change_submits, enable_events=enable_events,
                    tooltip=tooltip, size=size, s=s, auto_size_button=auto_size_button,
                    disabled=disabled, button_color=button_color, font=font, pad=pad, p=p, key=key, k=k, visible=visible, metadata=metadata, expand_x=expand_x, expand_y=expand_y)
    button._files_delimiter = files_delimiter
    return button


# -------------------------  FILE BROWSE Element lazy function  ------------------------- #
def FileSaveAs(button_text='Save As...', target=(ThisRow, -1), file_types=FILE_TYPES_ALL_FILES, initial_folder=None,
               default_extension='', disabled=False, tooltip=None, size=(None, None), s=(None, None), auto_size_button=None, button_color=None,
               change_submits=False, enable_events=False, font=None,
               pad=None, p=None, key=None, k=None, visible=True, metadata=None, expand_x=False, expand_y=False):
    """

    :param button_text:       text in the button (Default value = 'Save As...')
    :type button_text:        (str)
    :param target:            key or (row,col) target for the button (Default value = (ThisRow, -1))
    :type target:             str | (int, int)
    :param file_types:        Default value = (("ALL Files", "*.* *"),).
    :type file_types:         Tuple[(str, str), ...]
    :param default_extension: If no extension entered by user, add this to filename (only used in saveas dialogs)
    :type default_extension:  (str)
    :param initial_folder:    starting path for folders and files
    :type initial_folder:     (str)
    :param disabled:          set disable state for element (Default = False)
    :type disabled:           (bool)
    :param tooltip:           text, that will appear when mouse hovers over the element
    :type tooltip:            (str)
    :param size:              (w,h) w=characters-wide, h=rows-high
    :type size:               (int, int)
    :param s:                 Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                  (int, int)  | (None, None) | int
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button:   (bool)
    :param button_color:      button color (foreground, background)
    :type button_color:       (str, str) | str
    :param change_submits:    If True, pressing Enter key submits window (Default = False)
    :type change_submits:     (bool)
    :param enable_events:     Turns on the element specific events.(Default = False)
    :type enable_events:      (bool)
    :param font:              specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:               (str or (str, int[, str]) or None)
    :param pad:               Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:                (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                 Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                  (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:               key for uniquely identify this element (for window.find_element)
    :type key:                str | int | tuple | object
    :param k:                 Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                  str | int | tuple | object
    :param visible:           set initial visibility state of the Button
    :type visible:            (bool)
    :param metadata:          Anything you want to store along with this button
    :type metadata:           (Any)
    :param expand_x:          If True Element will expand in the Horizontal directions
    :type expand_x:           (bool)
    :param expand_y:          If True Element will expand in the Vertical directions
    :type expand_y:           (bool)        :return:                  returns a button
    :rtype:                   (Button)
    """
    return Button(button_text=button_text, button_type=BUTTON_TYPE_SAVEAS_FILE, target=target, file_types=file_types,
                  initial_folder=initial_folder, default_extension=default_extension, tooltip=tooltip, size=size, s=s, disabled=disabled,
                  auto_size_button=auto_size_button, button_color=button_color, change_submits=change_submits,
                  enable_events=enable_events, font=font, pad=pad, p=p, key=key, k=k, visible=visible, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


# -------------------------  SAVE AS Element lazy function  ------------------------- #
def SaveAs(button_text='Save As...', target=(ThisRow, -1), file_types=FILE_TYPES_ALL_FILES, initial_folder=None, default_extension='',
           disabled=False, tooltip=None, size=(None, None), s=(None, None), auto_size_button=None, button_color=None,
           change_submits=False, enable_events=False, font=None,
           pad=None, p=None, key=None, k=None, visible=True, metadata=None, expand_x=False, expand_y=False):
    """

    :param button_text:       text in the button (Default value = 'Save As...')
    :type button_text:        (str)
    :param target:            key or (row,col) target for the button (Default value = (ThisRow, -1))
    :type target:             str | (int, int)
    :param file_types:        Default value = (("ALL Files", "*.* *"),).
    :type file_types:         Tuple[(str, str), ...]
    :param default_extension: If no extension entered by user, add this to filename (only used in saveas dialogs)
    :type default_extension:  (str)
    :param initial_folder:    starting path for folders and files
    :type initial_folder:     (str)
    :param disabled:          set disable state for element (Default = False)
    :type disabled:           (bool)
    :param tooltip:           text, that will appear when mouse hovers over the element
    :type tooltip:            (str)
    :param size:              (w,h) w=characters-wide, h=rows-high
    :type size:               (int, int)
    :param s:                 Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                  (int, int)  | (None, None) | int
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button:   (bool)
    :param button_color:      button color (foreground, background)
    :type button_color:       (str, str) or str
    :param change_submits:    If True, pressing Enter key submits window (Default = False)
    :type change_submits:     (bool)
    :param enable_events:     Turns on the element specific events.(Default = False)
    :type enable_events:      (bool)
    :param font:              specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:               (str or (str, int[, str]) or None)
    :param pad:               Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:                (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                 Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                  (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int    :param key:               key for uniquely identify this element (for window.find_element)
    :type key:                str | int | tuple | object
    :param k:                 Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                  str | int | tuple | object
    :param visible:           set initial visibility state of the Button
    :type visible:            (bool)
    :param metadata:          Anything you want to store along with this button
    :type metadata:           (Any)
    :param expand_x:          If True Element will expand in the Horizontal directions
    :type expand_x:           (bool)
    :param expand_y:          If True Element will expand in the Vertical directions
    :type expand_y:           (bool)
    :return:                  returns a button
    :rtype:                   (Button)
    """
    return Button(button_text=button_text, button_type=BUTTON_TYPE_SAVEAS_FILE, target=target, file_types=file_types,
                  initial_folder=initial_folder, default_extension=default_extension, tooltip=tooltip, size=size, s=s, disabled=disabled,
                  auto_size_button=auto_size_button, button_color=button_color, change_submits=change_submits,
                  enable_events=enable_events, font=font, pad=pad, p=p, key=key, k=k, visible=visible, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


# -------------------------  SAVE BUTTON Element lazy function  ------------------------- #
def Save(button_text='Save', size=(None, None), s=(None, None), auto_size_button=None, button_color=None, bind_return_key=True,
         disabled=False, tooltip=None, font=None, focus=False, pad=None, p=None, key=None, k=None, visible=True, metadata=None, expand_x=False, expand_y=False):
    """

    :param button_text:      text in the button (Default value = 'Save')
    :type button_text:       (str)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param bind_return_key:  (Default = True) If True, this button will appear to be clicked when return key is pressed in other elements such as Input and elements with return key options
    :type bind_return_key:   (bool)
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param focus:            if focus should be set to this
    :type focus:             idk_yetReally
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              key for uniquely identify this element (for window.find_element)
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param visible:          set initial visibility state of the Button
    :type visible:           (bool)
    :param metadata:         Anything you want to store along with this button
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 returns a button
    :rtype:                  (Button)
    """
    return Button(button_text=button_text, button_type=BUTTON_TYPE_READ_FORM, tooltip=tooltip, size=size, s=s,
                  auto_size_button=auto_size_button, button_color=button_color, font=font, disabled=disabled,
                  bind_return_key=bind_return_key, focus=focus, pad=pad, p=p, key=key, k=k, visible=visible, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


# -------------------------  SUBMIT BUTTON Element lazy function  ------------------------- #
def Submit(button_text='Submit', size=(None, None), s=(None, None), auto_size_button=None, button_color=None, disabled=False,
           bind_return_key=True, tooltip=None, font=None, focus=False, pad=None, p=None, key=None, k=None, visible=True, metadata=None, expand_x=False, expand_y=False):
    """

    :param button_text:      text in the button (Default value = 'Submit')
    :type button_text:       (str)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param bind_return_key:  (Default = True) If True, this button will appear to be clicked when return key is pressed in other elements such as Input and elements with return key options
    :type bind_return_key:   (bool)
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param focus:            if focus should be set to this
    :type focus:             idk_yetReally
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              key for uniquely identify this element (for window.find_element)
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param visible:          set initial visibility state of the Button
    :type visible:           (bool)
    :param metadata:         Anything you want to store along with this button
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 returns a button
    :rtype:                  (Button)
    """
    return Button(button_text=button_text, button_type=BUTTON_TYPE_READ_FORM, tooltip=tooltip, size=size, s=s,
                  auto_size_button=auto_size_button, button_color=button_color, font=font, disabled=disabled,
                  bind_return_key=bind_return_key, focus=focus, pad=pad, p=p, key=key, k=k, visible=visible, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


# -------------------------  OPEN BUTTON Element lazy function  ------------------------- #
# -------------------------  OPEN BUTTON Element lazy function  ------------------------- #
def Open(button_text='Open', size=(None, None), s=(None, None), auto_size_button=None, button_color=None, disabled=False,
         bind_return_key=True, tooltip=None, font=None, focus=False, pad=None, p=None, key=None, k=None, visible=True, metadata=None, expand_x=False, expand_y=False):
    """

    :param button_text:      text in the button (Default value = 'Open')
    :type button_text:       (str)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param bind_return_key:  (Default = True) If True, this button will appear to be clicked when return key is pressed in other elements such as Input and elements with return key options
    :type bind_return_key:   (bool)
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param focus:            if focus should be set to this
    :type focus:             idk_yetReally
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              key for uniquely identify this element (for window.find_element)
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param visible:          set initial visibility state of the Button
    :type visible:           (bool)
    :param metadata:         Anything you want to store along with this button
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 returns a button
    :rtype:                  (Button)
    """
    return Button(button_text=button_text, button_type=BUTTON_TYPE_READ_FORM, tooltip=tooltip, size=size, s=s,
                  auto_size_button=auto_size_button, button_color=button_color, font=font, disabled=disabled,
                  bind_return_key=bind_return_key, focus=focus, pad=pad, p=p, key=key, k=k, visible=visible, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


# -------------------------  OK BUTTON Element lazy function  ------------------------- #
def OK(button_text='OK', size=(None, None), s=(None, None), auto_size_button=None, button_color=None, disabled=False,
       bind_return_key=True, tooltip=None, font=None, focus=False, pad=None, p=None, key=None, k=None, visible=True, metadata=None, expand_x=False, expand_y=False):
    """

    :param button_text:      text in the button (Default value = 'OK')
    :type button_text:       (str)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param bind_return_key:  (Default = True) If True, this button will appear to be clicked when return key is pressed in other elements such as Input and elements with return key options
    :type bind_return_key:   (bool)
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param focus:            if focus should be set to this
    :type focus:             idk_yetReally
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              key for uniquely identify this element (for window.find_element)
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param visible:          set initial visibility state of the Button
    :type visible:           (bool)
    :param metadata:         Anything you want to store along with this button
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 returns a button
    :rtype:                  (Button)
    """
    return Button(button_text=button_text, button_type=BUTTON_TYPE_READ_FORM, tooltip=tooltip, size=size, s=s,
                  auto_size_button=auto_size_button, button_color=button_color, font=font, disabled=disabled,
                  bind_return_key=bind_return_key, focus=focus, pad=pad, p=p, key=key, k=k, visible=visible, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


# -------------------------  YES BUTTON Element lazy function  ------------------------- #
def Ok(button_text='Ok', size=(None, None), s=(None, None), auto_size_button=None, button_color=None, disabled=False,
       bind_return_key=True, tooltip=None, font=None, focus=False, pad=None, p=None, key=None, k=None, visible=True, metadata=None, expand_x=False, expand_y=False):
    """

    :param button_text:      text in the button (Default value = 'Ok')
    :type button_text:       (str)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param bind_return_key:  (Default = True) If True, this button will appear to be clicked when return key is pressed in other elements such as Input and elements with return key options
    :type bind_return_key:   (bool)
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param focus:            if focus should be set to this
    :type focus:             idk_yetReally
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              key for uniquely identify this element (for window.find_element)
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param visible:          set initial visibility state of the Button
    :type visible:           (bool)
    :param metadata:         Anything you want to store along with this button
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 returns a button
    :rtype:                  (Button)
    """
    return Button(button_text=button_text, button_type=BUTTON_TYPE_READ_FORM, tooltip=tooltip, size=size, s=s,
                  auto_size_button=auto_size_button, button_color=button_color, font=font, disabled=disabled,
                  bind_return_key=bind_return_key, focus=focus, pad=pad, p=p, key=key, k=k, visible=visible, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


# -------------------------  CANCEL BUTTON Element lazy function  ------------------------- #
def Cancel(button_text='Cancel', size=(None, None), s=(None, None), auto_size_button=None, button_color=None, disabled=False,
           tooltip=None, font=None, bind_return_key=False, focus=False, pad=None, p=None, key=None, k=None, visible=True, metadata=None, expand_x=False, expand_y=False):
    """

    :param button_text:      text in the button (Default value = 'Cancel')
    :type button_text:       (str)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param bind_return_key:  (Default = False) If True, this button will appear to be clicked when return key is pressed in other elements such as Input and elements with return key options
    :type bind_return_key:   (bool)
    :param focus:            if focus should be set to this
    :type focus:
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              key for uniquely identify this element (for window.find_element)
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param visible:          set initial visibility state of the Button
    :type visible:           (bool)
    :param metadata:         Anything you want to store along with this button
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 returns a button
    :rtype:                  (Button)
    """
    return Button(button_text=button_text, button_type=BUTTON_TYPE_READ_FORM, tooltip=tooltip, size=size, s=s,
                  auto_size_button=auto_size_button, button_color=button_color, font=font, disabled=disabled,
                  bind_return_key=bind_return_key, focus=focus, pad=pad, p=p, key=key, k=k, visible=visible, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


# -------------------------  QUIT BUTTON Element lazy function  ------------------------- #
def Quit(button_text='Quit', size=(None, None), s=(None, None), auto_size_button=None, button_color=None, disabled=False, tooltip=None,
         font=None, bind_return_key=False, focus=False, pad=None, p=None, key=None, k=None, visible=True, metadata=None, expand_x=False, expand_y=False):
    """

    :param button_text:      text in the button (Default value = 'Quit')
    :type button_text:       (str)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param bind_return_key:  (Default = False) If True, this button will appear to be clicked when return key is pressed in other elements such as Input and elements with return key options
    :type bind_return_key:   (bool)
    :param focus:            if focus should be set to this
    :type focus:             (bool)
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              key for uniquely identify this element (for window.find_element)
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param visible:          set initial visibility state of the Button
    :type visible:           (bool)
    :param metadata:         Anything you want to store along with this button
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 returns a button
    :rtype:                  (Button)
    """
    return Button(button_text=button_text, button_type=BUTTON_TYPE_READ_FORM, tooltip=tooltip, size=size, s=s,
                  auto_size_button=auto_size_button, button_color=button_color, font=font, disabled=disabled,
                  bind_return_key=bind_return_key, focus=focus, pad=pad, p=p, key=key, k=k, visible=visible, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


# -------------------------  Exit BUTTON Element lazy function  ------------------------- #
def Exit(button_text='Exit', size=(None, None), s=(None, None), auto_size_button=None, button_color=None, disabled=False, tooltip=None,
         font=None, bind_return_key=False, focus=False, pad=None, p=None, key=None, k=None, visible=True, metadata=None, expand_x=False, expand_y=False):
    """

    :param button_text:      text in the button (Default value = 'Exit')
    :type button_text:       (str)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param bind_return_key:  (Default = False) If True, this button will appear to be clicked when return key is pressed in other elements such as Input and elements with return key options
    :type bind_return_key:   (bool)
    :param focus:            if focus should be set to this
    :type focus:
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              key for uniquely identify this element (for window.find_element)
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param visible:          set initial visibility state of the Button
    :type visible:           (bool)
    :param metadata:         Anything you want to store along with this button
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 returns a button
    :rtype:                  (Button)
    """
    return Button(button_text=button_text, button_type=BUTTON_TYPE_READ_FORM, tooltip=tooltip, size=size, s=s,
                  auto_size_button=auto_size_button, button_color=button_color, font=font, disabled=disabled,
                  bind_return_key=bind_return_key, focus=focus, pad=pad, p=p, key=key, k=k, visible=visible, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


# -------------------------  YES BUTTON Element lazy function  ------------------------- #
def Yes(button_text='Yes', size=(None, None), s=(None, None), auto_size_button=None, button_color=None, disabled=False, tooltip=None,
        font=None, bind_return_key=True, focus=False, pad=None, p=None, key=None, k=None, visible=True, metadata=None, expand_x=False, expand_y=False):
    """

    :param button_text:      text in the button (Default value = 'Yes')
    :type button_text:       (str)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param bind_return_key:  (Default = True) If True, this button will appear to be clicked when return key is pressed in other elements such as Input and elements with return key options
    :type bind_return_key:   (bool)
    :param focus:            if focus should be set to this
    :type focus:
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              key for uniquely identify this element (for window.find_element)
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param visible:          set initial visibility state of the Button
    :type visible:           (bool)
    :param metadata:         Anything you want to store along with this button
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 returns a button
    :rtype:                  (Button)
    """
    return Button(button_text=button_text, button_type=BUTTON_TYPE_READ_FORM, tooltip=tooltip, size=size, s=s,
                  auto_size_button=auto_size_button, button_color=button_color, font=font, disabled=disabled,
                  bind_return_key=bind_return_key, focus=focus, pad=pad, p=p, key=key, k=k, visible=visible, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


# -------------------------  NO BUTTON Element lazy function  ------------------------- #
def No(button_text='No', size=(None, None), s=(None, None), auto_size_button=None, button_color=None, disabled=False, tooltip=None,
       font=None, bind_return_key=False, focus=False, pad=None, p=None, key=None, k=None, visible=True, metadata=None, expand_x=False, expand_y=False):
    """

    :param button_text:      text in the button (Default value = 'No')
    :type button_text:       (str)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param bind_return_key:  (Default = False) If True, then the return key will cause a the Listbox to generate an event
    :type bind_return_key:   (bool)
    :param focus:            if focus should be set to this
    :type focus:
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              key for uniquely identify this element (for window.find_element)
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param visible:          set initial visibility state of the Button
    :type visible:           (bool)
    :param metadata:         Anything you want to store along with this button
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 returns a button
    :rtype:                  (Button)
    """
    return Button(button_text=button_text, button_type=BUTTON_TYPE_READ_FORM, tooltip=tooltip, size=size, s=s,
                  auto_size_button=auto_size_button, button_color=button_color, font=font, disabled=disabled,
                  bind_return_key=bind_return_key, focus=focus, pad=pad, p=p, key=key, k=k, visible=visible, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


# -------------------------  NO BUTTON Element lazy function  ------------------------- #
def Help(button_text='Help', size=(None, None), s=(None, None), auto_size_button=None, button_color=None, disabled=False, font=None,
         tooltip=None, bind_return_key=False, focus=False, pad=None, p=None, key=None, k=None, visible=True, metadata=None, expand_x=False, expand_y=False):
    """

    :param button_text:      text in the button (Default value = 'Help')
    :type button_text:       (str)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param bind_return_key:  (Default = False) If True, this button will appear to be clicked when return key is pressed in other elements such as Input and elements with return key options
    :type bind_return_key:   (bool)
    :param focus:            if focus should be set to this
    :type focus:
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              key for uniquely identify this element (for window.find_element)
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param visible:          set initial visibility state of the Button
    :type visible:           (bool)
    :param metadata:         Anything you want to store along with this button
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 returns a button
    :rtype:                  (Button)
    """
    return Button(button_text=button_text, button_type=BUTTON_TYPE_READ_FORM, tooltip=tooltip, size=size, s=s,
                  auto_size_button=auto_size_button, button_color=button_color, font=font, disabled=disabled,
                  bind_return_key=bind_return_key, focus=focus, pad=pad, p=p, key=key, k=k, visible=visible, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


# -------------------------  NO BUTTON Element lazy function  ------------------------- #
def Debug(button_text='', size=(None, None), s=(None, None), auto_size_button=None, button_color=None, disabled=False, font=None,
          tooltip=None, bind_return_key=False, focus=False, pad=None, p=None, key=None, k=None, visible=True, metadata=None, expand_x=False, expand_y=False):
    """
    This Button has been changed in how it works!!
    Your button has been replaced with a normal button that has the PySimpleGUI Debugger buggon logo on it.
    In your event loop, you will need to check for the event of this button and then call:
            show_debugger_popout_window()
    :param button_text:      text in the button (Default value = '')
    :type button_text:       (str)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param bind_return_key:  (Default = False) If True, this button will appear to be clicked when return key is pressed in other elements such as Input and elements with return key options
    :type bind_return_key:   (bool)
    :param focus:            if focus should be set to this
    :type focus:
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              key for uniquely identify this element (for window.find_element)
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param visible:          set initial visibility state of the Button
    :type visible:           (bool)
    :param metadata:         Anything you want to store along with this button
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 returns a button
    :rtype:                  (Button)
    """

    user_key = key if key is not None else k if k is not None else button_text

    return Button(button_text='', button_type=BUTTON_TYPE_READ_FORM, tooltip=tooltip, size=size, s=s,
                  auto_size_button=auto_size_button, button_color=theme_button_color(), font=font, disabled=disabled,
                  bind_return_key=bind_return_key, focus=focus, pad=pad, p=p, key=user_key, k=k, visible=visible, image_data=PSG_DEBUGGER_LOGO,
                  image_subsample=2, border_width=0, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


# -------------------------  GENERIC BUTTON Element lazy function  ------------------------- #
def SimpleButton(button_text, image_filename=None, image_data=None, image_size=(None, None), image_subsample=None,
                 border_width=None, tooltip=None, size=(None, None), s=(None, None), auto_size_button=None, button_color=None,
                 font=None, bind_return_key=False, disabled=False, focus=False, pad=None, p=None, key=None, k=None, metadata=None, expand_x=False, expand_y=False):
    """
    DEPIRCATED

    This Button should not be used.

    :param button_text:      text in the button
    :type button_text:       (str)
    :param image_filename:   image filename if there is a button image
    :type image_filename:    image filename if there is a button image
    :param image_data:       in-RAM image to be displayed on button
    :type image_data:        in-RAM image to be displayed on button
    :param image_size:       image size (O.K.)
    :type image_size:        (Default = (None))
    :param image_subsample:  amount to reduce the size of the image
    :type image_subsample:   amount to reduce the size of the image
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param bind_return_key:  (Default = False) If True, this button will appear to be clicked when return key is pressed in other elements such as Input and elements with return key options
    :type bind_return_key:   (bool)
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param focus:            if focus should be set to this
    :type focus:             idk_yetReally
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              key for uniquely identify this element (for window.find_element)
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param metadata:         Anything you want to store along with this button
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 returns a button
    :rtype:                  (Button)
    """
    return Button(button_text=button_text, button_type=BUTTON_TYPE_CLOSES_WIN, image_filename=image_filename,
                  image_data=image_data, image_size=image_size, image_subsample=image_subsample,
                  border_width=border_width, tooltip=tooltip, disabled=disabled, size=size, s=s,
                  auto_size_button=auto_size_button, button_color=button_color, font=font,
                  bind_return_key=bind_return_key, focus=focus, pad=pad, p=p, key=key, k=k, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


# -------------------------  CLOSE BUTTON Element lazy function  ------------------------- #
def CloseButton(button_text, image_filename=None, image_data=None, image_size=(None, None), image_subsample=None,
                border_width=None, tooltip=None, size=(None, None), s=(None, None), auto_size_button=None, button_color=None, font=None,
                bind_return_key=False, disabled=False, focus=False, pad=None, p=None, key=None, k=None, metadata=None, expand_x=False, expand_y=False):
    """
    DEPRICATED

    This button should not be used.  Instead explicitly close your windows by calling window.close() or by using
    the close parameter in window.read

    :param button_text:      text in the button
    :type button_text:       (str)
    :param image_filename:   image filename if there is a button image
    :type image_filename:    image filename if there is a button image
    :param image_data:       in-RAM image to be displayed on button
    :type image_data:        in-RAM image to be displayed on button
    :param image_size:       image size (O.K.)
    :type image_size:        (Default = (None))
    :param image_subsample:  amount to reduce the size of the image
    :type image_subsample:   amount to reduce the size of the image
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param bind_return_key:  (Default = False) If True, this button will appear to be clicked when return key is pressed in other elements such as Input and elements with return key options
    :type bind_return_key:   (bool)
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param focus:            if focus should be set to this
    :type focus:             idk_yetReally
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              key for uniquely identify this element (for window.find_element)
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param metadata:         Anything you want to store along with this button
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 returns a button
    :rtype:                  (Button)
    """
    return Button(button_text=button_text, button_type=BUTTON_TYPE_CLOSES_WIN, image_filename=image_filename,
                  image_data=image_data, image_size=image_size, image_subsample=image_subsample,
                  border_width=border_width, tooltip=tooltip, disabled=disabled, size=size, s=s,
                  auto_size_button=auto_size_button, button_color=button_color, font=font,
                  bind_return_key=bind_return_key, focus=focus, pad=pad, p=p, key=key, k=k, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


CButton = CloseButton


# -------------------------  GENERIC BUTTON Element lazy function  ------------------------- #
def ReadButton(button_text, image_filename=None, image_data=None, image_size=(None, None), image_subsample=None,
               border_width=None, tooltip=None, size=(None, None), s=(None, None), auto_size_button=None, button_color=None, font=None,
               bind_return_key=False, disabled=False, focus=False, pad=None, p=None, key=None, k=None, metadata=None, expand_x=False, expand_y=False):
    """
    :param button_text:      text in the button
    :type button_text:       (str)
    :param image_filename:   image filename if there is a button image
    :type image_filename:    image filename if there is a button image
    :param image_data:       in-RAM image to be displayed on button
    :type image_data:        in-RAM image to be displayed on button
    :param image_size:       image size (O.K.)
    :type image_size:        (Default = (None))
    :param image_subsample:  amount to reduce the size of the image
    :type image_subsample:   amount to reduce the size of the image
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param bind_return_key:  (Default = False) If True, this button will appear to be clicked when return key is pressed in other elements such as Input and elements with return key options
    :type bind_return_key:   (bool)
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param focus:            if focus should be set to this
    :type focus:             idk_yetReally
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              key for uniquely identify this element (for window.find_element)
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param border_width:     width of border around element
    :type border_width:      (int)
    :param metadata:         Anything you want to store along with this button
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 Button created
    :rtype:                  (Button)
    """

    return Button(button_text=button_text, button_type=BUTTON_TYPE_READ_FORM, image_filename=image_filename,
                  image_data=image_data, image_size=image_size, image_subsample=image_subsample,
                  border_width=border_width, tooltip=tooltip, size=size, s=s, disabled=disabled,
                  auto_size_button=auto_size_button, button_color=button_color, font=font,
                  bind_return_key=bind_return_key, focus=focus, pad=pad, p=p, key=key, k=k, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


ReadFormButton = ReadButton
RButton = ReadFormButton


# -------------------------  Realtime BUTTON Element lazy function  ------------------------- #
def RealtimeButton(button_text, image_filename=None, image_data=None, image_size=(None, None), image_subsample=None,
                   border_width=None, tooltip=None, size=(None, None), s=(None, None), auto_size_button=None, button_color=None,
                   font=None, disabled=False, bind_return_key=False, focus=False, pad=None, p=None, key=None, k=None, visible=True, metadata=None, expand_x=False, expand_y=False):
    """

    :param button_text:      text in the button
    :type button_text:       (str)
    :param image_filename:   image filename if there is a button image
    :type image_filename:    image filename if there is a button image
    :param image_data:       in-RAM image to be displayed on button
    :type image_data:        in-RAM image to be displayed on button
    :param image_size:       image size (O.K.)
    :type image_size:        (Default = (None))
    :param image_subsample:  amount to reduce the size of the image
    :type image_subsample:   amount to reduce the size of the image
    :param border_width:     width of border around element
    :type border_width:      (int)
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param bind_return_key:  (Default = False) If True, this button will appear to be clicked when return key is pressed in other elements such as Input and elements with return key options
    :type bind_return_key:   (bool)
    :param focus:            if focus should be set to this
    :type focus:             (bool)
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              key for uniquely identify this element (for window.find_element)
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param visible:          set initial visibility state of the Button
    :type visible:           (bool)
    :param metadata:         Anything you want to store along with this button
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 Button created
    :rtype:                  (Button)
    """
    return Button(button_text=button_text, button_type=BUTTON_TYPE_REALTIME, image_filename=image_filename,
                  image_data=image_data, image_size=image_size, image_subsample=image_subsample,
                  border_width=border_width, tooltip=tooltip, disabled=disabled, size=size, s=s,
                  auto_size_button=auto_size_button, button_color=button_color, font=font,
                  bind_return_key=bind_return_key, focus=focus, pad=pad, p=p, key=key, k=k, visible=visible, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


# -------------------------  Dummy BUTTON Element lazy function  ------------------------- #
def DummyButton(button_text, image_filename=None, image_data=None, image_size=(None, None), image_subsample=None,
                border_width=None, tooltip=None, size=(None, None), s=(None, None), auto_size_button=None, button_color=None, font=None,
                disabled=False, bind_return_key=False, focus=False, pad=None, p=None, key=None, k=None, visible=True, metadata=None, expand_x=False, expand_y=False):
    """
    This is a special type of Button.

    It will close the window but NOT send an event that the window has been closed.

    It's used in conjunction with non-blocking windows to silently close them.  They are used to
    implement the non-blocking popup windows. They're also found in some Demo Programs, so look there for proper use.

    :param button_text:      text in the button
    :type button_text:       (str)
    :param image_filename:   image filename if there is a button image
    :type image_filename:    image filename if there is a button image
    :param image_data:       in-RAM image to be displayed on button
    :type image_data:        in-RAM image to be displayed on button
    :param image_size:       image size (O.K.)
    :type image_size:        (Default = (None))
    :param image_subsample:  amount to reduce the size of the image
    :type image_subsample:   amount to reduce the size of the image
    :param border_width:     width of border around element
    :type border_width:      (int)
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param bind_return_key:  (Default = False) If True, this button will appear to be clicked when return key is pressed in other elements such as Input and elements with return key options
    :type bind_return_key:   (bool)
    :param focus:            if focus should be set to this
    :type focus:             (bool)
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              key for uniquely identify this element (for window.find_element)
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param visible:          set initial visibility state of the Button
    :type visible:           (bool)
    :param metadata:         Anything you want to store along with this button
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 returns a button
    :rtype:                  (Button)
    """
    return Button(button_text=button_text, button_type=BUTTON_TYPE_CLOSES_WIN_ONLY, image_filename=image_filename,
                  image_data=image_data, image_size=image_size, image_subsample=image_subsample,
                  border_width=border_width, tooltip=tooltip, size=size, s=s, auto_size_button=auto_size_button,
                  button_color=button_color, font=font, disabled=disabled, bind_return_key=bind_return_key, focus=focus,
                  pad=pad, p=p, key=key, k=k, visible=visible, metadata=metadata, expand_x=expand_x, expand_y=expand_y)


# -------------------------  Calendar Chooser Button lazy function  ------------------------- #
def CalendarButton(button_text, target=(ThisRow, -1), close_when_date_chosen=True, default_date_m_d_y=(None, None, None),
                   image_filename=None, image_data=None, image_size=(None, None),
                   image_subsample=None, tooltip=None, border_width=None, size=(None, None), s=(None, None), auto_size_button=None,
                   button_color=None, disabled=False, font=None, bind_return_key=False, focus=False, pad=None, p=None, enable_events=None,
                   key=None, k=None, visible=True, locale=None, format='%Y-%m-%d %H:%M:%S', begin_at_sunday_plus=0, month_names=None, day_abbreviations=None,
                   title='Choose Date',
                   no_titlebar=True, location=(None, None), metadata=None, expand_x=False, expand_y=False):
    """
    Button that will show a calendar chooser window.  Fills in the target element with result

    :param button_text:            text in the button
    :type button_text:             (str)
    :param target:                 Key or "coordinate" (see docs) of target element
    :type target:                  (int, int) | Any
    :param close_when_date_chosen: (Default = True)
    :type close_when_date_chosen:  bool
    :param default_date_m_d_y:     Beginning date to show
    :type default_date_m_d_y:      (int, int or None, int)
    :param image_filename:         image filename if there is a button image
    :type image_filename:          image filename if there is a button image
    :param image_data:             in-RAM image to be displayed on button
    :type image_data:              in-RAM image to be displayed on button
    :param image_size:             image size (O.K.)
    :type image_size:              (Default = (None))
    :param image_subsample:        amount to reduce the size of the image
    :type image_subsample:         amount to reduce the size of the image
    :param tooltip:                text, that will appear when mouse hovers over the element
    :type tooltip:                 (str)
    :param border_width:           width of border around element
    :type border_width:            width of border around element
    :param size:                   (w,h) w=characters-wide, h=rows-high
    :type size:                    (int, int)
    :param s:                      Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                       (int, int)  | (None, None) | int
    :param auto_size_button:       True if button size is determined by button text
    :type auto_size_button:        (bool)
    :param button_color:           button color (foreground, background)
    :type button_color:            (str, str) | str
    :param disabled:               set disable state for element (Default = False)
    :type disabled:                (bool)
    :param font:                   specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                    (str or (str, int[, str]) or None)
    :param bind_return_key:  (Default = False) If True, this button will appear to be clicked when return key is pressed in other elements such as Input and elements with return key options
    :type bind_return_key:         bool
    :param focus:                  if focus should be set to this
    :type focus:                   bool
    :param pad:                    Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:                     (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                      Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                       (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:                    key for uniquely identify this element (for window.find_element)
    :type key:                     str | int | tuple | object
    :param k:                      Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                       str | int | tuple | object
    :param locale:                 defines the locale used to get day names
    :type locale:                  str
    :param format:                 formats result using this strftime format
    :type format:                  str
    :param begin_at_sunday_plus:   Determines the left-most day in the display. 0=sunday, 1=monday, etc
    :type begin_at_sunday_plus:    (int)
    :param month_names:            optional list of month names to use (should be 12 items)
    :type month_names:             List[str]
    :param day_abbreviations:      optional list of abbreviations to display as the day of week
    :type day_abbreviations:       List[str]
    :param title:                  Title shown on the date chooser window
    :type title:                   (str)
    :param no_titlebar:            if True no titlebar will be shown on the date chooser window
    :type no_titlebar:             bool
    :param location:               Location on the screen (x,y) to show the calendar popup window
    :type location:                (int, int)
    :param visible:                set initial visibility state of the Button
    :type visible:                 (bool)
    :param metadata:               Anything you want to store along with this button
    :type metadata:                (Any)
    :param expand_x:               If True Element will expand in the Horizontal directions
    :type expand_x:                (bool)
    :param expand_y:               If True Element will expand in the Vertical directions
    :type expand_y:                (bool)
    :return:                       returns a button
    :rtype:                        (Button)
    """
    button = Button(button_text=button_text, button_type=BUTTON_TYPE_CALENDAR_CHOOSER, target=target,
                    image_filename=image_filename, image_data=image_data, image_size=image_size,
                    image_subsample=image_subsample, border_width=border_width, tooltip=tooltip, size=size, s=s,
                    auto_size_button=auto_size_button, button_color=button_color, font=font, disabled=disabled, enable_events=enable_events,
                    bind_return_key=bind_return_key, focus=focus, pad=pad, p=p, key=key, k=k, visible=visible, metadata=metadata, expand_x=expand_x, expand_y=expand_y)
    button.calendar_close_when_chosen = close_when_date_chosen
    button.calendar_default_date_M_D_Y = default_date_m_d_y
    button.calendar_locale = locale
    button.calendar_format = format
    button.calendar_no_titlebar = no_titlebar
    button.calendar_location = location
    button.calendar_begin_at_sunday_plus = begin_at_sunday_plus
    button.calendar_month_names = month_names
    button.calendar_day_abbreviations = day_abbreviations
    button.calendar_title = title

    return button


# -------------------------  Calendar Chooser Button lazy function  ------------------------- #
def ColorChooserButton(button_text, target=(ThisRow, -1), image_filename=None, image_data=None, image_size=(None, None),
                       image_subsample=None, tooltip=None, border_width=None, size=(None, None), s=(None, None), auto_size_button=None,
                       button_color=None, disabled=False, font=None, bind_return_key=False, focus=False, pad=None, p=None,
                       key=None, k=None, default_color=None, visible=True, metadata=None, expand_x=False, expand_y=False):
    """

    :param button_text:      text in the button
    :type button_text:       (str)
    :param target:           key or (row,col) target for the button. Note that -1 for column means 1 element to the left of this one. The constant ThisRow is used to indicate the current row. The Button itself is a valid target for some types of button
    :type target:            str | (int, int)
    :type image_filename:    (str)
    :param image_filename:   image filename if there is a button image. GIFs and PNGs only.
    :type image_filename:    (str)
    :param image_data:       Raw or Base64 representation of the image to put on button. Choose either filename or data
    :type image_data:        bytes | str
    :param image_size:       Size of the image in pixels (width, height)
    :type image_size:        (int, int)
    :param image_subsample:  amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc
    :type image_subsample:   (int)
    :param tooltip:          text, that will appear when mouse hovers over the element
    :type tooltip:           (str)
    :param border_width:     width of border around element
    :type border_width:      (int)
    :param size:             (w,h) w=characters-wide, h=rows-high
    :type size:              (int, int)
    :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
    :type s:                 (int, int)  | (None, None) | int
    :param auto_size_button: True if button size is determined by button text
    :type auto_size_button:  (bool)
    :param button_color:     button color (foreground, background)
    :type button_color:      (str, str) | str
    :param disabled:         set disable state for element (Default = False)
    :type disabled:          (bool)
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:              (str or (str, int[, str]) or None)
    :param bind_return_key:  (Default = False) If True, this button will appear to be clicked when return key is pressed in other elements such as Input and elements with return key options
    :type bind_return_key:   (bool)
    :param focus:            Determines if initial focus should go to this element.
    :type focus:             (bool)
    :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
    :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
    :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
    :param key:              key for uniquely identify this element (for window.find_element)
    :type key:               str | int | tuple | object
    :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k:                 str | int | tuple | object
    :param default_color:    Color to be sent to tkinter to use as the default color
    :type default_color:     str
    :param visible:          set initial visibility state of the Button
    :type visible:           (bool)
    :param metadata:         User metadata that can be set to ANYTHING
    :type metadata:          (Any)
    :param expand_x:         If True Element will expand in the Horizontal directions
    :type expand_x:          (bool)
    :param expand_y:         If True Element will expand in the Vertical directions
    :type expand_y:          (bool)
    :return:                 returns a button
    :rtype:                  (Button)
    """
    button = Button(button_text=button_text, button_type=BUTTON_TYPE_COLOR_CHOOSER, target=target,
                    image_filename=image_filename, image_data=image_data, image_size=image_size,
                    image_subsample=image_subsample, border_width=border_width, tooltip=tooltip, size=size, s=s,
                    auto_size_button=auto_size_button, button_color=button_color, font=font, disabled=disabled,
                    bind_return_key=bind_return_key, focus=focus, pad=pad, p=p, key=key, k=k, visible=visible, metadata=metadata, expand_x=expand_x, expand_y=expand_y)
    button.default_color = default_color
    return button


#####################################  -----  BUTTON Functions   ------ ##################################################

def button_color_to_tuple(color_tuple_or_string, default=(None, None)):
    """
    Convert a color tuple or color string into 2 components and returns them as a tuple
    (Text Color, Button Background Color)
    If None is passed in as the first parameter, then the theme's button color is
    returned

    :param color_tuple_or_string: Button color - tuple or a simplied color string with word "on" between color
    :type  color_tuple_or_string: str | (str, str)
    :param default:               The 2 colors to use if there is a problem. Otherwise defaults to the theme's button color
    :type  default:               (str, str)
    :return:                      (str | (str, str)
    :rtype:                       str | (str, str)
    """
    if default == (None, None):
        color_tuple = _simplified_dual_color_to_tuple(color_tuple_or_string, default=theme_button_color())
    elif color_tuple_or_string == COLOR_SYSTEM_DEFAULT:
        color_tuple = (COLOR_SYSTEM_DEFAULT, COLOR_SYSTEM_DEFAULT)
    else:
        color_tuple = _simplified_dual_color_to_tuple(color_tuple_or_string, default=default)

    return color_tuple


def _simplified_dual_color_to_tuple(color_tuple_or_string, default=(None, None)):
    """
    Convert a color tuple or color string into 2 components and returns them as a tuple
    (Text Color, Button Background Color)
    If None is passed in as the first parameter, theme_

    :param color_tuple_or_string: Button color - tuple or a simplied color string with word "on" between color
    :type  color_tuple_or_string: str | (str, str} | (None, None)
    :param default:               The 2 colors to use if there is a problem. Otherwise defaults to the theme's button color
    :type  default:               (str, str)
    :return:                      (str | (str, str)
    :rtype:                       str | (str, str)
    """
    if color_tuple_or_string is None or color_tuple_or_string == (None, None):
        color_tuple_or_string = default
    if color_tuple_or_string == COLOR_SYSTEM_DEFAULT:
        return (COLOR_SYSTEM_DEFAULT, COLOR_SYSTEM_DEFAULT)
    text_color = background_color = COLOR_SYSTEM_DEFAULT
    try:
        if isinstance(color_tuple_or_string, (tuple, list)):
            if len(color_tuple_or_string) >= 2:
                text_color = color_tuple_or_string[0] or default[0]
                background_color = color_tuple_or_string[1] or default[1]
            elif len(color_tuple_or_string) == 1:
                background_color = color_tuple_or_string[0] or default[1]
        elif isinstance(color_tuple_or_string, str):
            color_tuple_or_string = color_tuple_or_string.lower()
            split_colors = color_tuple_or_string.split(' on ')
            if len(split_colors) >= 2:
                text_color = split_colors[0].strip() or default[0]
                background_color = split_colors[1].strip() or default[1]
            elif len(split_colors) == 1:
                split_colors = color_tuple_or_string.split('on')
                if len(split_colors) == 1:
                    text_color, background_color = default[0], split_colors[0].strip()
                else:
                    split_colors = split_colors[0].strip(), split_colors[1].strip()
                    text_color = split_colors[0] or default[0]
                    background_color = split_colors[1] or default[1]
                    # text_color, background_color = color_tuple_or_string, default[1]
            else:
                text_color, background_color = default
        else:
            if not SUPPRESS_ERROR_POPUPS:
                _error_popup_with_traceback('** Badly formatted dual-color... not a tuple nor string **', color_tuple_or_string)
            else:
                print('** Badly formatted dual-color... not a tuple nor string **', color_tuple_or_string)
            text_color, background_color = default
    except Exception as e:
        if not SUPPRESS_ERROR_POPUPS:
            _error_popup_with_traceback('** Badly formatted button color **', color_tuple_or_string, e)
        else:
            print('** Badly formatted button color... not a tuple nor string **', color_tuple_or_string, e)
        text_color, background_color = default
    if isinstance(text_color, int):
        text_color = "#%06X" % text_color
    if isinstance(background_color, int):
        background_color = "#%06X" % background_color
    # print('converted button color', color_tuple_or_string, 'to', (text_color, background_color))

    return (text_color, background_color)


#####################################  -----  RESULTS   ------ ##################################################

def AddToReturnDictionary(form, element, value):
    form.ReturnValuesDictionary[element.Key] = value
    # if element.Key is None:
    #     form.ReturnValuesDictionary[form.DictionaryKeyCounter] = value
    #     element.Key = form.DictionaryKeyCounter
    #     form.DictionaryKeyCounter += 1
    # else:
    #     form.ReturnValuesDictionary[element.Key] = value


def AddToReturnList(form, value):
    form.ReturnValuesList.append(value)


# ----------------------------------------------------------------------------#
# -------  FUNCTION InitializeResults.  Sets up form results matrix  --------#
def InitializeResults(form):
    _BuildResults(form, True, form)
    return


# =====  Radio Button RadVar encoding and decoding =====#
# =====  The value is simply the row * 1000 + col  =====#
def DecodeRadioRowCol(RadValue):
    container = RadValue // 100000
    row = RadValue // 1000
    col = RadValue % 1000
    return container, row, col


def EncodeRadioRowCol(container, row, col):
    RadValue = container * 100000 + row * 1000 + col
    return RadValue


# -------  FUNCTION BuildResults.  Form exiting so build the results to pass back  ------- #
# format of return values is
# (Button Pressed, input_values)
def _BuildResults(form, initialize_only, top_level_form):
    # Results for elements are:
    #   TEXT - Nothing
    #   INPUT - Read value from TK
    #   Button - Button Text and position as a Tuple

    # Get the initialized results so we don't have to rebuild
    # form.DictionaryKeyCounter = 0
    form.ReturnValuesDictionary = {}
    form.ReturnValuesList = []
    _BuildResultsForSubform(form, initialize_only, top_level_form)
    if not top_level_form.LastButtonClickedWasRealtime:
        top_level_form.LastButtonClicked = None
    return form.ReturnValues


def _BuildResultsForSubform(form, initialize_only, top_level_form):
    event = top_level_form.LastButtonClicked
    for row_num, row in enumerate(form.Rows):
        for col_num, element in enumerate(row):
            if element.Key is not None and WRITE_ONLY_KEY in str(element.Key):
                continue
            value = None
            if element.Type == ELEM_TYPE_COLUMN:
                element.DictionaryKeyCounter = top_level_form.DictionaryKeyCounter
                element.ReturnValuesList = []
                element.ReturnValuesDictionary = {}
                _BuildResultsForSubform(element, initialize_only, top_level_form)
                for item in element.ReturnValuesList:
                    AddToReturnList(top_level_form, item)
                if element.UseDictionary:
                    top_level_form.UseDictionary = True
                if element.ReturnValues[0] is not None:  # if a button was clicked
                    event = element.ReturnValues[0]

            if element.Type == ELEM_TYPE_FRAME:
                element.DictionaryKeyCounter = top_level_form.DictionaryKeyCounter
                element.ReturnValuesList = []
                element.ReturnValuesDictionary = {}
                _BuildResultsForSubform(element, initialize_only, top_level_form)
                for item in element.ReturnValuesList:
                    AddToReturnList(top_level_form, item)
                if element.UseDictionary:
                    top_level_form.UseDictionary = True
                if element.ReturnValues[0] is not None:  # if a button was clicked
                    event = element.ReturnValues[0]

            if element.Type == ELEM_TYPE_PANE:
                element.DictionaryKeyCounter = top_level_form.DictionaryKeyCounter
                element.ReturnValuesList = []
                element.ReturnValuesDictionary = {}
                _BuildResultsForSubform(element, initialize_only, top_level_form)
                for item in element.ReturnValuesList:
                    AddToReturnList(top_level_form, item)
                if element.UseDictionary:
                    top_level_form.UseDictionary = True
                if element.ReturnValues[0] is not None:  # if a button was clicked
                    event = element.ReturnValues[0]

            if element.Type == ELEM_TYPE_TAB_GROUP:
                element.DictionaryKeyCounter = top_level_form.DictionaryKeyCounter
                element.ReturnValuesList = []
                element.ReturnValuesDictionary = {}
                _BuildResultsForSubform(element, initialize_only, top_level_form)
                for item in element.ReturnValuesList:
                    AddToReturnList(top_level_form, item)
                if element.UseDictionary:
                    top_level_form.UseDictionary = True
                if element.ReturnValues[0] is not None:  # if a button was clicked
                    event = element.ReturnValues[0]

            if element.Type == ELEM_TYPE_TAB:
                element.DictionaryKeyCounter = top_level_form.DictionaryKeyCounter
                element.ReturnValuesList = []
                element.ReturnValuesDictionary = {}
                _BuildResultsForSubform(element, initialize_only, top_level_form)
                for item in element.ReturnValuesList:
                    AddToReturnList(top_level_form, item)
                if element.UseDictionary:
                    top_level_form.UseDictionary = True
                if element.ReturnValues[0] is not None:  # if a button was clicked
                    event = element.ReturnValues[0]

            if not initialize_only:
                if element.Type == ELEM_TYPE_INPUT_TEXT:
                    try:
                        value = element.TKStringVar.get()
                    except:
                        value = ''
                    if not top_level_form.NonBlocking and not element.do_not_clear and not top_level_form.ReturnKeyboardEvents:
                        element.TKStringVar.set('')
                elif element.Type == ELEM_TYPE_INPUT_CHECKBOX:
                    value = element.TKIntVar.get()
                    value = (value != 0)
                elif element.Type == ELEM_TYPE_INPUT_RADIO:
                    RadVar = element.TKIntVar.get()
                    this_rowcol = EncodeRadioRowCol(form.ContainerElemementNumber, row_num, col_num)
                    # this_rowcol = element.EncodedRadioValue       # could use the saved one
                    value = RadVar == this_rowcol
                elif element.Type == ELEM_TYPE_BUTTON:
                    if top_level_form.LastButtonClicked == element.Key:
                        event = top_level_form.LastButtonClicked
                        if element.BType != BUTTON_TYPE_REALTIME:  # Do not clear realtime buttons
                            top_level_form.LastButtonClicked = None
                    if element.BType == BUTTON_TYPE_CALENDAR_CHOOSER:
                        # value = None
                        value = element.calendar_selection
                    else:
                        try:
                            value = element.TKStringVar.get()
                        except:
                            value = None
                elif element.Type == ELEM_TYPE_INPUT_COMBO:
                    element = element  # type: Combo
                    # value = element.TKStringVar.get()
                    try:
                        if element.TKCombo.current() == -1:  # if the current value was not in the original list
                            value = element.TKCombo.get()
                        else:
                            value = element.Values[element.TKCombo.current()]  # get value from original list given index
                    except:
                        value = '*Exception occurred*'
                elif element.Type == ELEM_TYPE_INPUT_OPTION_MENU:
                    value = element.TKStringVar.get()
                elif element.Type == ELEM_TYPE_INPUT_LISTBOX:
                    try:
                        items = element.TKListbox.curselection()
                        value = [element.Values[int(item)] for item in items]
                    except Exception as e:
                        value = ''
                elif element.Type == ELEM_TYPE_INPUT_SPIN:
                    try:
                        value = element.TKStringVar.get()
                        for v in element.Values:
                            if str(v) == value:
                                value = v
                                break
                    except:
                        value = 0
                elif element.Type == ELEM_TYPE_INPUT_SLIDER:
                    try:
                        value = float(element.TKScale.get())
                    except:
                        value = 0
                elif element.Type == ELEM_TYPE_INPUT_MULTILINE:
                    if element.WriteOnly:  # if marked as "write only" when created, then don't include with the values being returned
                        continue
                    try:
                        value = element.TKText.get(1.0, tk.END)
                        if element.rstrip:
                            value = value.rstrip()
                        if not top_level_form.NonBlocking and not element.do_not_clear and not top_level_form.ReturnKeyboardEvents:
                            element.TKText.delete('1.0', tk.END)
                    except:
                        value = None
                elif element.Type == ELEM_TYPE_TAB_GROUP:
                    try:
                        value = element.TKNotebook.tab(element.TKNotebook.index('current'))['text']
                        tab_key = element.find_currently_active_tab_key()
                        # tab_key = element.FindKeyFromTabName(value)
                        if tab_key is not None:
                            value = tab_key
                    except:
                        value = None
                elif element.Type == ELEM_TYPE_TABLE:
                    value = element.SelectedRows
                elif element.Type == ELEM_TYPE_TREE:
                    value = element.SelectedRows
                elif element.Type == ELEM_TYPE_GRAPH:
                    value = element.ClickPosition
                elif element.Type == ELEM_TYPE_MENUBAR:
                    if element.MenuItemChosen is not None:
                        event = top_level_form.LastButtonClicked = element.MenuItemChosen
                    value = element.MenuItemChosen
                    element.MenuItemChosen = None
                elif element.Type == ELEM_TYPE_BUTTONMENU:
                    element = element  # type: ButtonMenu
                    value = element.MenuItemChosen
                    if element.part_of_custom_menubar:
                        if element.MenuItemChosen is not None:
                            value = event = element.MenuItemChosen
                            top_level_form.LastButtonClicked = element.MenuItemChosen
                            if element.custom_menubar_key is not None:
                                top_level_form.ReturnValuesDictionary[element.custom_menubar_key] = value
                            element.MenuItemChosen = None
                        else:
                            if element.custom_menubar_key not in top_level_form.ReturnValuesDictionary:
                                top_level_form.ReturnValuesDictionary[element.custom_menubar_key] = None
                            value = None

                    # if element.MenuItemChosen is not None:
                    #     button_pressed_text = top_level_form.LastButtonClicked = element.MenuItemChosen
                    # value = element.MenuItemChosen
                    # element.MenuItemChosen = None
            else:
                value = None

            # if an input type element, update the results
            if element.Type not in (
            ELEM_TYPE_BUTTON, ELEM_TYPE_TEXT, ELEM_TYPE_IMAGE, ELEM_TYPE_OUTPUT, ELEM_TYPE_PROGRESS_BAR, ELEM_TYPE_COLUMN, ELEM_TYPE_FRAME, ELEM_TYPE_SEPARATOR,
            ELEM_TYPE_TAB):
                if not (element.Type == ELEM_TYPE_BUTTONMENU and element.part_of_custom_menubar):
                    AddToReturnList(form, value)
                    AddToReturnDictionary(top_level_form, element, value)
            elif (element.Type == ELEM_TYPE_BUTTON and
                  element.BType == BUTTON_TYPE_COLOR_CHOOSER and
                  element.Target == (None, None)) or \
                    (element.Type == ELEM_TYPE_BUTTON
                     and element.Key is not None and
                     (element.BType in (BUTTON_TYPE_SAVEAS_FILE, BUTTON_TYPE_BROWSE_FILE, BUTTON_TYPE_BROWSE_FILES,
                                        BUTTON_TYPE_BROWSE_FOLDER, BUTTON_TYPE_CALENDAR_CHOOSER))):
                AddToReturnList(form, value)
                AddToReturnDictionary(top_level_form, element, value)

    # if this is a column, then will fail so need to wrap with try
    try:
        if form.ReturnKeyboardEvents and form.LastKeyboardEvent is not None:
            event = form.LastKeyboardEvent
            form.LastKeyboardEvent = None
    except:
        pass

    try:
        form.ReturnValuesDictionary.pop(None, None)  # clean up dictionary include None was included
    except:
        pass

    # if no event was found
    if not initialize_only and event is None and form == top_level_form:
        queued_event_value = form._queued_thread_event_read()
        if queued_event_value is not None:
            event, value = queued_event_value
            AddToReturnList(form, value)
            form.ReturnValuesDictionary[event] = value

    if not form.UseDictionary:
        form.ReturnValues = event, form.ReturnValuesList
    else:
        form.ReturnValues = event, form.ReturnValuesDictionary

    return form.ReturnValues


def fill_form_with_values(window, values_dict):
    """
    Fills a window with values provided in a values dictionary { element_key : new_value }

    :param window:      The window object to fill
    :type window:       (Window)
    :param values_dict: A dictionary with element keys as key and value is values parm for Update call
    :type values_dict:  (Dict[Any, Any])
    :return:            None
    :rtype:             None
    """

    for element_key in values_dict:
        try:
            window.AllKeysDict[element_key].Update(values_dict[element_key])
        except Exception as e:
            print('Problem filling form. Perhaps bad key?  This is a suspected bad key: {}'.format(element_key))


def _FindElementWithFocusInSubForm(form):
    """
    Searches through a "sub-form" (can be a window or container) for the current element with focus

    :param form: a Window, Column, Frame, or TabGroup (container elements)
    :type form:  container elements
    :return:     Element
    :rtype:      Element | None
    """
    for row_num, row in enumerate(form.Rows):
        for col_num, element in enumerate(row):
            if element.Type == ELEM_TYPE_COLUMN:
                matching_elem = _FindElementWithFocusInSubForm(element)
                if matching_elem is not None:
                    return matching_elem
            elif element.Type == ELEM_TYPE_FRAME:
                matching_elem = _FindElementWithFocusInSubForm(element)
                if matching_elem is not None:
                    return matching_elem
            elif element.Type == ELEM_TYPE_TAB_GROUP:
                matching_elem = _FindElementWithFocusInSubForm(element)
                if matching_elem is not None:
                    return matching_elem
            elif element.Type == ELEM_TYPE_TAB:
                matching_elem = _FindElementWithFocusInSubForm(element)
                if matching_elem is not None:
                    return matching_elem
            elif element.Type == ELEM_TYPE_PANE:
                matching_elem = _FindElementWithFocusInSubForm(element)
                if matching_elem is not None:
                    return matching_elem
            elif element.Type == ELEM_TYPE_INPUT_TEXT:
                if element.TKEntry is not None:
                    if element.TKEntry is element.TKEntry.focus_get():
                        return element
            elif element.Type == ELEM_TYPE_INPUT_MULTILINE:
                if element.TKText is not None:
                    if element.TKText is element.TKText.focus_get():
                        return element
            elif element.Type == ELEM_TYPE_BUTTON:
                if element.TKButton is not None:
                    if element.TKButton is element.TKButton.focus_get():
                        return element
            else:  # The "Catch All" - if type isn't one of the above, try generic element.Widget
                try:
                    if element.Widget is not None:
                        if element.Widget is element.Widget.focus_get():
                            return element
                except:
                    return None

    return None


def AddMenuItem(top_menu, sub_menu_info, element, is_sub_menu=False, skip=False, right_click_menu=False):
    """
    Only to be used internally. Not user callable
    :param top_menu:      ???
    :type top_menu:       ???
    :param sub_menu_info: ???
    :type sub_menu_info:
    :param element:       ???
    :type element:        idk_yetReally
    :param is_sub_menu:   (Default = False)
    :type is_sub_menu:    (bool)
    :param skip:          (Default = False)
    :type skip:           (bool)

    """
    return_val = None
    if type(sub_menu_info) is str:
        if not is_sub_menu and not skip:
            pos = sub_menu_info.find(MENU_SHORTCUT_CHARACTER)
            if pos != -1:
                if pos < len(MENU_SHORTCUT_CHARACTER) or sub_menu_info[pos - len(MENU_SHORTCUT_CHARACTER)] != "\\":
                    sub_menu_info = sub_menu_info[:pos] + sub_menu_info[pos + len(MENU_SHORTCUT_CHARACTER):]
            if sub_menu_info == '---':
                top_menu.add('separator')
            else:
                try:
                    item_without_key = sub_menu_info[:sub_menu_info.index(MENU_KEY_SEPARATOR)]
                except:
                    item_without_key = sub_menu_info

                if item_without_key[0] == MENU_DISABLED_CHARACTER:
                    top_menu.add_command(label=item_without_key[len(MENU_DISABLED_CHARACTER):], underline=pos - 1,
                                         command=lambda: element._MenuItemChosenCallback(sub_menu_info))
                    top_menu.entryconfig(item_without_key[len(MENU_DISABLED_CHARACTER):], state='disabled')
                else:
                    top_menu.add_command(label=item_without_key, underline=pos,
                                         command=lambda: element._MenuItemChosenCallback(sub_menu_info))
    else:
        i = 0
        while i < (len(sub_menu_info)):
            item = sub_menu_info[i]
            if i != len(sub_menu_info) - 1:
                if type(sub_menu_info[i + 1]) == list:
                    new_menu = tk.Menu(top_menu, tearoff=element.Tearoff)
                    # if a right click menu, then get styling from the top-level window
                    if right_click_menu:
                        window = element.ParentForm
                        if window.right_click_menu_background_color not in (COLOR_SYSTEM_DEFAULT, None):
                            new_menu.config(bg=window.right_click_menu_background_color)
                            new_menu.config(activeforeground=window.right_click_menu_background_color)
                        if window.right_click_menu_text_color not in (COLOR_SYSTEM_DEFAULT, None):
                            new_menu.config(fg=window.right_click_menu_text_color)
                            new_menu.config(activebackground=window.right_click_menu_text_color)
                        if window.right_click_menu_disabled_text_color not in (COLOR_SYSTEM_DEFAULT, None):
                            new_menu.config(disabledforeground=window.right_click_menu_disabled_text_color)
                        if window.right_click_menu_font is not None:
                            new_menu.config(font=window.right_click_menu_font)
                    else:
                        if element.Font is not None:
                            new_menu.config(font=element.Font)
                        if element.BackgroundColor not in (COLOR_SYSTEM_DEFAULT, None):
                            new_menu.config(bg=element.BackgroundColor)
                            new_menu.config(activeforeground=element.BackgroundColor)
                        if element.TextColor not in (COLOR_SYSTEM_DEFAULT, None):
                            new_menu.config(fg=element.TextColor)
                            new_menu.config(activebackground=element.TextColor)
                        if element.DisabledTextColor not in (COLOR_SYSTEM_DEFAULT, None):
                            new_menu.config(disabledforeground=element.DisabledTextColor)
                        if element.ItemFont is not None:
                            new_menu.config(font=element.ItemFont)
                    return_val = new_menu
                    pos = sub_menu_info[i].find(MENU_SHORTCUT_CHARACTER)
                    if pos != -1:
                        if pos < len(MENU_SHORTCUT_CHARACTER) or sub_menu_info[i][pos - len(MENU_SHORTCUT_CHARACTER)] != "\\":
                            sub_menu_info[i] = sub_menu_info[i][:pos] + sub_menu_info[i][pos + len(MENU_SHORTCUT_CHARACTER):]
                    if sub_menu_info[i][0] == MENU_DISABLED_CHARACTER:
                        top_menu.add_cascade(label=sub_menu_info[i][len(MENU_DISABLED_CHARACTER):], menu=new_menu,
                                             underline=pos, state='disabled')
                    else:
                        top_menu.add_cascade(label=sub_menu_info[i], menu=new_menu, underline=pos)
                    AddMenuItem(new_menu, sub_menu_info[i + 1], element, is_sub_menu=True, right_click_menu=right_click_menu)
                    i += 1  # skip the next one
                else:
                    AddMenuItem(top_menu, item, element, right_click_menu=right_click_menu)
            else:
                AddMenuItem(top_menu, item, element, right_click_menu=right_click_menu)
            i += 1
    return return_val


# 888    888      d8b          888
# 888    888      Y8P          888
# 888    888                   888
# 888888 888  888 888 88888b.  888888  .d88b.  888d888
# 888    888 .88P 888 888 "88b 888    d8P  Y8b 888P"
# 888    888888K  888 888  888 888    88888888 888
# Y88b.  888 "88b 888 888  888 Y88b.  Y8b.     888
#  "Y888 888  888 888 888  888  "Y888  "Y8888  888



# Chr0nic || This is probably *very* bad practice. But it works. Simple, but it works...
class VarHolder(object):
    canvas_holder = None

    def __init__(self):
        self.canvas_holder = None


# Also, to get to the point in the code where each element's widget is created, look for element + "p lacement" (without the space)


# ========================   TK CODE STARTS HERE ========================================= #
def _fixed_map(style, style_name, option, highlight_colors=(None, None)):
    # Fix for setting text colour for Tkinter 8.6.9
    # From: https://core.tcl.tk/tk/info/509cafafae

    default_map = [elm for elm in style.map("Treeview", query_opt=option) if '!' not in elm[0] and 'selected' not in elm[0]]
    custom_map = [elm for elm in style.map(style_name, query_opt=option) if '!' not in elm[0] and 'selected' not in elm[0]]
    if option == 'background':
        custom_map.append(('selected', highlight_colors[1] if highlight_colors[1] is not None else ALTERNATE_TABLE_AND_TREE_SELECTED_ROW_COLORS[1]))
    elif option == 'foreground':
        custom_map.append(('selected', highlight_colors[0] if highlight_colors[0] is not None else ALTERNATE_TABLE_AND_TREE_SELECTED_ROW_COLORS[0]))

    new_map = custom_map + default_map
    return new_map

def _add_right_click_menu(element, toplevel_form):
    if element.RightClickMenu == MENU_RIGHT_CLICK_DISABLED:
        return
    if element.RightClickMenu or toplevel_form.RightClickMenu:
        menu = element.RightClickMenu or toplevel_form.RightClickMenu
        top_menu = tk.Menu(toplevel_form.TKroot, tearoff=toplevel_form.right_click_menu_tearoff, tearoffcommand=element._tearoff_menu_callback)

        if toplevel_form.right_click_menu_background_color not in (COLOR_SYSTEM_DEFAULT, None):
            top_menu.config(bg=toplevel_form.right_click_menu_background_color)
        if toplevel_form.right_click_menu_text_color not in (COLOR_SYSTEM_DEFAULT, None):
            top_menu.config(fg=toplevel_form.right_click_menu_text_color)
        if toplevel_form.right_click_menu_disabled_text_color not in (COLOR_SYSTEM_DEFAULT, None):
            top_menu.config(disabledforeground=toplevel_form.right_click_menu_disabled_text_color)
        if toplevel_form.right_click_menu_font is not None:
            top_menu.config(font=toplevel_form.right_click_menu_font)

        if toplevel_form.right_click_menu_selected_colors[0] not in (COLOR_SYSTEM_DEFAULT, None):
            top_menu.config(activeforeground=toplevel_form.right_click_menu_selected_colors[0])
        if toplevel_form.right_click_menu_selected_colors[1] not in (COLOR_SYSTEM_DEFAULT, None):
            top_menu.config(activebackground=toplevel_form.right_click_menu_selected_colors[1])
        AddMenuItem(top_menu, menu[1], element, right_click_menu=True)
        element.TKRightClickMenu = top_menu
        if (running_mac()):
            element.Widget.bind('<ButtonRelease-2>', element._RightClickMenuCallback)
        else:
            element.Widget.bind('<ButtonRelease-3>', element._RightClickMenuCallback)


def _change_ttk_theme(style, theme_name):
    global ttk_theme_in_use
    if theme_name not in style.theme_names():
        _error_popup_with_traceback('You are trying to use TTK theme "{}"'.format(theme_name),
                                        'This is not legal for your system',
                                        'The valid themes to choose from are: {}'.format(', '.join(style.theme_names())))
        return False

    style.theme_use(theme_name)
    ttk_theme_in_use = theme_name
    return True


def _make_ttk_style_name(base_style, element, primary_style=False):
    Window._counter_for_ttk_widgets += 1
    style_name = str(Window._counter_for_ttk_widgets) + '___' + str(element.Key) + base_style
    if primary_style:
        element.ttk_style_name = style_name
    return style_name


def _make_ttk_scrollbar(element, orientation, window):
    """
    Creates a ttk scrollbar for elements as they are being added to the layout

    :param element:     The element
    :type element:      (Element)
    :param orientation: The orientation vertical ('v') or horizontal ('h')
    :type orientation:  (str)
    :param window:      The window containing the scrollbar
    :type window:       (Window)
    """

    style = ttk.Style()
    _change_ttk_theme(style, window.TtkTheme)
    if orientation[0].lower() == 'v':
        orient = 'vertical'
        style_name = _make_ttk_style_name('.Vertical.TScrollbar', element)
        # style_name_thumb = _make_ttk_style_name('.Vertical.TScrollbar.thumb', element)
        element.vsb_style = style
        element.vsb = ttk.Scrollbar(element.element_frame, orient=orient, command=element.Widget.yview, style=style_name)
        element.vsb_style_name = style_name
    else:
        orient = 'horizontal'
        style_name = _make_ttk_style_name('.Horizontal.TScrollbar', element)
        element.hsb_style = style
        element.hsb = ttk.Scrollbar(element.element_frame, orient=orient, command=element.Widget.xview, style=style_name)
        element.hsb_style_name = style_name

    # ------------------ Get the colors using heirarchy of element, window, options, settings ------------------
    # Trough Color
    if element.ttk_part_overrides.sbar_trough_color is not None:
        trough_color = element.ttk_part_overrides.sbar_trough_color
    elif window.ttk_part_overrides.sbar_trough_color is not None:
        trough_color = window.ttk_part_overrides.sbar_trough_color
    elif ttk_part_overrides_from_options.sbar_trough_color is not None:
        trough_color = ttk_part_overrides_from_options.sbar_trough_color
    else:
        trough_color = element.scroll_trough_color
    # Relief
    if element.ttk_part_overrides.sbar_relief is not None:
        scroll_relief = element.ttk_part_overrides.sbar_relief
    elif window.ttk_part_overrides.sbar_relief is not None:
        scroll_relief = window.ttk_part_overrides.sbar_relief
    elif ttk_part_overrides_from_options.sbar_relief is not None:
        scroll_relief = ttk_part_overrides_from_options.sbar_relief
    else:
        scroll_relief = element.scroll_relief
    # Frame Color
    if element.ttk_part_overrides.sbar_frame_color is not None:
        frame_color = element.ttk_part_overrides.sbar_frame_color
    elif window.ttk_part_overrides.sbar_frame_color is not None:
        frame_color = window.ttk_part_overrides.sbar_frame_color
    elif ttk_part_overrides_from_options.sbar_frame_color is not None:
        frame_color = ttk_part_overrides_from_options.sbar_frame_color
    else:
        frame_color = element.scroll_frame_color
    # Background Color
    if element.ttk_part_overrides.sbar_background_color is not None:
        background_color = element.ttk_part_overrides.sbar_background_color
    elif window.ttk_part_overrides.sbar_background_color is not None:
        background_color = window.ttk_part_overrides.sbar_background_color
    elif ttk_part_overrides_from_options.sbar_background_color is not None:
        background_color = ttk_part_overrides_from_options.sbar_background_color
    else:
        background_color = element.scroll_background_color
    # Arrow Color
    if element.ttk_part_overrides.sbar_arrow_color is not None:
        arrow_color = element.ttk_part_overrides.sbar_arrow_color
    elif window.ttk_part_overrides.sbar_arrow_color is not None:
        arrow_color = window.ttk_part_overrides.sbar_arrow_color
    elif ttk_part_overrides_from_options.sbar_arrow_color is not None:
        arrow_color = ttk_part_overrides_from_options.sbar_arrow_color
    else:
        arrow_color = element.scroll_arrow_color
    # Arrow Width
    if element.ttk_part_overrides.sbar_arrow_width is not None:
        arrow_width = element.ttk_part_overrides.sbar_arrow_width
    elif window.ttk_part_overrides.sbar_arrow_width is not None:
        arrow_width = window.ttk_part_overrides.sbar_arrow_width
    elif ttk_part_overrides_from_options.sbar_arrow_width is not None:
        arrow_width = ttk_part_overrides_from_options.sbar_arrow_width
    else:
        arrow_width = element.scroll_arrow_width
    # Scroll Width
    if element.ttk_part_overrides.sbar_width is not None:
        scroll_width = element.ttk_part_overrides.sbar_width
    elif window.ttk_part_overrides.sbar_width is not None:
        scroll_width = window.ttk_part_overrides.sbar_width
    elif ttk_part_overrides_from_options.sbar_width is not None:
        scroll_width = ttk_part_overrides_from_options.sbar_width
    else:
        scroll_width = element.scroll_width

    if trough_color not in (None, COLOR_SYSTEM_DEFAULT):
        style.configure(style_name, troughcolor=trough_color)

    if frame_color not in (None, COLOR_SYSTEM_DEFAULT):
        style.configure(style_name, framecolor=frame_color)
    if frame_color not in (None, COLOR_SYSTEM_DEFAULT):
        style.configure(style_name, bordercolor=frame_color)

    if (background_color not in (None, COLOR_SYSTEM_DEFAULT)) and \
        (arrow_color not in (None, COLOR_SYSTEM_DEFAULT)):
        style.map(style_name, background=[("selected", background_color), ('active', arrow_color), ('background', background_color), ('!focus', background_color)])
    if (background_color not in (None, COLOR_SYSTEM_DEFAULT)) and \
        (arrow_color not in (None, COLOR_SYSTEM_DEFAULT)):
        style.map(style_name, arrowcolor=[("selected", arrow_color), ('active', background_color), ('background', background_color),('!focus', arrow_color)])

    if scroll_width not in (None, COLOR_SYSTEM_DEFAULT):
        style.configure(style_name, width=scroll_width)
    if arrow_width not in (None, COLOR_SYSTEM_DEFAULT):
        style.configure(style_name, arrowsize=arrow_width)

    if scroll_relief not in (None, COLOR_SYSTEM_DEFAULT):
        style.configure(style_name, relief=scroll_relief)


# @_timeit
def PackFormIntoFrame(form, containing_frame, toplevel_form):
    """

    :param form:             a window class
    :type form:              (Window)
    :param containing_frame: ???
    :type containing_frame:  ???
    :param toplevel_form:    ???
    :type toplevel_form:     (Window)

    """

    # Old bindings
    def yscroll_old(event):
        try:
            if event.num == 5 or event.delta < 0:
                VarHolder.canvas_holder.yview_scroll(1, "unit")
            elif event.num == 4 or event.delta > 0:
                VarHolder.canvas_holder.yview_scroll(-1, "unit")
        except:
            pass

    def xscroll_old(event):
        try:
            if event.num == 5 or event.delta < 0:
                VarHolder.canvas_holder.xview_scroll(1, "unit")
            elif event.num == 4 or event.delta > 0:
                VarHolder.canvas_holder.xview_scroll(-1, "unit")
        except:
            pass

    # Chr0nic
    def testMouseHook2(em):
        combo = em.TKCombo
        combo.unbind_class("TCombobox", "<MouseWheel>")
        combo.unbind_class("TCombobox", "<ButtonPress-4>")
        combo.unbind_class("TCombobox", "<ButtonPress-5>")
        containing_frame.unbind_all('<4>')
        containing_frame.unbind_all('<5>')
        containing_frame.unbind_all("<MouseWheel>")
        containing_frame.unbind_all("<Shift-MouseWheel>")

    # Chr0nic
    def testMouseUnhook2(em):
        containing_frame.bind_all('<4>', yscroll_old, add="+")
        containing_frame.bind_all('<5>', yscroll_old, add="+")
        containing_frame.bind_all("<MouseWheel>", yscroll_old, add="+")
        containing_frame.bind_all("<Shift-MouseWheel>", xscroll_old, add="+")

    # Chr0nic
    def testMouseHook(em):
        containing_frame.unbind_all('<4>')
        containing_frame.unbind_all('<5>')
        containing_frame.unbind_all("<MouseWheel>")
        containing_frame.unbind_all("<Shift-MouseWheel>")

    # Chr0nic
    def testMouseUnhook(em):
        containing_frame.bind_all('<4>', yscroll_old, add="+")
        containing_frame.bind_all('<5>', yscroll_old, add="+")
        containing_frame.bind_all("<MouseWheel>", yscroll_old, add="+")
        containing_frame.bind_all("<Shift-MouseWheel>", xscroll_old, add="+")

    def _char_width_in_pixels(font):
        return tkinter.font.Font(font=font).measure('A')  # single character width

    def _char_height_in_pixels(font):
        return tkinter.font.Font(font=font).metrics('linespace')

    def _string_width_in_pixels(font, string):
        return tkinter.font.Font(font=font).measure(string)  # single character width


    def _add_grab(element):

        try:
            if form.Grab is True or element.Grab is True:
                # if something already about to the button, then don't do the grab stuff
                if '<Button-1>' not in element.Widget.bind():
                    element.Widget.bind("<ButtonPress-1>", toplevel_form._StartMoveGrabAnywhere)
                    element.Widget.bind("<ButtonRelease-1>", toplevel_form._StopMove)
                    element.Widget.bind("<B1-Motion>", toplevel_form._OnMotionGrabAnywhere)
                element.ParentRowFrame.bind("<ButtonPress-1>", toplevel_form._StartMoveGrabAnywhere)
                element.ParentRowFrame.bind("<ButtonRelease-1>", toplevel_form._StopMove)
                element.ParentRowFrame.bind("<B1-Motion>", toplevel_form._OnMotionGrabAnywhere)
                if element.Type == ELEM_TYPE_COLUMN:
                    element.TKColFrame.canvas.bind("<ButtonPress-1>", toplevel_form._StartMoveGrabAnywhere)
                    element.TKColFrame.canvas.bind("<ButtonRelease-1>", toplevel_form._StopMove)
                    element.TKColFrame.canvas.bind("<B1-Motion>", toplevel_form._OnMotionGrabAnywhere)
        except Exception as e:
            pass
            # print(e)

    def _add_right_click_menu_and_grab(element):
        if element.RightClickMenu == MENU_RIGHT_CLICK_DISABLED:
            return
        if element.Type == ELEM_TYPE_TAB_GROUP:  # unless everything disabled, then need to always set a right click menu for tabgroups
            if toplevel_form.RightClickMenu == MENU_RIGHT_CLICK_DISABLED:
                return
            menu = _MENU_RIGHT_CLICK_TABGROUP_DEFAULT
        else:
            menu = element.RightClickMenu or form.RightClickMenu or toplevel_form.RightClickMenu

        if menu:
            top_menu = tk.Menu(toplevel_form.TKroot, tearoff=toplevel_form.right_click_menu_tearoff, tearoffcommand=element._tearoff_menu_callback)

            if toplevel_form.right_click_menu_background_color not in (COLOR_SYSTEM_DEFAULT, None):
                top_menu.config(bg=toplevel_form.right_click_menu_background_color)
            if toplevel_form.right_click_menu_text_color not in (COLOR_SYSTEM_DEFAULT, None):
                top_menu.config(fg=toplevel_form.right_click_menu_text_color)
            if toplevel_form.right_click_menu_disabled_text_color not in (COLOR_SYSTEM_DEFAULT, None):
                top_menu.config(disabledforeground=toplevel_form.right_click_menu_disabled_text_color)
            if toplevel_form.right_click_menu_font is not None:
                top_menu.config(font=toplevel_form.right_click_menu_font)

            if toplevel_form.right_click_menu_selected_colors[0] not in (COLOR_SYSTEM_DEFAULT, None):
                top_menu.config(activeforeground=toplevel_form.right_click_menu_selected_colors[0])
            if toplevel_form.right_click_menu_selected_colors[1] not in (COLOR_SYSTEM_DEFAULT, None):
                top_menu.config(activebackground=toplevel_form.right_click_menu_selected_colors[1])
            AddMenuItem(top_menu, menu[1], element, right_click_menu=True)
            element.TKRightClickMenu = top_menu
            if toplevel_form.RightClickMenu:  # if the top level has a right click menu, then setup a callback for the Window itself
                if toplevel_form.TKRightClickMenu is None:
                    toplevel_form.TKRightClickMenu = top_menu
                    if (running_mac()):
                        toplevel_form.TKroot.bind('<ButtonRelease-2>', toplevel_form._RightClickMenuCallback)
                    else:
                        toplevel_form.TKroot.bind('<ButtonRelease-3>', toplevel_form._RightClickMenuCallback)
            if (running_mac()):
                element.Widget.bind('<ButtonRelease-2>', element._RightClickMenuCallback)
            else:
                element.Widget.bind('<ButtonRelease-3>', element._RightClickMenuCallback)
                try:
                    if element.Type == ELEM_TYPE_COLUMN:
                        element.TKColFrame.canvas.bind('<ButtonRelease-3>', element._RightClickMenuCallback)
                except:
                    pass
        _add_grab(element)

    def _add_expansion(element, row_should_expand, row_fill_direction):
        expand = True
        if element.expand_x and element.expand_y:
            fill = tk.BOTH
            row_fill_direction = tk.BOTH
            row_should_expand = True
        elif element.expand_x:
            fill = tk.X
            row_fill_direction = tk.X if row_fill_direction == tk.NONE else tk.BOTH if row_fill_direction == tk.Y else tk.X
        elif element.expand_y:
            fill = tk.Y
            row_fill_direction = tk.Y if row_fill_direction == tk.NONE else tk.BOTH if row_fill_direction == tk.X else tk.Y
            row_should_expand = True
        else:
            fill = tk.NONE
            expand = False
        return expand, fill, row_should_expand, row_fill_direction

    # --------------------------------------------------------------------------- #
    # ****************  Use FlexForm to build the tkinter window ********** ----- #
    # Building is done row by row.                                                #
    # WARNING - You can't use print in this function. If the user has rerouted   #
    # stdout then there will be an error saying the window isn't finalized        #
    # --------------------------------------------------------------------------- #
    ######################### LOOP THROUGH ROWS #########################
    # *********** -------  Loop through ROWS  ------- ***********#
    for row_num, flex_row in enumerate(form.Rows):
        ######################### LOOP THROUGH ELEMENTS ON ROW #########################
        # *********** -------  Loop through ELEMENTS  ------- ***********#
        # *********** Make TK Row                             ***********#
        tk_row_frame = tk.Frame(containing_frame)
        row_should_expand = False
        row_fill_direction = tk.NONE

        if form.ElementJustification is not None:
            row_justify = form.ElementJustification
        else:
            row_justify = 'l'

        for col_num, element in enumerate(flex_row):
            element.ParentRowFrame = tk_row_frame
            element.element_frame = None  # for elements that have a scrollbar too
            element.ParentForm = toplevel_form  # save the button's parent form object
            if toplevel_form.Font and (element.Font == DEFAULT_FONT or element.Font is None):
                font = toplevel_form.Font
            elif element.Font is not None:
                font = element.Font
            else:
                font = DEFAULT_FONT
            # -------  Determine Auto-Size setting on a cascading basis ------- #
            if element.AutoSizeText is not None:  # if element overide
                auto_size_text = element.AutoSizeText
            elif toplevel_form.AutoSizeText is not None:  # if form override
                auto_size_text = toplevel_form.AutoSizeText
            else:
                auto_size_text = DEFAULT_AUTOSIZE_TEXT
            element_type = element.Type
            # Set foreground color
            text_color = element.TextColor
            elementpad = element.Pad if element.Pad is not None else toplevel_form.ElementPadding
            # element.pad_used = elementpad  # store the value used back into the element
            # Determine Element size
            element_size = element.Size
            if (element_size == (None, None) and element_type not in (
                    ELEM_TYPE_BUTTON, ELEM_TYPE_BUTTONMENU)):  # user did not specify a size
                element_size = toplevel_form.DefaultElementSize
            elif (element_size == (None, None) and element_type in (ELEM_TYPE_BUTTON, ELEM_TYPE_BUTTONMENU)):
                element_size = toplevel_form.DefaultButtonElementSize
            else:
                auto_size_text = False  # if user has specified a size then it shouldn't autosize

            border_depth = toplevel_form.BorderDepth if toplevel_form.BorderDepth is not None else DEFAULT_BORDER_WIDTH
            try:
                if element.BorderWidth is not None:
                    border_depth = element.BorderWidth
            except:
                pass

            # -------------------------  COLUMN placement element  ------------------------- #
            if element_type == ELEM_TYPE_COLUMN:
                element = element  # type: Column
                # ----------------------- SCROLLABLE Column ----------------------
                if element.Scrollable:
                    element.Widget = element.TKColFrame = TkScrollableFrame(tk_row_frame, element.VerticalScrollOnly, element, toplevel_form)  # do not use yet!  not working
                    PackFormIntoFrame(element, element.TKColFrame.TKFrame, toplevel_form)
                    element.TKColFrame.TKFrame.update()
                    if element.Size == (None, None):  # if no size specified, use column width x column height/2
                        element.TKColFrame.canvas.config(width=element.TKColFrame.TKFrame.winfo_reqwidth() // element.size_subsample_width,
                                                         height=element.TKColFrame.TKFrame.winfo_reqheight() // element.size_subsample_height)
                    else:
                        element.TKColFrame.canvas.config(width=element.TKColFrame.TKFrame.winfo_reqwidth() // element.size_subsample_width,
                                                         height=element.TKColFrame.TKFrame.winfo_reqheight() // element.size_subsample_height)
                        if None not in (element.Size[0], element.Size[1]):
                            element.TKColFrame.canvas.config(width=element.Size[0], height=element.Size[1])
                        elif element.Size[1] is not None:
                            element.TKColFrame.canvas.config(height=element.Size[1])
                        elif element.Size[0] is not None:
                            element.TKColFrame.canvas.config(width=element.Size[0])
                    if not element.BackgroundColor in (None, COLOR_SYSTEM_DEFAULT):
                        element.TKColFrame.canvas.config(background=element.BackgroundColor)
                        element.TKColFrame.TKFrame.config(background=element.BackgroundColor, borderwidth=0, highlightthickness=0)
                        element.TKColFrame.config(background=element.BackgroundColor, borderwidth=0,
                                                  highlightthickness=0)
                # ----------------------- PLAIN Column ----------------------
                else:
                    if element.Size != (None, None):
                        element.Widget = element.TKColFrame = TkFixedFrame(tk_row_frame)
                        PackFormIntoFrame(element, element.TKColFrame.TKFrame, toplevel_form)
                        element.TKColFrame.TKFrame.update()
                        if None not in (element.Size[0], element.Size[1]):
                            element.TKColFrame.canvas.config(width=element.Size[0], height=element.Size[1])
                        elif element.Size[1] is not None:
                            element.TKColFrame.canvas.config(height=element.Size[1])
                        elif element.Size[0] is not None:
                            element.TKColFrame.canvas.config(width=element.Size[0])
                        if not element.BackgroundColor in (None, COLOR_SYSTEM_DEFAULT):
                            element.TKColFrame.canvas.config(background=element.BackgroundColor)
                            element.TKColFrame.TKFrame.config(background=element.BackgroundColor, borderwidth=0, highlightthickness=0)
                    else:
                        element.Widget = element.TKColFrame = tk.Frame(tk_row_frame)
                        PackFormIntoFrame(element, element.TKColFrame, toplevel_form)
                        if element.BackgroundColor not in (None, COLOR_SYSTEM_DEFAULT):
                            element.TKColFrame.config(background=element.BackgroundColor, borderwidth=0, highlightthickness=0)

                if element.Justification is None:
                    pass
                elif element.Justification.lower().startswith('l'):
                    row_justify = 'l'
                elif element.Justification.lower().startswith('c'):
                    row_justify = 'c'
                elif element.Justification.lower().startswith('r'):
                    row_justify = 'r'

                # anchor=tk.NW
                # side = tk.LEFT
                # row_justify = element.Justification

                # element.Widget = element.TKColFrame

                expand = True
                if element.expand_x and element.expand_y:
                    fill = tk.BOTH
                    row_fill_direction = tk.BOTH
                    row_should_expand = True
                elif element.expand_x:
                    fill = tk.X
                    row_fill_direction = tk.X
                elif element.expand_y:
                    fill = tk.Y
                    row_fill_direction = tk.Y
                    row_should_expand = True
                else:
                    fill = tk.NONE
                    expand = False

                if element.VerticalAlignment is not None:
                    anchor = tk.CENTER  # Default to center if a bad choice is made

                    if element.VerticalAlignment.lower().startswith('t'):
                        anchor = tk.N
                    if element.VerticalAlignment.lower().startswith('c'):
                        anchor = tk.CENTER
                    if element.VerticalAlignment.lower().startswith('b'):
                        anchor = tk.S
                    element.TKColFrame.pack(side=tk.LEFT, anchor=anchor, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)
                else:
                    element.TKColFrame.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)

                # element.TKColFrame.pack(side=side, padx=elementpad[0], pady=elementpad[1], expand=True, fill='both')
                if element.visible is False:
                    element._pack_forget_save_settings()
                    # element.TKColFrame.pack_forget()

                _add_right_click_menu_and_grab(element)
                # if element.Grab:
                #     element._grab_anywhere_on()
                # row_should_expand = True
            # -------------------------  Pane placement element  ------------------------- #
            if element_type == ELEM_TYPE_PANE:
                bd = element.BorderDepth if element.BorderDepth is not None else border_depth
                element.PanedWindow = element.Widget = tk.PanedWindow(tk_row_frame,
                                                                      orient=tk.VERTICAL if element.Orientation.startswith(
                                                                          'v') else tk.HORIZONTAL,
                                                                      borderwidth=bd,
                                                                      bd=bd,
                                                                      )
                if element.Relief is not None:
                    element.PanedWindow.configure(relief=element.Relief)
                element.PanedWindow.configure(handlesize=element.HandleSize)
                if element.ShowHandle:
                    element.PanedWindow.config(showhandle=True)
                if element.Size != (None, None):
                    element.PanedWindow.config(width=element.Size[0], height=element.Size[1])
                if element.BackgroundColor is not None and element.BackgroundColor != COLOR_SYSTEM_DEFAULT:
                    element.PanedWindow.configure(background=element.BackgroundColor)
                for pane in element.PaneList:
                    pane.Widget = pane.TKColFrame = tk.Frame(element.PanedWindow)
                    pane.ParentPanedWindow = element.PanedWindow
                    PackFormIntoFrame(pane, pane.TKColFrame, toplevel_form)
                    if pane.visible:
                        element.PanedWindow.add(pane.TKColFrame)
                    if pane.BackgroundColor != COLOR_SYSTEM_DEFAULT and pane.BackgroundColor is not None:
                        pane.TKColFrame.configure(background=pane.BackgroundColor,
                                                  highlightbackground=pane.BackgroundColor,
                                                  highlightcolor=pane.BackgroundColor)
                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                element.PanedWindow.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)
                # element.PanedWindow.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=True, fill='both')
                if element.visible is False:
                    element._pack_forget_save_settings()
                    # element.PanedWindow.pack_forget()
            # -------------------------  TEXT placement element  ------------------------- #
            elif element_type == ELEM_TYPE_TEXT:
                # auto_size_text = element.AutoSizeText
                element = element  # type: Text
                display_text = element.DisplayText  # text to display
                if auto_size_text is False:
                    width, height = element_size
                else:
                    width, height = None, None

                # ---===--- LABEL widget create and place --- #
                element = element  # type: Text
                bd = element.BorderWidth if element.BorderWidth is not None else border_depth
                stringvar = tk.StringVar()
                element.TKStringVar = stringvar
                stringvar.set(str(display_text))
                if auto_size_text:
                    width = 0
                if element.Justification is not None:
                    justification = element.Justification
                elif toplevel_form.TextJustification is not None:
                    justification = toplevel_form.TextJustification
                else:
                    justification = DEFAULT_TEXT_JUSTIFICATION
                justify = tk.LEFT if justification.startswith('l') else tk.CENTER if justification.startswith('c') else tk.RIGHT
                anchor = tk.NW if justification.startswith('l') else tk.N if justification.startswith('c') else tk.NE
                tktext_label = element.Widget = tk.Label(tk_row_frame, textvariable=stringvar, width=width,
                                                         height=height, justify=justify, bd=bd, font=font)
                # Set wrap-length for text (in PIXELS) == PAIN IN THE ASS
                wraplen = tktext_label.winfo_reqwidth()  # width of widget in Pixels
                if auto_size_text or (not auto_size_text and height == 1):  # if just 1 line high, ensure no wrap happens
                    wraplen = 0
                tktext_label.configure(anchor=anchor, wraplen=wraplen)  # set wrap to width of widget
                if element.Relief is not None:
                    tktext_label.configure(relief=element.Relief)
                if element.BackgroundColor is not None and element.BackgroundColor != COLOR_SYSTEM_DEFAULT:
                    tktext_label.configure(background=element.BackgroundColor)
                if element.TextColor != COLOR_SYSTEM_DEFAULT and element.TextColor is not None:
                    tktext_label.configure(fg=element.TextColor)
                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                tktext_label.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)
                if element.visible is False:
                    element._pack_forget_save_settings()
                    # tktext_label.pack_forget()
                element.TKText = tktext_label
                if element.ClickSubmits:
                    tktext_label.bind('<Button-1>', element._TextClickedHandler)
                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(element.TKText, text=element.Tooltip, timeout=DEFAULT_TOOLTIP_TIME)
                _add_right_click_menu_and_grab(element)
                if element.Grab:
                    element._grab_anywhere_on()
                if element.Key == var_YtKRpq7:
                    element.set_cursor('hand1')
            # -------------------------  BUTTON placement element non-ttk version  ------------------------- #
            elif (element_type == ELEM_TYPE_BUTTON and element.UseTtkButtons is False) or \
                    (element_type == ELEM_TYPE_BUTTON and element.UseTtkButtons is not True and toplevel_form.UseTtkButtons is not True):
                element = element  # type: Button
                element.UseTtkButtons = False  # indicate that ttk button was not used
                stringvar = tk.StringVar()
                element.TKStringVar = stringvar
                element.Location = (row_num, col_num)
                btext = element.ButtonText
                btype = element.BType
                if element.AutoSizeButton is not None:
                    auto_size = element.AutoSizeButton
                else:
                    auto_size = toplevel_form.AutoSizeButtons
                if auto_size is False or element.Size[0] is not None:
                    width, height = element_size
                else:
                    width = 0
                    height = toplevel_form.DefaultButtonElementSize[1]
                if element.ButtonColor != (None, None) and element.ButtonColor != DEFAULT_BUTTON_COLOR:
                    bc = element.ButtonColor
                elif toplevel_form.ButtonColor != (None, None) and toplevel_form.ButtonColor != DEFAULT_BUTTON_COLOR:
                    bc = toplevel_form.ButtonColor
                else:
                    bc = DEFAULT_BUTTON_COLOR

                bd = element.BorderWidth
                pos = -1
                if DEFAULT_USE_BUTTON_SHORTCUTS is True:
                    pos = btext.find(MENU_SHORTCUT_CHARACTER)
                    if pos != -1:
                        if pos < len(MENU_SHORTCUT_CHARACTER) or btext[pos - len(MENU_SHORTCUT_CHARACTER)] != "\\":
                            btext = btext[:pos] + btext[pos + len(MENU_SHORTCUT_CHARACTER):]
                        else:
                            btext = btext.replace('\\'+MENU_SHORTCUT_CHARACTER, MENU_SHORTCUT_CHARACTER)
                            pos = -1
                tkbutton = element.Widget = tk.Button(tk_row_frame, text=btext, width=width, height=height, justify=tk.CENTER, bd=bd, font=font)
                if pos != -1:
                    tkbutton.config(underline=pos)
                try:
                    if btype != BUTTON_TYPE_REALTIME:
                        tkbutton.config( command=element.ButtonCallBack)

                    else:
                        tkbutton.bind('<ButtonRelease-1>', element.ButtonReleaseCallBack)
                        tkbutton.bind('<ButtonPress-1>', element.ButtonPressCallBack)
                    if bc != (None, None) and COLOR_SYSTEM_DEFAULT not in bc:
                        tkbutton.config(foreground=bc[0], background=bc[1])
                    else:
                        if bc[0] != COLOR_SYSTEM_DEFAULT:
                            tkbutton.config(foreground=bc[0])
                        if bc[1] != COLOR_SYSTEM_DEFAULT:
                            tkbutton.config(background=bc[1])
                except Exception as e:
                    _error_popup_with_traceback('Button has a problem....',
                                                'The traceback information will not show the line in your layout with the problem, but it does tell you which window.',
                                                'Error {}'.format(e),
                                                # 'Button Text: {}'.format(btext),
                                                # 'Button key: {}'.format(element.Key),
                                                # 'Color string: {}'.format(bc),
                                                "Parent Window's Title: {}".format(toplevel_form.Title))

                if bd == 0 and not running_mac():
                    tkbutton.config(relief=tk.FLAT)

                element.TKButton = tkbutton  # not used yet but save the TK button in case
                if elementpad[0] == 0 or elementpad[1] == 0:
                    tkbutton.config(highlightthickness=0)

                ## -------------- TK Button With Image -------------- ##
                if element.ImageFilename:  # if button has an image on it
                    tkbutton.config(highlightthickness=0)
                    try:
                        photo = tk.PhotoImage(file=element.ImageFilename)
                        if element.ImageSubsample:
                            photo = photo.subsample(element.ImageSubsample)
                        if element.zoom:
                            photo = photo.zoom(element.zoom)
                        if element.ImageSize != (None, None):
                            width, height = element.ImageSize
                        else:
                            width, height = photo.width(), photo.height()
                    except Exception as e:
                        _error_popup_with_traceback('Button Element error {}'.format(e), 'Image filename: {}'.format(element.ImageFilename),
                                                     'NOTE - file format must be PNG or GIF!',
                                                    'Button element key: {}'.format(element.Key),
                                                    "Parent Window's Title: {}".format(toplevel_form.Title))
                    tkbutton.config(image=photo, compound=tk.CENTER, width=width, height=height)
                    tkbutton.image = photo
                if element.ImageData:  # if button has an image on it
                    tkbutton.config(highlightthickness=0)
                    try:
                        photo = tk.PhotoImage(data=element.ImageData)
                        if element.ImageSubsample:
                            photo = photo.subsample(element.ImageSubsample)
                        if element.zoom:
                            photo = photo.zoom(element.zoom)
                        if element.ImageSize != (None, None):
                            width, height = element.ImageSize
                        else:
                            width, height = photo.width(), photo.height()
                        tkbutton.config(image=photo, compound=tk.CENTER, width=width, height=height)
                        tkbutton.image = photo
                    except Exception as e:
                        _error_popup_with_traceback('Button Element error {}'.format(e),
                                                    'Problem using BASE64 Image data Image Susample',
                                                    'Buton element key: {}'.format(element.Key),
                                                    "Parent Window's Title: {}".format(toplevel_form.Title))

                if width != 0:
                    wraplen = width * _char_width_in_pixels(font)
                    tkbutton.configure(wraplength=wraplen)  # set wrap to width of widget
                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)

                tkbutton.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)
                if element.visible is False:
                    element._pack_forget_save_settings()
                    # tkbutton.pack_forget()
                if element.BindReturnKey:
                    element.TKButton.bind('<Return>', element._ReturnKeyHandler)
                if element.Focus is True or (toplevel_form.UseDefaultFocus and not toplevel_form.FocusSet):
                    toplevel_form.FocusSet = True
                    element.TKButton.bind('<Return>', element._ReturnKeyHandler)
                    element.TKButton.focus_set()
                    toplevel_form.TKroot.focus_force()
                if element.Disabled is True:
                    element.TKButton['state'] = 'disabled'
                if element.DisabledButtonColor != (None, None) and element.DisabledButtonColor != (COLOR_SYSTEM_DEFAULT, COLOR_SYSTEM_DEFAULT):
                    if element.DisabledButtonColor[0] not in (None, COLOR_SYSTEM_DEFAULT):
                        element.TKButton['disabledforeground'] = element.DisabledButtonColor[0]
                if element.MouseOverColors[1] not in (COLOR_SYSTEM_DEFAULT, None):
                    tkbutton.config(activebackground=element.MouseOverColors[1])
                if element.MouseOverColors[0] not in (COLOR_SYSTEM_DEFAULT, None):
                    tkbutton.config(activeforeground=element.MouseOverColors[0])

                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(element.TKButton, text=element.Tooltip,
                                                    timeout=DEFAULT_TOOLTIP_TIME)
                try:
                    if element.HighlightColors[1] != COLOR_SYSTEM_DEFAULT:
                        tkbutton.config(highlightbackground=element.HighlightColors[1])
                    if element.HighlightColors[0] != COLOR_SYSTEM_DEFAULT:
                        tkbutton.config(highlightcolor=element.HighlightColors[0])
                except Exception as e:
                    _error_popup_with_traceback('Button Element error {}'.format(e),
                                                'Button element key: {}'.format(element.Key),
                                                'Button text: {}'.format(btext),
                                                'Has a bad highlight color {}'.format(element.HighlightColors),
                                                "Parent Window's Title: {}".format(toplevel_form.Title))
                    # print('Button with text: ', btext, 'has a bad highlight color', element.HighlightColors)
                _add_right_click_menu_and_grab(element)

            # -------------------------  BUTTON placement element ttk version ------------------------- #
            elif element_type == ELEM_TYPE_BUTTON:
                element = element  # type: Button
                element.UseTtkButtons = True  # indicate that ttk button was used
                stringvar = tk.StringVar()
                element.TKStringVar = stringvar
                element.Location = (row_num, col_num)
                btext = element.ButtonText
                pos = -1
                if DEFAULT_USE_BUTTON_SHORTCUTS is True:
                    pos = btext.find(MENU_SHORTCUT_CHARACTER)
                    if pos != -1:
                        if pos < len(MENU_SHORTCUT_CHARACTER) or btext[pos - len(MENU_SHORTCUT_CHARACTER)] != "\\":
                            btext = btext[:pos] + btext[pos + len(MENU_SHORTCUT_CHARACTER):]
                        else:
                            btext = btext.replace('\\'+MENU_SHORTCUT_CHARACTER, MENU_SHORTCUT_CHARACTER)
                            pos = -1
                btype = element.BType
                if element.AutoSizeButton is not None:
                    auto_size = element.AutoSizeButton
                else:
                    auto_size = toplevel_form.AutoSizeButtons
                if auto_size is False or element.Size[0] is not None:
                    width, height = element_size
                else:
                    width = 0
                    height = toplevel_form.DefaultButtonElementSize[1]
                if element.ButtonColor != (None, None) and element.ButtonColor != COLOR_SYSTEM_DEFAULT:
                    bc = element.ButtonColor
                elif toplevel_form.ButtonColor != (None, None) and toplevel_form.ButtonColor != COLOR_SYSTEM_DEFAULT:
                    bc = toplevel_form.ButtonColor
                else:
                    bc = DEFAULT_BUTTON_COLOR
                bd = element.BorderWidth
                tkbutton = element.Widget = ttk.Button(tk_row_frame, text=btext, width=width)
                if pos != -1:
                    tkbutton.config(underline=pos)
                if btype != BUTTON_TYPE_REALTIME:
                    tkbutton.config(command=element.ButtonCallBack)
                else:
                    tkbutton.bind('<ButtonRelease-1>', element.ButtonReleaseCallBack)
                    tkbutton.bind('<ButtonPress-1>', element.ButtonPressCallBack)
                style_name = _make_ttk_style_name('.TButton', element, primary_style=True)
                button_style = ttk.Style()
                element.ttk_style = button_style
                _change_ttk_theme(button_style, toplevel_form.TtkTheme)
                button_style.configure(style_name, font=font)

                if bc != (None, None) and COLOR_SYSTEM_DEFAULT not in bc:
                    button_style.configure(style_name, foreground=bc[0], background=bc[1])
                elif bc[0] != COLOR_SYSTEM_DEFAULT:
                    button_style.configure(style_name, foreground=bc[0])
                elif bc[1] != COLOR_SYSTEM_DEFAULT:
                    button_style.configure(style_name, background=bc[1])

                if bd == 0 and not running_mac():
                    button_style.configure(style_name, relief=tk.FLAT)
                    button_style.configure(style_name, borderwidth=0)
                else:
                    button_style.configure(style_name, borderwidth=bd)
                button_style.configure(style_name, justify=tk.CENTER)

                if element.MouseOverColors[1] not in (COLOR_SYSTEM_DEFAULT, None):
                    button_style.map(style_name, background=[('active', element.MouseOverColors[1])])
                if element.MouseOverColors[0] not in (COLOR_SYSTEM_DEFAULT, None):
                    button_style.map(style_name, foreground=[('active', element.MouseOverColors[0])])

                if element.DisabledButtonColor[0] not in (COLOR_SYSTEM_DEFAULT, None):
                    button_style.map(style_name, foreground=[('disabled', element.DisabledButtonColor[0])])
                if element.DisabledButtonColor[1] not in (COLOR_SYSTEM_DEFAULT, None):
                    button_style.map(style_name, background=[('disabled', element.DisabledButtonColor[1])])

                if height > 1:
                    button_style.configure(style_name, padding=height * _char_height_in_pixels(font))  # should this be height instead?
                if width != 0:
                    wraplen = width * _char_width_in_pixels(font) # width of widget in Pixels
                    button_style.configure(style_name, wraplength=wraplen)  # set wrap to width of widget

                ## -------------- TTK Button With Image -------------- ##
                if element.ImageFilename:  # if button has an image on it
                    button_style.configure(style_name, borderwidth=0)
                    # tkbutton.configure(highlightthickness=0)
                    photo = tk.PhotoImage(file=element.ImageFilename)
                    if element.ImageSubsample:
                        photo = photo.subsample(element.ImageSubsample)
                    if element.zoom:
                        photo = photo.zoom(element.zoom)
                    if element.ImageSize != (None, None):
                        width, height = element.ImageSize
                    else:
                        width, height = photo.width(), photo.height()
                    button_style.configure(style_name, image=photo, compound=tk.CENTER, width=width, height=height)
                    tkbutton.image = photo
                if element.ImageData:  # if button has an image on it
                    # tkbutton.configure(highlightthickness=0)
                    button_style.configure(style_name, borderwidth=0)

                    photo = tk.PhotoImage(data=element.ImageData)
                    if element.ImageSubsample:
                        photo = photo.subsample(element.ImageSubsample)
                    if element.zoom:
                        photo = photo.zoom(element.zoom)
                    if element.ImageSize != (None, None):
                        width, height = element.ImageSize
                    else:
                        width, height = photo.width(), photo.height()
                    button_style.configure(style_name, image=photo, compound=tk.CENTER, width=width, height=height)
                    # tkbutton.configure(image=photo, compound=tk.CENTER, width=width, height=height)
                    tkbutton.image = photo

                element.TKButton = tkbutton  # not used yet but save the TK button in case
                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                tkbutton.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)
                if element.visible is False:
                    element._pack_forget_save_settings()
                    # tkbutton.pack_forget()
                if element.BindReturnKey:
                    element.TKButton.bind('<Return>', element._ReturnKeyHandler)
                if element.Focus is True or (toplevel_form.UseDefaultFocus and not toplevel_form.FocusSet):
                    toplevel_form.FocusSet = True
                    element.TKButton.bind('<Return>', element._ReturnKeyHandler)
                    element.TKButton.focus_set()
                    toplevel_form.TKroot.focus_force()
                if element.Disabled is True:
                    element.TKButton['state'] = 'disabled'

                tkbutton.configure(style=style_name)  # IMPORTANT!  Apply the style to the button!
                _add_right_click_menu_and_grab(element)

                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(element.TKButton, text=element.Tooltip,
                                                    timeout=DEFAULT_TOOLTIP_TIME)
            # -------------------------  BUTTONMENU placement element  ------------------------- #
            elif element_type == ELEM_TYPE_BUTTONMENU:
                element = element  # type: ButtonMenu
                element.Location = (row_num, col_num)
                btext = element.ButtonText
                if element.AutoSizeButton is not None:
                    auto_size = element.AutoSizeButton
                else:
                    auto_size = toplevel_form.AutoSizeButtons
                if auto_size is False or element.Size[0] is not None:
                    width, height = element_size
                else:
                    width = 0
                    height = toplevel_form.DefaultButtonElementSize[1]
                if element.ButtonColor != (None, None) and element.ButtonColor != DEFAULT_BUTTON_COLOR:
                    bc = element.ButtonColor
                elif toplevel_form.ButtonColor != (None, None) and toplevel_form.ButtonColor != DEFAULT_BUTTON_COLOR:
                    bc = toplevel_form.ButtonColor
                else:
                    bc = DEFAULT_BUTTON_COLOR
                bd = element.BorderWidth
                if element.ItemFont is None:
                    element.ItemFont = font
                tkbutton = element.Widget = tk.Menubutton(tk_row_frame, text=btext, width=width, height=height, justify=tk.LEFT, bd=bd, font=font)
                element.TKButtonMenu = tkbutton
                if bc != (None, None) and bc != COLOR_SYSTEM_DEFAULT and bc[1] != COLOR_SYSTEM_DEFAULT:
                    tkbutton.config(foreground=bc[0], background=bc[1])
                    tkbutton.config(activebackground=bc[0])
                    tkbutton.config(activeforeground=bc[1])
                elif bc[0] != COLOR_SYSTEM_DEFAULT:
                    tkbutton.config(foreground=bc[0])
                    tkbutton.config(activebackground=bc[0])
                if bd == 0 and not running_mac():
                    tkbutton.config(relief=RELIEF_FLAT)
                elif bd != 0:
                    tkbutton.config(relief=RELIEF_RAISED)

                element.TKButton = tkbutton  # not used yet but save the TK button in case
                wraplen = tkbutton.winfo_reqwidth()  # width of widget in Pixels
                if element.ImageFilename:  # if button has an image on it
                    photo = tk.PhotoImage(file=element.ImageFilename)
                    if element.ImageSubsample:
                        photo = photo.subsample(element.ImageSubsample)
                    if element.zoom:
                        photo = photo.zoom(element.zoom)
                    if element.ImageSize != (None, None):
                        width, height = element.ImageSize
                    else:
                        width, height = photo.width(), photo.height()
                    tkbutton.config(image=photo, compound=tk.CENTER, width=width, height=height)
                    tkbutton.image = photo
                if element.ImageData:  # if button has an image on it
                    photo = tk.PhotoImage(data=element.ImageData)
                    if element.ImageSubsample:
                        photo = photo.subsample(element.ImageSubsample)
                    if element.zoom:
                        photo = photo.zoom(element.zoom)
                    if element.ImageSize != (None, None):
                        width, height = element.ImageSize
                    else:
                        width, height = photo.width(), photo.height()
                    tkbutton.config(image=photo, compound=tk.CENTER, width=width, height=height)
                    tkbutton.image = photo
                if width != 0:
                    tkbutton.configure(wraplength=wraplen + 10)  # set wrap to width of widget
                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                tkbutton.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)

                menu_def = element.MenuDefinition

                element.TKMenu = top_menu = tk.Menu(tkbutton, tearoff=element.Tearoff, font=element.ItemFont, tearoffcommand=element._tearoff_menu_callback)

                if element.BackgroundColor not in (COLOR_SYSTEM_DEFAULT, None):
                    top_menu.config(bg=element.BackgroundColor)
                    top_menu.config(activeforeground=element.BackgroundColor)
                if element.TextColor not in (COLOR_SYSTEM_DEFAULT, None):
                    top_menu.config(fg=element.TextColor)
                    top_menu.config(activebackground=element.TextColor)
                if element.DisabledTextColor not in (COLOR_SYSTEM_DEFAULT, None):
                    top_menu.config(disabledforeground=element.DisabledTextColor)
                if element.ItemFont is not None:
                    top_menu.config(font=element.ItemFont)

                AddMenuItem(top_menu, menu_def[1], element)
                if elementpad[0] == 0 or elementpad[1] == 0:
                    tkbutton.config(highlightthickness=0)
                tkbutton.configure(menu=top_menu)
                element.TKMenu = top_menu
                if element.visible is False:
                    element._pack_forget_save_settings()
                    # tkbutton.pack_forget()
                if element.Disabled == True:
                    element.TKButton['state'] = 'disabled'
                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(element.TKButton, text=element.Tooltip, timeout=DEFAULT_TOOLTIP_TIME)

            # -------------------------  INPUT placement element  ------------------------- #
            elif element_type == ELEM_TYPE_INPUT_TEXT:
                element = element  # type: InputText
                default_text = element.DefaultText
                element.TKStringVar = tk.StringVar()
                element.TKStringVar.set(default_text)
                show = element.PasswordCharacter if element.PasswordCharacter else ""
                bd = border_depth
                if element.Justification is not None:
                    justification = element.Justification
                else:
                    justification = DEFAULT_TEXT_JUSTIFICATION
                justify = tk.LEFT if justification.startswith('l') else tk.CENTER if justification.startswith('c') else tk.RIGHT
                # anchor = tk.NW if justification == 'left' else tk.N if justification == 'center' else tk.NE
                element.TKEntry = element.Widget = tk.Entry(tk_row_frame, width=element_size[0],
                                                            textvariable=element.TKStringVar, bd=bd,
                                                            font=font, show=show, justify=justify)
                if element.ChangeSubmits:
                    element.TKEntry.bind('<Key>', element._KeyboardHandler)
                element.TKEntry.bind('<Return>', element._ReturnKeyHandler)

                if element.BackgroundColor not in (None, COLOR_SYSTEM_DEFAULT):
                    element.TKEntry.configure(background=element.BackgroundColor, selectforeground=element.BackgroundColor)

                if text_color not in (None, COLOR_SYSTEM_DEFAULT):
                    element.TKEntry.configure(fg=text_color, selectbackground=text_color)
                    element.TKEntry.config(insertbackground=text_color)
                if element.selected_background_color not in (None, COLOR_SYSTEM_DEFAULT):
                    element.TKEntry.configure(selectbackground=element.selected_background_color)
                if element.selected_text_color not in (None, COLOR_SYSTEM_DEFAULT):
                    element.TKEntry.configure(selectforeground=element.selected_text_color)
                if element.disabled_readonly_background_color not in (None, COLOR_SYSTEM_DEFAULT):
                    element.TKEntry.config(readonlybackground=element.disabled_readonly_background_color)
                if element.disabled_readonly_text_color not in (None, COLOR_SYSTEM_DEFAULT) and element.Disabled:
                    element.TKEntry.config(fg=element.disabled_readonly_text_color)

                element.Widget.config(highlightthickness=0)
                # element.pack_keywords = {'side':tk.LEFT, 'padx':elementpad[0], 'pady':elementpad[1], 'expand':False, 'fill':tk.NONE }
                # element.TKEntry.pack(**element.pack_keywords)
                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                element.TKEntry.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)
                if element.visible is False:
                    element._pack_forget_save_settings()
                    # element.TKEntry.pack_forget()
                if element.Focus is True or (toplevel_form.UseDefaultFocus and not toplevel_form.FocusSet):
                    toplevel_form.FocusSet = True
                    element.TKEntry.focus_set()
                if element.Disabled:
                    element.TKEntry['state'] = 'readonly' if element.UseReadonlyForDisable else 'disabled'
                if element.ReadOnly:
                    element.TKEntry['state'] = 'readonly'

                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(element.TKEntry, text=element.Tooltip, timeout=DEFAULT_TOOLTIP_TIME)
                _add_right_click_menu_and_grab(element)

                # row_should_expand = True

            # -------------------------  COMBO placement element  ------------------------- #
            elif element_type == ELEM_TYPE_INPUT_COMBO:
                element = element  # type: Combo
                max_line_len = max([len(str(l)) for l in element.Values]) if len(element.Values) else 0
                if auto_size_text is False:
                    width = element_size[0]
                else:
                    width = max_line_len + 1
                element.TKStringVar = tk.StringVar()
                style_name = _make_ttk_style_name('.TCombobox', element, primary_style=True)
                combostyle = ttk.Style()
                element.ttk_style = combostyle
                _change_ttk_theme(combostyle, toplevel_form.TtkTheme)

                # Creates a unique name for each field element(Sure there is a better way to do this)
                # unique_field = _make_ttk_style_name('.TCombobox.field', element)

                # Set individual widget options
                try:
                    if element.TextColor not in (None, COLOR_SYSTEM_DEFAULT):
                        combostyle.configure(style_name, foreground=element.TextColor)
                        combostyle.configure(style_name, selectbackground=element.TextColor)
                        combostyle.configure(style_name, insertcolor=element.TextColor)
                        combostyle.map(style_name, fieldforeground=[('readonly', element.TextColor)])
                    if element.BackgroundColor not in (None, COLOR_SYSTEM_DEFAULT):
                        combostyle.configure(style_name, selectforeground=element.BackgroundColor)
                        combostyle.map(style_name, fieldbackground=[('readonly', element.BackgroundColor)])
                        combostyle.configure(style_name, fieldbackground=element.BackgroundColor)

                    if element.button_arrow_color not in (None, COLOR_SYSTEM_DEFAULT):
                        combostyle.configure(style_name, arrowcolor=element.button_arrow_color)
                    if element.button_background_color not in (None, COLOR_SYSTEM_DEFAULT):
                        combostyle.configure(style_name, background=element.button_background_color)
                    if element.Readonly is True:
                        if element.TextColor not in (None, COLOR_SYSTEM_DEFAULT):
                            combostyle.configure(style_name, selectforeground=element.TextColor)
                        if element.BackgroundColor not in (None, COLOR_SYSTEM_DEFAULT):
                            combostyle.configure(style_name, selectbackground=element.BackgroundColor)


                except Exception as e:
                    _error_popup_with_traceback('Combo Element error {}'.format(e),
                                                'Combo element key: {}'.format(element.Key),
                                                'One of your colors is bad. Check the text, background, button background and button arrow colors',
                                                "Parent Window's Title: {}".format(toplevel_form.Title))

                # Strange code that is needed to set the font for the drop-down list
                element._dropdown_newfont = tkinter.font.Font(font=font)
                tk_row_frame.option_add("*TCombobox*Listbox*Font", element._dropdown_newfont)

                element.TKCombo = element.Widget = ttk.Combobox(tk_row_frame, width=width, textvariable=element.TKStringVar, font=font, style=style_name)

                # make tcl call to deal with colors for the drop-down formatting
                try:
                    if element.BackgroundColor not in (None, COLOR_SYSTEM_DEFAULT) and \
                        element.TextColor not in (None, COLOR_SYSTEM_DEFAULT):
                        element.Widget.tk.eval(
                    '[ttk::combobox::PopdownWindow {}].f.l configure -foreground {} -background {} -selectforeground {} -selectbackground {}'.format(element.Widget, element.TextColor, element.BackgroundColor, element.BackgroundColor, element.TextColor))
                except Exception as e:
                    pass    # going to let this one slide

                # Chr0nic
                element.TKCombo.bind("<Enter>", lambda event, em=element: testMouseHook2(em))
                element.TKCombo.bind("<Leave>", lambda event, em=element: testMouseUnhook2(em))

                if toplevel_form.UseDefaultFocus and not toplevel_form.FocusSet:
                    toplevel_form.FocusSet = True
                    element.TKCombo.focus_set()

                if element.Size[1] != 1 and element.Size[1] is not None:
                    element.TKCombo.configure(height=element.Size[1])
                element.TKCombo['values'] = element.Values
                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                element.TKCombo.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)
                if element.visible is False:
                    element._pack_forget_save_settings()
                    # element.TKCombo.pack_forget()
                if element.DefaultValue is not None:
                    element.TKCombo.set(element.DefaultValue)
                    # for i, v in enumerate(element.Values):
                    #     if v == element.DefaultValue:
                    #         element.TKCombo.current(i)
                    #         break
                # elif element.Values:
                #     element.TKCombo.current(0)
                if element.ChangeSubmits:
                    element.TKCombo.bind('<<ComboboxSelected>>', element._ComboboxSelectHandler)
                if element.BindReturnKey:
                    element.TKCombo.bind('<Return>', element._ComboboxSelectHandler)
                if element.enable_per_char_events:
                    element.TKCombo.bind('<Key>', element._KeyboardHandler)
                if element.Readonly:
                    element.TKCombo['state'] = 'readonly'
                if element.Disabled is True:  # note overrides readonly if disabled
                    element.TKCombo['state'] = 'disabled'
                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(element.TKCombo, text=element.Tooltip, timeout=DEFAULT_TOOLTIP_TIME)
                _add_right_click_menu_and_grab(element)

            # -------------------------  OPTIONMENU placement Element (Like ComboBox but different) element  ------------------------- #
            elif element_type == ELEM_TYPE_INPUT_OPTION_MENU:
                element = element  # type: OptionMenu
                max_line_len = max([len(str(l)) for l in element.Values])
                if auto_size_text is False:
                    width = element_size[0]
                else:
                    width = max_line_len
                element.TKStringVar = tk.StringVar()
                if element.DefaultValue:
                    element.TKStringVar.set(element.DefaultValue)
                element.TKOptionMenu = element.Widget = tk.OptionMenu(tk_row_frame, element.TKStringVar, *element.Values)
                element.TKOptionMenu.config(highlightthickness=0, font=font, width=width)
                element.TKOptionMenu['menu'].config(font=font)
                element.TKOptionMenu.config(borderwidth=border_depth)
                if element.BackgroundColor is not None and element.BackgroundColor != COLOR_SYSTEM_DEFAULT:
                    element.TKOptionMenu.configure(background=element.BackgroundColor)
                    element.TKOptionMenu['menu'].config(background=element.BackgroundColor)
                if element.TextColor != COLOR_SYSTEM_DEFAULT and element.TextColor is not None:
                    element.TKOptionMenu.configure(fg=element.TextColor)
                    element.TKOptionMenu['menu'].config(fg=element.TextColor)
                if element.ChangeSubmits:
                    element.TKStringVar.trace('w', element._OptionMenuSelectHandler)
                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                element.TKOptionMenu.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)
                if element.visible is False:
                    element._pack_forget_save_settings()
                    # element.TKOptionMenu.pack_forget()
                if element.Disabled == True:
                    element.TKOptionMenu['state'] = 'disabled'
                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(element.TKOptionMenu, text=element.Tooltip,
                                                    timeout=DEFAULT_TOOLTIP_TIME)
            # -------------------------  LISTBOX placement element  ------------------------- #
            elif element_type == ELEM_TYPE_INPUT_LISTBOX:
                element = element  # type: Listbox
                max_line_len = max([len(str(l)) for l in element.Values]) if len(element.Values) else 0
                if auto_size_text is False:
                    width = element_size[0]
                else:
                    width = max_line_len
                element_frame = tk.Frame(tk_row_frame)
                element.element_frame = element_frame

                justification = tk.LEFT
                if element.justification is not None:
                    if element.justification.startswith('l'):
                        justification = tk.LEFT
                    elif element.justification.startswith('r'):
                        justification = tk.RIGHT
                    elif element.justification.startswith('c'):
                        justification = tk.CENTER

                element.TKStringVar = tk.StringVar()
                element.TKListbox = element.Widget = tk.Listbox(element_frame, height=element_size[1], width=width,
                                                                selectmode=element.SelectMode, font=font, exportselection=False)
                # On OLD versions of tkinter the justify option isn't available
                try:
                    element.Widget.config(justify=justification)
                except:
                    pass

                element.Widget.config(highlightthickness=0)
                for index, item in enumerate(element.Values):
                    element.TKListbox.insert(tk.END, item)
                    if element.DefaultValues is not None and item in element.DefaultValues:
                        element.TKListbox.selection_set(index)
                if element.BackgroundColor is not None and element.BackgroundColor != COLOR_SYSTEM_DEFAULT:
                    element.TKListbox.configure(background=element.BackgroundColor)
                if element.HighlightBackgroundColor is not None and element.HighlightBackgroundColor != COLOR_SYSTEM_DEFAULT:
                    element.TKListbox.config(selectbackground=element.HighlightBackgroundColor)
                if text_color is not None and text_color != COLOR_SYSTEM_DEFAULT:
                    element.TKListbox.configure(fg=text_color)
                if element.HighlightTextColor is not None and element.HighlightTextColor != COLOR_SYSTEM_DEFAULT:
                    element.TKListbox.config(selectforeground=element.HighlightTextColor)
                if element.ChangeSubmits:
                    element.TKListbox.bind('<<ListboxSelect>>', element._ListboxSelectHandler)

                if not element.NoScrollbar:
                    _make_ttk_scrollbar(element, 'v', toplevel_form)
                    element.Widget.configure(yscrollcommand=element.vsb.set)
                    element.vsb.pack(side=tk.RIGHT, fill='y')

                # Horizontal scrollbar
                if element.HorizontalScroll:
                    _make_ttk_scrollbar(element, 'h', toplevel_form)
                    element.hsb.pack(side=tk.BOTTOM, fill='x')
                    element.Widget.configure(xscrollcommand=element.hsb.set)

                if not element.NoScrollbar or element.HorizontalScroll:
                    # Chr0nic
                    element.Widget.bind("<Enter>", lambda event, em=element: testMouseHook(em))
                    element.Widget.bind("<Leave>", lambda event, em=element: testMouseUnhook(em))


                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                element_frame.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], fill=fill, expand=expand)
                element.TKListbox.pack(side=tk.LEFT, fill=fill, expand=expand)
                if element.visible is False:
                    element._pack_forget_save_settings(alternate_widget=element_frame)
                    # element_frame.pack_forget()
                if element.BindReturnKey:
                    element.TKListbox.bind('<Return>', element._ListboxSelectHandler)
                    element.TKListbox.bind('<Double-Button-1>', element._ListboxSelectHandler)
                if element.Disabled is True:
                    element.TKListbox['state'] = 'disabled'
                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(element.TKListbox, text=element.Tooltip,
                                                    timeout=DEFAULT_TOOLTIP_TIME)
                _add_right_click_menu_and_grab(element)
            # -------------------------  MULTILINE placement element  ------------------------- #
            elif element_type == ELEM_TYPE_INPUT_MULTILINE:
                element = element  # type: Multiline
                width, height = element_size
                bd = element.BorderWidth
                element.element_frame = element_frame = tk.Frame(tk_row_frame)

                element.TKText = element.Widget = tk.Text(element_frame, width=width, height=height,  bd=bd, font=font, relief=RELIEF_SUNKEN)

                if not element.no_scrollbar:
                    _make_ttk_scrollbar(element, 'v', toplevel_form)

                    element.Widget.configure(yscrollcommand=element.vsb.set)
                    element.vsb.pack(side=tk.RIGHT, fill='y')

                # Horizontal scrollbar
                if element.HorizontalScroll:
                    element.TKText.config(wrap='none')
                    _make_ttk_scrollbar(element, 'h', toplevel_form)
                    element.hsb.pack(side=tk.BOTTOM, fill='x')
                    element.Widget.configure(xscrollcommand=element.hsb.set)
                else:
                    element.TKText.config(wrap='word')

                if element.wrap_lines is True:
                    element.TKText.config(wrap='word')
                elif element.wrap_lines is False:
                    element.TKText.config(wrap='none')

                if not element.no_scrollbar or element.HorizontalScroll:
                    # Chr0nic
                    element.TKText.bind("<Enter>", lambda event, em=element: testMouseHook(em))
                    element.TKText.bind("<Leave>", lambda event, em=element: testMouseUnhook(em))

                if element.DefaultText:
                    element.TKText.insert(1.0, element.DefaultText)  # set the default text
                element.TKText.config(highlightthickness=0)
                if text_color is not None and text_color != COLOR_SYSTEM_DEFAULT:
                    element.TKText.configure(fg=text_color, selectbackground=text_color)
                    element.TKText.config(insertbackground=text_color)
                if element.BackgroundColor is not None and element.BackgroundColor != COLOR_SYSTEM_DEFAULT:
                    element.TKText.configure(background=element.BackgroundColor, selectforeground=element.BackgroundColor)
                if element.selected_background_color not in (None, COLOR_SYSTEM_DEFAULT):
                    element.TKText.configure(selectbackground=element.selected_background_color)
                if element.selected_text_color not in (None, COLOR_SYSTEM_DEFAULT):
                    element.TKText.configure(selectforeground=element.selected_text_color)
                element.TKText.tag_configure("center", justify='center')
                element.TKText.tag_configure("left", justify='left')
                element.TKText.tag_configure("right", justify='right')

                if element.Justification.startswith('l'):
                    element.TKText.tag_add("left", 1.0, "end")
                    element.justification_tag = 'left'
                elif element.Justification.startswith('r'):
                    element.TKText.tag_add("right", 1.0, "end")
                    element.justification_tag = 'right'
                elif element.Justification.startswith('c'):
                    element.TKText.tag_add("center", 1.0, "end")
                    element.justification_tag = 'center'
                # if DEFAULT_SCROLLBAR_COLOR not in (None, COLOR_SYSTEM_DEFAULT):               # only works on Linux so not including it
                #     element.TKText.vbar.config(troughcolor=DEFAULT_SCROLLBAR_COLOR)
                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)

                element.element_frame.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], fill=fill, expand=expand)
                element.Widget.pack(side=tk.LEFT, fill=fill, expand=expand)

                if element.visible is False:
                    element._pack_forget_save_settings(alternate_widget=element_frame)
                    # element.element_frame.pack_forget()
                else:
                    # Chr0nic
                    element.TKText.bind("<Enter>", lambda event, em=element: testMouseHook(em))
                    element.TKText.bind("<Leave>", lambda event, em=element: testMouseUnhook(em))
                if element.ChangeSubmits:
                    element.TKText.bind('<Key>', element._KeyboardHandler)
                if element.EnterSubmits:
                    element.TKText.bind('<Return>', element._ReturnKeyHandler)
                if element.Focus is True or (toplevel_form.UseDefaultFocus and not toplevel_form.FocusSet):
                    toplevel_form.FocusSet = True
                    element.TKText.focus_set()

                if element.Disabled is True:
                    element.TKText['state'] = 'disabled'
                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(element.TKText, text=element.Tooltip, timeout=DEFAULT_TOOLTIP_TIME)

                if element.reroute_cprint:
                    cprint_set_output_destination(toplevel_form, element.Key)

                _add_right_click_menu_and_grab(element)

                if element.reroute_stdout:
                    element.reroute_stdout_to_here()
                if element.reroute_stderr:
                    element.reroute_stderr_to_here()

                # row_should_expand = True
            # -------------------------  CHECKBOX pleacement element  ------------------------- #
            elif element_type == ELEM_TYPE_INPUT_CHECKBOX:
                element = element  # type: Checkbox
                width = 0 if auto_size_text else element_size[0]
                default_value = element.InitialState
                element.TKIntVar = tk.IntVar()
                element.TKIntVar.set(default_value if default_value is not None else 0)

                element.TKCheckbutton = element.Widget = tk.Checkbutton(tk_row_frame, anchor=tk.NW,
                                                                            text=element.Text, width=width,
                                                                            variable=element.TKIntVar, bd=border_depth,
                                                                            font=font)
                if element.ChangeSubmits:
                    element.TKCheckbutton.configure(command=element._CheckboxHandler)
                if element.Disabled:
                    element.TKCheckbutton.configure(state='disable')
                if element.BackgroundColor is not None and element.BackgroundColor != COLOR_SYSTEM_DEFAULT:
                    element.TKCheckbutton.configure(background=element.BackgroundColor)
                    element.TKCheckbutton.configure(selectcolor=element.CheckboxBackgroundColor)  # The background of the checkbox
                    element.TKCheckbutton.configure(activebackground=element.BackgroundColor)
                if text_color is not None and text_color != COLOR_SYSTEM_DEFAULT:
                    element.TKCheckbutton.configure(fg=text_color)
                    element.TKCheckbutton.configure(activeforeground=element.TextColor)

                element.Widget.configure(highlightthickness=element.highlight_thickness)
                if element.BackgroundColor != COLOR_SYSTEM_DEFAULT:
                    element.TKCheckbutton.config(highlightbackground=element.BackgroundColor)
                if element.TextColor != COLOR_SYSTEM_DEFAULT:
                    element.TKCheckbutton.config(highlightcolor=element.TextColor)
                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                element.TKCheckbutton.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)
                if element.visible is False:
                    element._pack_forget_save_settings()
                    # element.TKCheckbutton.pack_forget()
                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(element.TKCheckbutton, text=element.Tooltip,
                                                    timeout=DEFAULT_TOOLTIP_TIME)
                _add_right_click_menu_and_grab(element)

            # -------------------------  PROGRESS placement element  ------------------------- #
            elif element_type == ELEM_TYPE_PROGRESS_BAR:
                element = element  # type: ProgressBar
                if element.size_px != (None, None):
                    progress_length, progress_width = element.size_px
                else:
                    width = element_size[0]
                    fnt = tkinter.font.Font()
                    char_width = fnt.measure('A')  # single character width
                    progress_length = width * char_width
                    progress_width = element_size[1]
                direction = element.Orientation
                if element.BarColor != (None, None):  # if element has a bar color, use it
                    bar_color = element.BarColor
                else:
                    bar_color = DEFAULT_PROGRESS_BAR_COLOR
                if element.Orientation.lower().startswith('h'):
                    base_style_name = ".Horizontal.TProgressbar"
                else:
                    base_style_name = ".Vertical.TProgressbar"
                style_name = _make_ttk_style_name(base_style_name, element, primary_style=True)
                element.TKProgressBar = TKProgressBar(tk_row_frame, element.MaxValue, progress_length, progress_width,
                                                      orientation=direction, BarColor=bar_color,
                                                      border_width=element.BorderWidth, relief=element.Relief,
                                                      ttk_theme=toplevel_form.TtkTheme, key=element.Key, style_name=style_name)
                element.Widget = element.TKProgressBar.TKProgressBarForReal
                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                element.TKProgressBar.TKProgressBarForReal.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)
                if element.visible is False:
                    element._pack_forget_save_settings(alternate_widget=element.TKProgressBar.TKProgressBarForReal)
                    # element.TKProgressBar.TKProgressBarForReal.pack_forget()
                _add_right_click_menu_and_grab(element)

                # -------------------------  RADIO placement element  ------------------------- #
            elif element_type == ELEM_TYPE_INPUT_RADIO:
                element = element  # type: Radio
                width = 0 if auto_size_text else element_size[0]
                default_value = element.InitialState
                ID = element.GroupID
                # see if ID has already been placed
                value = EncodeRadioRowCol(form.ContainerElemementNumber, row_num,
                                          col_num)  # value to set intvar to if this radio is selected
                element.EncodedRadioValue = value
                if ID in toplevel_form.RadioDict:
                    RadVar = toplevel_form.RadioDict[ID]
                else:
                    RadVar = tk.IntVar()
                    toplevel_form.RadioDict[ID] = RadVar
                element.TKIntVar = RadVar  # store the RadVar in Radio object
                if default_value:  # if this radio is the one selected, set RadVar to match
                    element.TKIntVar.set(value)
                element.TKRadio = element.Widget = tk.Radiobutton(tk_row_frame, anchor=tk.NW, text=element.Text,
                                                                  width=width, variable=element.TKIntVar, value=value,
                                                                  bd=border_depth, font=font)
                if element.ChangeSubmits:
                    element.TKRadio.configure(command=element._RadioHandler)
                if not element.BackgroundColor in (None, COLOR_SYSTEM_DEFAULT):
                    element.TKRadio.configure(background=element.BackgroundColor)
                    element.TKRadio.configure(selectcolor=element.CircleBackgroundColor)
                    element.TKRadio.configure(activebackground=element.BackgroundColor)
                if text_color is not None and text_color != COLOR_SYSTEM_DEFAULT:
                    element.TKRadio.configure(fg=text_color)
                    element.TKRadio.configure(activeforeground=text_color)

                element.Widget.configure(highlightthickness=1)
                if element.BackgroundColor != COLOR_SYSTEM_DEFAULT:
                    element.TKRadio.config(highlightbackground=element.BackgroundColor)
                if element.TextColor != COLOR_SYSTEM_DEFAULT:
                    element.TKRadio.config(highlightcolor=element.TextColor)

                if element.Disabled:
                    element.TKRadio['state'] = 'disabled'
                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                element.TKRadio.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)
                if element.visible is False:
                    element._pack_forget_save_settings()
                    # element.TKRadio.pack_forget()
                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(element.TKRadio, text=element.Tooltip, timeout=DEFAULT_TOOLTIP_TIME)
                _add_right_click_menu_and_grab(element)

                # -------------------------  SPIN placement element  ------------------------- #
            elif element_type == ELEM_TYPE_INPUT_SPIN:
                element = element  # type: Spin
                width, height = element_size
                width = 0 if auto_size_text else element_size[0]
                element.TKStringVar = tk.StringVar()
                element.TKSpinBox = element.Widget = tk.Spinbox(tk_row_frame, values=element.Values, textvariable=element.TKStringVar, width=width, bd=border_depth)
                if element.DefaultValue is not None:
                    element.TKStringVar.set(element.DefaultValue)
                element.TKSpinBox.configure(font=font)  # set wrap to width of widget
                if element.BackgroundColor is not None and element.BackgroundColor != COLOR_SYSTEM_DEFAULT:
                    element.TKSpinBox.configure(background=element.BackgroundColor)
                    element.TKSpinBox.configure(buttonbackground=element.BackgroundColor)
                if text_color  not in (None, COLOR_SYSTEM_DEFAULT):
                    element.TKSpinBox.configure(fg=text_color)
                    element.TKSpinBox.config(insertbackground=text_color)
                element.Widget.config(highlightthickness=0)
                if element.wrap is True:
                    element.Widget.configure(wrap=True)
                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                element.TKSpinBox.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)
                if element.visible is False:
                    element._pack_forget_save_settings()
                    # element.TKSpinBox.pack_forget()
                if element.ChangeSubmits:
                    element.TKSpinBox.configure(command=element._SpinboxSelectHandler)
                    # element.TKSpinBox.bind('<ButtonRelease-1>', element._SpinChangedHandler)
                    # element.TKSpinBox.bind('<Up>', element._SpinChangedHandler)
                    # element.TKSpinBox.bind('<Down>', element._SpinChangedHandler)
                if element.Readonly:
                    element.TKSpinBox['state'] = 'readonly'
                if element.Disabled is True:  # note overrides readonly if disabled
                    element.TKSpinBox['state'] = 'disabled'
                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(element.TKSpinBox, text=element.Tooltip, timeout=DEFAULT_TOOLTIP_TIME)
                if element.BindReturnKey:
                    element.TKSpinBox.bind('<Return>', element._SpinboxSelectHandler)
                _add_right_click_menu_and_grab(element)
                # -------------------------  IMAGE placement element  ------------------------- #
            elif element_type == ELEM_TYPE_IMAGE:
                element = element  # type: Image
                try:
                    if element.Filename is not None:
                        photo = tk.PhotoImage(file=element.Filename)
                    elif element.Data is not None:
                        photo = tk.PhotoImage(data=element.Data)
                    else:
                        photo = None

                    if photo is not None:
                        if element.ImageSubsample:
                            photo = photo.subsample(element.ImageSubsample)
                        if element.zoom:
                            photo = photo.zoom(element.zoom)
                        # print('*ERROR laying out form.... Image Element has no image specified*')
                except Exception as e:
                    photo = None
                    _error_popup_with_traceback('Your Window has an Image Element with a problem',
                                                'The traceback will show you the Window with the problem layout',
                                                'Look in this Window\'s layout for an Image element that has a key of {}'.format(element.Key),
                                                'The error occuring is:', e)

                element.tktext_label = element.Widget = tk.Label(tk_row_frame, bd=0)

                if photo is not None:
                    if element_size == (None, None) or element_size is None or element_size == toplevel_form.DefaultElementSize:
                        width, height = photo.width(), photo.height()
                    else:
                        width, height = element_size
                    element.tktext_label.config(image=photo, width=width, height=height)

                if not element.BackgroundColor in (None, COLOR_SYSTEM_DEFAULT):
                    element.tktext_label.config(background=element.BackgroundColor)

                element.tktext_label.image = photo
                # tktext_label.configure(anchor=tk.NW, image=photo)
                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                element.tktext_label.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)

                if element.visible is False:
                    element._pack_forget_save_settings()
                    # element.tktext_label.pack_forget()
                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(element.tktext_label, text=element.Tooltip,
                                                    timeout=DEFAULT_TOOLTIP_TIME)
                if element.EnableEvents and element.tktext_label is not None:
                    element.tktext_label.bind('<ButtonPress-1>', element._ClickHandler)

                _add_right_click_menu_and_grab(element)

                # -------------------------  Canvas placement element  ------------------------- #
            elif element_type == ELEM_TYPE_CANVAS:
                element = element  # type: Canvas
                width, height = element_size
                if element._TKCanvas is None:
                    element._TKCanvas = tk.Canvas(tk_row_frame, width=width, height=height, bd=border_depth)
                else:
                    element._TKCanvas.master = tk_row_frame
                element.Widget = element._TKCanvas

                if element.BackgroundColor is not None and element.BackgroundColor != COLOR_SYSTEM_DEFAULT:
                    element._TKCanvas.configure(background=element.BackgroundColor, highlightthickness=0)
                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                element._TKCanvas.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)
                if element.visible is False:
                    element._pack_forget_save_settings()
                    # element._TKCanvas.pack_forget()
                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(element._TKCanvas, text=element.Tooltip,
                                                    timeout=DEFAULT_TOOLTIP_TIME)
                _add_right_click_menu_and_grab(element)

                # -------------------------  Graph placement element  ------------------------- #
            elif element_type == ELEM_TYPE_GRAPH:
                element = element  # type: Graph
                width, height = element_size
                # I don't know why TWO canvases were being defined, on inside the other.  Was it so entire canvas can move?
                # if element._TKCanvas is None:
                #     element._TKCanvas = tk.Canvas(tk_row_frame, width=width, height=height, bd=border_depth)
                # else:
                #     element._TKCanvas.master = tk_row_frame
                element._TKCanvas2 = element.Widget = tk.Canvas(tk_row_frame, width=width, height=height,
                                                                bd=border_depth)
                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                element._TKCanvas2.pack(side=tk.LEFT, expand=expand, fill=fill)
                element._TKCanvas2.addtag_all('mytag')
                if element.BackgroundColor is not None and element.BackgroundColor != COLOR_SYSTEM_DEFAULT:
                    element._TKCanvas2.configure(background=element.BackgroundColor, highlightthickness=0)
                    # element._TKCanvas.configure(background=element.BackgroundColor, highlightthickness=0)
                element._TKCanvas2.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)
                if element.visible is False:
                    element._pack_forget_save_settings()
                    # element._TKCanvas2.pack_forget()
                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(element._TKCanvas2, text=element.Tooltip,
                                                    timeout=DEFAULT_TOOLTIP_TIME)
                if element.ChangeSubmits:
                    element._TKCanvas2.bind('<ButtonRelease-1>', element.ButtonReleaseCallBack)
                    element._TKCanvas2.bind('<ButtonPress-1>', element.ButtonPressCallBack)
                if element.DragSubmits:
                    element._TKCanvas2.bind('<Motion>', element.MotionCallBack)
                _add_right_click_menu_and_grab(element)
            # -------------------------  MENU placement element  ------------------------- #
            elif element_type == ELEM_TYPE_MENUBAR:
                element = element  # type: MenuBar
                menu_def = element.MenuDefinition
                element.TKMenu = element.Widget = tk.Menu(toplevel_form.TKroot, tearoff=element.Tearoff,
                                                          tearoffcommand=element._tearoff_menu_callback)  # create the menubar
                menubar = element.TKMenu
                if font is not None:  # if a font is used, make sure it's saved in the element
                    element.Font = font
                for menu_entry in menu_def:
                    baritem = tk.Menu(menubar, tearoff=element.Tearoff, tearoffcommand=element._tearoff_menu_callback)
                    if element.BackgroundColor not in (COLOR_SYSTEM_DEFAULT, None):
                        baritem.config(bg=element.BackgroundColor)
                        baritem.config(activeforeground=element.BackgroundColor)
                    if element.TextColor not in (COLOR_SYSTEM_DEFAULT, None):
                        baritem.config(fg=element.TextColor)
                        baritem.config(activebackground=element.TextColor)
                    if element.DisabledTextColor not in (COLOR_SYSTEM_DEFAULT, None):
                        baritem.config(disabledforeground=element.DisabledTextColor)
                    if font is not None:
                        baritem.config(font=font)
                    pos = menu_entry[0].find(MENU_SHORTCUT_CHARACTER)
                    # print(pos)
                    if pos != -1:
                        if pos == 0 or menu_entry[0][pos - len(MENU_SHORTCUT_CHARACTER)] != "\\":
                            menu_entry[0] = menu_entry[0][:pos] + menu_entry[0][pos + 1:]
                    if menu_entry[0][0] == MENU_DISABLED_CHARACTER:
                        menubar.add_cascade(label=menu_entry[0][len(MENU_DISABLED_CHARACTER):], menu=baritem,
                                            underline=pos - 1)
                        menubar.entryconfig(menu_entry[0][len(MENU_DISABLED_CHARACTER):], state='disabled')
                    else:
                        menubar.add_cascade(label=menu_entry[0], menu=baritem, underline=pos)

                    if len(menu_entry) > 1:
                        AddMenuItem(baritem, menu_entry[1], element)
                toplevel_form.TKroot.configure(menu=element.TKMenu)
            # -------------------------  Frame placement element  ------------------------- #
            elif element_type == ELEM_TYPE_FRAME:
                element = element  # type: Frame
                labeled_frame = element.Widget = tk.LabelFrame(tk_row_frame, text=element.Title, relief=element.Relief)
                element.TKFrame = labeled_frame
                PackFormIntoFrame(element, labeled_frame, toplevel_form)
                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                if element.VerticalAlignment is not None:
                    anchor = tk.CENTER  # Default to center if a bad choice is made
                    if element.VerticalAlignment.lower().startswith('t'):
                        anchor = tk.N
                    if element.VerticalAlignment.lower().startswith('c'):
                        anchor = tk.CENTER
                    if element.VerticalAlignment.lower().startswith('b'):
                        anchor = tk.S
                    labeled_frame.pack(side=tk.LEFT, anchor=anchor, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)
                else:
                    labeled_frame.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)

                if element.Size != (None, None):
                    labeled_frame.config(width=element.Size[0], height=element.Size[1])
                    labeled_frame.pack_propagate(0)
                if not element.visible:
                    element._pack_forget_save_settings()
                    # labeled_frame.pack_forget()
                if element.BackgroundColor != COLOR_SYSTEM_DEFAULT and element.BackgroundColor is not None:
                    labeled_frame.configure(background=element.BackgroundColor,
                                            highlightbackground=element.BackgroundColor,
                                            highlightcolor=element.BackgroundColor)
                if element.TextColor != COLOR_SYSTEM_DEFAULT and element.TextColor is not None:
                    labeled_frame.configure(foreground=element.TextColor)
                if font is not None:
                    labeled_frame.configure(font=font)
                if element.TitleLocation is not None:
                    labeled_frame.configure(labelanchor=element.TitleLocation)
                if element.BorderWidth is not None:
                    labeled_frame.configure(borderwidth=element.BorderWidth)
                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(labeled_frame, text=element.Tooltip, timeout=DEFAULT_TOOLTIP_TIME)
                _add_right_click_menu_and_grab(element)
                # row_should_expand=True
            # -------------------------  Tab placement element  ------------------------- #
            elif element_type == ELEM_TYPE_TAB:
                element = element  # type: Tab
                form = form   # type: TabGroup
                element.TKFrame = element.Widget = tk.Frame(form.TKNotebook)
                PackFormIntoFrame(element, element.TKFrame, toplevel_form)
                state = 'normal'
                if element.Disabled:
                    state = 'disabled'
                if element.visible is False:
                    state = 'hidden'
                # this code will add an image to the tab. Use it when adding the image on a tab enhancement
                try:
                    if element.Filename is not None:
                        photo = tk.PhotoImage(file=element.Filename)
                    elif element.Data is not None:
                        photo = tk.PhotoImage(data=element.Data)
                    else:
                        photo = None

                    if element.ImageSubsample and photo is not None:
                        photo = photo.subsample(element.ImageSubsample)
                    if element.zoom and photo is not None:
                        photo = photo.zoom(element.zoom)
                        # print('*ERROR laying out form.... Image Element has no image specified*')
                except Exception as e:
                    photo = None
                    _error_popup_with_traceback('Your Window has an Tab Element with an IMAGE problem',
                                                'The traceback will show you the Window with the problem layout',
                                                'Look in this Window\'s layout for an Image element that has a key of {}'.format(element.Key),
                                                'The error occuring is:', e)

                element.photo = photo
                if photo is not None:
                    if element_size == (None, None) or element_size is None or element_size == toplevel_form.DefaultElementSize:
                        width, height = photo.width(), photo.height()
                    else:
                        width, height = element_size
                    element.tktext_label = tk.Label(tk_row_frame, image=photo, width=width, height=height, bd=0)
                else:
                    element.tktext_label = tk.Label(tk_row_frame, bd=0)
                if photo is not None:
                    form.TKNotebook.add(element.TKFrame, text=element.Title, compound=tk.LEFT, state=state,image=photo)

                # element.photo_image = tk.PhotoImage(data=DEFAULT_BASE64_ICON)
                # form.TKNotebook.add(element.TKFrame, text=element.Title, compound=tk.LEFT, state=state,image = element.photo_image)

                form.TKNotebook.add(element.TKFrame, text=element.Title, state=state)
                # July 28 2022 removing the expansion and pack as a test
                # expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                # form.TKNotebook.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], fill=fill, expand=expand)

                element.ParentNotebook = form.TKNotebook
                element.TabID = form.TabCount
                form.tab_index_to_key[element.TabID] = element.key      # has a list of the tabs in the notebook and their associated key
                form.TabCount += 1
                if element.BackgroundColor not in (COLOR_SYSTEM_DEFAULT, None):
                    element.TKFrame.configure(background=element.BackgroundColor, highlightbackground=element.BackgroundColor, highlightcolor=element.BackgroundColor)

                # if element.BorderWidth is not None:
                #     element.TKFrame.configure(borderwidth=element.BorderWidth)
                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(element.TKFrame, text=element.Tooltip, timeout=DEFAULT_TOOLTIP_TIME)
                _add_right_click_menu_and_grab(element)
                # row_should_expand = True
            # -------------------------  TabGroup placement element  ------------------------- #
            elif element_type == ELEM_TYPE_TAB_GROUP:
                element = element  # type: TabGroup
                # custom_style = str(element.Key) + 'customtab.TNotebook'
                custom_style = _make_ttk_style_name('.TNotebook', element, primary_style=True)
                style = ttk.Style()
                _change_ttk_theme(style, toplevel_form.TtkTheme)

                if element.TabLocation is not None:
                    position_dict = {'left': 'w', 'right': 'e', 'top': 'n', 'bottom': 's', 'lefttop': 'wn',
                                     'leftbottom': 'ws', 'righttop': 'en', 'rightbottom': 'es', 'bottomleft': 'sw',
                                     'bottomright': 'se', 'topleft': 'nw', 'topright': 'ne'}
                    try:
                        tab_position = position_dict[element.TabLocation]
                    except:
                        tab_position = position_dict['top']
                    style.configure(custom_style, tabposition=tab_position)

                if element.BackgroundColor is not None and element.BackgroundColor != COLOR_SYSTEM_DEFAULT:
                    style.configure(custom_style, background=element.BackgroundColor)

                # FINALLY the proper styling to get tab colors!
                if element.SelectedTitleColor is not None and element.SelectedTitleColor != COLOR_SYSTEM_DEFAULT:
                    style.map(custom_style + '.Tab', foreground=[("selected", element.SelectedTitleColor)])
                if element.SelectedBackgroundColor is not None and element.SelectedBackgroundColor != COLOR_SYSTEM_DEFAULT:
                    style.map(custom_style + '.Tab', background=[("selected", element.SelectedBackgroundColor)])
                if element.TabBackgroundColor is not None and element.TabBackgroundColor != COLOR_SYSTEM_DEFAULT:
                    style.configure(custom_style + '.Tab', background=element.TabBackgroundColor)
                if element.TextColor is not None and element.TextColor != COLOR_SYSTEM_DEFAULT:
                    style.configure(custom_style + '.Tab', foreground=element.TextColor)
                if element.BorderWidth is not None:
                    style.configure(custom_style, borderwidth=element.BorderWidth)
                if element.TabBorderWidth is not None:
                    style.configure(custom_style + '.Tab', borderwidth=element.TabBorderWidth)       # if ever want to get rid of border around the TABS themselves
                if element.FocusColor not in (None, COLOR_SYSTEM_DEFAULT):
                    style.configure(custom_style + '.Tab', focuscolor=element.FocusColor)

                style.configure(custom_style + '.Tab', font=font)
                element.Style = style
                element.StyleName = custom_style
                element.TKNotebook = element.Widget = ttk.Notebook(tk_row_frame, style=custom_style)

                PackFormIntoFrame(element, toplevel_form.TKroot, toplevel_form)

                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                element.TKNotebook.pack(anchor=tk.SW, side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], fill=fill, expand=expand)

                if element.ChangeSubmits:
                    element.TKNotebook.bind('<<NotebookTabChanged>>', element._TabGroupSelectHandler)
                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(element.TKNotebook, text=element.Tooltip, timeout=DEFAULT_TOOLTIP_TIME)
                if element.Size != (None, None):
                    element.TKNotebook.configure(width=element.Size[0], height=element.Size[1])
                _add_right_click_menu_and_grab(element)
                if element.visible is False:
                    element._pack_forget_save_settings()
                # row_should_expand = True
                # -------------------  SLIDER placement element  ------------------------- #
            elif element_type == ELEM_TYPE_INPUT_SLIDER:
                element = element  # type: Slider
                slider_length = element_size[0] * _char_width_in_pixels(font)
                slider_width = element_size[1]
                element.TKIntVar = tk.IntVar()
                element.TKIntVar.set(element.DefaultValue)
                if element.Orientation.startswith('v'):
                    range_from = element.Range[1]
                    range_to = element.Range[0]
                    slider_length += DEFAULT_MARGINS[1] * (element_size[0] * 2)  # add in the padding
                else:
                    range_from = element.Range[0]
                    range_to = element.Range[1]
                tkscale = element.Widget = tk.Scale(tk_row_frame, orient=element.Orientation,
                                                        variable=element.TKIntVar,
                                                        from_=range_from, to_=range_to, resolution=element.Resolution,
                                                        length=slider_length, width=slider_width,
                                                        bd=element.BorderWidth,
                                                        relief=element.Relief, font=font,
                                                        tickinterval=element.TickInterval)
                tkscale.config(highlightthickness=0)
                if element.ChangeSubmits:
                    tkscale.config(command=element._SliderChangedHandler)
                if element.BackgroundColor not in (None, COLOR_SYSTEM_DEFAULT):
                    tkscale.configure(background=element.BackgroundColor)
                if element.TroughColor != COLOR_SYSTEM_DEFAULT:
                    tkscale.config(troughcolor=element.TroughColor)
                if element.DisableNumericDisplay:
                    tkscale.config(showvalue=0)
                if text_color not in (None, COLOR_SYSTEM_DEFAULT):
                    tkscale.configure(fg=text_color)
                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                tkscale.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)
                if element.visible is False:
                    element._pack_forget_save_settings()
                    # tkscale.pack_forget()
                element.TKScale = tkscale
                if element.Disabled == True:
                    element.TKScale['state'] = 'disabled'
                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(element.TKScale, text=element.Tooltip, timeout=DEFAULT_TOOLTIP_TIME)
                _add_right_click_menu_and_grab(element)

            # -------------------------  TABLE placement element  ------------------------- #
            elif element_type == ELEM_TYPE_TABLE:
                element = element  # type: Table
                element.element_frame = frame = tk.Frame(tk_row_frame)
                element.table_frame = frame
                height = element.NumRows
                if element.Justification.startswith('l'):
                    anchor = tk.W
                elif element.Justification.startswith('r'):
                    anchor = tk.E
                else:
                    anchor = tk.CENTER
                column_widths = {}
                # create column width list
                for row in element.Values:
                    for i, col in enumerate(row):
                        col_width = min(len(str(col)), element.MaxColumnWidth)
                        try:
                            if col_width > column_widths[i]:
                                column_widths[i] = col_width
                        except:
                            column_widths[i] = col_width

                if element.ColumnsToDisplay is None:
                    displaycolumns = element.ColumnHeadings if element.ColumnHeadings is not None else element.Values[0]
                else:
                    displaycolumns = []
                    for i, should_display in enumerate(element.ColumnsToDisplay):
                        if should_display:
                            if element.ColumnHeadings is not None:
                                displaycolumns.append(element.ColumnHeadings[i])
                            else:
                                displaycolumns.append(str(i))

                column_headings = element.ColumnHeadings if element.ColumnHeadings is not None else displaycolumns
                if element.DisplayRowNumbers:  # if display row number, tack on the numbers to front of columns
                    displaycolumns = [element.RowHeaderText, ] + displaycolumns
                    if column_headings is not None:
                        column_headings = [element.RowHeaderText, ] + element.ColumnHeadings
                    else:
                        column_headings = [element.RowHeaderText, ] + displaycolumns
                element.TKTreeview = element.Widget = ttk.Treeview(frame, columns=column_headings,
                                                                   displaycolumns=displaycolumns, show='headings',
                                                                   height=height,
                                                                   selectmode=element.SelectMode, )
                treeview = element.TKTreeview
                if element.DisplayRowNumbers:
                    treeview.heading(element.RowHeaderText, text=element.RowHeaderText)  # make a dummy heading
                    row_number_header_width =_string_width_in_pixels(element.HeaderFont, element.RowHeaderText) + 10
                    row_number_width = _string_width_in_pixels(font, str(len(element.Values))) + 10
                    row_number_width = max(row_number_header_width, row_number_width)
                    treeview.column(element.RowHeaderText, width=row_number_width, minwidth=10, anchor=anchor, stretch=0)

                headings = element.ColumnHeadings if element.ColumnHeadings is not None else element.Values[0]
                for i, heading in enumerate(headings):
                    heading = str(heading)
                    treeview.heading(heading, text=heading)
                    if element.AutoSizeColumns:
                        col_width = column_widths.get(i, len(heading))      # in case more headings than there are columns of data
                        width = max(col_width * _char_width_in_pixels(font), len(heading)*_char_width_in_pixels(element.HeaderFont))
                    else:
                        try:
                            width = element.ColumnWidths[i] * _char_width_in_pixels(font)
                        except:
                            width = element.DefaultColumnWidth * _char_width_in_pixels(font)
                    if element.cols_justification is not None:
                        try:
                            if element.cols_justification[i].startswith('l'):
                                col_anchor = tk.W
                            elif element.cols_justification[i].startswith('r'):
                                col_anchor = tk.E
                            elif element.cols_justification[i].startswith('c'):
                                col_anchor = tk.CENTER
                            else:
                                col_anchor = anchor

                        except:             # likely didn't specify enough entries (must be one per col)
                            col_anchor = anchor
                    else:
                        col_anchor = anchor
                    treeview.column(heading, width=width, minwidth=10, anchor=col_anchor, stretch=element.expand_x)
                # Insert values into the tree
                for i, value in enumerate(element.Values):
                    if element.DisplayRowNumbers:
                        value = [i + element.StartingRowNumber] + value
                    id = treeview.insert('', 'end', text=value, iid=i + 1, values=value, tag=i)
                    element.tree_ids.append(id)
                if element.AlternatingRowColor not in (None, COLOR_SYSTEM_DEFAULT):  # alternating colors
                    for row in range(0, len(element.Values), 2):
                        treeview.tag_configure(row, background=element.AlternatingRowColor)
                if element.RowColors is not None:  # individual row colors
                    for row_def in element.RowColors:
                        if len(row_def) == 2:  # only background is specified
                            treeview.tag_configure(row_def[0], background=row_def[1])
                        else:
                            treeview.tag_configure(row_def[0], background=row_def[2], foreground=row_def[1])
                # ------ Do Styling of Colors -----
                # style_name = str(element.Key) + 'customtable.Treeview'
                style_name = _make_ttk_style_name( '.Treeview', element, primary_style=True)
                element.table_ttk_style_name = style_name
                table_style = ttk.Style()
                element.ttk_style = table_style

                _change_ttk_theme(table_style, toplevel_form.TtkTheme)

                if element.BackgroundColor is not None and element.BackgroundColor != COLOR_SYSTEM_DEFAULT:
                    table_style.configure(style_name, background=element.BackgroundColor, fieldbackground=element.BackgroundColor, )
                    if element.SelectedRowColors[1] is not None:
                        table_style.map(style_name, background=_fixed_map(table_style, style_name, 'background', element.SelectedRowColors))
                if element.TextColor is not None and element.TextColor != COLOR_SYSTEM_DEFAULT:
                    table_style.configure(style_name, foreground=element.TextColor)
                    if element.SelectedRowColors[0] is not None:
                        table_style.map(style_name, foreground=_fixed_map(table_style, style_name, 'foreground', element.SelectedRowColors))
                if element.RowHeight is not None:
                    table_style.configure(style_name, rowheight=element.RowHeight)
                else:
                    table_style.configure(style_name, rowheight=_char_height_in_pixels(font))
                if element.HeaderTextColor is not None and element.HeaderTextColor != COLOR_SYSTEM_DEFAULT:
                    table_style.configure(style_name + '.Heading', foreground=element.HeaderTextColor)
                if element.HeaderBackgroundColor is not None and element.HeaderBackgroundColor != COLOR_SYSTEM_DEFAULT:
                    table_style.configure(style_name + '.Heading', background=element.HeaderBackgroundColor)
                if element.HeaderFont is not None:
                    table_style.configure(style_name + '.Heading', font=element.HeaderFont)
                else:
                    table_style.configure(style_name + '.Heading', font=font)
                if element.HeaderBorderWidth is not None:
                    table_style.configure(style_name + '.Heading', borderwidth=element.HeaderBorderWidth)
                if element.HeaderRelief is not None:
                    table_style.configure(style_name + '.Heading', relief=element.HeaderRelief)
                table_style.configure(style_name, font=font)
                if element.BorderWidth is not None:
                    table_style.configure(style_name, borderwidth=element.BorderWidth)

                if element.HeaderBackgroundColor not in  (None, COLOR_SYSTEM_DEFAULT) and  element.HeaderTextColor not in  (None, COLOR_SYSTEM_DEFAULT):
                    table_style.map(style_name + ".Heading", background=[('pressed', '!focus', element.HeaderBackgroundColor),
                                                                         ('active', element.HeaderTextColor),])
                    table_style.map(style_name + ".Heading", foreground=[('pressed', '!focus', element.HeaderTextColor),
                                                                         ('active', element.HeaderBackgroundColor),])


                treeview.configure(style=style_name)
                # scrollable_frame.pack(side=tk.LEFT,  padx=elementpad[0], pady=elementpad[1], expand=True, fill='both')
                if element.enable_click_events is True:
                    treeview.bind('<ButtonRelease-1>', element._table_clicked)
                if element.right_click_selects:
                    if running_mac():
                        treeview.bind('<Button-2>', element._table_clicked)
                    else:
                        treeview.bind('<Button-3>', element._table_clicked)
                treeview.bind("<<TreeviewSelect>>", element._treeview_selected)
                if element.BindReturnKey:
                    treeview.bind('<Return>', element._treeview_double_click)
                    treeview.bind('<Double-Button-1>', element._treeview_double_click)

                if not element.HideVerticalScroll:
                    _make_ttk_scrollbar(element, 'v', toplevel_form)

                    element.Widget.configure(yscrollcommand=element.vsb.set)
                    element.vsb.pack(side=tk.RIGHT, fill='y')

                # Horizontal scrollbar
                if not element.VerticalScrollOnly:
                    # element.Widget.config(wrap='none')
                    _make_ttk_scrollbar(element, 'h', toplevel_form)
                    element.hsb.pack(side=tk.BOTTOM, fill='x')
                    element.Widget.configure(xscrollcommand=element.hsb.set)

                if not element.HideVerticalScroll or not element.VerticalScrollOnly:
                    # Chr0nic
                    element.Widget.bind("<Enter>", lambda event, em=element: testMouseHook(em))
                    element.Widget.bind("<Leave>", lambda event, em=element: testMouseUnhook(em))

                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                element.TKTreeview.pack(side=tk.LEFT, padx=0, pady=0, expand=expand, fill=fill)
                frame.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)
                if element.visible is False:
                    element._pack_forget_save_settings(alternate_widget=element.element_frame)       # seems like it should be the frame if following other elements conventions
                    # element.TKTreeview.pack_forget()
                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(element.TKTreeview, text=element.Tooltip,
                                                    timeout=DEFAULT_TOOLTIP_TIME)
                _add_right_click_menu_and_grab(element)

                if tclversion_detailed == '8.6.9' and ENABLE_TREEVIEW_869_PATCH:
                    # print('*** tk version 8.6.9 detected.... patching ttk treeview code ***')
                    table_style.map(style_name,
                                    foreground=_fixed_map(table_style, style_name, 'foreground', element.SelectedRowColors),
                                    background=_fixed_map(table_style, style_name, 'background', element.SelectedRowColors))
            # -------------------------  Tree placement element  ------------------------- #
            elif element_type == ELEM_TYPE_TREE:
                element = element  # type: Tree
                element.element_frame = element_frame = tk.Frame(tk_row_frame)

                height = element.NumRows
                if element.Justification.startswith('l'):  # justification
                    anchor = tk.W
                elif element.Justification.startswith('r'):
                    anchor = tk.E
                else:
                    anchor = tk.CENTER

                if element.ColumnsToDisplay is None:  # Which cols to display
                    displaycolumns = element.ColumnHeadings
                else:
                    displaycolumns = []
                    for i, should_display in enumerate(element.ColumnsToDisplay):
                        if should_display:
                            displaycolumns.append(element.ColumnHeadings[i])
                column_headings = element.ColumnHeadings
                # ------------- GET THE TREEVIEW WIDGET -------------
                element.TKTreeview = element.Widget = ttk.Treeview(element_frame, columns=column_headings,
                                                                   displaycolumns=displaycolumns,
                                                                   show='tree headings' if column_headings is not None else 'tree',
                                                                   height=height,
                                                                   selectmode=element.SelectMode)
                treeview = element.TKTreeview
                max_widths = {}
                for key, node in element.TreeData.tree_dict.items():
                    for i, value in enumerate(node.values):
                        max_width = max_widths.get(i, 0)
                        if len(str(value)) > max_width:
                            max_widths[i] = len(str(value))

                if element.ColumnHeadings is not None:
                    for i, heading in enumerate(element.ColumnHeadings):  # Configure cols + headings
                        treeview.heading(heading, text=heading)
                        if element.AutoSizeColumns:
                            max_width = max_widths.get(i, 0)
                            max_width = max(max_width, len(heading))
                            width = min(element.MaxColumnWidth, max_width+1)
                        else:
                            try:
                                width = element.ColumnWidths[i]
                            except:
                                width = element.DefaultColumnWidth
                        treeview.column(heading, width=width * _char_width_in_pixels(font) + 10, anchor=anchor)

                def add_treeview_data(node):
                    """

                    :param node:
                    :type node:

                    """
                    if node.key != '':
                        if node.icon:
                            if node.icon not in element.image_dict:
                                if type(node.icon) is bytes:
                                    photo = tk.PhotoImage(data=node.icon)
                                else:
                                    photo = tk.PhotoImage(file=node.icon)
                                element.image_dict[node.icon] = photo
                            else:
                                photo = element.image_dict.get(node.icon)

                            node.photo = photo
                            try:
                                id = treeview.insert(element.KeyToID[node.parent], 'end', iid=None, text=node.text, values=node.values, open=element.ShowExpanded, image=node.photo)
                                element.IdToKey[id] = node.key
                                element.KeyToID[node.key] = id
                            except Exception as e:
                                print('Error inserting image into tree', e)
                        else:
                            id = treeview.insert(element.KeyToID[node.parent], 'end', iid=None, text=node.text, values=node.values, open=element.ShowExpanded)
                            element.IdToKey[id] = node.key
                            element.KeyToID[node.key] = id

                    for node in node.children:
                        add_treeview_data(node)

                add_treeview_data(element.TreeData.root_node)
                treeview.column('#0', width=element.Col0Width * _char_width_in_pixels(font), anchor=tk.W)
                treeview.heading('#0', text=element.col0_heading)

                # ----- configure colors -----
                # style_name = str(element.Key) + '.Treeview'
                style_name = _make_ttk_style_name('.Treeview', element, primary_style=True)
                tree_style = ttk.Style()
                _change_ttk_theme(tree_style, toplevel_form.TtkTheme)

                if element.BackgroundColor is not None and element.BackgroundColor != COLOR_SYSTEM_DEFAULT:
                    tree_style.configure(style_name, background=element.BackgroundColor, fieldbackground=element.BackgroundColor)
                    if element.SelectedRowColors[1] is not None:
                        tree_style.map(style_name, background=_fixed_map(tree_style, style_name, 'background', element.SelectedRowColors))
                if element.TextColor is not None and element.TextColor != COLOR_SYSTEM_DEFAULT:
                    tree_style.configure(style_name, foreground=element.TextColor)
                    if element.SelectedRowColors[0] is not None:
                        tree_style.map(style_name, foreground=_fixed_map(tree_style, style_name, 'foreground', element.SelectedRowColors))
                if element.HeaderTextColor is not None and element.HeaderTextColor != COLOR_SYSTEM_DEFAULT:
                    tree_style.configure(style_name + '.Heading', foreground=element.HeaderTextColor)
                if element.HeaderBackgroundColor is not None and element.HeaderBackgroundColor != COLOR_SYSTEM_DEFAULT:
                    tree_style.configure(style_name + '.Heading', background=element.HeaderBackgroundColor)
                if element.HeaderFont is not None:
                    tree_style.configure(style_name + '.Heading', font=element.HeaderFont)
                else:
                    tree_style.configure(style_name + '.Heading', font=font)
                if element.HeaderBorderWidth is not None:
                    tree_style.configure(style_name + '.Heading', borderwidth=element.HeaderBorderWidth)
                if element.HeaderRelief is not None:
                    tree_style.configure(style_name + '.Heading', relief=element.HeaderRelief)
                tree_style.configure(style_name, font=font)
                if element.RowHeight:
                    tree_style.configure(style_name, rowheight=element.RowHeight)
                else:
                    tree_style.configure(style_name, rowheight=_char_height_in_pixels(font))
                if element.BorderWidth is not None:
                    tree_style.configure(style_name, borderwidth=element.BorderWidth)

                treeview.configure(style=style_name)  # IMPORTANT! Be sure and set the style name for this widget

                if not element.HideVerticalScroll:
                    _make_ttk_scrollbar(element, 'v', toplevel_form)

                    element.Widget.configure(yscrollcommand=element.vsb.set)
                    element.vsb.pack(side=tk.RIGHT, fill='y')

                # Horizontal scrollbar
                if not element.VerticalScrollOnly:
                    # element.Widget.config(wrap='none')
                    _make_ttk_scrollbar(element, 'h', toplevel_form)
                    element.hsb.pack(side=tk.BOTTOM, fill='x')
                    element.Widget.configure(xscrollcommand=element.hsb.set)

                if not element.HideVerticalScroll or not element.VerticalScrollOnly:
                    # Chr0nic
                    element.Widget.bind("<Enter>", lambda event, em=element: testMouseHook(em))
                    element.Widget.bind("<Leave>", lambda event, em=element: testMouseUnhook(em))


                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)
                element.TKTreeview.pack(side=tk.LEFT, padx=0, pady=0, expand=expand, fill=fill)
                element_frame.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], expand=expand, fill=fill)
                if element.visible is False:
                    element._pack_forget_save_settings(alternate_widget=element.element_frame)       # seems like it should be the frame if following other elements conventions
                    # element.TKTreeview.pack_forget()
                treeview.bind("<<TreeviewSelect>>", element._treeview_selected)
                if element.Tooltip is not None:  # tooltip
                    element.TooltipObject = ToolTip(element.TKTreeview, text=element.Tooltip,
                                                    timeout=DEFAULT_TOOLTIP_TIME)
                _add_right_click_menu_and_grab(element)

                if tclversion_detailed == '8.6.9' and ENABLE_TREEVIEW_869_PATCH:
                    # print('*** tk version 8.6.9 detected.... patching ttk treeview code ***')
                    tree_style.map(style_name,
                                   foreground=_fixed_map(tree_style, style_name, 'foreground', element.SelectedRowColors),
                                   background=_fixed_map(tree_style, style_name, 'background', element.SelectedRowColors))

            # -------------------------  Separator placement element  ------------------------- #
            elif element_type == ELEM_TYPE_SEPARATOR:
                element = element  # type: VerticalSeparator
                # style_name = str(element.Key) + "Line.TSeparator"
                style_name = _make_ttk_style_name(".Line.TSeparator", element, primary_style=True)
                style = ttk.Style()

                _change_ttk_theme(style, toplevel_form.TtkTheme)

                if element.color not in (None, COLOR_SYSTEM_DEFAULT):
                    style.configure(style_name, background=element.color)
                separator = element.Widget = ttk.Separator(tk_row_frame, orient=element.Orientation, )

                expand, fill, row_should_expand, row_fill_direction = _add_expansion(element, row_should_expand, row_fill_direction)

                if element.Orientation.startswith('h'):
                    separator.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], fill=tk.X, expand=True)
                else:
                    separator.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], fill=tk.Y, expand=False)
                element.Widget.configure(style=style_name)  # IMPORTANT!  Apply the style
            # -------------------------  SizeGrip placement element  ------------------------- #
            elif element_type == ELEM_TYPE_SIZEGRIP:
                element = element  # type: Sizegrip
                style_name = "Sizegrip.TSizegrip"
                style = ttk.Style()

                _change_ttk_theme(style, toplevel_form.TtkTheme)

                size_grip = element.Widget = ttk.Sizegrip(tk_row_frame)
                toplevel_form.sizegrip_widget = size_grip
                # if no size is specified, then use the background color for the window
                if element.BackgroundColor != COLOR_SYSTEM_DEFAULT:
                    style.configure(style_name, background=element.BackgroundColor)
                else:
                    style.configure(style_name, background=toplevel_form.TKroot['bg'])
                size_grip.configure(style=style_name)

                size_grip.pack(side=tk.BOTTOM, anchor='se', padx=elementpad[0], pady=elementpad[1], fill=tk.X, expand=True)
                # tricky part of sizegrip... it shouldn't cause the row to expand, but should expand and should add X axis if
                # not already filling in that direction.  Otherwise, leaves things alone!
                # row_should_expand = True
                row_fill_direction = tk.BOTH if row_fill_direction in (tk.Y, tk.BOTH) else tk.X
            # -------------------------  StatusBar placement element  ------------------------- #
            elif element_type == ELEM_TYPE_STATUSBAR:
                # auto_size_text = element.AutoSizeText
                display_text = element.DisplayText  # text to display
                if auto_size_text is False:
                    width, height = element_size
                else:
                    lines = display_text.split('\n')
                    max_line_len = max([len(l) for l in lines])
                    num_lines = len(lines)
                    if max_line_len > element_size[0]:  # if text exceeds element size, the will have to wrap
                        width = element_size[0]
                    else:
                        width = max_line_len
                    height = num_lines
                # ---===--- LABEL widget create and place --- #
                stringvar = tk.StringVar()
                element.TKStringVar = stringvar
                stringvar.set(display_text)
                if auto_size_text:
                    width = 0
                if element.Justification is not None:
                    justification = element.Justification
                elif toplevel_form.TextJustification is not None:
                    justification = toplevel_form.TextJustification
                else:
                    justification = DEFAULT_TEXT_JUSTIFICATION
                justify = tk.LEFT if justification.startswith('l') else tk.CENTER if justification.startswith('c') else tk.RIGHT
                anchor = tk.NW if justification.startswith('l') else tk.N if justification.startswith('c') else tk.NE
                # tktext_label = tk.Label(tk_row_frame, textvariable=stringvar, width=width, height=height,
                #                         justify=justify, bd=border_depth, font=font)
                tktext_label = element.Widget = tk.Label(tk_row_frame, textvariable=stringvar, width=width,
                                                         height=height,
                                                         justify=justify, bd=border_depth, font=font)
                # Set wrap-length for text (in PIXELS) == PAIN IN THE ASS
                wraplen = tktext_label.winfo_reqwidth() + 40  # width of widget in Pixels
                if not auto_size_text and height == 1:
                    wraplen = 0
                # print("wraplen, width, height", wraplen, width, height)
                tktext_label.configure(anchor=anchor, wraplen=wraplen)  # set wrap to width of widget
                if element.Relief is not None:
                    tktext_label.configure(relief=element.Relief)
                if element.BackgroundColor is not None and element.BackgroundColor != COLOR_SYSTEM_DEFAULT:
                    tktext_label.configure(background=element.BackgroundColor)
                if element.TextColor != COLOR_SYSTEM_DEFAULT and element.TextColor is not None:
                    tktext_label.configure(fg=element.TextColor)
                tktext_label.pack(side=tk.LEFT, padx=elementpad[0], pady=elementpad[1], fill=tk.X, expand=True)
                row_fill_direction = tk.X
                if element.visible is False:
                    element._pack_forget_save_settings()
                    # tktext_label.pack_forget()
                element.TKText = tktext_label
                if element.ClickSubmits:
                    tktext_label.bind('<Button-1>', element._TextClickedHandler)
                if element.Tooltip is not None:
                    element.TooltipObject = ToolTip(element.TKText, text=element.Tooltip, timeout=DEFAULT_TOOLTIP_TIME)
                _add_right_click_menu_and_grab(element)

        # ............................DONE WITH ROW pack the row of widgets ..........................#
        # done with row, pack the row of widgets
        # tk_row_frame.grid(row=row_num+2, sticky=tk.NW, padx=DEFAULT_MARGINS[0])

        anchor = 'nw'

        if row_justify.lower().startswith('c'):
            anchor = 'n'
            side = tk.LEFT
        elif row_justify.lower().startswith('r'):
            anchor = 'ne'
            side = tk.RIGHT
        elif row_justify.lower().startswith('l'):
            anchor = 'nw'
            side = tk.LEFT

        tk_row_frame.pack(side=tk.TOP, anchor=anchor, padx=0, pady=0, expand=row_should_expand, fill=row_fill_direction)
        if form.BackgroundColor is not None and form.BackgroundColor != COLOR_SYSTEM_DEFAULT:
            tk_row_frame.configure(background=form.BackgroundColor)

    return


def _get_hidden_master_root():
    """
    Creates the hidden master root window.  This window is never visible and represents the overall "application"
    """

    # if one is already made, then skip making another
    if Window.hidden_master_root is None:
        Window._IncrementOpenCount()
        Window.hidden_master_root = tk.Tk()
        Window.hidden_master_root.attributes('-alpha', 0)  # HIDE this window really really really
        # if not running_mac():
        try:
            Window.hidden_master_root.wm_overrideredirect(True)
        except Exception as e:
            if not running_mac():
                print('* Error performing wm_overrideredirect while hiding the hidden master root*', e)
        Window.hidden_master_root.withdraw()
    return Window.hidden_master_root


def _no_titlebar_setup(window):
    """
    Does the operations required to turn off the titlebar for the window.
    The Raspberry Pi required the settings to be make after the window's creation.
    Calling twice seems to have had better overall results so that's what's currently done.
    The MAC has been the problem with this feature.  It's been a chronic problem on the Mac.
    :param window:          window to turn off the titlebar if indicated in the settings
    :type window:           Window
    """
    try:
        if window.NoTitleBar:
            if running_linux():
                # window.TKroot.wm_attributes("-type", 'splash')
                window.TKroot.wm_attributes("-type", 'dock')
            else:
                window.TKroot.wm_overrideredirect(True)
                # Special case for Mac. Need to clear flag again if not tkinter version 8.6.10+
                # Previously restricted patch to only certain tkinter versions. Now use the patch setting exclusively regardless of tk ver
                # if running_mac() and ENABLE_MAC_NOTITLEBAR_PATCH and (sum([int(i) for i in tclversion_detailed.split('.')]) < 24):
                # if running_mac() and ENABLE_MAC_NOTITLEBAR_PATCH:
                if _mac_should_apply_notitlebar_patch():
                    print('* Applying Mac no_titlebar patch *')
                    window.TKroot.wm_overrideredirect(False)
    except Exception as e:
        warnings.warn('** Problem setting no titlebar {} **'.format(e), UserWarning)


# ----====----====----====----====----==== STARTUP TK ====----====----====----====----====----#
def StartupTK(window):
    """
    NOT user callable
    Creates the window (for real) lays out all the elements, etc.  It's a HUGE set of things it does.  It's the basic
    "porting layer" that will change depending on the GUI framework PySimpleGUI is running on top of.

    :param window: you window object
    :type window:  (Window)

    """
    window = window  # type: Window
    # global _my_windows
    # ow = _my_windows.NumOpenWindows
    ow = Window.NumOpenWindows
    # print('Starting TK open Windows = {}'.format(ow))
    if ENABLE_TK_WINDOWS:
        root = tk.Tk()
    elif not ow and not window.ForceTopLevel:
        # if first window being created, make a throwaway, hidden master root.  This stops one user
        # window from becoming the child of another user window. All windows are children of this hidden window
        _get_hidden_master_root()
        root = tk.Toplevel(class_=window.Title)
    else:
        root = tk.Toplevel(class_=window.Title)
    if window.DebuggerEnabled:
        root.bind('<Cancel>', window._callback_main_debugger_window_create_keystroke)
        root.bind('<Pause>', window._callback_popout_window_create_keystroke)

    # If location is None, then there's no need to hide the window.  Let it build where it is going to end up being.
    if DEFAULT_HIDE_WINDOW_WHEN_CREATING is True and window.Location is not None:
        try:
            if not running_mac() or \
                    (running_mac() and not window.NoTitleBar) or \
                    (running_mac() and window.NoTitleBar and not _mac_should_apply_notitlebar_patch()):

                root.attributes('-alpha', 0)  # hide window while building it. makes for smoother 'paint'
        except Exception as e:
            print('*** Exception setting alpha channel to zero while creating window ***', e)

    if window.BackgroundColor is not None and window.BackgroundColor != COLOR_SYSTEM_DEFAULT:
        root.configure(background=window.BackgroundColor)
    Window._IncrementOpenCount()

    window.TKroot = root

    window._create_thread_queue()

    # for the Raspberry Pi. Need to set the attributes here, prior to the building of the window
    # so going ahead and doing it for all platforms, in addition to doing it after the window is packed
    # 2023-April - this call seems to be causing problems on MacOS 13.2.1 Ventura.  Input elements become non-responsive
    # if this call is made here and at the end of building the window
    if not running_mac():
        _no_titlebar_setup(window)

    if not window.Resizable:
        root.resizable(False, False)

    if window.DisableMinimize:
        root.attributes("-toolwindow", 1)

    if window.KeepOnTop:
        root.wm_attributes("-topmost", 1)

    if window.TransparentColor is not None:
        window.SetTransparentColor(window.TransparentColor)

    if window.scaling is not None:
        root.tk.call('tk', 'scaling', window.scaling)

    __ArWOcDX(window)

    # Make moveable window
    if (window.GrabAnywhere is not False and not (
            window.NonBlocking and window.GrabAnywhere is not True)):
        if not (ENABLE_MAC_DISABLE_GRAB_ANYWHERE_WITH_TITLEBAR and running_mac() and not window.NoTitleBar):
            root.bind("<ButtonPress-1>", window._StartMoveGrabAnywhere)
            root.bind("<ButtonRelease-1>", window._StopMove)
            root.bind("<B1-Motion>", window._OnMotionGrabAnywhere)
    if (window.GrabAnywhereUsingControlKey is not False and not (
            window.NonBlocking and window.GrabAnywhereUsingControlKey is not True)):
        root.bind("<Control-Button-1>", window._StartMoveUsingControlKey)
        root.bind("<Control-ButtonRelease-1>", window._StopMove)
        root.bind("<Control-B1-Motion>", window._OnMotionUsingControlKey)
        # also enable movement using Control + Arrow key
        root.bind("<Control-Left>", window._move_callback)
        root.bind("<Control-Right>", window._move_callback)
        root.bind("<Control-Up>", window._move_callback)
        root.bind("<Control-Down>", window._move_callback)

    window.set_icon(window.WindowIcon)
    try:
        alpha_channel = 1 if window.AlphaChannel is None else window.AlphaChannel
        root.attributes('-alpha', alpha_channel)  # Make window visible again
    except Exception as e:
        print('**** Error setting Alpha Channel to {} after window was created ****'.format(alpha_channel), e)
        # pass

    if window.ReturnKeyboardEvents and not window.NonBlocking:
        root.bind("<KeyRelease>", window._KeyboardCallback)
        root.bind("<MouseWheel>", window._MouseWheelCallback)
        root.bind("<Button-4>", window._MouseWheelCallback)
        root.bind("<Button-5>", window._MouseWheelCallback)
    elif window.ReturnKeyboardEvents:
        root.bind("<Key>", window._KeyboardCallback)
        root.bind("<MouseWheel>", window._MouseWheelCallback)
        root.bind("<Button-4>", window._MouseWheelCallback)
        root.bind("<Button-5>", window._MouseWheelCallback)

    DEFAULT_WINDOW_SNAPSHOT_KEY_CODE = main_global_get_screen_snapshot_symcode()

    if DEFAULT_WINDOW_SNAPSHOT_KEY_CODE:
        # print('**** BINDING THE SNAPSHOT!', DEFAULT_WINDOW_SNAPSHOT_KEY_CODE, DEFAULT_WINDOW_SNAPSHOT_KEY)
        window.bind(DEFAULT_WINDOW_SNAPSHOT_KEY_CODE, DEFAULT_WINDOW_SNAPSHOT_KEY, propagate=False)
        # window.bind('<Win_L><F12>', DEFAULT_WINDOW_SNAPSHOT_KEY, )

    if window.NoTitleBar:
        window.TKroot.focus_force()

    if window.AutoClose:
        # if the window is being finalized, then don't start the autoclose timer
        if not window.finalize_in_progress:
            window._start_autoclose_timer()
            # duration = DEFAULT_AUTOCLOSE_TIME if window.AutoCloseDuration is None else window.AutoCloseDuration
            # window.TKAfterID = root.after(int(duration * 1000), window._AutoCloseAlarmCallback)

    if window.Timeout != None:
        window.TKAfterID = root.after(int(window.Timeout), window._TimeoutAlarmCallback)
    if window.NonBlocking:
        window.TKroot.protocol("WM_DESTROY_WINDOW", window._OnClosingCallback)
        window.TKroot.protocol("WM_DELETE_WINDOW", window._OnClosingCallback)
        window.TKroot.bind("<Configure>", window._config_callback)

    else:  # it's a blocking form
        # print('..... CALLING MainLoop')
        window.CurrentlyRunningMainloop = True
        window.TKroot.protocol("WM_DESTROY_WINDOW", window._OnClosingCallback)
        window.TKroot.protocol("WM_DELETE_WINDOW", window._OnClosingCallback)

        if window.modal or DEFAULT_MODAL_WINDOWS_FORCED:
            window.make_modal()

        # if window.enable_window_config_events:
        # ALWAYS enable config callbacks
        window.TKroot.bind("<Configure>", window._config_callback)

        # ----------------------------------- tkinter mainloop call -----------------------------------
        Window._window_running_mainloop = window
        Window._root_running_mainloop = window.TKroot
        window.TKroot.mainloop()
        window.CurrentlyRunningMainloop = False
        window.TimerCancelled = True
        # print('..... BACK from MainLoop')
        if not window.FormRemainedOpen:
            Window._DecrementOpenCount()
            # _my_windows.Decrement()
        if window.RootNeedsDestroying:
            try:
                window.TKroot.destroy()
            except:
                pass
            window.RootNeedsDestroying = False
    return


def _set_icon_for_tkinter_window(root, icon=None, pngbase64=None):
    """
    At the moment, this function is only used by the get_filename or folder with the no_window option set.
    Changes the icon that is shown on the title bar and on the task bar.
    NOTE - The file type is IMPORTANT and depends on the OS!
    Can pass in:
    * filename which must be a .ICO icon file for windows, PNG file for Linux
    * bytes object
    * BASE64 encoded file held in a variable

    :param root:      The window being modified
    :type root:       (tk.Tk or tk.TopLevel)
    :param icon:      Filename or bytes object
    :type icon:       (str | bytes)
    :param pngbase64: Base64 encoded image
    :type pngbase64:  (bytes)
    """

    if type(icon) is bytes or pngbase64 is not None:
        wicon = tkinter.PhotoImage(data=icon if icon is not None else pngbase64)
        try:
            root.tk.call('wm', 'iconphoto', root._w, wicon)
        except:
            wicon = tkinter.PhotoImage(data=DEFAULT_BASE64_ICON)
            try:
                root.tk.call('wm', 'iconphoto', root._w, wicon)
            except Exception as e:
                print('Set icon exception', e)
                pass
        return

    wicon = icon
    try:
        root.iconbitmap(icon)
    except  Exception as e:
        try:
            wicon = tkinter.PhotoImage(file=icon)
            root.tk.call('wm', 'iconphoto', root._w, wicon)
        except  Exception as e:
            try:
                wicon = tkinter.PhotoImage(data=DEFAULT_BASE64_ICON)
                try:
                    root.tk.call('wm', 'iconphoto', root._w, wicon)
                except Exception as e:
                    print('Set icon exception', e)
                    pass
            except:
                print('Set icon exception', e)
                pass


# ==============================_GetNumLinesNeeded ==#
# Helper function for determining how to wrap text   #
# ===================================================#
def _GetNumLinesNeeded(text, max_line_width):
    if max_line_width == 0:
        return 1
    lines = text.split('\n')
    num_lines = len(lines)  # number of original lines of text
    max_line_len = max([len(l) for l in lines])  # longest line
    lines_used = []
    for L in lines:
        lines_used.append(len(L) // max_line_width + (len(L) % max_line_width > 0))  # fancy math to round up
    total_lines_needed = sum(lines_used)
    return total_lines_needed


# ==============================  PROGRESS METER ========================================== #

def convert_args_to_single_string(*args):
    """

    :param *args:
    :type *args:

    """
    max_line_total, width_used, total_lines, = 0, 0, 0
    single_line_message = ''
    # loop through args and built a SINGLE string from them
    for message in args:
        # fancy code to check if string and convert if not is not need. Just always convert to string :-)
        # if not isinstance(message, str): message = str(message)
        message = str(message)
        longest_line_len = max([len(l) for l in message.split('\n')])
        width_used = max(longest_line_len, width_used)
        max_line_total = max(max_line_total, width_used)
        lines_needed = _GetNumLinesNeeded(message, width_used)
        total_lines += lines_needed
        single_line_message += message + '\n'
    return single_line_message, width_used, total_lines


METER_REASON_CANCELLED = 'cancelled'
METER_REASON_CLOSED = 'closed'
METER_REASON_REACHED_MAX = 'finished'
METER_OK = True
METER_STOPPED = False


class _QuickMeter(object):
    active_meters = {}
    exit_reasons = {}

    def __init__(self, title, current_value, max_value, key, *args, orientation='v', bar_color=(None, None), button_color=(None, None),
                 size=DEFAULT_PROGRESS_BAR_SIZE, border_width=None, grab_anywhere=False, no_titlebar=False, keep_on_top=None, no_button=False):
        """

        :param title:         text to display in element
        :type title:          (str)
        :param current_value: current value
        :type current_value:  (int)
        :param max_value:     max value of progress meter
        :type max_value:      (int)
        :param key:           Used with window.find_element and with return values to uniquely identify this element
        :type key:            str | int | tuple | object
        :param *args:         stuff to output
        :type *args:          (Any)
        :param orientation:   'horizontal' or 'vertical' ('h' or 'v' work) (Default value = 'vertical' / 'v')
        :type orientation:    (str)
        :param bar_color:     The 2 colors that make up a progress bar. Either a tuple of 2 strings or a string. Tuple - (bar, background). A string with 1 color changes the background of the bar only. A string with 2 colors separated by "on" like "red on blue" specifies a red bar on a blue background.
        :type bar_color:      (str, str) or str
        :param button_color:  button color (foreground, background)
        :type button_color:   (str, str) | str
        :param size:          (w,h) w=characters-wide, h=rows-high (Default value = DEFAULT_PROGRESS_BAR_SIZE)
        :type size:           (int, int)
        :param border_width:  width of border around element
        :type border_width:   (int)
        :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
        :type grab_anywhere:  (bool)
        :param no_titlebar:   If True: window will be created without a titlebar
        :type no_titlebar:    (bool)
        :param keep_on_top:   If True the window will remain above all current windows
        :type keep_on_top:    (bool)
        :param no_button:     If True: window will be created without a cancel button
        :type no_button:      (bool)
        """
        self.start_time = datetime.datetime.utcnow()
        self.key = key
        self.orientation = orientation
        self.bar_color = bar_color
        self.size = size
        self.grab_anywhere = grab_anywhere
        self.button_color = button_color
        self.border_width = border_width
        self.no_titlebar = no_titlebar
        self.title = title
        self.current_value = current_value
        self.max_value = max_value
        self.close_reason = None
        self.keep_on_top = keep_on_top
        self.no_button = no_button
        self.window = self.BuildWindow(*args)

    def BuildWindow(self, *args):
        layout = []
        if self.orientation.lower().startswith('h'):
            col = []
            col += [[T(''.join(map(lambda x: str(x) + '\n', args)),
                       key='-OPTMSG-')]]  ### convert all *args into one string that can be updated
            col += [[T('', size=(30, 10), key='-STATS-')],
                    [ProgressBar(max_value=self.max_value, orientation='h', key='-PROG-', size=self.size,
                                 bar_color=self.bar_color)]]
            if not self.no_button:
                col += [[Cancel(button_color=self.button_color), Stretch()]]
            layout = [Column(col)]
        else:
            col = [[ProgressBar(max_value=self.max_value, orientation='v', key='-PROG-', size=self.size,
                                bar_color=self.bar_color)]]
            col2 = []
            col2 += [[T(''.join(map(lambda x: str(x) + '\n', args)),
                        key='-OPTMSG-')]]  ### convert all *args into one string that can be updated
            col2 += [[T('', size=(30, 10), key='-STATS-')]]
            if not self.no_button:
                col2 += [[Cancel(button_color=self.button_color), Stretch()]]

            layout = [Column(col), Column(col2)]
        self.window = Window(self.title, grab_anywhere=self.grab_anywhere, border_depth=self.border_width, no_titlebar=self.no_titlebar, disable_close=True,
                             keep_on_top=self.keep_on_top)
        self.window.Layout([layout]).Finalize()

        return self.window

    def UpdateMeter(self, current_value, max_value, *args):  ### support for *args when updating

        self.current_value = current_value
        self.max_value = max_value
        self.window.Element('-PROG-').UpdateBar(self.current_value, self.max_value)
        self.window.Element('-STATS-').Update('\n'.join(self.ComputeProgressStats()))
        self.window.Element('-OPTMSG-').Update(
            value=''.join(map(lambda x: str(x) + '\n', args)))  ###  update the string with the args
        event, values = self.window.read(timeout=0)
        if event in ('Cancel', None) or current_value >= max_value:
            exit_reason = METER_REASON_CANCELLED if event in ('Cancel', None) else METER_REASON_REACHED_MAX if current_value >= max_value else METER_STOPPED
            self.window.close()
            del (_QuickMeter.active_meters[self.key])
            _QuickMeter.exit_reasons[self.key] = exit_reason
            return _QuickMeter.exit_reasons[self.key]
        return METER_OK

    def ComputeProgressStats(self):
        utc = datetime.datetime.utcnow()
        time_delta = utc - self.start_time
        total_seconds = time_delta.total_seconds()
        if not total_seconds:
            total_seconds = 1
        try:
            time_per_item = total_seconds / self.current_value
        except:
            time_per_item = 1
        seconds_remaining = (self.max_value - self.current_value) * time_per_item
        time_remaining = str(datetime.timedelta(seconds=seconds_remaining))
        time_remaining_short = (time_remaining).split(".")[0]
        time_delta_short = str(time_delta).split(".")[0]
        total_time = time_delta + datetime.timedelta(seconds=seconds_remaining)
        total_time_short = str(total_time).split(".")[0]
        self.stat_messages = [
            '{} of {}'.format(self.current_value, self.max_value),
            '{} %'.format(100 * self.current_value // self.max_value),
            '',
            ' {:6.2f} Iterations per Second'.format(self.current_value / total_seconds),
            ' {:6.2f} Seconds per Iteration'.format(total_seconds / (self.current_value if self.current_value else 1)),
            '',
            '{} Elapsed Time'.format(time_delta_short),
            '{} Time Remaining'.format(time_remaining_short),
            '{} Estimated Total Time'.format(total_time_short)]
        return self.stat_messages


def one_line_progress_meter(title, current_value, max_value, *args, key='OK for 1 meter', orientation='v', bar_color=(None, None), button_color=None,
                            size=DEFAULT_PROGRESS_BAR_SIZE, border_width=None, grab_anywhere=False, no_titlebar=False, keep_on_top=None, no_button=False):
    """
    :param title:         text to display in titlebar of window
    :type title:          (str)
    :param current_value: current value
    :type current_value:  (int)
    :param max_value:     max value of progress meter
    :type max_value:      (int)
    :param *args:         stuff to output as text in the window along with the meter
    :type *args:          (Any)
    :param key:           Used to differentiate between multiple meters. Used to cancel meter early. Now optional as there is a default value for single meters
    :type key:            str | int | tuple | object
    :param orientation:   'horizontal' or 'vertical' ('h' or 'v' work) (Default value = 'vertical' / 'v')
    :type orientation:    (str)
    :param bar_color:     The 2 colors that make up a progress bar. Either a tuple of 2 strings or a string. Tuple - (bar, background). A string with 1 color changes the background of the bar only. A string with 2 colors separated by "on" like "red on blue" specifies a red bar on a blue background.
    :type bar_color:      (str, str) or str
    :param button_color:  button color (foreground, background)
    :type button_color:   (str, str) | str
    :param size:          (w,h) w=characters-wide, h=rows-high (Default value = DEFAULT_PROGRESS_BAR_SIZE)
    :type size:           (int, int)
    :param border_width:  width of border around element
    :type border_width:   (int)
    :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere:  (bool)
    :param no_titlebar:   If True: no titlebar will be shown on the window
    :type no_titlebar:    (bool)
    :param keep_on_top:   If True the window will remain above all current windows
    :type keep_on_top:    (bool)
    :param no_button:     If True: window will be created without a cancel button
    :type no_button:      (bool)
    :return:              True if updated successfully. False if user closed the meter with the X or Cancel button
    :rtype:               (bool)
    """
    if key not in _QuickMeter.active_meters:
        meter = _QuickMeter(title, current_value, max_value, key, *args, orientation=orientation, bar_color=bar_color, button_color=button_color, size=size,
                            border_width=border_width, grab_anywhere=grab_anywhere, no_titlebar=no_titlebar, keep_on_top=keep_on_top, no_button=no_button)
        _QuickMeter.active_meters[key] = meter
        _QuickMeter.exit_reasons[key] = None

    else:
        meter = _QuickMeter.active_meters[key]

    rc = meter.UpdateMeter(current_value, max_value, *args)  ### pass the *args to to UpdateMeter function
    OneLineProgressMeter.exit_reasons = getattr(OneLineProgressMeter, 'exit_reasons', _QuickMeter.exit_reasons)
    exit_reason = OneLineProgressMeter.exit_reasons.get(key)
    return METER_OK if exit_reason in (None, METER_REASON_REACHED_MAX) else METER_STOPPED


def one_line_progress_meter_cancel(key='OK for 1 meter'):
    """
    Cancels and closes a previously created One Line Progress Meter window

    :param key: Key used when meter was created
    :type key:  (Any)
    :return:    None
    :rtype:     None
    """
    try:
        meter = _QuickMeter.active_meters[key]
        meter.window.Close()
        del (_QuickMeter.active_meters[key])
        _QuickMeter.exit_reasons[key] = METER_REASON_CANCELLED
    except:  # meter is already deleted
        return


def get_complimentary_hex(color):
    """
    :param color: color string, like "#RRGGBB"
    :type color:  (str)
    :return:      color string, like "#RRGGBB"
    :rtype:       (str)
    """

    # strip the # from the beginning
    color = color[1:]
    # convert the string into hex
    color = int(color, 16)
    # invert the three bytes
    # as good as substracting each of RGB component by 255(FF)
    comp_color = 0xFFFFFF ^ color
    # convert the color back to hex by prefixing a #
    comp_color = "#%06X" % comp_color
    return comp_color


# ========================  EasyPrint           =====#
# ===================================================#
class _DebugWin():
    debug_window = None

    def __init__(self, size=(None, None), location=(None, None), relative_location=(None, None), font=None, no_titlebar=False, no_button=False,
                 grab_anywhere=False, keep_on_top=None, do_not_reroute_stdout=True, echo_stdout=False, resizable=True, blocking=False):
        """

        :param size:                  (w,h) w=characters-wide, h=rows-high
        :type size:                   (int, int)
        :param location:              Location of upper left corner of the window
        :type location:               (int, int)
        :param relative_location:     (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
        :type relative_location:      (int, int)
        :param font:                  specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
        :type font:                   (str or (str, int[, str]) or None)
        :param no_titlebar:           If True no titlebar will be shown
        :type no_titlebar:            (bool)
        :param no_button:             show button
        :type no_button:              (bool)
        :param grab_anywhere:         If True: can grab anywhere to move the window (Default = False)
        :type grab_anywhere:          (bool)
        :param location:              Location of upper left corner of the window
        :type location:               (int, int)
        :param do_not_reroute_stdout: bool value
        :type do_not_reroute_stdout:  (bool)
        :param echo_stdout:           If True stdout is sent to both the console and the debug window
        :type echo_stdout:            (bool)
        :param resizable:             if True, makes the window resizble
        :type resizable:              (bool)
        :param blocking:              if True, makes the window block instead of returning immediately
        :type blocking:               (bool)
        """

        # Show a form that's a running counter
        self.size = size
        self.location = location
        self.relative_location = relative_location
        self.font = font
        self.no_titlebar = no_titlebar
        self.no_button = no_button
        self.grab_anywhere = grab_anywhere
        self.keep_on_top = keep_on_top
        self.do_not_reroute_stdout = do_not_reroute_stdout
        self.echo_stdout = echo_stdout
        self.resizable = resizable
        self.blocking = blocking

        win_size = size if size != (None, None) else DEFAULT_DEBUG_WINDOW_SIZE
        self.output_element = Multiline(size=win_size, autoscroll=True, auto_refresh=True, reroute_stdout=False if do_not_reroute_stdout else True,
                                        echo_stdout_stderr=self.echo_stdout, reroute_stderr=False if do_not_reroute_stdout else True, expand_x=True, expand_y=True, autoscroll_only_at_bottom=True,
                                        key='-MULTILINE-')
        if no_button:
            self.layout = [[self.output_element]]
        else:
            if blocking:
                self.quit_button = Button('Quit', key='Quit')
            else:
                self.quit_button = DummyButton('Quit', key='Quit')
            self.layout = [[self.output_element],
                           [pin(self.quit_button), pin(B('Pause', key='-PAUSE-')), Stretch()]]

        self.layout[-1] += [Sizegrip()]

        self.window = Window('Debug Window', self.layout, no_titlebar=no_titlebar, auto_size_text=True, location=location, relative_location=relative_location,
                             font=font or ('Courier New', 10), grab_anywhere=grab_anywhere, keep_on_top=keep_on_top, finalize=True, resizable=resizable)
        return

    def reopen_window(self):
        if self.window is None or (self.window is not None and self.window.is_closed()):
            self.__init__(size=self.size, location=self.location, relative_location=self.relative_location, font=self.font, no_titlebar=self.no_titlebar,
                          no_button=self.no_button, grab_anywhere=self.grab_anywhere, keep_on_top=self.keep_on_top,
                          do_not_reroute_stdout=self.do_not_reroute_stdout, resizable=self.resizable, echo_stdout=self.echo_stdout)

    def Print(self, *args, end=None, sep=None, text_color=None, background_color=None, erase_all=False, font=None, blocking=None):
        global SUPPRESS_WIDGET_NOT_FINALIZED_WARNINGS
        suppress = SUPPRESS_WIDGET_NOT_FINALIZED_WARNINGS
        SUPPRESS_WIDGET_NOT_FINALIZED_WARNINGS = True
        sepchar = sep if sep is not None else ' '
        endchar = end if end is not None else '\n'
        self.reopen_window()  # if needed, open the window again

        timeout = 0 if not blocking else None
        if erase_all:
            self.output_element.update('')

        if self.do_not_reroute_stdout:
            end_str = str(end) if end is not None else '\n'
            sep_str = str(sep) if sep is not None else ' '

            outstring = ''
            num_args = len(args)
            for i, arg in enumerate(args):
                outstring += str(arg)
                if i != num_args - 1:
                    outstring += sep_str
            outstring += end_str
            try:
                self.output_element.update(outstring, append=True, text_color_for_value=text_color, background_color_for_value=background_color, font_for_value=font)
            except:
                self.window = None
                self.reopen_window()
                self.output_element.update(outstring, append=True, text_color_for_value=text_color, background_color_for_value=background_color, font_for_value=font)

        else:
            print(*args, sep=sepchar, end=endchar)
        # This is tricky....changing the button type depending on the blocking parm. If blocking, then the "Quit" button should become a normal button
        if blocking and not self.no_button:
            self.quit_button.BType = BUTTON_TYPE_READ_FORM
            try:  # The window may be closed by user at any time, so have to protect
                self.quit_button.update(text='Click to continue...')
            except:
                self.window = None
        elif not self.no_button:
            self.quit_button.BType = BUTTON_TYPE_CLOSES_WIN_ONLY
            try:  # The window may be closed by user at any time, so have to protect
                self.quit_button.update(text='Quit')
            except:
                self.window = None

        try:  # The window may be closed by user at any time, so have to protect
            if blocking and not self.no_button:
                self.window['-PAUSE-'].update(visible=False)
            elif not self.no_button:
                self.window['-PAUSE-'].update(visible=True)
        except:
            self.window = None

        self.reopen_window()  # if needed, open the window again

        paused = None
        while True:
            event, values = self.window.read(timeout=timeout)

            if event == WIN_CLOSED:
                self.Close()
                break
            elif blocking and event == 'Quit':
                break
            elif not paused and event == TIMEOUT_EVENT and not blocking:
                break
            elif event == '-PAUSE-':
                if blocking or self.no_button:  # if blocking or shouldn't have been a button event, ignore the pause button entirely
                    continue
                if paused:
                    self.window['-PAUSE-'].update(text='Pause')
                    self.quit_button.update(visible=True)
                    break
                paused = True
                self.window['-PAUSE-'].update(text='Resume')
                self.quit_button.update(visible=False)
                timeout = None

        SUPPRESS_WIDGET_NOT_FINALIZED_WARNINGS = suppress

    def Close(self):
        if self.window.XFound:  # increment the number of open windows to get around a bug with debug windows
            Window._IncrementOpenCount()
        self.window.close()
        self.window = None


def easy_print(*args, size=(None, None), end=None, sep=None, location=(None, None), relative_location=(None, None), font=None, no_titlebar=False,
               no_button=False, grab_anywhere=False, keep_on_top=None, do_not_reroute_stdout=True, echo_stdout=False, text_color=None, background_color=None, colors=None, c=None,
               erase_all=False, resizable=True, blocking=None, wait=None):
    """
    Works like a "print" statement but with windowing options.  Routes output to the "Debug Window"

    In addition to the normal text and background colors, you can use a "colors" tuple/string
    The "colors" or "c" parameter defines both the text and background in a single parm.
    It can be a tuple or a single single. Both text and background colors need to be specified
    colors -(str, str) or str.  A combined text/background color definition in a single parameter
    c - (str, str) - Colors tuple has format (foreground, backgrouned)
    c - str - can also be a string of the format "foreground on background"  ("white on red")

    :param *args:                 stuff to output
    :type *args:                  (Any)
    :param size:                  (w,h) w=characters-wide, h=rows-high
    :type size:                   (int, int)
    :param end:                   end character
    :type end:                    (str)
    :param sep:                   separator character
    :type sep:                    (str)
    :param location:              Location of upper left corner of the window
    :type location:               (int, int)
    :param relative_location:     (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
    :type relative_location:      (int, int)
    :param font:                  specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                   (str or (str, int[, str]) or None)
    :param no_titlebar:           If True no titlebar will be shown
    :type no_titlebar:            (bool)
    :param no_button:             don't show button
    :type no_button:              (bool)
    :param grab_anywhere:         If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere:          (bool)
    :param background_color:      color of background
    :type background_color:       (str)
    :param text_color:            color of the text
    :type text_color:             (str)
    :param keep_on_top:           If True the window will remain above all current windows
    :type keep_on_top:            (bool)
    :param location:              Location of upper left corner of the window
    :type location:               (int, int)
    :param do_not_reroute_stdout: do not reroute stdout and stderr. If False, both stdout and stderr will reroute to here
    :type do_not_reroute_stdout:  (bool)
    :param echo_stdout:           If True stdout is sent to both the console and the debug window
    :type echo_stdout:            (bool)
    :param colors:                Either a tuple or a string that has both the text and background colors
    :type colors:                 (str) or (str, str)
    :param c:                     Either a tuple or a string that has both the text and background colors
    :type c:                      (str) or (str, str)
    :param resizable:             if True, the user can resize the debug window. Default is True
    :type resizable:              (bool)
    :param erase_all:             If True when erase the output before printing
    :type erase_all:              (bool)
    :param blocking:              if True, makes the window block instead of returning immediately. The "Quit" button changers to "More"
    :type blocking:               (bool | None)
    :param wait:                  Same as the "blocking" parm. It's an alias.  if True, makes the window block instead of returning immediately. The "Quit" button changes to "Click to Continue..."
    :type wait:                   (bool | None)
    :return:
    :rtype:
    """

    blocking = blocking or wait
    if _DebugWin.debug_window is None:
        _DebugWin.debug_window = _DebugWin(size=size, location=location, relative_location=relative_location, font=font, no_titlebar=no_titlebar,
                                           no_button=no_button, grab_anywhere=grab_anywhere, keep_on_top=keep_on_top,
                                           do_not_reroute_stdout=do_not_reroute_stdout, echo_stdout=echo_stdout, resizable=resizable, blocking=blocking)
    txt_color, bg_color = _parse_colors_parm(c or colors)
    _DebugWin.debug_window.Print(*args, end=end, sep=sep, text_color=text_color or txt_color, background_color=background_color or bg_color,
                                 erase_all=erase_all, font=font, blocking=blocking)


def easy_print_close():
    """
    Close a previously opened EasyPrint window

    :return:
    :rtype:
    """
    if _DebugWin.debug_window is not None:
        _DebugWin.debug_window.Close()
        _DebugWin.debug_window = None


#                            d8b          888
#                            Y8P          888
#                                         888
#   .d8888b 88888b.  888d888 888 88888b.  888888
#  d88P"    888 "88b 888P"   888 888 "88b 888
#  888      888  888 888     888 888  888 888
#  Y88b.    888 d88P 888     888 888  888 Y88b.
#   "Y8888P 88888P"  888     888 888  888  "Y888
#           888
#           888
#           888


CPRINT_DESTINATION_WINDOW = None
CPRINT_DESTINATION_MULTILINE_ELMENT_KEY = None


def cprint_set_output_destination(window, multiline_key):
    """
    Sets up the color print (cprint) output destination
    :param window:        The window that the cprint call will route the output to
    :type window:         (Window)
    :param multiline_key: Key for the Multiline Element where output will be sent
    :type multiline_key:  (Any)
    :return:              None
    :rtype:               None
    """

    global CPRINT_DESTINATION_WINDOW, CPRINT_DESTINATION_MULTILINE_ELMENT_KEY

    CPRINT_DESTINATION_WINDOW = window
    CPRINT_DESTINATION_MULTILINE_ELMENT_KEY = multiline_key


def cprint(*args, end=None, sep=' ', text_color=None, font=None, t=None, background_color=None, b=None, colors=None, c=None, window=None, key=None,
           justification=None, autoscroll=True, erase_all=False):
    """
    Color print to a multiline element in a window of your choice.
    Must have EITHER called cprint_set_output_destination prior to making this call so that the
    window and element key can be saved and used here to route the output, OR used the window
    and key parameters to the cprint function to specicy these items.

    args is a variable number of things you want to print.

    end - The end char to use just like print uses
    sep - The separation character like print uses
    text_color - The color of the text
            key - overrides the previously defined Multiline key
    window - overrides the previously defined window to output to
    background_color - The color of the background
    colors -(str, str) or str.  A combined text/background color definition in a single parameter

    There are also "aliases" for text_color, background_color and colors (t, b, c)
     t - An alias for color of the text (makes for shorter calls)
    b - An alias for the background_color parameter
    c - (str, str) - "shorthand" way of specifying color. (foreground, backgrouned)
    c - str - can also be a string of the format "foreground on background"  ("white on red")

    With the aliases it's possible to write the same print but in more compact ways:
    cprint('This will print white text on red background', c=('white', 'red'))
    cprint('This will print white text on red background', c='white on red')
    cprint('This will print white text on red background', text_color='white', background_color='red')
    cprint('This will print white text on red background', t='white', b='red')

    :param *args:            stuff to output
    :type *args:             (Any)
    :param text_color:       Color of the text
    :type text_color:        (str)
    :param font:             specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike for the value being updated
    :type font:              (str or (str, int[, str]) or None)
    :param background_color: The background color of the line
    :type background_color:  (str)
    :param colors:           Either a tuple or a string that has both the text and background colors "text on background" or just the text color
    :type colors:            (str) or (str, str)
    :param t:                Color of the text
    :type t:                 (str)
    :param b:                The background color of the line
    :type b:                 (str)
    :param c:                Either a tuple or a string.  Same as the color parm
    :type c:                 (str) or (str, str)
    :param end:              end character
    :type end:               (str)
    :param sep:              separator character
    :type sep:               (str)
    :param key:              key of multiline to output to (if you want to override the one previously set)
    :type key:               (Any)
    :param window:           Window containing the multiline to output to (if you want to override the one previously set)
    :type window:            (Window)
    :param justification:    text justification. left, right, center. Can use single characters l, r, c. Sets only for this value, not entire element
    :type justification:     (str)
    :param autoscroll:       If True the contents of the element will automatically scroll as more data added to the end
    :type autoscroll:        (bool)
    :param erase_all         If True the contents of the element will be cleared before printing happens
    :type erase_all          (bool)
    """

    destination_key = CPRINT_DESTINATION_MULTILINE_ELMENT_KEY if key is None else key
    destination_window = window or CPRINT_DESTINATION_WINDOW

    if (destination_window is None and window is None) or (destination_key is None and key is None):
        print('** Warning ** Attempting to perform a cprint without a valid window & key',
              'Will instead print on Console',
              'You can specify window and key in this cprint call, or set ahead of time using cprint_set_output_destination')
        print(*args)
        return

    kw_text_color = text_color or t
    kw_background_color = background_color or b
    dual_color = colors or c
    try:
        if isinstance(dual_color, tuple):
            kw_text_color = dual_color[0]
            kw_background_color = dual_color[1]
        elif isinstance(dual_color, str):
            if ' on ' in dual_color:  # if has "on" in the string, then have both text and background
                kw_text_color = dual_color.split(' on ')[0]
                kw_background_color = dual_color.split(' on ')[1]
            else:  # if no "on" then assume the color string is just the text color
                kw_text_color = dual_color
    except Exception as e:
        print('* cprint warning * you messed up with color formatting', e)

    mline = destination_window.find_element(destination_key, silent_on_error=True)  # type: Multiline
    try:
        # mline = destination_window[destination_key]     # type: Multiline
        if erase_all is True:
            mline.update('')
        if end is None:
            mline.print(*args, text_color=kw_text_color, background_color=kw_background_color, end='', sep=sep, justification=justification, font=font,
                        autoscroll=autoscroll)
            mline.print('', justification=justification, autoscroll=autoscroll)
        else:
            mline.print(*args, text_color=kw_text_color, background_color=kw_background_color, end=end, sep=sep, justification=justification, font=font,
                        autoscroll=autoscroll)
    except Exception as e:
        print('** cprint error trying to print to the multiline. Printing to console instead **', e)
        print(*args, end=end, sep=sep)


# ------------------------------------------------------------------------------------------------ #
# A print-like call that can be used to output to a multiline element as if it's an Output element #
# ------------------------------------------------------------------------------------------------ #

def _print_to_element(multiline_element, *args, end=None, sep=None, text_color=None, background_color=None, autoscroll=None, justification=None, font=None):
    """
    Print like Python normally prints except route the output to a multiline element and also add colors if desired

    :param multiline_element: The multiline element to be output to
    :type multiline_element:  (Multiline)
    :param args:              The arguments to print
    :type args:               List[Any]
    :param end:               The end char to use just like print uses
    :type end:                (str)
    :param sep:               The separation character like print uses
    :type sep:                (str)
    :param text_color:        color of the text
    :type text_color:         (str)
    :param background_color:  The background color of the line
    :type background_color:   (str)
    :param autoscroll:        If True (the default), the element will scroll to bottom after updating
    :type autoscroll:         (bool)
    :param font:              specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike for the value being updated
    :type font:               str | (str, int)
    """
    end_str = str(end) if end is not None else '\n'
    sep_str = str(sep) if sep is not None else ' '

    outstring = ''
    num_args = len(args)
    for i, arg in enumerate(args):
        outstring += str(arg)
        if i != num_args - 1:
            outstring += sep_str
    outstring += end_str

    multiline_element.update(outstring, append=True, text_color_for_value=text_color, background_color_for_value=background_color, autoscroll=autoscroll,
                             justification=justification, font_for_value=font)

    try:  # if the element is set to autorefresh, then refresh the parent window
        if multiline_element.AutoRefresh:
            multiline_element.ParentForm.refresh()
    except:
        pass


def _parse_colors_parm(colors):
    """
    Parse a colors parameter into its separate colors.
    Some functions accept a dual colors string/tuple.
    This function parses the parameter into the component colors

    :param colors: Either a tuple or a string that has both the text and background colors
    :type colors:  (str) or (str, str)
    :return:       tuple with the individual text and background colors
    :rtype:        (str, str)
    """
    if colors is None:
        return None, None
    dual_color = colors
    kw_text_color = kw_background_color = None
    try:
        if isinstance(dual_color, tuple):
            kw_text_color = dual_color[0]
            kw_background_color = dual_color[1]
        elif isinstance(dual_color, str):
            if ' on ' in dual_color:  # if has "on" in the string, then have both text and background
                kw_text_color = dual_color.split(' on ')[0]
                kw_background_color = dual_color.split(' on ')[1]
            else:  # if no "on" then assume the color string is just the text color
                kw_text_color = dual_color
    except Exception as e:
        print('* warning * you messed up with color formatting', e)

    return kw_text_color, kw_background_color


# ============================== set_global_icon ====#
# Sets the icon to be used by default                #
# ===================================================#
def set_global_icon(icon):
    """
    Sets the icon which will be used any time a window is created if an icon is not provided when the
    window is created.

    :param icon: Either a Base64 byte string or a filename
    :type icon:  bytes | str
    """

    Window._user_defined_icon = icon


# ============================== set_options ========#
# Sets the icon to be used by default                #
# ===================================================#
def set_options(icon=None, button_color=None, element_size=(None, None), button_element_size=(None, None),
                margins=(None, None),
                element_padding=(None, None), auto_size_text=None, auto_size_buttons=None, font=None, border_width=None,
                slider_border_width=None, slider_relief=None, slider_orientation=None,
                autoclose_time=None, message_box_line_width=None,
                progress_meter_border_depth=None, progress_meter_style=None,
                progress_meter_relief=None, progress_meter_color=None, progress_meter_size=None,
                text_justification=None, background_color=None, element_background_color=None,
                text_element_background_color=None, input_elements_background_color=None, input_text_color=None,
                scrollbar_color=None, text_color=None, element_text_color=None, debug_win_size=(None, None),
                window_location=(None, None), error_button_color=(None, None), tooltip_time=None, tooltip_font=None, use_ttk_buttons=None, ttk_theme=None,
                suppress_error_popups=None, suppress_raise_key_errors=None, suppress_key_guessing=None,warn_button_key_duplicates=False, enable_treeview_869_patch=None,
                enable_mac_notitlebar_patch=None, use_custom_titlebar=None, titlebar_background_color=None, titlebar_text_color=None, titlebar_font=None,
                titlebar_icon=None, user_settings_path=None, pysimplegui_settings_path=None, pysimplegui_settings_filename=None, keep_on_top=None, dpi_awareness=None, scaling=None, disable_modal_windows=None, force_modal_windows=None, tooltip_offset=(None, None),
                sbar_trough_color=None, sbar_background_color=None, sbar_arrow_color=None, sbar_width=None, sbar_arrow_width=None, sbar_frame_color=None, sbar_relief=None, alpha_channel=None,
                hide_window_when_creating=None, use_button_shortcuts=None, watermark_text=None, win_app_id=None):
    """
    :param icon:                            Can be either a filename or Base64 value. For Windows if filename, it MUST be ICO format. For Linux, must NOT be ICO. Most portable is to use a Base64 of a PNG file. This works universally across all OS's
    :type icon:                             bytes | str
    :param button_color:                    Color of the button (text, background)
    :type button_color:                     (str, str) | str
    :param element_size:                    element size (width, height) in characters
    :type element_size:                     (int, int)
    :param button_element_size:             Size of button
    :type button_element_size:              (int, int)
    :param margins:                         (left/right, top/bottom) tkinter margins around outsize. Amount of pixels to leave inside the window's frame around the edges before your elements are shown.
    :type margins:                          (int, int)
    :param element_padding:                 Default amount of padding to put around elements in window (left/right, top/bottom) or ((left, right), (top, bottom))
    :type element_padding:                  (int, int) or ((int, int),(int,int))
    :param auto_size_text:                  True if the Widget should be shrunk to exactly fit the number of chars to show
    :type auto_size_text:                   bool
    :param auto_size_buttons:               True if Buttons in this Window should be sized to exactly fit the text on this.
    :type auto_size_buttons:                (bool)
    :param font:                            specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                             (str or (str, int[, str]) or None)
    :param border_width:                    width of border around element
    :type border_width:                     (int)
    :param slider_border_width:             Width of the border around sliders
    :type slider_border_width:              (int)
    :param slider_relief:                   Type of relief to use for sliders
    :type slider_relief:                    (str)
    :param slider_orientation:              ???
    :type slider_orientation:               ???
    :param autoclose_time:                  ???
    :type autoclose_time:                   ???
    :param message_box_line_width:          ???
    :type message_box_line_width:           ???
    :param progress_meter_border_depth:     ???
    :type progress_meter_border_depth:      ???
    :param progress_meter_style:            You can no longer set a progress bar style. All ttk styles must be the same for the window
    :type progress_meter_style:             ???
    :param progress_meter_relief:
    :type progress_meter_relief:            ???
    :param progress_meter_color:            ???
    :type progress_meter_color:             ???
    :param progress_meter_size:             ???
    :type progress_meter_size:              ???
    :param text_justification:              Default text justification for all Text Elements in window
    :type text_justification:               'left' | 'right' | 'center'
    :param background_color:                color of background
    :type background_color:                 (str)
    :param element_background_color:        element background color
    :type element_background_color:         (str)
    :param text_element_background_color:   text element background color
    :type text_element_background_color:    (str)
    :param input_elements_background_color: Default color to use for the background of input elements
    :type input_elements_background_color:  (str)
    :param input_text_color:                Default color to use for the text for Input elements
    :type input_text_color:                 (str)
    :param scrollbar_color:                 Default color to use for the slider trough
    :type scrollbar_color:                  (str)
    :param text_color:                      color of the text
    :type text_color:                       (str)
    :param element_text_color:              Default color to use for Text elements
    :type element_text_color:               (str)
    :param debug_win_size:                  window size
    :type debug_win_size:                   (int, int)
    :param window_location:                 Default location to place windows. Not setting will center windows on the display
    :type window_location:                  (int, int) | None
    :param error_button_color:              (Default = (None))
    :type error_button_color:               ???
    :param tooltip_time:                    time in milliseconds to wait before showing a tooltip. Default is 400ms
    :type tooltip_time:                     (int)
    :param tooltip_font:                    font to use for all tooltips
    :type tooltip_font:                     str or Tuple[str, int] or Tuple[str, int, str]
    :param use_ttk_buttons:                 if True will cause all buttons to be ttk buttons
    :type use_ttk_buttons:                  (bool)
    :param ttk_theme:                       Theme to use with ttk widgets.  Choices (on Windows) include - 'default', 'winnative', 'clam', 'alt', 'classic', 'vista', 'xpnative'
    :type ttk_theme:                        (str)
    :param suppress_error_popups:           If True then error popups will not be shown if generated internally to PySimpleGUI
    :type suppress_error_popups:            (bool)
    :param suppress_raise_key_errors:       If True then key errors won't be raised (you'll still get popup error)
    :type suppress_raise_key_errors:        (bool)
    :param suppress_key_guessing:           If True then key errors won't try and find closest matches for you
    :type suppress_key_guessing:            (bool)
    :param warn_button_key_duplicates:      If True then duplicate Button Keys generate warnings (not recommended as they're expected)
    :type warn_button_key_duplicates:       (bool)
    :param enable_treeview_869_patch:       If True, then will use the treeview color patch for tk 8.6.9
    :type enable_treeview_869_patch:        (bool)
    :param enable_mac_notitlebar_patch:     If True then Windows with no titlebar use an alternative technique when tkinter version < 8.6.10
    :type enable_mac_notitlebar_patch:      (bool)
    :param use_custom_titlebar:             If True then a custom titlebar is used instead of the normal system titlebar
    :type use_custom_titlebar:              (bool)
    :param titlebar_background_color:       If custom titlebar indicated by use_custom_titlebar, then use this as background color
    :type titlebar_background_color:        str | None
    :param titlebar_text_color:             If custom titlebar indicated by use_custom_titlebar, then use this as text color
    :type titlebar_text_color:              str | None
    :param titlebar_font:                   If custom titlebar indicated by use_custom_titlebar, then use this as title font
    :type titlebar_font:                    (str or (str, int[, str]) or None) | None
    :param titlebar_icon:                   If custom titlebar indicated by use_custom_titlebar, then use this as the icon (file or base64 bytes)
    :type titlebar_icon:                    bytes | str
    :param user_settings_path:              default path for user_settings API calls. Expanded with os.path.expanduser so can contain ~ to represent user
    :type user_settings_path:               (str)
    :param pysimplegui_settings_path:       default path for the global PySimpleGUI user_settings
    :type pysimplegui_settings_path:        (str)
    :param pysimplegui_settings_filename:   default filename for the global PySimpleGUI user_settings
    :type pysimplegui_settings_filename:    (str)
    :param keep_on_top:                     If True then all windows will automatically be set to keep_on_top=True
    :type keep_on_top:                      (bool)
    :param dpi_awareness:                   If True then will turn on DPI awareness (Windows only at the moment)
    :type dpi_awareness:                    (bool)
    :param scaling:                         Sets the default scaling for all windows including popups, etc.
    :type scaling:                          (float)
    :param disable_modal_windows:           If True then all windows, including popups, will not be modal windows (unless they've been set to FORCED using another option)
    :type disable_modal_windows:            (bool)
    :param force_modal_windows:             If True then all windows will be modal (the disable option will be ignored... all windows will be forced to be modal)
    :type force_modal_windows:              (bool)
    :param tooltip_offset:                  Offset to use for tooltips as a tuple. These values will be added to the mouse location when the widget was entered.
    :type tooltip_offset:                   ((None, None) | (int, int))
    :param sbar_trough_color:               Scrollbar color of the trough
    :type sbar_trough_color:                (str)
    :param sbar_background_color:           Scrollbar color of the background of the arrow buttons at the ends AND the color of the "thumb" (the thing you grab and slide). Switches to arrow color when mouse is over
    :type sbar_background_color:            (str)
    :param sbar_arrow_color:                Scrollbar color of the arrow at the ends of the scrollbar (it looks like a button). Switches to background color when mouse is over
    :type sbar_arrow_color:                 (str)
    :param sbar_width:                      Scrollbar width in pixels
    :type sbar_width:                       (int)
    :param sbar_arrow_width:                Scrollbar width of the arrow on the scrollbar. It will potentially impact the overall width of the scrollbar
    :type sbar_arrow_width:                 (int)
    :param sbar_frame_color:                Scrollbar Color of frame around scrollbar (available only on some ttk themes)
    :type sbar_frame_color:                 (str)
    :param sbar_relief:                     Scrollbar relief that will be used for the "thumb" of the scrollbar (the thing you grab that slides). Should be a constant that is defined at starting with "RELIEF_" - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID
    :type sbar_relief:                      (str)
    :param alpha_channel:                   Default alpha channel to be used on all windows
    :type alpha_channel:                    (float)
    :param hide_window_when_creating:       If True then alpha will be set to 0 while a window is made and moved to location indicated
    :type hide_window_when_creating:        (bool)
    :param use_button_shortcuts:            If True then Shortcut Char will be used with Buttons
    :type use_button_shortcuts:             (bool)
    :param watermark_text:                  Set the text that will be used if a window is watermarked
    :type watermark_text:                   (str)
    :param win_app_id:                      For Windows only. Sets string that's passed to Windows to control combining icons on taskbar. Default is " mycompany.myproduct.subproduct.version". Windows with same ID combine on taskbar. Change before creating a window to set that window's ID.
    :type win_app_id:                       (str)
    :return:                                None
    :rtype:                                 None
    """

    global DEFAULT_ELEMENT_SIZE
    global DEFAULT_BUTTON_ELEMENT_SIZE
    global DEFAULT_MARGINS  # Margins for each LEFT/RIGHT margin is first term
    global DEFAULT_ELEMENT_PADDING  # Padding between elements (row, col) in pixels
    global DEFAULT_AUTOSIZE_TEXT
    global DEFAULT_AUTOSIZE_BUTTONS
    global DEFAULT_FONT
    global DEFAULT_BORDER_WIDTH
    global DEFAULT_AUTOCLOSE_TIME
    global DEFAULT_BUTTON_COLOR
    global MESSAGE_BOX_LINE_WIDTH
    global DEFAULT_PROGRESS_BAR_BORDER_WIDTH
    global DEFAULT_PROGRESS_BAR_STYLE
    global DEFAULT_PROGRESS_BAR_RELIEF
    global DEFAULT_PROGRESS_BAR_COLOR
    global DEFAULT_PROGRESS_BAR_SIZE
    global DEFAULT_TEXT_JUSTIFICATION
    global DEFAULT_DEBUG_WINDOW_SIZE
    global DEFAULT_SLIDER_BORDER_WIDTH
    global DEFAULT_SLIDER_RELIEF
    global DEFAULT_SLIDER_ORIENTATION
    global DEFAULT_BACKGROUND_COLOR
    global DEFAULT_INPUT_ELEMENTS_COLOR
    global DEFAULT_ELEMENT_BACKGROUND_COLOR
    global DEFAULT_TEXT_ELEMENT_BACKGROUND_COLOR
    global DEFAULT_SCROLLBAR_COLOR
    global DEFAULT_TEXT_COLOR
    global DEFAULT_WINDOW_LOCATION
    global DEFAULT_ELEMENT_TEXT_COLOR
    global DEFAULT_INPUT_TEXT_COLOR
    global DEFAULT_TOOLTIP_TIME
    global DEFAULT_ERROR_BUTTON_COLOR
    global DEFAULT_TTK_THEME
    global USE_TTK_BUTTONS
    global TOOLTIP_FONT
    global SUPPRESS_ERROR_POPUPS
    global SUPPRESS_RAISE_KEY_ERRORS
    global SUPPRESS_KEY_GUESSING
    global WARN_DUPLICATE_BUTTON_KEY_ERRORS
    global ENABLE_TREEVIEW_869_PATCH
    global ENABLE_MAC_NOTITLEBAR_PATCH
    global USE_CUSTOM_TITLEBAR
    global CUSTOM_TITLEBAR_BACKGROUND_COLOR
    global CUSTOM_TITLEBAR_TEXT_COLOR
    global CUSTOM_TITLEBAR_ICON
    global CUSTOM_TITLEBAR_FONT
    global DEFAULT_USER_SETTINGS_PATH
    global DEFAULT_USER_SETTINGS_PYSIMPLEGUI_PATH
    global DEFAULT_USER_SETTINGS_PYSIMPLEGUI_FILENAME
    global DEFAULT_KEEP_ON_TOP
    global DEFAULT_SCALING
    global DEFAULT_MODAL_WINDOWS_ENABLED
    global DEFAULT_MODAL_WINDOWS_FORCED
    global DEFAULT_TOOLTIP_OFFSET
    global DEFAULT_ALPHA_CHANNEL
    global _pysimplegui_user_settings
    global ttk_part_overrides_from_options
    global DEFAULT_HIDE_WINDOW_WHEN_CREATING
    global DEFAULT_USE_BUTTON_SHORTCUTS
    # global _my_windows

    if icon:
        Window._user_defined_icon = icon
        # _my_windows._user_defined_icon = icon

    if button_color != None:
        if button_color == COLOR_SYSTEM_DEFAULT:
            DEFAULT_BUTTON_COLOR = (COLOR_SYSTEM_DEFAULT, COLOR_SYSTEM_DEFAULT)
        else:
            DEFAULT_BUTTON_COLOR = button_color

    if element_size != (None, None):
        DEFAULT_ELEMENT_SIZE = element_size

    if button_element_size != (None, None):
        DEFAULT_BUTTON_ELEMENT_SIZE = button_element_size

    if margins != (None, None):
        DEFAULT_MARGINS = margins

    if element_padding != (None, None):
        DEFAULT_ELEMENT_PADDING = element_padding

    if auto_size_text != None:
        DEFAULT_AUTOSIZE_TEXT = auto_size_text

    if auto_size_buttons != None:
        DEFAULT_AUTOSIZE_BUTTONS = auto_size_buttons

    if font != None:
        DEFAULT_FONT = font

    if border_width != None:
        DEFAULT_BORDER_WIDTH = border_width

    if autoclose_time != None:
        DEFAULT_AUTOCLOSE_TIME = autoclose_time

    if message_box_line_width != None:
        MESSAGE_BOX_LINE_WIDTH = message_box_line_width

    if progress_meter_border_depth != None:
        DEFAULT_PROGRESS_BAR_BORDER_WIDTH = progress_meter_border_depth

    if progress_meter_style != None:
        warnings.warn('You can no longer set a progress bar style. All ttk styles must be the same for the window', UserWarning)
        # DEFAULT_PROGRESS_BAR_STYLE = progress_meter_style

    if progress_meter_relief != None:
        DEFAULT_PROGRESS_BAR_RELIEF = progress_meter_relief

    if progress_meter_color != None:
        DEFAULT_PROGRESS_BAR_COLOR = progress_meter_color

    if progress_meter_size != None:
        DEFAULT_PROGRESS_BAR_SIZE = progress_meter_size

    if slider_border_width != None:
        DEFAULT_SLIDER_BORDER_WIDTH = slider_border_width

    if slider_orientation != None:
        DEFAULT_SLIDER_ORIENTATION = slider_orientation

    if slider_relief != None:
        DEFAULT_SLIDER_RELIEF = slider_relief

    if text_justification != None:
        DEFAULT_TEXT_JUSTIFICATION = text_justification

    if background_color != None:
        DEFAULT_BACKGROUND_COLOR = background_color

    if text_element_background_color != None:
        DEFAULT_TEXT_ELEMENT_BACKGROUND_COLOR = text_element_background_color

    if input_elements_background_color != None:
        DEFAULT_INPUT_ELEMENTS_COLOR = input_elements_background_color

    if element_background_color != None:
        DEFAULT_ELEMENT_BACKGROUND_COLOR = element_background_color

    if window_location != (None, None):
        DEFAULT_WINDOW_LOCATION = window_location

    if debug_win_size != (None, None):
        DEFAULT_DEBUG_WINDOW_SIZE = debug_win_size

    if text_color != None:
        DEFAULT_TEXT_COLOR = text_color

    if scrollbar_color != None:
        DEFAULT_SCROLLBAR_COLOR = scrollbar_color

    if element_text_color != None:
        DEFAULT_ELEMENT_TEXT_COLOR = element_text_color

    if input_text_color is not None:
        DEFAULT_INPUT_TEXT_COLOR = input_text_color

    if tooltip_time is not None:
        DEFAULT_TOOLTIP_TIME = tooltip_time

    if error_button_color != (None, None):
        DEFAULT_ERROR_BUTTON_COLOR = error_button_color

    if ttk_theme is not None:
        DEFAULT_TTK_THEME = ttk_theme

    if use_ttk_buttons is not None:
        USE_TTK_BUTTONS = use_ttk_buttons

    if tooltip_font is not None:
        TOOLTIP_FONT = tooltip_font

    if suppress_error_popups is not None:
        SUPPRESS_ERROR_POPUPS = suppress_error_popups

    if suppress_raise_key_errors is not None:
        SUPPRESS_RAISE_KEY_ERRORS = suppress_raise_key_errors

    if suppress_key_guessing is not None:
        SUPPRESS_KEY_GUESSING = suppress_key_guessing

    if warn_button_key_duplicates is not None:
        WARN_DUPLICATE_BUTTON_KEY_ERRORS = warn_button_key_duplicates

    if enable_treeview_869_patch is not None:
        ENABLE_TREEVIEW_869_PATCH = enable_treeview_869_patch

    if enable_mac_notitlebar_patch is not None:
        ENABLE_MAC_NOTITLEBAR_PATCH = enable_mac_notitlebar_patch

    if use_custom_titlebar is not None:
        USE_CUSTOM_TITLEBAR = use_custom_titlebar

    if titlebar_background_color is not None:
        CUSTOM_TITLEBAR_BACKGROUND_COLOR = titlebar_background_color

    if titlebar_text_color is not None:
        CUSTOM_TITLEBAR_TEXT_COLOR = titlebar_text_color

    if titlebar_font is not None:
        CUSTOM_TITLEBAR_FONT = titlebar_font

    if titlebar_icon is not None:
        CUSTOM_TITLEBAR_ICON = titlebar_icon

    if user_settings_path is not None:
        DEFAULT_USER_SETTINGS_PATH = user_settings_path

    if pysimplegui_settings_path is not None:
        DEFAULT_USER_SETTINGS_PYSIMPLEGUI_PATH = pysimplegui_settings_path

    if pysimplegui_settings_filename is not None:
        DEFAULT_USER_SETTINGS_PYSIMPLEGUI_FILENAME = pysimplegui_settings_filename

    if pysimplegui_settings_filename is not None or pysimplegui_settings_filename is not None:
        _pysimplegui_user_settings = UserSettings(filename=DEFAULT_USER_SETTINGS_PYSIMPLEGUI_FILENAME,
                                                  path=DEFAULT_USER_SETTINGS_PYSIMPLEGUI_PATH)

    if keep_on_top is not None:
        DEFAULT_KEEP_ON_TOP = keep_on_top

    if dpi_awareness is True:
        if running_windows():
            if platform.release() == "7":
                ctypes.windll.user32.SetProcessDPIAware()
            elif platform.release() == "8" or platform.release() == "10":
                ctypes.windll.shcore.SetProcessDpiAwareness(1)

    if scaling is not None:
        DEFAULT_SCALING = scaling

    if disable_modal_windows is not None:
        DEFAULT_MODAL_WINDOWS_ENABLED = not disable_modal_windows

    if force_modal_windows is not None:
        DEFAULT_MODAL_WINDOWS_FORCED = force_modal_windows

    if tooltip_offset != (None, None):
        DEFAULT_TOOLTIP_OFFSET = tooltip_offset


    if alpha_channel is not None:
        DEFAULT_ALPHA_CHANNEL = alpha_channel

    # ---------------- ttk scrollbar section ----------------
    if sbar_background_color is not None:
        ttk_part_overrides_from_options.sbar_background_color = sbar_background_color

    if sbar_trough_color is not None:
        ttk_part_overrides_from_options.sbar_trough_color = sbar_trough_color

    if sbar_arrow_color is not None:
        ttk_part_overrides_from_options.sbar_arrow_color = sbar_arrow_color

    if sbar_frame_color is not None:
        ttk_part_overrides_from_options.sbar_frame_color = sbar_frame_color

    if sbar_relief is not None:
        ttk_part_overrides_from_options.sbar_relief = sbar_relief

    if sbar_arrow_width is not None:
        ttk_part_overrides_from_options.sbar_arrow_width = sbar_arrow_width

    if sbar_width is not None:
        ttk_part_overrides_from_options.sbar_width = sbar_width

    if hide_window_when_creating is not None:
        DEFAULT_HIDE_WINDOW_WHEN_CREATING = hide_window_when_creating

    if use_button_shortcuts is not None:
        DEFAULT_USE_BUTTON_SHORTCUTS = use_button_shortcuts

    if watermark_text is not None:
        Window._watermark_user_text = watermark_text


    if win_app_id is not None:
        # Enables the correct application icon to be shown on the Windows taskbar
        if running_windows():
            try:
                ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(win_app_id)
            except Exception as e:
                print('Error setting App ID', e)
        Window._watermark_user_text = watermark_text

    return True

# ----------------------------------------------------------------- #

# .########.##.....##.########.##.....##.########..######.
# ....##....##.....##.##.......###...###.##.......##....##
# ....##....##.....##.##.......####.####.##.......##......
# ....##....#########.######...##.###.##.######....######.
# ....##....##.....##.##.......##.....##.##.............##
# ....##....##.....##.##.......##.....##.##.......##....##
# ....##....##.....##.########.##.....##.########..######.

# ----------------------------------------------------------------- #

# The official Theme code

#################### ChangeLookAndFeel #######################
# Predefined settings that will change the colors and styles #
# of the elements.                                           #
##############################################################
LOOK_AND_FEEL_TABLE = {
    "SystemDefault": {"BACKGROUND": COLOR_SYSTEM_DEFAULT, "TEXT": COLOR_SYSTEM_DEFAULT, "INPUT": COLOR_SYSTEM_DEFAULT, "TEXT_INPUT": COLOR_SYSTEM_DEFAULT,
                      "SCROLL": COLOR_SYSTEM_DEFAULT, "BUTTON": OFFICIAL_PYSIMPLEGUI_BUTTON_COLOR, "PROGRESS": COLOR_SYSTEM_DEFAULT, "BORDER": 1,
                      "SLIDER_DEPTH": 1, "PROGRESS_DEPTH": 0, },
    "SystemDefaultForReal": {"BACKGROUND": COLOR_SYSTEM_DEFAULT, "TEXT": COLOR_SYSTEM_DEFAULT, "INPUT": COLOR_SYSTEM_DEFAULT,
                             "TEXT_INPUT": COLOR_SYSTEM_DEFAULT, "SCROLL": COLOR_SYSTEM_DEFAULT, "BUTTON": COLOR_SYSTEM_DEFAULT,
                             "PROGRESS": COLOR_SYSTEM_DEFAULT, "BORDER": 1, "SLIDER_DEPTH": 1, "PROGRESS_DEPTH": 0, },
    "SystemDefault1": {"BACKGROUND": COLOR_SYSTEM_DEFAULT, "TEXT": COLOR_SYSTEM_DEFAULT, "INPUT": COLOR_SYSTEM_DEFAULT, "TEXT_INPUT": COLOR_SYSTEM_DEFAULT,
                       "SCROLL": COLOR_SYSTEM_DEFAULT, "BUTTON": COLOR_SYSTEM_DEFAULT, "PROGRESS": COLOR_SYSTEM_DEFAULT, "BORDER": 1, "SLIDER_DEPTH": 1,
                       "PROGRESS_DEPTH": 0, },
    "Material1": {"BACKGROUND": "#E3F2FD", "TEXT": "#000000", "INPUT": "#86A8FF", "TEXT_INPUT": "#000000", "SCROLL": "#86A8FF",
                  "BUTTON": ("#FFFFFF", "#5079D3"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 0, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "ACCENT1": "#FF0266", "ACCENT2": "#FF5C93", "ACCENT3": "#C5003C", },
    "Material2": {"BACKGROUND": "#FAFAFA", "TEXT": "#000000", "INPUT": "#004EA1", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#5EA7FF",
                  "BUTTON": ("#FFFFFF", "#0079D3"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 0, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "ACCENT1": "#FF0266", "ACCENT2": "#FF5C93", "ACCENT3": "#C5003C", },
    "Reddit": {"BACKGROUND": "#ffffff", "TEXT": "#1a1a1b", "INPUT": "#dae0e6", "TEXT_INPUT": "#222222", "SCROLL": "#a5a4a4", "BUTTON": ("#FFFFFF", "#0079d3"),
               "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, "ACCENT1": "#ff5414", "ACCENT2": "#33a8ff",
               "ACCENT3": "#dbf0ff", },
    "Topanga": {"BACKGROUND": "#282923", "TEXT": "#E7DB74", "INPUT": "#393a32", "TEXT_INPUT": "#E7C855", "SCROLL": "#E7C855", "BUTTON": ("#E7C855", "#284B5A"),
                "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, "ACCENT1": "#c15226", "ACCENT2": "#7a4d5f",
                "ACCENT3": "#889743", },
    "GreenTan": {"BACKGROUND": "#9FB8AD", "TEXT": '#000000', "INPUT": "#F7F3EC", "TEXT_INPUT": "#000000", "SCROLL": "#F7F3EC", "BUTTON": ("#FFFFFF", "#475841"),
                 "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "Dark": {"BACKGROUND": "#404040", "TEXT": "#FFFFFF", "INPUT": "#4D4D4D", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#707070", "BUTTON": ("#FFFFFF", "#004F00"),
             "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "LightGreen": {"BACKGROUND": "#B7CECE", "TEXT": "#000000", "INPUT": "#FDFFF7", "TEXT_INPUT": "#000000", "SCROLL": "#FDFFF7",
                   "BUTTON": ("#FFFFFF", "#658268"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "ACCENT1": "#76506d",
                   "ACCENT2": "#5148f1", "ACCENT3": "#0a1c84", "PROGRESS_DEPTH": 0, },
    "Dark2": {"BACKGROUND": "#404040", "TEXT": "#FFFFFF", "INPUT": "#FFFFFF", "TEXT_INPUT": "#000000", "SCROLL": "#707070", "BUTTON": ("#FFFFFF", "#004F00"),
              "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "Black": {"BACKGROUND": "#000000", "TEXT": "#FFFFFF", "INPUT": "#4D4D4D", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#707070", "BUTTON": ("#000000", "#FFFFFF"),
              "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "Black2": {"BACKGROUND": "#000000", "TEXT": "#FFFFFF", "INPUT": "#000000", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#FFFFFF", "BUTTON": ("#000000", "#FFFFFF"),
              "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "Tan": {"BACKGROUND": "#fdf6e3", "TEXT": "#268bd1", "INPUT": "#eee8d5", "TEXT_INPUT": "#6c71c3", "SCROLL": "#eee8d5", "BUTTON": ("#FFFFFF", "#063542"),
            "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "TanBlue": {"BACKGROUND": "#e5dece", "TEXT": "#063289", "INPUT": "#f9f8f4", "TEXT_INPUT": "#242834", "SCROLL": "#eee8d5", "BUTTON": ("#FFFFFF", "#063289"),
                "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkTanBlue": {"BACKGROUND": "#242834", "TEXT": "#dfe6f8", "INPUT": "#97755c", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#a9afbb",
                    "BUTTON": ("#FFFFFF", "#063289"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkAmber": {"BACKGROUND": "#2c2825", "TEXT": "#fdcb52", "INPUT": "#705e52", "TEXT_INPUT": "#fdcb52", "SCROLL": "#705e52",
                  "BUTTON": ("#000000", "#fdcb52"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkBlue": {"BACKGROUND": "#1a2835", "TEXT": "#d1ecff", "INPUT": "#335267", "TEXT_INPUT": "#acc2d0", "SCROLL": "#1b6497", "BUTTON": ("#000000", "#fafaf8"),
                 "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "Reds": {"BACKGROUND": "#280001", "TEXT": "#FFFFFF", "INPUT": "#d8d584", "TEXT_INPUT": "#000000", "SCROLL": "#763e00", "BUTTON": ("#000000", "#daad28"),
             "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "Green": {"BACKGROUND": "#82a459", "TEXT": "#000000", "INPUT": "#d8d584", "TEXT_INPUT": "#000000", "SCROLL": "#e3ecf3", "BUTTON": ("#FFFFFF", "#517239"),
              "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "BluePurple": {"BACKGROUND": "#A5CADD", "TEXT": "#6E266E", "INPUT": "#E0F5FF", "TEXT_INPUT": "#000000", "SCROLL": "#E0F5FF",
                   "BUTTON": ("#FFFFFF", "#303952"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "Purple": {"BACKGROUND": "#B0AAC2", "TEXT": "#000000", "INPUT": "#F2EFE8", "SCROLL": "#F2EFE8", "TEXT_INPUT": "#000000", "BUTTON": ("#000000", "#C2D4D8"),
               "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "BlueMono": {"BACKGROUND": "#AAB6D3", "TEXT": "#000000", "INPUT": "#F1F4FC", "SCROLL": "#F1F4FC", "TEXT_INPUT": "#000000", "BUTTON": ("#FFFFFF", "#7186C7"),
                 "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "GreenMono": {"BACKGROUND": "#A8C1B4", "TEXT": "#000000", "INPUT": "#DDE0DE", "SCROLL": "#E3E3E3", "TEXT_INPUT": "#000000",
                  "BUTTON": ("#FFFFFF", "#6D9F85"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "BrownBlue": {"BACKGROUND": "#64778d", "TEXT": "#FFFFFF", "INPUT": "#f0f3f7", "SCROLL": "#A6B2BE", "TEXT_INPUT": "#000000",
                  "BUTTON": ("#FFFFFF", "#283b5b"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "BrightColors": {"BACKGROUND": "#b4ffb4", "TEXT": "#000000", "INPUT": "#ffff64", "SCROLL": "#ffb482", "TEXT_INPUT": "#000000",
                     "BUTTON": ("#000000", "#ffa0dc"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "NeutralBlue": {"BACKGROUND": "#92aa9d", "TEXT": "#000000", "INPUT": "#fcfff6", "SCROLL": "#fcfff6", "TEXT_INPUT": "#000000",
                    "BUTTON": ("#000000", "#d0dbbd"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "Kayak": {"BACKGROUND": "#a7ad7f", "TEXT": "#000000", "INPUT": "#e6d3a8", "SCROLL": "#e6d3a8", "TEXT_INPUT": "#000000", "BUTTON": ("#FFFFFF", "#5d907d"),
              "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "SandyBeach": {"BACKGROUND": "#efeccb", "TEXT": "#012f2f", "INPUT": "#e6d3a8", "SCROLL": "#e6d3a8", "TEXT_INPUT": "#012f2f",
                   "BUTTON": ("#FFFFFF", "#046380"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "TealMono": {"BACKGROUND": "#a8cfdd", "TEXT": "#000000", "INPUT": "#dfedf2", "SCROLL": "#dfedf2", "TEXT_INPUT": "#000000", "BUTTON": ("#FFFFFF", "#183440"),
                 "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "Default": {"BACKGROUND": COLOR_SYSTEM_DEFAULT, "TEXT": COLOR_SYSTEM_DEFAULT, "INPUT": COLOR_SYSTEM_DEFAULT, "TEXT_INPUT": COLOR_SYSTEM_DEFAULT,
                "SCROLL": COLOR_SYSTEM_DEFAULT, "BUTTON": OFFICIAL_PYSIMPLEGUI_BUTTON_COLOR, "PROGRESS": COLOR_SYSTEM_DEFAULT, "BORDER": 1, "SLIDER_DEPTH": 1,
                "PROGRESS_DEPTH": 0, },
    "Default1": {"BACKGROUND": COLOR_SYSTEM_DEFAULT, "TEXT": COLOR_SYSTEM_DEFAULT, "INPUT": COLOR_SYSTEM_DEFAULT, "TEXT_INPUT": COLOR_SYSTEM_DEFAULT,
                 "SCROLL": COLOR_SYSTEM_DEFAULT, "BUTTON": COLOR_SYSTEM_DEFAULT, "PROGRESS": COLOR_SYSTEM_DEFAULT, "BORDER": 1, "SLIDER_DEPTH": 1,
                 "PROGRESS_DEPTH": 0, },
    "DefaultNoMoreNagging": {"BACKGROUND": COLOR_SYSTEM_DEFAULT, "TEXT": COLOR_SYSTEM_DEFAULT, "INPUT": COLOR_SYSTEM_DEFAULT,
                             "TEXT_INPUT": COLOR_SYSTEM_DEFAULT, "SCROLL": COLOR_SYSTEM_DEFAULT, "BUTTON": OFFICIAL_PYSIMPLEGUI_BUTTON_COLOR,
                             "PROGRESS": COLOR_SYSTEM_DEFAULT, "BORDER": 1, "SLIDER_DEPTH": 1, "PROGRESS_DEPTH": 0, },
    "GrayGrayGray": {"BACKGROUND": COLOR_SYSTEM_DEFAULT, "TEXT": COLOR_SYSTEM_DEFAULT, "INPUT": COLOR_SYSTEM_DEFAULT, "TEXT_INPUT": COLOR_SYSTEM_DEFAULT,
                     "SCROLL": COLOR_SYSTEM_DEFAULT, "BUTTON": COLOR_SYSTEM_DEFAULT, "PROGRESS": COLOR_SYSTEM_DEFAULT, "BORDER": 1, "SLIDER_DEPTH": 1,
                     "PROGRESS_DEPTH": 0, },
    "LightBlue": {"BACKGROUND": "#E3F2FD", "TEXT": "#000000", "INPUT": "#86A8FF", "TEXT_INPUT": "#000000", "SCROLL": "#86A8FF",
                  "BUTTON": ("#FFFFFF", "#5079D3"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 0, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "ACCENT1": "#FF0266", "ACCENT2": "#FF5C93", "ACCENT3": "#C5003C", },
    "LightGrey": {"BACKGROUND": "#FAFAFA", "TEXT": "#000000", "INPUT": "#004EA1", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#5EA7FF",
                  "BUTTON": ("#FFFFFF", "#0079D3"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 0, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "ACCENT1": "#FF0266", "ACCENT2": "#FF5C93", "ACCENT3": "#C5003C", },
    "LightGrey1": {"BACKGROUND": "#ffffff", "TEXT": "#1a1a1b", "INPUT": "#dae0e6", "TEXT_INPUT": "#222222", "SCROLL": "#a5a4a4",
                   "BUTTON": ("#FFFFFF", "#0079d3"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "ACCENT1": "#ff5414", "ACCENT2": "#33a8ff", "ACCENT3": "#dbf0ff", },
    "DarkBrown": {"BACKGROUND": "#282923", "TEXT": "#E7DB74", "INPUT": "#393a32", "TEXT_INPUT": "#E7C855", "SCROLL": "#E7C855",
                  "BUTTON": ("#E7C855", "#284B5A"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "ACCENT1": "#c15226", "ACCENT2": "#7a4d5f", "ACCENT3": "#889743", },
    "LightGreen1": {"BACKGROUND": "#9FB8AD", "TEXT": "#000000", "INPUT": "#F7F3EC", "TEXT_INPUT": "#000000", "SCROLL": "#F7F3EC",
                    "BUTTON": ("#FFFFFF", "#475841"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkGrey": {"BACKGROUND": "#404040", "TEXT": "#FFFFFF", "INPUT": "#4D4D4D", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#707070", "BUTTON": ("#FFFFFF", "#004F00"),
                 "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "LightGreen2": {"BACKGROUND": "#B7CECE", "TEXT": "#000000", "INPUT": "#FDFFF7", "TEXT_INPUT": "#000000", "SCROLL": "#FDFFF7",
                    "BUTTON": ("#FFFFFF", "#658268"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "ACCENT1": "#76506d",
                    "ACCENT2": "#5148f1", "ACCENT3": "#0a1c84", "PROGRESS_DEPTH": 0, },
    "DarkGrey1": {"BACKGROUND": "#404040", "TEXT": "#FFFFFF", "INPUT": "#FFFFFF", "TEXT_INPUT": "#000000", "SCROLL": "#707070",
                  "BUTTON": ("#FFFFFF", "#004F00"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkBlack": {"BACKGROUND": "#000000", "TEXT": "#FFFFFF", "INPUT": "#4D4D4D", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#707070",
                  "BUTTON": ("#000000", "#FFFFFF"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "LightBrown": {"BACKGROUND": "#fdf6e3", "TEXT": "#268bd1", "INPUT": "#eee8d5", "TEXT_INPUT": "#6c71c3", "SCROLL": "#eee8d5",
                   "BUTTON": ("#FFFFFF", "#063542"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "LightBrown1": {"BACKGROUND": "#e5dece", "TEXT": "#063289", "INPUT": "#f9f8f4", "TEXT_INPUT": "#242834", "SCROLL": "#eee8d5",
                    "BUTTON": ("#FFFFFF", "#063289"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkBlue1": {"BACKGROUND": "#242834", "TEXT": "#dfe6f8", "INPUT": "#97755c", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#a9afbb",
                  "BUTTON": ("#FFFFFF", "#063289"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkBrown1": {"BACKGROUND": "#2c2825", "TEXT": "#fdcb52", "INPUT": "#705e52", "TEXT_INPUT": "#fdcb52", "SCROLL": "#705e52",
                   "BUTTON": ("#000000", "#fdcb52"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkBlue2": {"BACKGROUND": "#1a2835", "TEXT": "#d1ecff", "INPUT": "#335267", "TEXT_INPUT": "#acc2d0", "SCROLL": "#1b6497",
                  "BUTTON": ("#000000", "#fafaf8"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkBrown2": {"BACKGROUND": "#280001", "TEXT": "#FFFFFF", "INPUT": "#d8d584", "TEXT_INPUT": "#000000", "SCROLL": "#763e00",
                   "BUTTON": ("#000000", "#daad28"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkGreen": {"BACKGROUND": "#82a459", "TEXT": "#000000", "INPUT": "#d8d584", "TEXT_INPUT": "#000000", "SCROLL": "#e3ecf3",
                  "BUTTON": ("#FFFFFF", "#517239"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "LightBlue1": {"BACKGROUND": "#A5CADD", "TEXT": "#6E266E", "INPUT": "#E0F5FF", "TEXT_INPUT": "#000000", "SCROLL": "#E0F5FF",
                   "BUTTON": ("#FFFFFF", "#303952"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "LightPurple": {"BACKGROUND": "#B0AAC2", "TEXT": "#000000", "INPUT": "#F2EFE8", "SCROLL": "#F2EFE8", "TEXT_INPUT": "#000000",
                    "BUTTON": ("#000000", "#C2D4D8"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "LightBlue2": {"BACKGROUND": "#AAB6D3", "TEXT": "#000000", "INPUT": "#F1F4FC", "SCROLL": "#F1F4FC", "TEXT_INPUT": "#000000",
                   "BUTTON": ("#FFFFFF", "#7186C7"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "LightGreen3": {"BACKGROUND": "#A8C1B4", "TEXT": "#000000", "INPUT": "#DDE0DE", "SCROLL": "#E3E3E3", "TEXT_INPUT": "#000000",
                    "BUTTON": ("#FFFFFF", "#6D9F85"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkBlue3": {"BACKGROUND": "#64778d", "TEXT": "#FFFFFF", "INPUT": "#f0f3f7", "SCROLL": "#A6B2BE", "TEXT_INPUT": "#000000",
                  "BUTTON": ("#FFFFFF", "#283b5b"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "LightGreen4": {"BACKGROUND": "#b4ffb4", "TEXT": "#000000", "INPUT": "#ffff64", "SCROLL": "#ffb482", "TEXT_INPUT": "#000000",
                    "BUTTON": ("#000000", "#ffa0dc"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "LightGreen5": {"BACKGROUND": "#92aa9d", "TEXT": "#000000", "INPUT": "#fcfff6", "SCROLL": "#fcfff6", "TEXT_INPUT": "#000000",
                    "BUTTON": ("#000000", "#d0dbbd"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "LightBrown2": {"BACKGROUND": "#a7ad7f", "TEXT": "#000000", "INPUT": "#e6d3a8", "SCROLL": "#e6d3a8", "TEXT_INPUT": "#000000",
                    "BUTTON": ("#FFFFFF", "#5d907d"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "LightBrown3": {"BACKGROUND": "#efeccb", "TEXT": "#012f2f", "INPUT": "#e6d3a8", "SCROLL": "#e6d3a8", "TEXT_INPUT": "#012f2f",
                    "BUTTON": ("#FFFFFF", "#046380"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "LightBlue3": {"BACKGROUND": "#a8cfdd", "TEXT": "#000000", "INPUT": "#dfedf2", "SCROLL": "#dfedf2", "TEXT_INPUT": "#000000",
                   "BUTTON": ("#FFFFFF", "#183440"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "LightBrown4": {"BACKGROUND": "#d7c79e", "TEXT": "#a35638", "INPUT": "#9dab86", "TEXT_INPUT": "#000000", "SCROLL": "#a35638",
                    "BUTTON": ("#FFFFFF", "#a35638"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                    "COLOR_LIST": ["#a35638", "#9dab86", "#e08f62", "#d7c79e"], },
    "DarkTeal": {"BACKGROUND": "#003f5c", "TEXT": "#fb5b5a", "INPUT": "#bc4873", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#bc4873", "BUTTON": ("#FFFFFF", "#fb5b5a"),
                 "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                 "COLOR_LIST": ["#003f5c", "#472b62", "#bc4873", "#fb5b5a"], },
    "DarkPurple": {"BACKGROUND": "#472b62", "TEXT": "#fb5b5a", "INPUT": "#bc4873", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#bc4873",
                   "BUTTON": ("#FFFFFF", "#472b62"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#003f5c", "#472b62", "#bc4873", "#fb5b5a"], },
    "LightGreen6": {"BACKGROUND": "#eafbea", "TEXT": "#1f6650", "INPUT": "#6f9a8d", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#1f6650",
                    "BUTTON": ("#FFFFFF", "#1f6650"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                    "COLOR_LIST": ["#1f6650", "#6f9a8d", "#ea5e5e", "#eafbea"], },
    "DarkGrey2": {"BACKGROUND": "#2b2b28", "TEXT": "#f8f8f8", "INPUT": "#f1d6ab", "TEXT_INPUT": "#000000", "SCROLL": "#f1d6ab",
                  "BUTTON": ("#2b2b28", "#e3b04b"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#2b2b28", "#e3b04b", "#f1d6ab", "#f8f8f8"], },
    "LightBrown6": {"BACKGROUND": "#f9b282", "TEXT": "#8f4426", "INPUT": "#de6b35", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#8f4426",
                    "BUTTON": ("#FFFFFF", "#8f4426"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                    "COLOR_LIST": ["#8f4426", "#de6b35", "#64ccda", "#f9b282"], },
    "DarkTeal1": {"BACKGROUND": "#396362", "TEXT": "#ffe7d1", "INPUT": "#f6c89f", "TEXT_INPUT": "#000000", "SCROLL": "#f6c89f",
                  "BUTTON": ("#ffe7d1", "#4b8e8d"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#396362", "#4b8e8d", "#f6c89f", "#ffe7d1"], },
    "LightBrown7": {"BACKGROUND": "#f6c89f", "TEXT": "#396362", "INPUT": "#4b8e8d", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#396362",
                    "BUTTON": ("#FFFFFF", "#396362"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                    "COLOR_LIST": ["#396362", "#4b8e8d", "#f6c89f", "#ffe7d1"], },
    "DarkPurple1": {"BACKGROUND": "#0c093c", "TEXT": "#fad6d6", "INPUT": "#eea5f6", "TEXT_INPUT": "#000000", "SCROLL": "#eea5f6",
                    "BUTTON": ("#FFFFFF", "#df42d1"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                    "COLOR_LIST": ["#0c093c", "#df42d1", "#eea5f6", "#fad6d6"], },
    "DarkGrey3": {"BACKGROUND": "#211717", "TEXT": "#dfddc7", "INPUT": "#f58b54", "TEXT_INPUT": "#000000", "SCROLL": "#f58b54",
                  "BUTTON": ("#dfddc7", "#a34a28"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#211717", "#a34a28", "#f58b54", "#dfddc7"], },
    "LightBrown8": {"BACKGROUND": "#dfddc7", "TEXT": "#211717", "INPUT": "#a34a28", "TEXT_INPUT": "#dfddc7", "SCROLL": "#211717",
                    "BUTTON": ("#dfddc7", "#a34a28"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                    "COLOR_LIST": ["#211717", "#a34a28", "#f58b54", "#dfddc7"], },
    "DarkBlue4": {"BACKGROUND": "#494ca2", "TEXT": "#e3e7f1", "INPUT": "#c6cbef", "TEXT_INPUT": "#000000", "SCROLL": "#c6cbef",
                  "BUTTON": ("#FFFFFF", "#8186d5"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#494ca2", "#8186d5", "#c6cbef", "#e3e7f1"], },
    "LightBlue4": {"BACKGROUND": "#5c94bd", "TEXT": "#470938", "INPUT": "#1a3e59", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#470938",
                   "BUTTON": ("#FFFFFF", "#470938"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#470938", "#1a3e59", "#5c94bd", "#f2d6eb"], },
    "DarkTeal2": {"BACKGROUND": "#394a6d", "TEXT": "#c0ffb3", "INPUT": "#52de97", "TEXT_INPUT": "#000000", "SCROLL": "#52de97",
                  "BUTTON": ("#c0ffb3", "#394a6d"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#394a6d", "#3c9d9b", "#52de97", "#c0ffb3"], },
    "DarkTeal3": {"BACKGROUND": "#3c9d9b", "TEXT": "#c0ffb3", "INPUT": "#52de97", "TEXT_INPUT": "#000000", "SCROLL": "#52de97",
                  "BUTTON": ("#c0ffb3", "#394a6d"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#394a6d", "#3c9d9b", "#52de97", "#c0ffb3"], },
    "DarkPurple5": {"BACKGROUND": "#730068", "TEXT": "#f6f078", "INPUT": "#01d28e", "TEXT_INPUT": "#000000", "SCROLL": "#01d28e",
                    "BUTTON": ("#f6f078", "#730068"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                    "COLOR_LIST": ["#730068", "#434982", "#01d28e", "#f6f078"], },
    "DarkPurple2": {"BACKGROUND": "#202060", "TEXT": "#b030b0", "INPUT": "#602080", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#602080",
                    "BUTTON": ("#FFFFFF", "#202040"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                    "COLOR_LIST": ["#202040", "#202060", "#602080", "#b030b0"], },
    "DarkBlue5": {"BACKGROUND": "#000272", "TEXT": "#ff6363", "INPUT": "#a32f80", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#a32f80",
                  "BUTTON": ("#FFFFFF", "#341677"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#000272", "#341677", "#a32f80", "#ff6363"], },
    "LightGrey2": {"BACKGROUND": "#f6f6f6", "TEXT": "#420000", "INPUT": "#d4d7dd", "TEXT_INPUT": "#420000", "SCROLL": "#420000",
                   "BUTTON": ("#420000", "#d4d7dd"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#420000", "#d4d7dd", "#eae9e9", "#f6f6f6"], },
    "LightGrey3": {"BACKGROUND": "#eae9e9", "TEXT": "#420000", "INPUT": "#d4d7dd", "TEXT_INPUT": "#420000", "SCROLL": "#420000",
                   "BUTTON": ("#420000", "#d4d7dd"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#420000", "#d4d7dd", "#eae9e9", "#f6f6f6"], },
    "DarkBlue6": {"BACKGROUND": "#01024e", "TEXT": "#ff6464", "INPUT": "#8b4367", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#8b4367",
                  "BUTTON": ("#FFFFFF", "#543864"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#01024e", "#543864", "#8b4367", "#ff6464"], },
    "DarkBlue7": {"BACKGROUND": "#241663", "TEXT": "#eae7af", "INPUT": "#a72693", "TEXT_INPUT": "#eae7af", "SCROLL": "#a72693",
                  "BUTTON": ("#eae7af", "#160f30"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#160f30", "#241663", "#a72693", "#eae7af"], },
    "LightBrown9": {"BACKGROUND": "#f6d365", "TEXT": "#3a1f5d", "INPUT": "#c83660", "TEXT_INPUT": "#f6d365", "SCROLL": "#3a1f5d",
                    "BUTTON": ("#f6d365", "#c83660"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                    "COLOR_LIST": ["#3a1f5d", "#c83660", "#e15249", "#f6d365"], },
    "DarkPurple3": {"BACKGROUND": "#6e2142", "TEXT": "#ffd692", "INPUT": "#e16363", "TEXT_INPUT": "#ffd692", "SCROLL": "#e16363",
                    "BUTTON": ("#ffd692", "#943855"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                    "COLOR_LIST": ["#6e2142", "#943855", "#e16363", "#ffd692"], },
    "LightBrown10": {"BACKGROUND": "#ffd692", "TEXT": "#6e2142", "INPUT": "#943855", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#6e2142",
                     "BUTTON": ("#FFFFFF", "#6e2142"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                     "COLOR_LIST": ["#6e2142", "#943855", "#e16363", "#ffd692"], },
    "DarkPurple4": {"BACKGROUND": "#200f21", "TEXT": "#f638dc", "INPUT": "#5a3d5c", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#5a3d5c",
                    "BUTTON": ("#FFFFFF", "#382039"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                    "COLOR_LIST": ["#200f21", "#382039", "#5a3d5c", "#f638dc"], },
    "LightBlue5": {"BACKGROUND": "#b2fcff", "TEXT": "#3e64ff", "INPUT": "#5edfff", "TEXT_INPUT": "#000000", "SCROLL": "#3e64ff",
                   "BUTTON": ("#FFFFFF", "#3e64ff"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#3e64ff", "#5edfff", "#b2fcff", "#ecfcff"], },
    "DarkTeal4": {"BACKGROUND": "#464159", "TEXT": "#c7f0db", "INPUT": "#8bbabb", "TEXT_INPUT": "#000000", "SCROLL": "#8bbabb",
                  "BUTTON": ("#FFFFFF", "#6c7b95"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#464159", "#6c7b95", "#8bbabb", "#c7f0db"], },
    "LightTeal": {"BACKGROUND": "#c7f0db", "TEXT": "#464159", "INPUT": "#6c7b95", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#464159",
                  "BUTTON": ("#FFFFFF", "#464159"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#464159", "#6c7b95", "#8bbabb", "#c7f0db"], },
    "DarkTeal5": {"BACKGROUND": "#8bbabb", "TEXT": "#464159", "INPUT": "#6c7b95", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#464159",
                  "BUTTON": ("#c7f0db", "#6c7b95"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#464159", "#6c7b95", "#8bbabb", "#c7f0db"], },
    "LightGrey4": {"BACKGROUND": "#faf5ef", "TEXT": "#672f2f", "INPUT": "#99b19c", "TEXT_INPUT": "#672f2f", "SCROLL": "#672f2f",
                   "BUTTON": ("#672f2f", "#99b19c"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#672f2f", "#99b19c", "#d7d1c9", "#faf5ef"], },
    "LightGreen7": {"BACKGROUND": "#99b19c", "TEXT": "#faf5ef", "INPUT": "#d7d1c9", "TEXT_INPUT": "#000000", "SCROLL": "#d7d1c9",
                    "BUTTON": ("#FFFFFF", "#99b19c"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                    "COLOR_LIST": ["#672f2f", "#99b19c", "#d7d1c9", "#faf5ef"], },
    "LightGrey5": {"BACKGROUND": "#d7d1c9", "TEXT": "#672f2f", "INPUT": "#99b19c", "TEXT_INPUT": "#672f2f", "SCROLL": "#672f2f",
                   "BUTTON": ("#FFFFFF", "#672f2f"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#672f2f", "#99b19c", "#d7d1c9", "#faf5ef"], },
    "DarkBrown3": {"BACKGROUND": "#a0855b", "TEXT": "#f9f6f2", "INPUT": "#f1d6ab", "TEXT_INPUT": "#000000", "SCROLL": "#f1d6ab",
                   "BUTTON": ("#FFFFFF", "#38470b"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#38470b", "#a0855b", "#f1d6ab", "#f9f6f2"], },
    "LightBrown11": {"BACKGROUND": "#f1d6ab", "TEXT": "#38470b", "INPUT": "#a0855b", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#38470b",
                     "BUTTON": ("#f9f6f2", "#a0855b"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                     "COLOR_LIST": ["#38470b", "#a0855b", "#f1d6ab", "#f9f6f2"], },
    "DarkRed": {"BACKGROUND": "#83142c", "TEXT": "#f9d276", "INPUT": "#ad1d45", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#ad1d45", "BUTTON": ("#f9d276", "#ad1d45"),
                "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                "COLOR_LIST": ["#44000d", "#83142c", "#ad1d45", "#f9d276"], },
    "DarkTeal6": {"BACKGROUND": "#204969", "TEXT": "#fff7f7", "INPUT": "#dadada", "TEXT_INPUT": "#000000", "SCROLL": "#dadada",
                  "BUTTON": ("#000000", "#fff7f7"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#204969", "#08ffc8", "#dadada", "#fff7f7"], },
    "DarkBrown4": {"BACKGROUND": "#252525", "TEXT": "#ff0000", "INPUT": "#af0404", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#af0404",
                   "BUTTON": ("#FFFFFF", "#252525"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#252525", "#414141", "#af0404", "#ff0000"], },
    "LightYellow": {"BACKGROUND": "#f4ff61", "TEXT": "#27aa80", "INPUT": "#32ff6a", "TEXT_INPUT": "#000000", "SCROLL": "#27aa80",
                    "BUTTON": ("#f4ff61", "#27aa80"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                    "COLOR_LIST": ["#27aa80", "#32ff6a", "#a8ff3e", "#f4ff61"], },
    "DarkGreen1": {"BACKGROUND": "#2b580c", "TEXT": "#fdef96", "INPUT": "#f7b71d", "TEXT_INPUT": "#000000", "SCROLL": "#f7b71d",
                   "BUTTON": ("#fdef96", "#2b580c"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#2b580c", "#afa939", "#f7b71d", "#fdef96"], },
    "LightGreen8": {"BACKGROUND": "#c8dad3", "TEXT": "#63707e", "INPUT": "#93b5b3", "TEXT_INPUT": "#000000", "SCROLL": "#63707e",
                    "BUTTON": ("#FFFFFF", "#63707e"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                    "COLOR_LIST": ["#63707e", "#93b5b3", "#c8dad3", "#f2f6f5"], },
    "DarkTeal7": {"BACKGROUND": "#248ea9", "TEXT": "#fafdcb", "INPUT": "#aee7e8", "TEXT_INPUT": "#000000", "SCROLL": "#aee7e8",
                  "BUTTON": ("#000000", "#fafdcb"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#248ea9", "#28c3d4", "#aee7e8", "#fafdcb"], },
    "DarkBlue8": {"BACKGROUND": "#454d66", "TEXT": "#d9d872", "INPUT": "#58b368", "TEXT_INPUT": "#000000", "SCROLL": "#58b368",
                  "BUTTON": ("#000000", "#009975"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#009975", "#454d66", "#58b368", "#d9d872"], },
    "DarkBlue9": {"BACKGROUND": "#263859", "TEXT": "#ff6768", "INPUT": "#6b778d", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#6b778d",
                  "BUTTON": ("#ff6768", "#263859"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#17223b", "#263859", "#6b778d", "#ff6768"], },
    "DarkBlue10": {"BACKGROUND": "#0028ff", "TEXT": "#f1f4df", "INPUT": "#10eaf0", "TEXT_INPUT": "#000000", "SCROLL": "#10eaf0",
                   "BUTTON": ("#f1f4df", "#24009c"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#24009c", "#0028ff", "#10eaf0", "#f1f4df"], },
    "DarkBlue11": {"BACKGROUND": "#6384b3", "TEXT": "#e6f0b6", "INPUT": "#b8e9c0", "TEXT_INPUT": "#000000", "SCROLL": "#b8e9c0",
                   "BUTTON": ("#e6f0b6", "#684949"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#684949", "#6384b3", "#b8e9c0", "#e6f0b6"], },
    "DarkTeal8": {"BACKGROUND": "#71a0a5", "TEXT": "#212121", "INPUT": "#665c84", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#212121",
                  "BUTTON": ("#fab95b", "#665c84"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#212121", "#665c84", "#71a0a5", "#fab95b"], },
    "DarkRed1": {"BACKGROUND": "#c10000", "TEXT": "#eeeeee", "INPUT": "#dedede", "TEXT_INPUT": "#000000", "SCROLL": "#dedede", "BUTTON": ("#c10000", "#eeeeee"),
                 "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                 "COLOR_LIST": ["#c10000", "#ff4949", "#dedede", "#eeeeee"], },
    "LightBrown5": {"BACKGROUND": "#fff591", "TEXT": "#e41749", "INPUT": "#f5587b", "TEXT_INPUT": "#000000", "SCROLL": "#e41749",
                    "BUTTON": ("#fff591", "#e41749"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                    "COLOR_LIST": ["#e41749", "#f5587b", "#ff8a5c", "#fff591"], },
    "LightGreen9": {"BACKGROUND": "#f1edb3", "TEXT": "#3b503d", "INPUT": "#4a746e", "TEXT_INPUT": "#f1edb3", "SCROLL": "#3b503d",
                    "BUTTON": ("#f1edb3", "#3b503d"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                    "COLOR_LIST": ["#3b503d", "#4a746e", "#c8cf94", "#f1edb3"], "DESCRIPTION": ["Green", "Turquoise", "Yellow"], },
    "DarkGreen2": {"BACKGROUND": "#3b503d", "TEXT": "#f1edb3", "INPUT": "#c8cf94", "TEXT_INPUT": "#000000", "SCROLL": "#c8cf94",
                   "BUTTON": ("#f1edb3", "#3b503d"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#3b503d", "#4a746e", "#c8cf94", "#f1edb3"], "DESCRIPTION": ["Green", "Turquoise", "Yellow"], },
    "LightGray1": {"BACKGROUND": "#f2f2f2", "TEXT": "#222831", "INPUT": "#393e46", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#222831",
                   "BUTTON": ("#f2f2f2", "#222831"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#222831", "#393e46", "#f96d00", "#f2f2f2"], "DESCRIPTION": ["#000000", "Grey", "Orange", "Grey", "Autumn"], },
    "DarkGrey4": {"BACKGROUND": "#52524e", "TEXT": "#e9e9e5", "INPUT": "#d4d6c8", "TEXT_INPUT": "#000000", "SCROLL": "#d4d6c8",
                  "BUTTON": ("#FFFFFF", "#9a9b94"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#52524e", "#9a9b94", "#d4d6c8", "#e9e9e5"], "DESCRIPTION": ["Grey", "Pastel", "Winter"], },
    "DarkBlue12": {"BACKGROUND": "#324e7b", "TEXT": "#f8f8f8", "INPUT": "#86a6df", "TEXT_INPUT": "#000000", "SCROLL": "#86a6df",
                   "BUTTON": ("#FFFFFF", "#5068a9"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#324e7b", "#5068a9", "#86a6df", "#f8f8f8"], "DESCRIPTION": ["Blue", "Grey", "Cold", "Winter"], },
    "DarkPurple6": {"BACKGROUND": "#070739", "TEXT": "#e1e099", "INPUT": "#c327ab", "TEXT_INPUT": "#e1e099", "SCROLL": "#c327ab",
                    "BUTTON": ("#e1e099", "#521477"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                    "COLOR_LIST": ["#070739", "#521477", "#c327ab", "#e1e099"], "DESCRIPTION": ["#000000", "Purple", "Yellow", "Dark"], },
    "DarkPurple7": {"BACKGROUND": "#191930", "TEXT": "#B1B7C5", "INPUT": "#232B5C", "TEXT_INPUT": "#D0E3E7", "SCROLL": "#B1B7C5",
                    "BUTTON": ("#272D38", "#B1B7C5"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkBlue13": {"BACKGROUND": "#203562", "TEXT": "#e3e8f8", "INPUT": "#c0c5cd", "TEXT_INPUT": "#000000", "SCROLL": "#c0c5cd",
                   "BUTTON": ("#FFFFFF", "#3e588f"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#203562", "#3e588f", "#c0c5cd", "#e3e8f8"], "DESCRIPTION": ["Blue", "Grey", "Wedding", "Cold"], },
    "DarkBrown5": {"BACKGROUND": "#3c1b1f", "TEXT": "#f6e1b5", "INPUT": "#e2bf81", "TEXT_INPUT": "#000000", "SCROLL": "#e2bf81",
                   "BUTTON": ("#3c1b1f", "#f6e1b5"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#3c1b1f", "#b21e4b", "#e2bf81", "#f6e1b5"], "DESCRIPTION": ["Brown", "Red", "Yellow", "Warm"], },
    "DarkGreen3": {"BACKGROUND": "#062121", "TEXT": "#eeeeee", "INPUT": "#e4dcad", "TEXT_INPUT": "#000000", "SCROLL": "#e4dcad",
                   "BUTTON": ("#eeeeee", "#181810"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#062121", "#181810", "#e4dcad", "#eeeeee"], "DESCRIPTION": ["#000000", "#000000", "Brown", "Grey"], },
    "DarkBlack1": {"BACKGROUND": "#181810", "TEXT": "#eeeeee", "INPUT": "#e4dcad", "TEXT_INPUT": "#000000", "SCROLL": "#e4dcad",
                   "BUTTON": ("#FFFFFF", "#062121"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#062121", "#181810", "#e4dcad", "#eeeeee"], "DESCRIPTION": ["#000000", "#000000", "Brown", "Grey"], },
    "DarkGrey5": {"BACKGROUND": "#343434", "TEXT": "#f3f3f3", "INPUT": "#e9dcbe", "TEXT_INPUT": "#000000", "SCROLL": "#e9dcbe",
                  "BUTTON": ("#FFFFFF", "#8e8b82"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#343434", "#8e8b82", "#e9dcbe", "#f3f3f3"], "DESCRIPTION": ["Grey", "Brown"], },
    "LightBrown12": {"BACKGROUND": "#8e8b82", "TEXT": "#f3f3f3", "INPUT": "#e9dcbe", "TEXT_INPUT": "#000000", "SCROLL": "#e9dcbe",
                     "BUTTON": ("#f3f3f3", "#8e8b82"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                     "COLOR_LIST": ["#343434", "#8e8b82", "#e9dcbe", "#f3f3f3"], "DESCRIPTION": ["Grey", "Brown"], },
    "DarkTeal9": {"BACKGROUND": "#13445a", "TEXT": "#fef4e8", "INPUT": "#446878", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#446878",
                  "BUTTON": ("#fef4e8", "#446878"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#13445a", "#970747", "#446878", "#fef4e8"], "DESCRIPTION": ["Red", "Grey", "Blue", "Wedding", "Retro"], },
    "DarkBlue14": {"BACKGROUND": "#21273d", "TEXT": "#f1f6f8", "INPUT": "#b9d4f1", "TEXT_INPUT": "#000000", "SCROLL": "#b9d4f1",
                   "BUTTON": ("#FFFFFF", "#6a759b"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#21273d", "#6a759b", "#b9d4f1", "#f1f6f8"], "DESCRIPTION": ["Blue", "#000000", "Grey", "Cold", "Winter"], },
    "LightBlue6": {"BACKGROUND": "#f1f6f8", "TEXT": "#21273d", "INPUT": "#6a759b", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#21273d",
                   "BUTTON": ("#f1f6f8", "#6a759b"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#21273d", "#6a759b", "#b9d4f1", "#f1f6f8"], "DESCRIPTION": ["Blue", "#000000", "Grey", "Cold", "Winter"], },
    "DarkGreen4": {"BACKGROUND": "#044343", "TEXT": "#e4e4e4", "INPUT": "#045757", "TEXT_INPUT": "#e4e4e4", "SCROLL": "#045757",
                   "BUTTON": ("#e4e4e4", "#045757"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#222222", "#044343", "#045757", "#e4e4e4"], "DESCRIPTION": ["#000000", "Turquoise", "Grey", "Dark"], },
    "DarkGreen5": {"BACKGROUND": "#1b4b36", "TEXT": "#e0e7f1", "INPUT": "#aebd77", "TEXT_INPUT": "#000000", "SCROLL": "#aebd77",
                   "BUTTON": ("#FFFFFF", "#538f6a"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#1b4b36", "#538f6a", "#aebd77", "#e0e7f1"], "DESCRIPTION": ["Green", "Grey"], },
    "DarkTeal10": {"BACKGROUND": "#0d3446", "TEXT": "#d8dfe2", "INPUT": "#71adb5", "TEXT_INPUT": "#000000", "SCROLL": "#71adb5",
                   "BUTTON": ("#FFFFFF", "#176d81"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#0d3446", "#176d81", "#71adb5", "#d8dfe2"], "DESCRIPTION": ["Grey", "Turquoise", "Winter", "Cold"], },
    "DarkGrey6": {"BACKGROUND": "#3e3e3e", "TEXT": "#ededed", "INPUT": "#68868c", "TEXT_INPUT": "#ededed", "SCROLL": "#68868c",
                  "BUTTON": ("#FFFFFF", "#405559"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#3e3e3e", "#405559", "#68868c", "#ededed"], "DESCRIPTION": ["Grey", "Turquoise", "Winter"], },
    "DarkTeal11": {"BACKGROUND": "#405559", "TEXT": "#ededed", "INPUT": "#68868c", "TEXT_INPUT": "#ededed", "SCROLL": "#68868c",
                   "BUTTON": ("#ededed", "#68868c"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#3e3e3e", "#405559", "#68868c", "#ededed"], "DESCRIPTION": ["Grey", "Turquoise", "Winter"], },
    "LightBlue7": {"BACKGROUND": "#9ed0e0", "TEXT": "#19483f", "INPUT": "#5c868e", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#19483f",
                   "BUTTON": ("#FFFFFF", "#19483f"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#19483f", "#5c868e", "#ff6a38", "#9ed0e0"], "DESCRIPTION": ["Orange", "Blue", "Turquoise"], },
    "LightGreen10": {"BACKGROUND": "#d8ebb5", "TEXT": "#205d67", "INPUT": "#639a67", "TEXT_INPUT": "#FFFFFF", "SCROLL": "#205d67",
                     "BUTTON": ("#d8ebb5", "#205d67"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                     "COLOR_LIST": ["#205d67", "#639a67", "#d9bf77", "#d8ebb5"], "DESCRIPTION": ["Blue", "Green", "Brown", "Vintage"], },
    "DarkBlue15": {"BACKGROUND": "#151680", "TEXT": "#f1fea4", "INPUT": "#375fc0", "TEXT_INPUT": "#f1fea4", "SCROLL": "#375fc0",
                   "BUTTON": ("#f1fea4", "#1c44ac"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#151680", "#1c44ac", "#375fc0", "#f1fea4"], "DESCRIPTION": ["Blue", "Yellow", "Cold"], },
    "DarkBlue16": {"BACKGROUND": "#1c44ac", "TEXT": "#f1fea4", "INPUT": "#375fc0", "TEXT_INPUT": "#f1fea4", "SCROLL": "#375fc0",
                   "BUTTON": ("#f1fea4", "#151680"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#151680", "#1c44ac", "#375fc0", "#f1fea4"], "DESCRIPTION": ["Blue", "Yellow", "Cold"], },
    "DarkTeal12": {"BACKGROUND": "#004a7c", "TEXT": "#fafafa", "INPUT": "#e8f1f5", "TEXT_INPUT": "#000000", "SCROLL": "#e8f1f5",
                   "BUTTON": ("#fafafa", "#005691"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#004a7c", "#005691", "#e8f1f5", "#fafafa"], "DESCRIPTION": ["Grey", "Blue", "Cold", "Winter"], },
    "LightBrown13": {"BACKGROUND": "#ebf5ee", "TEXT": "#921224", "INPUT": "#bdc6b8", "TEXT_INPUT": "#921224", "SCROLL": "#921224",
                     "BUTTON": ("#FFFFFF", "#921224"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                     "COLOR_LIST": ["#921224", "#bdc6b8", "#bce0da", "#ebf5ee"], "DESCRIPTION": ["Red", "Blue", "Grey", "Vintage", "Wedding"], },
    "DarkBlue17": {"BACKGROUND": "#21294c", "TEXT": "#f9f2d7", "INPUT": "#f2dea8", "TEXT_INPUT": "#000000", "SCROLL": "#f2dea8",
                   "BUTTON": ("#f9f2d7", "#141829"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#141829", "#21294c", "#f2dea8", "#f9f2d7"], "DESCRIPTION": ["#000000", "Blue", "Yellow"], },
    "DarkBlue18": {"BACKGROUND": "#0c1825", "TEXT": "#d1d7dd", "INPUT": "#001c35", "TEXT_INPUT": "#d1d7dd", "SCROLL": "#00438e",
                   "BUTTON": ("#75b7ff", "#001c35"), "PROGRESS": ('#0074ff', '#75b7ff'), "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#141829", "#21294c", "#f2dea8", "#f9f2d7"], "DESCRIPTION": ["#000000", "Blue", "Yellow"], },
    "DarkBrown6": {"BACKGROUND": "#785e4d", "TEXT": "#f2eee3", "INPUT": "#baaf92", "TEXT_INPUT": "#000000", "SCROLL": "#baaf92",
                   "BUTTON": ("#FFFFFF", "#785e4d"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#785e4d", "#ff8426", "#baaf92", "#f2eee3"], "DESCRIPTION": ["Grey", "Brown", "Orange", "Autumn"], },
    "DarkGreen6": {"BACKGROUND": "#5c715e", "TEXT": "#f2f9f1", "INPUT": "#ddeedf", "TEXT_INPUT": "#000000", "SCROLL": "#ddeedf",
                   "BUTTON": ("#f2f9f1", "#5c715e"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#5c715e", "#b6cdbd", "#ddeedf", "#f2f9f1"], "DESCRIPTION": ["Grey", "Green", "Vintage"], },
    "DarkGreen7": {"BACKGROUND": "#0C231E", "TEXT": "#efbe1c", "INPUT": "#153C33", "TEXT_INPUT": "#efbe1c", "SCROLL": "#153C33",
                   "BUTTON": ("#efbe1c", "#153C33"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkGrey7": {"BACKGROUND": "#4b586e", "TEXT": "#dddddd", "INPUT": "#574e6d", "TEXT_INPUT": "#dddddd", "SCROLL": "#574e6d",
                  "BUTTON": ("#dddddd", "#43405d"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                  "COLOR_LIST": ["#43405d", "#4b586e", "#574e6d", "#dddddd"], "DESCRIPTION": ["Grey", "Winter", "Cold"], },
    "DarkRed2": {"BACKGROUND": "#ab1212", "TEXT": "#f6e4b5", "INPUT": "#cd3131", "TEXT_INPUT": "#f6e4b5", "SCROLL": "#cd3131", "BUTTON": ("#f6e4b5", "#ab1212"),
                 "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                 "COLOR_LIST": ["#ab1212", "#1fad9f", "#cd3131", "#f6e4b5"], "DESCRIPTION": ["Turquoise", "Red", "Yellow"], },
    "LightGrey6": {"BACKGROUND": "#e3e3e3", "TEXT": "#233142", "INPUT": "#455d7a", "TEXT_INPUT": "#e3e3e3", "SCROLL": "#233142",
                   "BUTTON": ("#e3e3e3", "#455d7a"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0,
                   "COLOR_LIST": ["#233142", "#455d7a", "#f95959", "#e3e3e3"], "DESCRIPTION": ["#000000", "Blue", "Red", "Grey"], },
    "HotDogStand": {"BACKGROUND": "red", "TEXT": "yellow", "INPUT": "yellow", "TEXT_INPUT": "#000000", "SCROLL": "yellow", "BUTTON": ("red", "yellow"),
                    "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkGrey8": {"BACKGROUND": "#19232D", "TEXT": "#ffffff", "INPUT": "#32414B", "TEXT_INPUT": "#ffffff", "SCROLL": "#505F69",
                  "BUTTON": ("#ffffff", "#32414B"), "PROGRESS": ("#505F69", "#32414B"), "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkGrey9": {"BACKGROUND": "#36393F", "TEXT": "#DCDDDE", "INPUT": "#40444B", "TEXT_INPUT": "#ffffff", "SCROLL": "#202225",
                  "BUTTON": ("#202225", "#B9BBBE"), "PROGRESS": ("#202225", "#40444B"), "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkGrey10": {"BACKGROUND": "#1c1e23", "TEXT": "#cccdcf", "INPUT": "#272a31", "TEXT_INPUT": "#8b9fde", "SCROLL": "#313641",
                   "BUTTON": ("#f5f5f6", "#2e3d5a"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkGrey11": {"BACKGROUND": "#1c1e23", "TEXT": "#cccdcf", "INPUT": "#313641", "TEXT_INPUT": "#cccdcf", "SCROLL": "#313641",
                   "BUTTON": ("#f5f5f6", "#313641"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkGrey12": {"BACKGROUND": "#1c1e23", "TEXT": "#8b9fde", "INPUT": "#313641", "TEXT_INPUT": "#8b9fde", "SCROLL": "#313641",
                   "BUTTON": ("#cccdcf", "#2e3d5a"), "PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE, "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkGrey13": {"BACKGROUND": "#1c1e23", "TEXT": "#cccdcf", "INPUT": "#272a31", "TEXT_INPUT": "#cccdcf", "SCROLL": "#313641",
                   "BUTTON": ("#8b9fde", "#313641"), "PROGRESS": ("#cccdcf", "#272a31"), "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkGrey14": {"BACKGROUND": "#24292e", "TEXT": "#fafbfc", "INPUT": "#1d2125", "TEXT_INPUT": "#fafbfc", "SCROLL": "#1d2125",
                   "BUTTON": ("#fafbfc", "#155398"), "PROGRESS": ("#155398", "#1d2125"), "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "DarkGrey15": {'BACKGROUND': '#121212', 'TEXT': '#dddddd', 'INPUT': '#1e1e1e', 'TEXT_INPUT': '#69b1ef', 'SCROLL': '#272727',
                   'BUTTON': ('#69b1ef', '#2e2e2e'), 'PROGRESS': ('#69b1ef', '#2e2e2e'), 'BORDER': 1, 'SLIDER_DEPTH': 0, 'PROGRESS_DEPTH': 0, },
    "DarkGrey16": {'BACKGROUND': '#353535', 'TEXT': '#ffffff', 'INPUT': '#191919', 'TEXT_INPUT': '#ffffff', 'SCROLL': '#454545',
                   'BUTTON': ('#ffffff', '#454545'), 'PROGRESS': ('#757575', '#454545'), 'BORDER': 1, 'SLIDER_DEPTH': 0, 'PROGRESS_DEPTH': 0, },
    "DarkBrown7": {"BACKGROUND": "#2c2417", "TEXT": "#baa379", "INPUT": "#baa379", "TEXT_INPUT": "#000000", "SCROLL": "#392e1c",
                   "BUTTON": ("#000000", "#baa379"), "PROGRESS": ("#baa379", "#453923"), "BORDER": 1, "SLIDER_DEPTH": 1, "PROGRESS_DEPTH": 0, },
    "Python": {"BACKGROUND": "#3d7aab", "TEXT": "#ffde56", "INPUT": "#295273", "TEXT_INPUT": "#ffde56", "SCROLL": "#295273",
               "BUTTON": ("#ffde56", "#295273"), "PROGRESS": ("#ffde56", "#295273"), "BORDER": 1, "SLIDER_DEPTH": 1, "PROGRESS_DEPTH": 0, },
    "PythonPlus": {"BACKGROUND": "#001d3c", "TEXT": "#ffffff", "INPUT": "#015bbb", "TEXT_INPUT": "#fed500", "SCROLL": "#015bbb",
                   "BUTTON": ("#fed500", "#015bbb"), "PROGRESS": ("#015bbb", "#fed500"), "BORDER": 1, "SLIDER_DEPTH": 1, "PROGRESS_DEPTH": 0, },
    "NeonBlue1": {"BACKGROUND": "#000000", "TEXT": "#ffffff", "INPUT": "#000000", "TEXT_INPUT": "#33ccff", "SCROLL": "#33ccff",
                  "BUTTON": ("#33ccff", "#000000"), "PROGRESS": ("#33ccff", "#ffffff"), "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "NeonGreen1": {"BACKGROUND": "#000000", "TEXT": "#ffffff", "INPUT": "#000000", "TEXT_INPUT": "#96ff7b", "SCROLL": "#96ff7b",
                   "BUTTON": ("#96ff7b", "#000000"), "PROGRESS": ("#96ff7b", "#ffffff"), "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
    "NeonYellow1": {"BACKGROUND": "#000000", "TEXT": "#ffffff", "INPUT": "#000000", "TEXT_INPUT": "#ffcf40", "SCROLL": "#ffcf40",
                    "BUTTON": ("#ffcf40", "#000000"), "PROGRESS": ("#ffcf40", "#ffffff"), "BORDER": 1, "SLIDER_DEPTH": 0, "PROGRESS_DEPTH": 0, },
}


def list_of_look_and_feel_values():
    """
    Get a list of the valid values to pass into your call to change_look_and_feel

    :return: list of valid string values
    :rtype:  List[str]
    """

    return sorted(list(LOOK_AND_FEEL_TABLE.keys()))


def theme(new_theme=None):
    """
    Sets / Gets the current Theme.  If none is specified then returns the current theme.
    This call replaces the ChangeLookAndFeel / change_look_and_feel call which only sets the theme.

    :param new_theme: the new theme name to use
    :type new_theme:  (str)
    :return:          the currently selected theme
    :rtype:           (str)
    """
    global TRANSPARENT_BUTTON

    if new_theme is not None:
        change_look_and_feel(new_theme)
        TRANSPARENT_BUTTON = (theme_background_color(), theme_background_color())
    return CURRENT_LOOK_AND_FEEL


def theme_background_color(color=None):
    """
    Sets/Returns the background color currently in use
    Used for Windows and containers (Column, Frame, Tab) and tables

    :param color: new background color to use (optional)
    :type color:  (str)
    :return:      color string of the background color currently in use
    :rtype:       (str)
    """
    if color is not None:
        set_options(background_color=color)
    return DEFAULT_BACKGROUND_COLOR


# This "constant" is misleading but rather than remove and break programs, will try this method instead
TRANSPARENT_BUTTON = (theme_background_color(), theme_background_color())  # replaces an older version that had hardcoded numbers


def theme_element_background_color(color=None):
    """
    Sets/Returns the background color currently in use for all elements except containers

    :return: (str) - color string of the element background color currently in use
    :rtype:  (str)
    """
    if color is not None:
        set_options(element_background_color=color)
    return DEFAULT_ELEMENT_BACKGROUND_COLOR


def theme_text_color(color=None):
    """
    Sets/Returns the text color currently in use

    :return: (str) - color string of the text color currently in use
    :rtype:  (str)
    """
    if color is not None:
        set_options(text_color=color)
    return DEFAULT_TEXT_COLOR


def theme_text_element_background_color(color=None):
    """
    Sets/Returns the background color for text elements

    :return: (str) - color string of the text background color currently in use
    :rtype:  (str)
    """
    if color is not None:
        set_options(text_element_background_color=color)
    return DEFAULT_TEXT_ELEMENT_BACKGROUND_COLOR


def theme_input_background_color(color=None):
    """
    Sets/Returns the input element background color currently in use

    :return: (str) - color string of the input element background color currently in use
    :rtype:  (str)
    """
    if color is not None:
        set_options(input_elements_background_color=color)
    return DEFAULT_INPUT_ELEMENTS_COLOR


def theme_input_text_color(color=None):
    """
    Sets/Returns the input element entry color (not the text but the thing that's displaying the text)

    :return: (str) - color string of the input element color currently in use
    :rtype:  (str)
    """
    if color is not None:
        set_options(input_text_color=color)
    return DEFAULT_INPUT_TEXT_COLOR


def theme_button_color(color=None):
    """
    Sets/Returns the button color currently in use

    :return: (str, str) - TUPLE with color strings of the button color currently in use (button text color, button background color)
    :rtype:  (str, str)
    """
    if color is not None:
        if color == COLOR_SYSTEM_DEFAULT:
            color_tuple = (COLOR_SYSTEM_DEFAULT, COLOR_SYSTEM_DEFAULT)
        else:
            color_tuple = button_color_to_tuple(color, (None, None))
        if color_tuple == (None, None):
            if not SUPPRESS_ERROR_POPUPS:
                popup_error('theme_button_color - bad color string passed in', color)
            else:
                print('** Badly formatted button color... not a tuple nor string **', color)
            set_options(button_color=color)  # go ahead and try with their string
        else:
            set_options(button_color=color_tuple)
    return DEFAULT_BUTTON_COLOR


def theme_button_color_background():
    """
    Returns the button color background currently in use. Note this function simple calls the theme_button_color
    function and splits apart the tuple

    :return: color string of the button color background currently in use
    :rtype:  (str)
    """
    return theme_button_color()[1]


def theme_button_color_text():
    """
    Returns the button color text currently in use.  Note this function simple calls the theme_button_color
    function and splits apart the tuple

    :return: color string of the button color text currently in use
    :rtype:  (str)
    """
    return theme_button_color()[0]


def theme_progress_bar_color(color=None):
    """
    Sets/Returns the progress bar colors by the current color theme

    :return: (str, str) - TUPLE with color strings of the ProgressBar color currently in use(button text color, button background color)
    :rtype:  (str, str)
    """
    if color is not None:
        set_options(progress_meter_color=color)
    return DEFAULT_PROGRESS_BAR_COLOR


def theme_slider_color(color=None):
    """
    Sets/Returns the slider color (used for sliders)

    :return: color string of the slider color currently in use
    :rtype:  (str)
    """
    if color is not None:
        set_options(scrollbar_color=color)
    return DEFAULT_SCROLLBAR_COLOR


def theme_border_width(border_width=None):
    """
    Sets/Returns the border width currently in use
    Used by non ttk elements at the moment

    :return: border width currently in use
    :rtype:  (int)
    """
    if border_width is not None:
        set_options(border_width=border_width)
    return DEFAULT_BORDER_WIDTH


def theme_slider_border_width(border_width=None):
    """
    Sets/Returns the slider border width currently in use

    :return: border width currently in use for sliders
    :rtype:  (int)
    """
    if border_width is not None:
        set_options(slider_border_width=border_width)
    return DEFAULT_SLIDER_BORDER_WIDTH


def theme_progress_bar_border_width(border_width=None):
    """
    Sets/Returns the progress meter border width currently in use

    :return: border width currently in use for progress meters
    :rtype:  (int)
    """
    if border_width is not None:
        set_options(progress_meter_border_depth=border_width)
    return DEFAULT_PROGRESS_BAR_BORDER_WIDTH


def theme_element_text_color(color=None):
    """
    Sets/Returns the text color used by elements that have text as part of their display (Tables, Trees and Sliders)

    :return: color string currently in use
    :rtype:  (str)
    """
    if color is not None:
        set_options(element_text_color=color)
    return DEFAULT_ELEMENT_TEXT_COLOR


def theme_list():
    """
    Returns a sorted list of the currently available color themes

    :return: A sorted list of the currently available color themes
    :rtype:  List[str]
    """
    return list_of_look_and_feel_values()


def theme_add_new(new_theme_name, new_theme_dict):
    """
    Add a new theme to the dictionary of themes

    :param new_theme_name: text to display in element
    :type new_theme_name:  (str)
    :param new_theme_dict: text to display in element
    :type new_theme_dict:  (dict)
    """
    global LOOK_AND_FEEL_TABLE
    try:
        LOOK_AND_FEEL_TABLE[new_theme_name] = new_theme_dict
    except Exception as e:
        print('Exception during adding new theme {}'.format(e))


def theme_use_custom_titlebar():
    """
    Returns True if a custom titlebar will be / should be used.
    The setting is in the Global Settings window and can be overwridden
    using set_options call

    :return:        True if a custom titlebar / custom menubar should be used
    :rtype:         (bool)
    """
    if USE_CUSTOM_TITLEBAR is False:
        return False

    return USE_CUSTOM_TITLEBAR or pysimplegui_user_settings.get('-custom titlebar-', False)


def theme_global(new_theme=None):
    """
    Sets / Gets the global PySimpleGUI Theme.  If none is specified then returns the global theme from user settings.
    Note the theme must be a standard, built-in PySimpleGUI theme... not a user-created theme.

    :param new_theme: the new theme name to use
    :type new_theme:  (str)
    :return:          the currently selected theme
    :rtype:           (str)
    """
    if new_theme is not None:
        if new_theme not in theme_list():
            popup_error_with_traceback('Cannot use custom themes with theme_global call',
                                       'Your request to use theme {} cannot be performed.'.format(new_theme),
                                       'The PySimpleGUI Global User Settings are meant for PySimpleGUI standard items, not user config items',
                                       'You can use any of the many built-in themes instead or use your own UserSettings file to store your custom theme')
            return pysimplegui_user_settings.get('-theme-', CURRENT_LOOK_AND_FEEL)
        pysimplegui_user_settings.set('-theme-', new_theme)
        theme(new_theme)
        return new_theme
    else:
        return pysimplegui_user_settings.get('-theme-', CURRENT_LOOK_AND_FEEL)


def theme_previewer(columns=12, scrollable=False, scroll_area_size=(None, None), search_string=None, location=(None, None)):
    """
    Displays a "Quick Reference Window" showing all of the different Look and Feel settings that are available.
    They are sorted alphabetically.  The legacy color names are mixed in, but otherwise they are sorted into Dark and Light halves

    :param columns:          The number of themes to display per row
    :type columns:           int
    :param scrollable:       If True then scrollbars will be added
    :type scrollable:        bool
    :param scroll_area_size: Size of the scrollable area (The Column Element used to make scrollable)
    :type scroll_area_size:  (int, int)
    :param search_string:    If specified then only themes containing this string will be shown
    :type search_string:     str
    :param location:         Location on the screen to place the window. Defaults to the center like all windows
    :type location:          (int, int)
    """

    current_theme = theme()

    # Show a "splash" type message so the user doesn't give up waiting
    popup_quick_message('Hang on for a moment, this will take a bit to create....', keep_on_top=True, background_color='red', text_color='#FFFFFF',
                        auto_close=True, non_blocking=True)

    web = False

    win_bg = 'black'

    def sample_layout():
        return [[Text('Text element'), InputText('Input data here', size=(10, 1))],
                [Button('Ok'), Button('Disabled', disabled=True), Slider((1, 10), orientation='h', size=(5, 15))]]

    names = list_of_look_and_feel_values()
    names.sort()
    if search_string not in (None, ''):
        names = [name for name in names if search_string.lower().replace(" ", "") in name.lower().replace(" ", "")]

    if search_string not in (None, ''):
        layout = [[Text('Themes containing "{}"'.format(search_string), font='Default 18', background_color=win_bg)]]
    else:
        layout = [[Text('List of all themes', font='Default 18', background_color=win_bg)]]

    col_layout = []
    row = []
    for count, theme_name in enumerate(names):
        theme(theme_name)
        if not count % columns:
            col_layout += [row]
            row = []
        row += [Frame(theme_name, sample_layout() if not web else [[T(theme_name)]] + sample_layout(), pad=(2, 2))]
    if row:
        col_layout += [row]

    layout += [[Column(col_layout, scrollable=scrollable, size=scroll_area_size, pad=(0, 0), background_color=win_bg, key='-COL-')]]
    window = Window('Preview of Themes', layout, background_color=win_bg, resizable=True, location=location, keep_on_top=True, finalize=True, modal=True)
    window['-COL-'].expand(True, True, True)  # needed so that col will expand with the window
    window.read(close=True)
    theme(current_theme)


preview_all_look_and_feel_themes = theme_previewer


def _theme_preview_window_swatches():
    # Begin the layout with a header
    layout = [[Text('Themes as color swatches', text_color='white', background_color='black', font='Default 25')],
              [Text('Tooltip and right click a color to get the value', text_color='white', background_color='black', font='Default 15')],
              [Text('Left click a color to copy to clipboard', text_color='white', background_color='black', font='Default 15')]]
    layout = [[Column(layout, element_justification='c', background_color='black')]]
    # Create the pain part, the rows of Text with color swatches
    for i, theme_name in enumerate(theme_list()):
        theme(theme_name)
        colors = [theme_background_color(), theme_text_color(), theme_input_background_color(),
                  theme_input_text_color()]
        if theme_button_color() != COLOR_SYSTEM_DEFAULT:
            colors.append(theme_button_color()[0])
            colors.append(theme_button_color()[1])
        colors = list(set(colors))  # de-duplicate items
        row = [T(theme(), background_color='black', text_color='white', size=(20, 1), justification='r')]
        for color in colors:
            if color != COLOR_SYSTEM_DEFAULT:
                row.append(T(SYMBOL_SQUARE, text_color=color, background_color='black', pad=(0, 0), font='DEFAUlT 20', right_click_menu=['Nothing', [color]],
                             tooltip=color, enable_events=True, key=(i, color)))
        layout += [row]
    # place layout inside of a Column so that it's scrollable
    layout = [[Column(layout, size=(500, 900), scrollable=True, vertical_scroll_only=True, background_color='black')]]
    # finish the layout by adding an exit button
    layout += [[B('Exit')]]

    # create and return Window that uses the layout
    return Window('Theme Color Swatches', layout, background_color='black', finalize=True, keep_on_top=True)


def theme_previewer_swatches():
    """
    Display themes in a window as color swatches.
    Click on a color swatch to see the hex value printed on the console.
    If you hover over a color or right click it you'll also see the hext value.
    """
    current_theme = theme()
    popup_quick_message('This is going to take a minute...', text_color='white', background_color='red', font='Default 20', keep_on_top=True)
    window = _theme_preview_window_swatches()
    theme(OFFICIAL_PYSIMPLEGUI_THEME)
    # col_height = window.get_screen_size()[1]-200
    # if window.size[1] > 100:
    #     window.size = (window.size[0], col_height)
    # window.move(window.get_screen_size()[0] // 2 - window.size[0] // 2, 0)

    while True:  # Event Loop
        event, values = window.read()
        if event == WIN_CLOSED or event == 'Exit':
            break
        if isinstance(event, tuple):  # someone clicked a swatch
            chosen_color = event[1]
        else:
            if event[0] == '#':  # someone right clicked
                chosen_color = event
            else:
                chosen_color = ''
        print('Copied to clipboard color = ', chosen_color)
        clipboard_set(chosen_color)
        # window.TKroot.clipboard_clear()
        # window.TKroot.clipboard_append(chosen_color)
    window.close()
    theme(current_theme)


def change_look_and_feel(index, force=False):
    """
    Change the "color scheme" of all future PySimpleGUI Windows.
    The scheme are string names that specify a group of colors. Background colors, text colors, button colors.
    There are 13 different color settings that are changed at one time using a single call to ChangeLookAndFeel
    The look and feel table itself has these indexes into the dictionary LOOK_AND_FEEL_TABLE.
    The original list was (prior to a major rework and renaming)... these names still work...
    In Nov 2019 a new Theme Formula was devised to make choosing a theme easier:
    The "Formula" is:
    ["Dark" or "Light"] Color Number
    Colors can be Blue Brown Grey Green Purple Red Teal Yellow Black
    The number will vary for each pair. There are more DarkGrey entries than there are LightYellow for example.
    Default = The default settings (only button color is different than system default)
    Default1 = The full system default including the button (everything's gray... how sad... don't be all gray... please....)
    :param index: the name of the index into the Look and Feel table (does not have to be exact, can be "fuzzy")
    :type index:  (str)
    :param force: no longer used
    :type force:  (bool)
    :return:      None
    :rtype:       None
    """
    global CURRENT_LOOK_AND_FEEL

    # if running_mac() and not force:
    #     print('*** Changing look and feel is not supported on Mac platform ***')
    #     return

    requested_theme_name = index
    theme_names_list = list_of_look_and_feel_values()
    # normalize available l&f values by setting all to lower case
    lf_values_lowercase = [item.lower() for item in theme_names_list]
    # option 1
    opt1 = requested_theme_name.replace(' ', '').lower()
    # option 3 is option 1 with gray replaced with grey
    opt3 = opt1.replace('gray', 'grey')
    # option 2 (reverse lookup)
    optx = requested_theme_name.lower().split(' ')
    optx.reverse()
    opt2 = ''.join(optx)

    # search for valid l&f name
    if requested_theme_name in theme_names_list:
        ix = theme_names_list.index(requested_theme_name)
    elif opt1 in lf_values_lowercase:
        ix = lf_values_lowercase.index(opt1)
    elif opt2 in lf_values_lowercase:
        ix = lf_values_lowercase.index(opt2)
    elif opt3 in lf_values_lowercase:
        ix = lf_values_lowercase.index(opt3)
    else:
        ix = random.randint(0, len(lf_values_lowercase) - 1)
        print('** Warning - {} Theme is not a valid theme. Change your theme call. **'.format(index))
        print('valid values are', list_of_look_and_feel_values())
        print('Instead, please enjoy a random Theme named {}'.format(list_of_look_and_feel_values()[ix]))

    selection = theme_names_list[ix]
    CURRENT_LOOK_AND_FEEL = selection
    try:
        colors = LOOK_AND_FEEL_TABLE[selection]

        # Color the progress bar using button background and input colors...unless they're the same
        if colors['PROGRESS'] != COLOR_SYSTEM_DEFAULT:
            if colors['PROGRESS'] == DEFAULT_PROGRESS_BAR_COMPUTE:
                if colors['BUTTON'][1] != colors['INPUT'] and colors['BUTTON'][1] != colors['BACKGROUND']:
                    colors['PROGRESS'] = colors['BUTTON'][1], colors['INPUT']
                else:  # if the same, then use text input on top of input color
                    colors['PROGRESS'] = (colors['TEXT_INPUT'], colors['INPUT'])
        else:
            colors['PROGRESS'] = DEFAULT_PROGRESS_BAR_COLOR_OFFICIAL
        # call to change all the colors
        SetOptions(background_color=colors['BACKGROUND'],
                   text_element_background_color=colors['BACKGROUND'],
                   element_background_color=colors['BACKGROUND'],
                   text_color=colors['TEXT'],
                   input_elements_background_color=colors['INPUT'],
                   # button_color=colors['BUTTON'] if not running_mac() else None,
                   button_color=colors['BUTTON'],
                   progress_meter_color=colors['PROGRESS'],
                   border_width=colors['BORDER'],
                   slider_border_width=colors['SLIDER_DEPTH'],
                   progress_meter_border_depth=colors['PROGRESS_DEPTH'],
                   scrollbar_color=(colors['SCROLL']),
                   element_text_color=colors['TEXT'],
                   input_text_color=colors['TEXT_INPUT'])
    except:  # most likely an index out of range
        print('** Warning - Theme value not valid. Change your theme call. **')
        print('valid values are', list_of_look_and_feel_values())


# ------------------------ Color processing functions ------------------------

def _hex_to_hsl(hex):
    r, g, b = _hex_to_rgb(hex)
    return _rgb_to_hsl(r, g, b)


def _hex_to_rgb(hex):
    hex = hex.lstrip('#')
    hlen = len(hex)
    return tuple(int(hex[i:i + hlen // 3], 16) for i in range(0, hlen, hlen // 3))


def _rgb_to_hsl(r, g, b):
    r = float(r)
    g = float(g)
    b = float(b)
    high = max(r, g, b)
    low = min(r, g, b)
    h, s, v = ((high + low) / 2,) * 3
    if high == low:
        h = s = 0.0
    else:
        d = high - low
        l = (high + low) / 2
        s = d / (2 - high - low) if l > 0.5 else d / (high + low)
        h = {
            r: (g - b) / d + (6 if g < b else 0),
            g: (b - r) / d + 2,
            b: (r - g) / d + 4,
        }[high]
        h /= 6
    return h, s, v


def _hsl_to_rgb(h, s, l):
    def hue_to_rgb(p, q, t):
        t += 1 if t < 0 else 0
        t -= 1 if t > 1 else 0
        if t < 1 / 6:
            return p + (q - p) * 6 * t
        if t < 1 / 2:
            return q
        if t < 2 / 3:
            p + (q - p) * (2 / 3 - t) * 6
        return p

    if s == 0:
        r, g, b = l, l, l
    else:
        q = l * (1 + s) if l < 0.5 else l + s - l * s
        p = 2 * l - q
        r = hue_to_rgb(p, q, h + 1 / 3)
        g = hue_to_rgb(p, q, h)
        b = hue_to_rgb(p, q, h - 1 / 3)

    return r, g, b


def _hsv_to_hsl(h, s, v):
    l = 0.5 * v * (2 - s)
    s = v * s / (1 - fabs(2 * l - 1))
    return h, s, l


def _hsl_to_hsv(h, s, l):
    v = (2 * l + s * (1 - fabs(2 * l - 1))) / 2
    s = 2 * (v - l) / v
    return h, s, v


# Converts an object's contents into a nice printable string.  Great for dumping debug data
def obj_to_string_single_obj(obj):
    """
    Dumps an Object's values as a formatted string.  Very nicely done. Great way to display an object's member variables in human form
    Returns only the top-most object's variables instead of drilling down to dispolay more
    :param obj: The object to display
    :type obj:  (Any)
    :return:    Formatted output of the object's values
    :rtype:     (str)
    """
    if obj is None:
        return 'None'
    return str(obj.__class__) + '\n' + '\n'.join(
        (repr(item) + ' = ' + repr(obj.__dict__[item]) for item in sorted(obj.__dict__)))


def obj_to_string(obj, extra='    '):
    """
    Dumps an Object's values as a formatted string.  Very nicely done. Great way to display an object's member variables in human form
    :param obj:   The object to display
    :type obj:    (Any)
    :param extra: extra stuff (Default value = '    ')
    :type extra:  (str)
    :return:      Formatted output of the object's values
    :rtype:       (str)
    """
    if obj is None:
        return 'None'
    return str(obj.__class__) + '\n' + '\n'.join(
        (extra + (str(item) + ' = ' +
                  (ObjToString(obj.__dict__[item], extra + '    ') if hasattr(obj.__dict__[item], '__dict__') else str(
                      obj.__dict__[item])))
         for item in sorted(obj.__dict__)))


# ...######..##.......####.########..########...#######.....###....########..########.
# ..##....##.##........##..##.....##.##.....##.##.....##...##.##...##.....##.##.....##
# ..##.......##........##..##.....##.##.....##.##.....##..##...##..##.....##.##.....##
# ..##.......##........##..########..########..##.....##.##.....##.########..##.....##
# ..##.......##........##..##........##.....##.##.....##.#########.##...##...##.....##
# ..##....##.##........##..##........##.....##.##.....##.##.....##.##....##..##.....##
# ...######..########.####.##........########...#######..##.....##.##.....##.########.

def clipboard_set(new_value):
    """
    Sets the clipboard to a specific value.
    IMPORTANT NOTE - Your PySimpleGUI application needs to remain running until you've pasted
    your clipboard. This is a tkinter limitation.  A workaround was found for Windows, but you still
    need to stay running for Linux systems.

    :param new_value: value to set the clipboard to. Will be converted to a string
    :type new_value:  (str | bytes)
    """
    root = _get_hidden_master_root()
    root.clipboard_clear()
    root.clipboard_append(str(new_value))
    root.update()


def clipboard_get():
    """
    Gets the clipboard current value.

    :return: The current value of the clipboard
    :rtype:  (str)
    """
    root = _get_hidden_master_root()

    try:
        value = root.clipboard_get()
    except:
        value = ''
    root.update()
    return value


# MM"""""""`YM
# MM  mmmmm  M
# M'        .M .d8888b. 88d888b. dP    dP 88d888b. .d8888b.
# MM  MMMMMMMM 88'  `88 88'  `88 88    88 88'  `88 Y8ooooo.
# MM  MMMMMMMM 88.  .88 88.  .88 88.  .88 88.  .88       88
# MM  MMMMMMMM `88888P' 88Y888P' `88888P' 88Y888P' `88888P'
# MMMMMMMMMMMM          88                88
#                       dP                dP
# ------------------------------------------------------------------------------------------------------------------ #
# =====================================   Upper PySimpleGUI ======================================================== #
# ------------------------------------------------------------------------------------------------------------------ #
# ----------------------------------- The mighty Popup! ------------------------------------------------------------ #

def popup(*args, title=None, button_color=None, background_color=None, text_color=None, button_type=POPUP_BUTTONS_OK, auto_close=False,
          auto_close_duration=None, custom_text=(None, None), non_blocking=False, icon=None, line_width=None, font=None, no_titlebar=False, grab_anywhere=False,
          keep_on_top=None, location=(None, None), relative_location=(None, None), any_key_closes=False, image=None, modal=True, button_justification=None, drop_whitespace=True):
    """
    Popup - Display a popup Window with as many parms as you wish to include.  This is the GUI equivalent of the
    "print" statement.  It's also great for "pausing" your program's flow until the user can read some error messages.

    If this popup doesn't have the features you want, then you can easily make your own. Popups can be accomplished in 1 line of code:
    choice, _ = sg.Window('Continue?', [[sg.T('Do you want to continue?')], [sg.Yes(s=10), sg.No(s=10)]], disable_close=True).read(close=True)


    :param *args:                 Variable number of your arguments.  Load up the call with stuff to see!
    :type *args:                  (Any)
    :param title:                 Optional title for the window. If none provided, the first arg will be used instead.
    :type title:                  (str)
    :param button_color:          Color of the buttons shown (text color, button color)
    :type button_color:           (str, str) | str
    :param background_color:      Window's background color
    :type background_color:       (str)
    :param text_color:            text color
    :type text_color:             (str)
    :param button_type:           NOT USER SET!  Determines which pre-defined buttons will be shown (Default value = POPUP_BUTTONS_OK). There are many Popup functions and they call Popup, changing this parameter to get the desired effect.
    :type button_type:            (int)
    :param auto_close:            If True the window will automatically close
    :type auto_close:             (bool)
    :param auto_close_duration:   time in seconds to keep window open before closing it automatically
    :type auto_close_duration:    (int)
    :param custom_text:           A string or pair of strings that contain the text to display on the buttons
    :type custom_text:            (str, str) | str
    :param non_blocking:          If True then will immediately return from the function without waiting for the user's input.
    :type non_blocking:           (bool)
    :param icon:                  icon to display on the window. Same format as a Window call
    :type icon:                   str | bytes
    :param line_width:            Width of lines in characters.  Defaults to MESSAGE_BOX_LINE_WIDTH
    :type line_width:             (int)
    :param font:                  specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                   str | Tuple[font_name, size, modifiers]
    :param no_titlebar:           If True will not show the frame around the window and the titlebar across the top
    :type no_titlebar:            (bool)
    :param grab_anywhere:         If True can grab anywhere to move the window. If no_titlebar is True, grab_anywhere should likely be enabled too
    :type grab_anywhere:          (bool)
    :param location:              Location on screen to display the top left corner of window. Defaults to window centered on screen
    :type location:               (int, int)
    :param relative_location:     (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
    :type relative_location:      (int, int)
    :param keep_on_top:           If True the window will remain above all current windows
    :type keep_on_top:            (bool)
    :param any_key_closes:        If True then will turn on return_keyboard_events for the window which will cause window to close as soon as any key is pressed.  Normally the return key only will close the window.  Default is false.
    :type any_key_closes:         (bool)
    :param image:                 Image to include at the top of the popup window
    :type image:                  (str) or (bytes)
    :param modal:                 If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal:                  bool
    :param right_justify_buttons: If True then the buttons will be "pushed" to the right side of the Window
    :type right_justify_buttons:  bool
    :param button_justification:  Speficies if buttons should be left, right or centered. Default is left justified
    :type button_justification:   str
    :param drop_whitespace:       Controls is whitespace should be removed when wrapping text.  Parameter is passed to textwrap.fill. Default is to drop whitespace (so popup remains backward compatible)
    :type drop_whitespace:        bool
    :return:                      Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype:                       str | None
    """

    if not args:
        args_to_print = ['']
    else:
        args_to_print = args
    if line_width != None:
        local_line_width = line_width
    else:
        local_line_width = MESSAGE_BOX_LINE_WIDTH
    _title = title if title is not None else args_to_print[0]

    layout = [[]]
    max_line_total, total_lines = 0, 0
    if image is not None:
        if isinstance(image, str):
            layout += [[Image(filename=image)]]
        else:
            layout += [[Image(data=image)]]

    for message in args_to_print:
        # fancy code to check if string and convert if not is not need. Just always convert to string :-)
        # if not isinstance(message, str): message = str(message)
        message = str(message)
        if message.count('\n'):  # if there are line breaks, then wrap each segment separately
            # message_wrapped = message         # used to just do this, but now breaking into smaller pieces
            message_wrapped = ''
            msg_list = message.split('\n')  # break into segments that will each be wrapped
            message_wrapped = '\n'.join([textwrap.fill(msg, local_line_width) for msg in msg_list])
        else:
            message_wrapped = textwrap.fill(message, local_line_width, drop_whitespace=drop_whitespace)
        message_wrapped_lines = message_wrapped.count('\n') + 1
        longest_line_len = max([len(l) for l in message.split('\n')])
        width_used = min(longest_line_len, local_line_width)
        max_line_total = max(max_line_total, width_used)
        # height = _GetNumLinesNeeded(message, width_used)
        height = message_wrapped_lines
        layout += [[
            Text(message_wrapped, auto_size_text=True, text_color=text_color, background_color=background_color)]]
        total_lines += height

    if non_blocking:
        PopupButton = DummyButton  # important to use or else button will close other windows too!
    else:
        PopupButton = Button
    # show either an OK or Yes/No depending on paramater
    if custom_text != (None, None):
        if type(custom_text) is not tuple:
            layout += [[PopupButton(custom_text, size=(len(custom_text), 1), button_color=button_color, focus=True,
                                    bind_return_key=True)]]
        elif custom_text[1] is None:
            layout += [[
                PopupButton(custom_text[0], size=(len(custom_text[0]), 1), button_color=button_color, focus=True,
                            bind_return_key=True)]]
        else:
            layout += [[PopupButton(custom_text[0], button_color=button_color, focus=True, bind_return_key=True,
                                    size=(len(custom_text[0]), 1)),
                        PopupButton(custom_text[1], button_color=button_color, size=(len(custom_text[1]), 1))]]
    elif button_type == POPUP_BUTTONS_YES_NO:
        layout += [[PopupButton('Yes', button_color=button_color, focus=True, bind_return_key=True,
                                size=(5, 1)), PopupButton('No', button_color=button_color, size=(5, 1))]]
    elif button_type == POPUP_BUTTONS_CANCELLED:
        layout += [[
            PopupButton('Cancelled', button_color=button_color, focus=True, bind_return_key=True)]]
    elif button_type == POPUP_BUTTONS_ERROR:
        layout += [[PopupButton('Error', size=(6, 1), button_color=button_color, focus=True, bind_return_key=True)]]
    elif button_type == POPUP_BUTTONS_OK_CANCEL:
        layout += [[PopupButton('OK', size=(6, 1), button_color=button_color, focus=True, bind_return_key=True),
                    PopupButton('Cancel', size=(6, 1), button_color=button_color)]]
    elif button_type == POPUP_BUTTONS_NO_BUTTONS:
        pass
    else:
        layout += [[PopupButton('OK', size=(5, 1), button_color=button_color, focus=True, bind_return_key=True, )]]
    if button_justification is not None:
        justification = button_justification.lower()[0]
        if justification == 'r':
            layout[-1] = [Push()] + layout[-1]
        elif justification == 'c':
            layout[-1] = [Push()] + layout[-1] + [Push()]

    window = Window(_title, layout, auto_size_text=True, background_color=background_color, button_color=button_color,
                    auto_close=auto_close, auto_close_duration=auto_close_duration, icon=icon, font=font,
                    no_titlebar=no_titlebar, grab_anywhere=grab_anywhere, keep_on_top=keep_on_top, location=location, relative_location=relative_location,
                    return_keyboard_events=any_key_closes,
                    modal=modal)

    if non_blocking:
        button, values = window.read(timeout=0)
    else:
        button, values = window.read()
        window.close()
        del window

    return button


# ==============================  MsgBox============#
# Lazy function. Same as calling Popup with parms   #
# This function WILL Disappear perhaps today        #
# ==================================================#
# MsgBox is the legacy call and should not be used any longer
def MsgBox(*args):
    """
    Do not call this anymore it will raise exception.  Use Popups instead
    :param *args:
    :type *args:

    """
    raise DeprecationWarning('MsgBox is no longer supported... change your call to Popup')


# ========================  Scrolled Text Box   =====#
# ===================================================#
def popup_scrolled(*args, title=None, button_color=None, background_color=None, text_color=None, yes_no=False, no_buttons=False, button_justification='l', auto_close=False,
                   auto_close_duration=None, size=(None, None), location=(None, None), relative_location=(None, None), non_blocking=False, no_titlebar=False, grab_anywhere=False,
                   keep_on_top=None, font=None, image=None, icon=None, modal=True, no_sizegrip=False):
    """
    Show a scrolled Popup window containing the user's text that was supplied.  Use with as many items to print as you
    want, just like a print statement.

    :param *args:                 Variable number of items to display
    :type *args:                  (Any)
    :param title:                 Title to display in the window.
    :type title:                  (str)
    :param button_color:          button color (foreground, background)
    :type button_color:           (str, str) | str
    :param yes_no:                If True, displays Yes and No buttons instead of Ok
    :type yes_no:                 (bool)
    :param no_buttons:            If True, no buttons will be shown. User will have to close using the "X"
    :type no_buttons:             (bool)
    :param button_justification:  How buttons should be arranged.  l, c, r for Left, Center or Right justified
    :type button_justification:   (str)
    :param auto_close:            if True window will close itself
    :type auto_close:             (bool)
    :param auto_close_duration:   Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration:    int | float
    :param size:                  (w,h) w=characters-wide, h=rows-high
    :type size:                   (int, int)
    :param location:              Location on the screen to place the upper left corner of the window
    :type location:               (int, int)
    :param relative_location:     (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
    :type relative_location:      (int, int)
    :param non_blocking:          if True the call will immediately return rather than waiting on user input
    :type non_blocking:           (bool)
    :param background_color:      color of background
    :type background_color:       (str)
    :param text_color:            color of the text
    :type text_color:             (str)
    :param no_titlebar:           If True no titlebar will be shown
    :type no_titlebar:            (bool)
    :param grab_anywhere:         If True, than can grab anywhere to move the window (Default = False)
    :type grab_anywhere:          (bool)
    :param keep_on_top:           If True the window will remain above all current windows
    :type keep_on_top:            (bool)
    :param font:                  specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                   (str or (str, int[, str]) or None)
    :param image:                 Image to include at the top of the popup window
    :type image:                  (str) or (bytes)
    :param icon:                  filename or base64 string to be used for the window's icon
    :type icon:                   bytes | str
    :param modal:                 If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal:                  bool
    :param no_sizegrip:           If True no Sizegrip will be shown when there is no titlebar. It's only shown if there is no titlebar
    :type no_sizegrip:            (bool)
    :return:                      Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype:                       str | None | TIMEOUT_KEY
    """

    if not args:
        return
    width, height = size
    width = width if width else MESSAGE_BOX_LINE_WIDTH

    layout = [[]]

    if image is not None:
        if isinstance(image, str):
            layout += [[Image(filename=image)]]
        else:
            layout += [[Image(data=image)]]
    max_line_total, max_line_width, total_lines, height_computed = 0, 0, 0, 0
    complete_output = ''
    for message in args:
        # fancy code to check if string and convert if not is not need. Just always convert to string :-)
        # if not isinstance(message, str): message = str(message)
        message = str(message)
        longest_line_len = max([len(l) for l in message.split('\n')])
        width_used = min(longest_line_len, width)
        max_line_total = max(max_line_total, width_used)
        max_line_width = width
        lines_needed = _GetNumLinesNeeded(message, width_used)
        height_computed += lines_needed + 1
        complete_output += message + '\n'
        total_lines += lines_needed
    height_computed = MAX_SCROLLED_TEXT_BOX_HEIGHT if height_computed > MAX_SCROLLED_TEXT_BOX_HEIGHT else height_computed
    if height:
        height_computed = height
    layout += [[Multiline(complete_output, size=(max_line_width, height_computed), background_color=background_color, text_color=text_color, expand_x=True,
                          expand_y=True, k='-MLINE-')]]
    # show either an OK or Yes/No depending on paramater
    button = DummyButton if non_blocking else Button

    if yes_no:
        buttons = [button('Yes'), button('No')]
    elif no_buttons is not True:
        buttons = [button('OK', size=(5, 1), button_color=button_color)]
    else:
        buttons = None

    if buttons is not None:
        if button_justification.startswith('l'):
            layout += [buttons]
        elif button_justification.startswith('c'):
            layout += [[Push()] + buttons + [Push()]]
        else:
            layout += [[Push()] + buttons]

    if no_sizegrip is not True:
        layout[-1] += [Sizegrip()]

    window = Window(title or args[0], layout, auto_size_text=True, button_color=button_color, auto_close=auto_close,
                    auto_close_duration=auto_close_duration, location=location, relative_location=relative_location, resizable=True, font=font, background_color=background_color,
                    no_titlebar=no_titlebar, grab_anywhere=grab_anywhere, keep_on_top=keep_on_top, modal=modal, icon=icon)
    if non_blocking:
        button, values = window.read(timeout=0)
    else:
        button, values = window.read()
        window.close()
        del window
    return button


# ============================== sprint ======#
# Is identical to the Scrolled Text Box       #
# Provides a crude 'print' mechanism but in a #
# GUI environment                             #
# This is in addition to the Print function   #
# which routes output to a "Debug Window"     #
# ============================================#


# --------------------------- popup_no_buttons ---------------------------
def popup_no_buttons(*args, title=None, background_color=None, text_color=None, auto_close=False,
                     auto_close_duration=None, non_blocking=False, icon=None, line_width=None, font=None,
                     no_titlebar=False, grab_anywhere=False, keep_on_top=None, location=(None, None), relative_location=(None, None), image=None, modal=True):
    """Show a Popup but without any buttons

    :param *args:               Variable number of items to display
    :type *args:                (Any)
    :param title:               Title to display in the window.
    :type title:                (str)
    :param background_color:    color of background
    :type background_color:     (str)
    :param text_color:          color of the text
    :type text_color:           (str)
    :param auto_close:          if True window will close itself
    :type auto_close:           (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration:  int | float
    :param non_blocking:        If True then will immediately return from the function without waiting for the user's input. (Default = False)
    :type non_blocking:         (bool)
    :param icon:                filename or base64 string to be used for the window's icon
    :type icon:                 bytes | str
    :param line_width:          Width of lines in characters
    :type line_width:           (int)
    :param font:                specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                 (str or (str, int[, str]) or None)
    :param no_titlebar:         If True no titlebar will be shown
    :type no_titlebar:          (bool)
    :param grab_anywhere:       If True, than can grab anywhere to move the window (Default = False)
    :type grab_anywhere:        (bool)
    :param location:            Location of upper left corner of the window
    :type location:             (int, int)
    :param relative_location:   (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
    :type relative_location:    (int, int)
    :param image:               Image to include at the top of the popup window
    :type image:                (str) or (bytes)
    :param modal:               If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal:                bool
    :return:                    Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype:                     str | None | TIMEOUT_KEY    """
    Popup(*args, title=title, background_color=background_color, text_color=text_color,
          button_type=POPUP_BUTTONS_NO_BUTTONS,
          auto_close=auto_close, auto_close_duration=auto_close_duration, non_blocking=non_blocking, icon=icon,
          line_width=line_width,
          font=font, no_titlebar=no_titlebar, grab_anywhere=grab_anywhere, keep_on_top=keep_on_top, location=location, relative_location=relative_location, image=image, modal=modal)


# --------------------------- popup_non_blocking ---------------------------
def popup_non_blocking(*args, title=None, button_type=POPUP_BUTTONS_OK, button_color=None, background_color=None,
                       text_color=None, auto_close=False, auto_close_duration=None, non_blocking=True, icon=None,
                       line_width=None, font=None, no_titlebar=False, grab_anywhere=False, keep_on_top=None,
                       location=(None, None), relative_location=(None, None), image=None, modal=False):
    """
    Show Popup window and immediately return (does not block)

    :param *args:               Variable number of items to display
    :type *args:                (Any)
    :param title:               Title to display in the window.
    :type title:                (str)
    :param button_type:         Determines which pre-defined buttons will be shown (Default value = POPUP_BUTTONS_OK).
    :type button_type:          (int)
    :param button_color:        button color (foreground, background)
    :type button_color:         (str, str) | str
    :param background_color:    color of background
    :type background_color:     (str)
    :param text_color:          color of the text
    :type text_color:           (str)
    :param auto_close:          if True window will close itself
    :type auto_close:           (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration:  int | float
    :param non_blocking:        if True the call will immediately return rather than waiting on user input
    :type non_blocking:         (bool)
    :param icon:                filename or base64 string to be used for the window's icon
    :type icon:                 bytes | str
    :param line_width:          Width of lines in characters
    :type line_width:           (int)
    :param font:                specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                 (str or (str, int[, str]) or None)
    :param no_titlebar:         If True no titlebar will be shown
    :type no_titlebar:          (bool)
    :param grab_anywhere:       If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere:        (bool)
    :param location:            Location of upper left corner of the window
    :type location:             (int, int)
    :param relative_location:   (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
    :type relative_location:    (int, int)
    :param image:               Image to include at the top of the popup window
    :type image:                (str) or (bytes)
    :param modal:               If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = False
    :type modal:                bool
    :return:                    Reason for popup closing
    :rtype:                     str | None
    """

    return popup(*args, title=title, button_color=button_color, background_color=background_color, text_color=text_color,
                 button_type=button_type,
                 auto_close=auto_close, auto_close_duration=auto_close_duration, non_blocking=non_blocking, icon=icon,
                 line_width=line_width,
                 font=font, no_titlebar=no_titlebar, grab_anywhere=grab_anywhere, keep_on_top=keep_on_top, location=location, relative_location=relative_location, image=image, modal=modal)


# --------------------------- popup_quick - a NonBlocking, Self-closing Popup  ---------------------------
def popup_quick(*args, title=None, button_type=POPUP_BUTTONS_OK, button_color=None, background_color=None,
                text_color=None, auto_close=True, auto_close_duration=2, non_blocking=True, icon=None, line_width=None,
                font=None, no_titlebar=False, grab_anywhere=False, keep_on_top=None, location=(None, None), relative_location=(None, None), image=None, modal=False):
    """
    Show Popup box that doesn't block and closes itself

    :param *args:               Variable number of items to display
    :type *args:                (Any)
    :param title:               Title to display in the window.
    :type title:                (str)
    :param button_type:         Determines which pre-defined buttons will be shown (Default value = POPUP_BUTTONS_OK).
    :type button_type:          (int)
    :param button_color:        button color (foreground, background)
    :type button_color:         (str, str) | str
    :param background_color:    color of background
    :type background_color:     (str)
    :param text_color:          color of the text
    :type text_color:           (str)
    :param auto_close:          if True window will close itself
    :type auto_close:           (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration:  int | float
    :param non_blocking:        if True the call will immediately return rather than waiting on user input
    :type non_blocking:         (bool)
    :param icon:                filename or base64 string to be used for the window's icon
    :type icon:                 bytes | str
    :param line_width:          Width of lines in characters
    :type line_width:           (int)
    :param font:                specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                 (str or (str, int[, str]) or None)
    :param no_titlebar:         If True no titlebar will be shown
    :type no_titlebar:          (bool)
    :param grab_anywhere:       If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere:        (bool)
    :param keep_on_top:         If True the window will remain above all current windows
    :type keep_on_top:          (bool)
    :param location:            Location of upper left corner of the window
    :type location:             (int, int)
    :param relative_location:   (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
    :type relative_location:    (int, int)
    :param image:               Image to include at the top of the popup window
    :type image:                (str) or (bytes)
    :param modal:               If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = False
    :type modal:                bool
    :return:                    Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype:                     str | None | TIMEOUT_KEY
    """

    return popup(*args, title=title, button_color=button_color, background_color=background_color, text_color=text_color,
                 button_type=button_type,
                 auto_close=auto_close, auto_close_duration=auto_close_duration, non_blocking=non_blocking, icon=icon,
                 line_width=line_width,
                 font=font, no_titlebar=no_titlebar, grab_anywhere=grab_anywhere, keep_on_top=keep_on_top, location=location, relative_location=relative_location, image=image, modal=modal)


# --------------------------- popup_quick_message - a NonBlocking, Self-closing Popup with no titlebar and no buttons ---------------------------
def popup_quick_message(*args, title=None, button_type=POPUP_BUTTONS_NO_BUTTONS, button_color=None, background_color=None,
                        text_color=None, auto_close=True, auto_close_duration=2, non_blocking=True, icon=None, line_width=None,
                        font=None, no_titlebar=True, grab_anywhere=False, keep_on_top=True, location=(None, None), relative_location=(None, None), image=None, modal=False):
    """
    Show Popup window with no titlebar, doesn't block, and auto closes itself.

    :param *args:               Variable number of items to display
    :type *args:                (Any)
    :param title:               Title to display in the window.
    :type title:                (str)
    :param button_type:         Determines which pre-defined buttons will be shown (Default value = POPUP_BUTTONS_OK).
    :type button_type:          (int)
    :param button_color:        button color (foreground, background)
    :type button_color:         (str, str) | str
    :param keep_on_top:         If True the window will remain above all current windows
    :type keep_on_top:          (bool)
    :param background_color:    color of background
    :type background_color:     (str)
    :param text_color:          color of the text
    :type text_color:           (str)
    :param auto_close:          if True window will close itself
    :type auto_close:           (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration:  int | float
    :param non_blocking:        if True the call will immediately return rather than waiting on user input
    :type non_blocking:         (bool)
    :param icon:                filename or base64 string to be used for the window's icon
    :type icon:                 bytes | str
    :param line_width:          Width of lines in characters
    :type line_width:           (int)
    :param font:                specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                 (str or (str, int[, str]) or None)
    :param no_titlebar:         If True no titlebar will be shown
    :type no_titlebar:          (bool)
    :param grab_anywhere:       If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere:        (bool)
    :param location:            Location of upper left corner of the window
    :type location:             (int, int)
    :param relative_location:   (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
    :type relative_location:    (int, int)
    :param image:               Image to include at the top of the popup window
    :type image:                (str) or (bytes)
    :param modal:               If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = False
    :type modal:                bool
    :return:                    Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype:                     str | None | TIMEOUT_KEY
    """
    return popup(*args, title=title, button_color=button_color, background_color=background_color, text_color=text_color,
                 button_type=button_type,
                 auto_close=auto_close, auto_close_duration=auto_close_duration, non_blocking=non_blocking, icon=icon,
                 line_width=line_width,
                 font=font, no_titlebar=no_titlebar, grab_anywhere=grab_anywhere, keep_on_top=keep_on_top, location=location, relative_location=relative_location, image=image, modal=modal)


# --------------------------- PopupNoTitlebar ---------------------------
def popup_no_titlebar(*args, title=None, button_type=POPUP_BUTTONS_OK, button_color=None, background_color=None,
                      text_color=None, auto_close=False, auto_close_duration=None, non_blocking=False, icon=None,
                      line_width=None, font=None, grab_anywhere=True, keep_on_top=None, location=(None, None), relative_location=(None, None), image=None, modal=True):
    """
    Display a Popup without a titlebar.   Enables grab anywhere so you can move it

    :param *args:               Variable number of items to display
    :type *args:                (Any)
    :param title:               Title to display in the window.
    :type title:                (str)
    :param button_type:         Determines which pre-defined buttons will be shown (Default value = POPUP_BUTTONS_OK).
    :type button_type:          (int)
    :param button_color:        button color (foreground, background)
    :type button_color:         (str, str) | str
    :param background_color:    color of background
    :type background_color:     (str)
    :param text_color:          color of the text
    :type text_color:           (str)
    :param auto_close:          if True window will close itself
    :type auto_close:           (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration:  int | float
    :param non_blocking:        if True the call will immediately return rather than waiting on user input
    :type non_blocking:         (bool)
    :param icon:                filename or base64 string to be used for the window's icon
    :type icon:                 bytes | str
    :param line_width:          Width of lines in characters
    :type line_width:           (int)
    :param font:                specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                 (str or (str, int[, str]) or None)
    :param grab_anywhere:       If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere:        (bool)
    :param keep_on_top:         If True the window will remain above all current windows
    :type keep_on_top:          (bool)
    :param location:            Location of upper left corner of the window
    :type location:             (int, int)
    :param relative_location:   (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
    :type relative_location:    (int, int)
    :param image:               Image to include at the top of the popup window
    :type image:                (str) or (bytes)
    :param modal:               If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal:                bool
    :return:                    Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype:                     str | None | TIMEOUT_KEY
    """
    return popup(*args, title=title, button_color=button_color, background_color=background_color, text_color=text_color,
                 button_type=button_type,
                 auto_close=auto_close, auto_close_duration=auto_close_duration, non_blocking=non_blocking, icon=icon,
                 line_width=line_width,
                 font=font, no_titlebar=True, grab_anywhere=grab_anywhere, keep_on_top=keep_on_top, location=location, relative_location=relative_location, image=image, modal=modal)


# --------------------------- PopupAutoClose ---------------------------
def popup_auto_close(*args, title=None, button_type=POPUP_BUTTONS_OK, button_color=None, background_color=None, text_color=None,
                     auto_close=True, auto_close_duration=None, non_blocking=False, icon=None,
                     line_width=None, font=None, no_titlebar=False, grab_anywhere=False, keep_on_top=None,
                     location=(None, None), relative_location=(None, None), image=None, modal=True):
    """Popup that closes itself after some time period

    :param *args:               Variable number of items to display
    :type *args:                (Any)
    :param title:               Title to display in the window.
    :type title:                (str)
    :param button_type:         Determines which pre-defined buttons will be shown (Default value = POPUP_BUTTONS_OK).
    :type button_type:          (int)
    :param button_color:        button color (foreground, background)
    :type button_color:         (str, str) | str
    :param background_color:    color of background
    :type background_color:     (str)
    :param text_color:          color of the text
    :type text_color:           (str)
    :param auto_close:          if True window will close itself
    :type auto_close:           (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration:  int | float
    :param non_blocking:        if True the call will immediately return rather than waiting on user input
    :type non_blocking:         (bool)
    :param icon:                filename or base64 string to be used for the window's icon
    :type icon:                 bytes | str
    :param line_width:          Width of lines in characters
    :type line_width:           (int)
    :param font:                specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                 (str or (str, int[, str]) or None)
    :param no_titlebar:         If True no titlebar will be shown
    :type no_titlebar:          (bool)
    :param grab_anywhere:       If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere:        (bool)
    :param keep_on_top:         If True the window will remain above all current windows
    :type keep_on_top:          (bool)
    :param location:            Location of upper left corner of the window
    :type location:             (int, int)
    :param relative_location:   (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
    :type relative_location:    (int, int)
    :param image:               Image to include at the top of the popup window
    :type image:                (str) or (bytes)
    :param modal:               If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal:                bool
    :return:                    Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype:                     str | None | TIMEOUT_KEY
    """

    return popup(*args, title=title, button_color=button_color, background_color=background_color, text_color=text_color,
                 button_type=button_type,
                 auto_close=auto_close, auto_close_duration=auto_close_duration, non_blocking=non_blocking, icon=icon,
                 line_width=line_width,
                 font=font, no_titlebar=no_titlebar, grab_anywhere=grab_anywhere, keep_on_top=keep_on_top, location=location, relative_location=relative_location, image=image, modal=modal)


# --------------------------- popup_error ---------------------------
def popup_error(*args, title=None, button_color=(None, None), background_color=None, text_color=None, auto_close=False,
                auto_close_duration=None, non_blocking=False, icon=None, line_width=None, font=None,
                no_titlebar=False, grab_anywhere=False, keep_on_top=None, location=(None, None), relative_location=(None, None), image=None, modal=True):
    """
    Popup with colored button and 'Error' as button text

    :param *args:               Variable number of items to display
    :type *args:                (Any)
    :param title:               Title to display in the window.
    :type title:                (str)
    :param button_color:        button color (foreground, background)
    :type button_color:         (str, str) | str
    :param background_color:    color of background
    :type background_color:     (str)
    :param text_color:          color of the text
    :type text_color:           (str)
    :param auto_close:          if True window will close itself
    :type auto_close:           (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration:  int | float
    :param non_blocking:        if True the call will immediately return rather than waiting on user input
    :type non_blocking:         (bool)
    :param icon:                filename or base64 string to be used for the window's icon
    :type icon:                 bytes | str
    :param line_width:          Width of lines in characters
    :type line_width:           (int)
    :param font:                specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                 (str or (str, int[, str]) or None)
    :param no_titlebar:         If True no titlebar will be shown
    :type no_titlebar:          (bool)
    :param grab_anywhere:       If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere:        (bool)
    :param keep_on_top:         If True the window will remain above all current windows
    :type keep_on_top:          (bool)
    :param location:            Location of upper left corner of the window
    :type location:             (int, int)
    :param relative_location:   (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
    :type relative_location:    (int, int)
    :param image:               Image to include at the top of the popup window
    :type image:                (str) or (bytes)
    :param modal:               If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal:                bool
    :return:                    Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype:                     str | None | TIMEOUT_KEY
    """
    tbutton_color = DEFAULT_ERROR_BUTTON_COLOR if button_color == (None, None) else button_color
    return popup(*args, title=title, button_type=POPUP_BUTTONS_ERROR, background_color=background_color, text_color=text_color,
                 non_blocking=non_blocking, icon=icon, line_width=line_width, button_color=tbutton_color,
                 auto_close=auto_close,
                 auto_close_duration=auto_close_duration, font=font, no_titlebar=no_titlebar, grab_anywhere=grab_anywhere,
                 keep_on_top=keep_on_top, location=location, relative_location=relative_location, image=image, modal=modal)


# --------------------------- popup_cancel ---------------------------
def popup_cancel(*args, title=None, button_color=None, background_color=None, text_color=None, auto_close=False,
                 auto_close_duration=None, non_blocking=False, icon=None, line_width=None, font=None,
                 no_titlebar=False, grab_anywhere=False, keep_on_top=None, location=(None, None), relative_location=(None, None), image=None, modal=True):
    """
    Display Popup with "cancelled" button text

    :param *args:               Variable number of items to display
    :type *args:                (Any)
    :param title:               Title to display in the window.
    :type title:                (str)
    :param button_color:        button color (foreground, background)
    :type button_color:         (str, str) | str
    :param background_color:    color of background
    :type background_color:     (str)
    :param text_color:          color of the text
    :type text_color:           (str)
    :param auto_close:          if True window will close itself
    :type auto_close:           (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration:  int | float
    :param non_blocking:        if True the call will immediately return rather than waiting on user input
    :type non_blocking:         (bool)
    :param icon:                filename or base64 string to be used for the window's icon
    :type icon:                 bytes | str
    :param line_width:          Width of lines in characters
    :type line_width:           (int)
    :param font:                specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                 (str or (str, int[, str]) or None)
    :param no_titlebar:         If True no titlebar will be shown
    :type no_titlebar:          (bool)
    :param grab_anywhere:       If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere:        (bool)
    :param keep_on_top:         If True the window will remain above all current windows
    :type keep_on_top:          (bool)
    :param location:            Location of upper left corner of the window
    :type location:             (int, int)
    :param relative_location:   (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
    :type relative_location:    (int, int)
    :param image:               Image to include at the top of the popup window
    :type image:                (str) or (bytes)
    :param modal:               If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal:                bool
    :return:                    Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype:                     str | None | TIMEOUT_KEY
    """
    return popup(*args, title=title, button_type=POPUP_BUTTONS_CANCELLED, background_color=background_color,
                 text_color=text_color,
                 non_blocking=non_blocking, icon=icon, line_width=line_width, button_color=button_color, auto_close=auto_close,
                 auto_close_duration=auto_close_duration, font=font, no_titlebar=no_titlebar, grab_anywhere=grab_anywhere,
                 keep_on_top=keep_on_top, location=location, relative_location=relative_location, image=image, modal=modal)


# --------------------------- popup_ok ---------------------------
def popup_ok(*args, title=None, button_color=None, background_color=None, text_color=None, auto_close=False,
             auto_close_duration=None, non_blocking=False, icon=None, line_width=None, font=None,
             no_titlebar=False, grab_anywhere=False, keep_on_top=None, location=(None, None), relative_location=(None, None), image=None, modal=True):
    """
    Display Popup with OK button only

    :param *args:               Variable number of items to display
    :type *args:                (Any)
    :param title:               Title to display in the window.
    :type title:                (str)
    :param button_color:        button color (foreground, background)
    :type button_color:         (str, str) | str
    :param background_color:    color of background
    :type background_color:     (str)
    :param text_color:          color of the text
    :type text_color:           (str)
    :param auto_close:          if True window will close itself
    :type auto_close:           (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration:  int | float
    :param non_blocking:        if True the call will immediately return rather than waiting on user input
    :type non_blocking:         (bool)
    :param icon:                filename or base64 string to be used for the window's icon
    :type icon:                 bytes | str
    :param line_width:          Width of lines in characters
    :type line_width:           (int)
    :param font:                specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                 (str or (str, int[, str]) or None)
    :param no_titlebar:         If True no titlebar will be shown
    :type no_titlebar:          (bool)
    :param grab_anywhere:       If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere:        (bool)
    :param keep_on_top:         If True the window will remain above all current windows
    :type keep_on_top:          (bool)
    :param location:            Location of upper left corner of the window
    :type location:             (int, int)
    :param relative_location:   (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
    :type relative_location:    (int, int)
    :param image:               Image to include at the top of the popup window
    :type image:                (str) or (bytes)
    :param modal:               If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal:                bool
    :return:                    Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype:                     str | None | TIMEOUT_KEY
    """
    return popup(*args, title=title, button_type=POPUP_BUTTONS_OK, background_color=background_color, text_color=text_color,
                 non_blocking=non_blocking, icon=icon, line_width=line_width, button_color=button_color, auto_close=auto_close,
                 auto_close_duration=auto_close_duration, font=font, no_titlebar=no_titlebar, grab_anywhere=grab_anywhere,
                 keep_on_top=keep_on_top, location=location, relative_location=relative_location, image=image, modal=modal)


# --------------------------- popup_ok_cancel ---------------------------
def popup_ok_cancel(*args, title=None, button_color=None, background_color=None, text_color=None, auto_close=False,
                    auto_close_duration=None, non_blocking=False, icon=DEFAULT_WINDOW_ICON, line_width=None, font=None,
                    no_titlebar=False, grab_anywhere=False, keep_on_top=None, location=(None, None), relative_location=(None, None), image=None, modal=True):
    """
    Display popup with OK and Cancel buttons

    :param *args:               Variable number of items to display
    :type *args:                (Any)
    :param title:               Title to display in the window.
    :type title:                (str)
    :param button_color:        button color (foreground, background)
    :type button_color:         (str, str) | str
    :param background_color:    color of background
    :type background_color:     (str)
    :param text_color:          color of the text
    :type text_color:           (str)
    :param auto_close:          if True window will close itself
    :type auto_close:           (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration:  int | float
    :param non_blocking:        if True the call will immediately return rather than waiting on user input
    :type non_blocking:         (bool)
    :param icon:                filename or base64 string to be used for the window's icon
    :type icon:                 bytes | str
    :param line_width:          Width of lines in characters
    :type line_width:           (int)
    :param font:                specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                 (str or (str, int[, str]) or None)
    :param no_titlebar:         If True no titlebar will be shown
    :type no_titlebar:          (bool)
    :param grab_anywhere:       If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere:        (bool)
    :param keep_on_top:         If True the window will remain above all current windows
    :type keep_on_top:          (bool)
    :param location:            Location of upper left corner of the window
    :type location:             (int, int)
    :param relative_location:   (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
    :type relative_location:    (int, int)
    :param image:               Image to include at the top of the popup window
    :type image:                (str) or (bytes)
    :param modal:               If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal:                bool
    :return:                    clicked button
    :rtype:                     "OK" | "Cancel" | None
    """
    return popup(*args, title=title, button_type=POPUP_BUTTONS_OK_CANCEL, background_color=background_color,
                 text_color=text_color,
                 non_blocking=non_blocking, icon=icon, line_width=line_width, button_color=button_color,
                 auto_close=auto_close, auto_close_duration=auto_close_duration, font=font, no_titlebar=no_titlebar,
                 grab_anywhere=grab_anywhere, keep_on_top=keep_on_top, location=location, relative_location=relative_location, image=image, modal=modal)


# --------------------------- popup_yes_no ---------------------------
def popup_yes_no(*args, title=None, button_color=None, background_color=None, text_color=None, auto_close=False,
                 auto_close_duration=None, non_blocking=False, icon=None, line_width=None, font=None,
                 no_titlebar=False, grab_anywhere=False, keep_on_top=None, location=(None, None), relative_location=(None, None), image=None, modal=True):
    """
    Display Popup with Yes and No buttons

    :param *args:               Variable number of items to display
    :type *args:                (Any)
    :param title:               Title to display in the window.
    :type title:                (str)
    :param button_color:        button color (foreground, background)
    :type button_color:         (str, str) | str
    :param background_color:    color of background
    :type background_color:     (str)
    :param text_color:          color of the text
    :type text_color:           (str)
    :param auto_close:          if True window will close itself
    :type auto_close:           (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration:  int | float
    :param non_blocking:        if True the call will immediately return rather than waiting on user input
    :type non_blocking:         (bool)
    :param icon:                filename or base64 string to be used for the window's icon
    :type icon:                 bytes | str
    :param line_width:          Width of lines in characters
    :type line_width:           (int)
    :param font:                specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                 (str or (str, int[, str]) or None)
    :param no_titlebar:         If True no titlebar will be shown
    :type no_titlebar:          (bool)
    :param grab_anywhere:       If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere:        (bool)
    :param keep_on_top:         If True the window will remain above all current windows
    :type keep_on_top:          (bool)
    :param location:            Location of upper left corner of the window
    :type location:             (int, int)
    :param relative_location:   (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
    :type relative_location:    (int, int)
    :param image:               Image to include at the top of the popup window
    :type image:                (str) or (bytes)
    :param modal:               If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal:                bool
    :return:                    clicked button
    :rtype:                     "Yes" | "No" | None
    """
    return popup(*args, title=title, button_type=POPUP_BUTTONS_YES_NO, background_color=background_color,
                 text_color=text_color,
                 non_blocking=non_blocking, icon=icon, line_width=line_width, button_color=button_color,
                 auto_close=auto_close, auto_close_duration=auto_close_duration, font=font, no_titlebar=no_titlebar,
                 grab_anywhere=grab_anywhere, keep_on_top=keep_on_top, location=location, relative_location=relative_location, image=image, modal=modal)


##############################################################################
#   The popup_get_____ functions - Will return user input                     #
##############################################################################

# --------------------------- popup_get_folder ---------------------------


def popup_get_folder(message, title=None, default_path='', no_window=False, size=(None, None), button_color=None,
                     background_color=None, text_color=None, icon=None, font=None, no_titlebar=False,
                     grab_anywhere=False, keep_on_top=None, location=(None, None), relative_location=(None, None), initial_folder=None, image=None, modal=True, history=False,
                     history_setting_filename=None):
    """
    Display popup with text entry field and browse button so that a folder can be chosen.

    :param message:                  message displayed to user
    :type message:                   (str)
    :param title:                    Window title
    :type title:                     (str)
    :param default_path:             path to display to user as starting point (filled into the input field)
    :type default_path:              (str)
    :param no_window:                if True, no PySimpleGUI window will be shown. Instead just the tkinter dialog is shown
    :type no_window:                 (bool)
    :param size:                     (width, height) of the InputText Element
    :type size:                      (int, int)
    :param button_color:             button color (foreground, background)
    :type button_color:              (str, str) | str
    :param background_color:         color of background
    :type background_color:          (str)
    :param text_color:               color of the text
    :type text_color:                (str)
    :param icon:                     filename or base64 string to be used for the window's icon
    :type icon:                      bytes | str
    :param font:                     specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                      (str or (str, int[, str]) or None)
    :param no_titlebar:              If True no titlebar will be shown
    :type no_titlebar:               (bool)
    :param grab_anywhere:            If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere:             (bool)
    :param keep_on_top:              If True the window will remain above all current windows
    :type keep_on_top:               (bool)
    :param location:                 Location of upper left corner of the window
    :type location:                  (int, int)
    :param relative_location:        (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
    :type relative_location:         (int, int)
    :param initial_folder:           location in filesystem to begin browsing
    :type initial_folder:            (str)
    :param image:                    Image to include at the top of the popup window
    :type image:                     (str) or (bytes)
    :param modal:                    If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal:                     bool
    :param history:                  If True then enable a "history" feature that will display previous entries used. Uses settings filename provided or default if none provided
    :type history:                   bool
    :param history_setting_filename: Filename to use for the User Settings. Will store list of previous entries in this settings file
    :type history_setting_filename:  (str)
    :return:                         string representing the path chosen, None if cancelled or window closed with X
    :rtype:                          str | None
    """

    # First setup the history settings file if history feature is enabled
    if history and history_setting_filename is not None:
        try:
            history_settings = UserSettings(history_setting_filename)
        except Exception as e:
            _error_popup_with_traceback('popup_get_folder - Something is wrong with your supplied history settings filename',
                                        'Exception: {}'.format(e))
            return None
    elif history:
        history_settings_filename = os.path.basename(inspect.stack()[1].filename)
        history_settings_filename = os.path.splitext(history_settings_filename)[0] + '.json'
        history_settings = UserSettings(history_settings_filename)
    else:
        history_settings = None

    # global _my_windows
    if no_window:
        _get_hidden_master_root()
        root = tk.Toplevel()

        try:
            root.attributes('-alpha', 0)  # hide window while building it. makes for smoother 'paint'
            # if not running_mac():
            try:
                root.wm_overrideredirect(True)
            except Exception as e:
                print('* Error performing wm_overrideredirect while hiding the window during creation in get folder *', e)
            root.withdraw()
        except:
            pass
        folder_name = tk.filedialog.askdirectory(initialdir=initial_folder)  # show the 'get folder' dialog box

        root.destroy()

        return folder_name

    browse_button = FolderBrowse(initial_folder=initial_folder)

    if image is not None:
        if isinstance(image, str):
            layout = [[Image(filename=image)]]
        else:
            layout = [[Image(data=image)]]
    else:
        layout = [[]]

    layout += [[Text(message, auto_size_text=True, text_color=text_color, background_color=background_color)]]

    if not history:
        layout += [[InputText(default_text=default_path, size=size, key='-INPUT-'), browse_button]]
    else:
        file_list = history_settings.get('-PSG folder list-', [])
        last_entry = file_list[0] if file_list else ''
        layout += [[Combo(file_list, default_value=last_entry, key='-INPUT-', size=size if size != (None, None) else (80, 1), bind_return_key=True),
                    browse_button, Button('Clear History', tooltip='Clears the list of folders shown in the combobox')]]

    layout += [[Button('Ok', size=(6, 1), bind_return_key=True), Button('Cancel', size=(6, 1))]]

    window = Window(title=title or message, layout=layout, icon=icon, auto_size_text=True, button_color=button_color,
                    font=font, background_color=background_color, no_titlebar=no_titlebar, grab_anywhere=grab_anywhere, keep_on_top=keep_on_top,
                    location=location, relative_location=relative_location, modal=modal)

    while True:
        event, values = window.read()
        if event in ('Cancel', WIN_CLOSED):
            break
        elif event == 'Clear History':
            history_settings.set('-PSG folder list-', [])
            window['-INPUT-'].update('', [])
            popup_quick_message('History of Previous Choices Cleared', background_color='red', text_color='white', font='_ 20', keep_on_top=True)
        elif event in ('Ok', '-INPUT-'):
            if values['-INPUT-'] != '':
                if history_settings is not None:
                    list_of_entries = history_settings.get('-PSG folder list-', [])
                    if values['-INPUT-'] in list_of_entries:
                        list_of_entries.remove(values['-INPUT-'])
                    list_of_entries.insert(0, values['-INPUT-'])
                    history_settings.set('-PSG folder list-', list_of_entries)
            break

    window.close()
    del window
    if event in ('Cancel', WIN_CLOSED):
        return None

    return values['-INPUT-']


# --------------------------- popup_get_file ---------------------------

def popup_get_file(message, title=None, default_path='', default_extension='', save_as=False, multiple_files=False,
                   file_types=FILE_TYPES_ALL_FILES,
                   no_window=False, size=(None, None), button_color=None, background_color=None, text_color=None,
                   icon=None, font=None, no_titlebar=False, grab_anywhere=False, keep_on_top=None,
                   location=(None, None), relative_location=(None, None), initial_folder=None, image=None, files_delimiter=BROWSE_FILES_DELIMITER, modal=True, history=False, show_hidden=True,
                   history_setting_filename=None):
    """
    Display popup window with text entry field and browse button so that a file can be chosen by user.

    :param message:                  message displayed to user
    :type message:                   (str)
    :param title:                    Window title
    :type title:                     (str)
    :param default_path:             path to display to user as starting point (filled into the input field)
    :type default_path:              (str)
    :param default_extension:        If no extension entered by user, add this to filename (only used in saveas dialogs)
    :type default_extension:         (str)
    :param save_as:                  if True, the "save as" dialog is shown which will verify before overwriting
    :type save_as:                   (bool)
    :param multiple_files:           if True, then allows multiple files to be selected that are returned with ';' between each filename
    :type multiple_files:            (bool)
    :param file_types:               List of extensions to show using wildcards. All files (the default) = (("ALL Files", "*.* *"),).
    :type file_types:                Tuple[Tuple[str,str]]
    :param no_window:                if True, no PySimpleGUI window will be shown. Instead just the tkinter dialog is shown
    :type no_window:                 (bool)
    :param size:                     (width, height) of the InputText Element or Combo element if using history feature
    :type size:                      (int, int)
    :param button_color:             Color of the button (text, background)
    :type button_color:              (str, str) | str
    :param background_color:         background color of the entire window
    :type background_color:          (str)
    :param text_color:               color of the text
    :type text_color:                (str)
    :param icon:                     filename or base64 string to be used for the window's icon
    :type icon:                      bytes | str
    :param font:                     specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                      (str or (str, int[, str]) or None)
    :param no_titlebar:              If True no titlebar will be shown
    :type no_titlebar:               (bool)
    :param grab_anywhere:            If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere:             (bool)
    :param keep_on_top:              If True the window will remain above all current windows
    :type keep_on_top:               (bool)
    :param location:                 Location of upper left corner of the window
    :type location:                  (int, int)
    :param relative_location:        (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
    :type relative_location:         (int, int)
    :param initial_folder:           location in filesystem to begin browsing
    :type initial_folder:            (str)
    :param image:                    Image to include at the top of the popup window
    :type image:                     (str) or (bytes)
    :param files_delimiter:          String to place between files when multiple files are selected. Normally a ;
    :type files_delimiter:           str
    :param modal:                    If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal:                     bool
    :param history:                  If True then enable a "history" feature that will display previous entries used. Uses settings filename provided or default if none provided
    :type history:                   bool
    :param show_hidden:              If True then enables the checkbox in the system dialog to select hidden files to be shown
    :type show_hidden:               bool
    :param history_setting_filename: Filename to use for the User Settings. Will store list of previous entries in this settings file
    :type history_setting_filename:  (str)
    :return:                         string representing the file(s) chosen, None if cancelled or window closed with X
    :rtype:                          str | None
    """

    # First setup the history settings file if history feature is enabled
    if history and history_setting_filename is not None:
        try:
            history_settings = UserSettings(history_setting_filename)
        except Exception as e:
            _error_popup_with_traceback('popup_get_file - Something is wrong with your supplied history settings filename',
                                        'Exception: {}'.format(e))
            return None
    elif history:
        history_settings_filename = os.path.basename(inspect.stack()[1].filename)
        history_settings_filename = os.path.splitext(history_settings_filename)[0] + '.json'
        history_settings = UserSettings(history_settings_filename)
    else:
        history_settings = None

    if icon is None:
        icon = Window._user_defined_icon or DEFAULT_BASE64_ICON
    if no_window:
        _get_hidden_master_root()
        root = tk.Toplevel()

        try:
            root.attributes('-alpha', 0)  # hide window while building it. makes for smoother 'paint'
            # if not running_mac():
            try:
                root.wm_overrideredirect(True)
            except Exception as e:
                print('* Error performing wm_overrideredirect in get file *', e)
            root.withdraw()
        except:
            pass

        if show_hidden is False:
            try:
                # call a dummy dialog with an impossible option to initialize the file
                # dialog without really getting a dialog window; this will throw a
                # TclError, so we need a try...except :
                try:
                    root.tk.call('tk_getOpenFile', '-foobarbaz')
                except tk.TclError:
                    pass
                # now set the magic variables accordingly
                root.tk.call('set', '::tk::dialog::file::showHiddenBtn', '1')
                root.tk.call('set', '::tk::dialog::file::showHiddenVar', '0')
            except:
                pass

        if root and icon is not None:
            _set_icon_for_tkinter_window(root, icon=icon)
        # for Macs, setting parent=None fixes a warning problem.
        if save_as:
            if running_mac():
                is_all = [(x, y) for (x, y) in file_types if all(ch in '* .' for ch in y)]
                if not len(set(file_types)) > 1 and (len(is_all) != 0 or file_types == FILE_TYPES_ALL_FILES):
                    filename = tk.filedialog.asksaveasfilename(initialdir=initial_folder,
                                                               initialfile=default_path,
                                                               defaultextension=default_extension)  # show the 'get file' dialog box
                else:
                    filename = tk.filedialog.asksaveasfilename(filetypes=file_types,
                                                               initialdir=initial_folder,
                                                               initialfile=default_path,
                                                               defaultextension=default_extension)  # show the 'get file' dialog box
            else:
                filename = tk.filedialog.asksaveasfilename(filetypes=file_types,
                                                           initialdir=initial_folder,
                                                           initialfile=default_path,
                                                           parent=root,
                                                           defaultextension=default_extension)  # show the 'get file' dialog box
        elif multiple_files:
            if running_mac():
                is_all = [(x, y) for (x, y) in file_types if all(ch in '* .' for ch in y)]
                if not len(set(file_types)) > 1 and (len(is_all) != 0 or file_types == FILE_TYPES_ALL_FILES):
                    filename = tk.filedialog.askopenfilenames(initialdir=initial_folder,
                                                              initialfile=default_path,
                                                              defaultextension=default_extension)  # show the 'get file' dialog box
                else:
                    filename = tk.filedialog.askopenfilenames(filetypes=file_types,
                                                              initialdir=initial_folder,
                                                              initialfile=default_path,
                                                              defaultextension=default_extension)  # show the 'get file' dialog box
            else:
                filename = tk.filedialog.askopenfilenames(filetypes=file_types,
                                                          initialdir=initial_folder,
                                                          initialfile=default_path,
                                                          parent=root,
                                                          defaultextension=default_extension)  # show the 'get file' dialog box
        else:
            if running_mac():
                is_all = [(x, y) for (x, y) in file_types if all(ch in '* .' for ch in y)]
                if not len(set(file_types)) > 1 and (len(is_all) != 0 or file_types == FILE_TYPES_ALL_FILES):
                    filename = tk.filedialog.askopenfilename(initialdir=initial_folder,
                                                             initialfile=default_path,
                                                             defaultextension=default_extension)  # show the 'get files' dialog box
                else:
                    filename = tk.filedialog.askopenfilename(filetypes=file_types,
                                                             initialdir=initial_folder,
                                                             initialfile=default_path,
                                                             defaultextension=default_extension)  # show the 'get files' dialog box
            else:
                filename = tk.filedialog.askopenfilename(filetypes=file_types,
                                                         initialdir=initial_folder,
                                                         initialfile=default_path,
                                                         parent=root,
                                                         defaultextension=default_extension)  # show the 'get files' dialog box
        root.destroy()

        if not multiple_files and type(filename) in (tuple, list):
            if len(filename):  # only if not 0 length, otherwise will get an error
                filename = filename[0]
        if not filename:
            return None
        return filename

    if save_as:
        browse_button = SaveAs(file_types=file_types, initial_folder=initial_folder, default_extension=default_extension)
    elif multiple_files:
        browse_button = FilesBrowse(file_types=file_types, initial_folder=initial_folder, files_delimiter=files_delimiter)
    else:
        browse_button = FileBrowse(file_types=file_types, initial_folder=initial_folder)

    if image is not None:
        if isinstance(image, str):
            layout = [[Image(filename=image)]]
        else:
            layout = [[Image(data=image)]]
    else:
        layout = [[]]

    layout += [[Text(message, auto_size_text=True, text_color=text_color, background_color=background_color)]]

    if not history:
        layout += [[InputText(default_text=default_path, size=size, key='-INPUT-'), browse_button]]
    else:
        file_list = history_settings.get("-PSG file list-", [])
        last_entry = file_list[0] if file_list else ''
        layout += [[Combo(file_list, default_value=last_entry, key='-INPUT-', size=size if size != (None, None) else (80, 1), bind_return_key=True),
                    browse_button, Button('Clear History', tooltip='Clears the list of files shown in the combobox')]]

    layout += [[Button('Ok', size=(6, 1), bind_return_key=True), Button('Cancel', size=(6, 1))]]

    window = Window(title=title or message, layout=layout, icon=icon, auto_size_text=True, button_color=button_color,
                    font=font, background_color=background_color, no_titlebar=no_titlebar, grab_anywhere=grab_anywhere, keep_on_top=keep_on_top, location=location, relative_location=relative_location, modal=modal, finalize=True)

    if running_linux() and show_hidden is True:
        window.TKroot.tk.eval('catch {tk_getOpenFile -badoption}')  # dirty hack to force autoloading of Tk's file dialog code
        window.TKroot.setvar('::tk::dialog::file::showHiddenBtn', 1)  # enable the "show hidden files" checkbox (it's necessary)
        window.TKroot.setvar('::tk::dialog::file::showHiddenVar', 0)  # start with the hidden files... well... hidden

    while True:
        event, values = window.read()
        if event in ('Cancel', WIN_CLOSED):
            break
        elif event == 'Clear History':
            history_settings.set('-PSG file list-', [])
            window['-INPUT-'].update('', [])
            popup_quick_message('History of Previous Choices Cleared', background_color='red', text_color='white', font='_ 20', keep_on_top=True)
        elif event in ('Ok', '-INPUT-'):
            if values['-INPUT-'] != '':
                if history_settings is not None:
                    list_of_entries = history_settings.get('-PSG file list-', [])
                    if values['-INPUT-'] in list_of_entries:
                        list_of_entries.remove(values['-INPUT-'])
                    list_of_entries.insert(0, values['-INPUT-'])
                    history_settings.set('-PSG file list-', list_of_entries)
            break

    window.close()
    del window
    if event in ('Cancel', WIN_CLOSED):
        return None

    return values['-INPUT-']


# --------------------------- popup_get_text ---------------------------

def popup_get_text(message, title=None, default_text='', password_char='', size=(None, None), button_color=None,
                   background_color=None, text_color=None, icon=None, font=None, no_titlebar=False,
                   grab_anywhere=False, keep_on_top=None, location=(None, None), relative_location=(None, None), image=None, history=False, history_setting_filename=None, modal=True):
    """
    Display Popup with text entry field. Returns the text entered or None if closed / cancelled

    :param message:                  message displayed to user
    :type message:                   (str)
    :param title:                    Window title
    :type title:                     (str)
    :param default_text:             default value to put into input area
    :type default_text:              (str)
    :param password_char:            character to be shown instead of actually typed characters. WARNING - if history=True then can't hide passwords
    :type password_char:             (str)
    :param size:                     (width, height) of the input. If not specied a single line Input element used. If height >1 a Mulitline is shown
    :type size:                      (int, int)
    :param button_color:             Color of the button (text, background)
    :type button_color:              (str, str) | str
    :param background_color:         background color of the entire window
    :type background_color:          (str)
    :param text_color:               color of the message text
    :type text_color:                (str)
    :param icon:                     filename or base64 string to be used for the window's icon
    :type icon:                      bytes | str
    :param font:                     specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                      (str or (str, int[, str]) or None)
    :param no_titlebar:              If True no titlebar will be shown
    :type no_titlebar:               (bool)
    :param grab_anywhere:            If True can click and drag anywhere in the window to move the window
    :type grab_anywhere:             (bool)
    :param keep_on_top:              If True the window will remain above all current windows
    :type keep_on_top:               (bool)
    :param location:                 (x,y) Location on screen to display the upper left corner of window
    :type location:                  (int, int)
    :param relative_location:        (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
    :type relative_location:         (int, int)
    :param image:                    Image to include at the top of the popup window
    :type image:                     (str) or (bytes)
    :param history:                  If True then enable a "history" feature that will display previous entries used. Uses settings filename provided or default if none provided
    :type history:                   bool
    :param history_setting_filename: Filename to use for the User Settings. Will store list of previous entries in this settings file
    :type history_setting_filename:  (str)
    :param modal:                    If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal:                     bool
    :return:                         Text entered or None if window was closed or cancel button clicked
    :rtype:                          str | None
    """

    # First setup the history settings file if history feature is enabled
    if history and history_setting_filename is not None:
        try:
            history_settings = UserSettings(history_setting_filename)
        except Exception as e:
            _error_popup_with_traceback('popup_get_file - Something is wrong with your supplied history settings filename',
                                        'Exception: {}'.format(e))
            return None
    elif history:
        history_settings_filename = os.path.basename(inspect.stack()[1].filename)
        history_settings_filename = os.path.splitext(history_settings_filename)[0] + '.json'
        history_settings = UserSettings(history_settings_filename)
    else:
        history_settings = None

    if image is not None:
        if isinstance(image, str):
            layout = [[Image(filename=image)]]
        else:
            layout = [[Image(data=image)]]
    else:
        layout = [[]]

    layout += [[Text(message, auto_size_text=True, text_color=text_color, background_color=background_color)]]
    if  history:
        text_list = history_settings.get("-PSG text list-", [])
        last_entry = text_list[0] if text_list else default_text
        layout += [[Combo(text_list, default_value=last_entry, key='-INPUT-', size=size if size != (None, None) else (80, 1), bind_return_key=True),
                    Button('Clear History', tooltip='Clears the list of files shown in the combobox')]]
    elif size == (None, None) or size[1] <= 1:
        layout += [[InputText(default_text=default_text, size=size, key='-INPUT-', password_char=password_char, focus=True)]]
    else:
        layout += [[Multiline(default_text=default_text, size=size, key='-INPUT-', focus=True)]]

    layout += [[Button('Ok', size=(6, 1), bind_return_key=True), Button('Cancel', size=(6, 1))]]

    window = Window(title=title or message, layout=layout, icon=icon, auto_size_text=True, button_color=button_color, no_titlebar=no_titlebar,
                    background_color=background_color, grab_anywhere=grab_anywhere, keep_on_top=keep_on_top, location=location, relative_location=relative_location, finalize=True, modal=modal, font=font)
    window.force_focus()
    window['-INPUT-'].set_focus()

    while True:
        event, values = window.read()
        if event in ('Cancel', WIN_CLOSED):
            break
        elif event == 'Clear History':
            history_settings.set('-PSG text list-', [])
            window['-INPUT-'].update('', [])
            popup_quick_message('History of Previous Choices Cleared', background_color='red', text_color='white', font='_ 20', keep_on_top=True)
        elif event in ('Ok', '-INPUT-'):
            if values['-INPUT-'] != '':
                if history_settings is not None:
                    list_of_entries = history_settings.get('-PSG text list-', [])
                    if values['-INPUT-'] in list_of_entries:
                        list_of_entries.remove(values['-INPUT-'])
                    list_of_entries.insert(0, values['-INPUT-'])
                    history_settings.set('-PSG text list-', list_of_entries)
            break

    window.close()
    del window
    if event in ('Cancel', WIN_CLOSED):
        return None
    else:
        text = values['-INPUT-']
        return text


def popup_get_date(start_mon=None, start_day=None, start_year=None, begin_at_sunday_plus=0, no_titlebar=True, title='Choose Date', keep_on_top=True,
                   location=(None, None), relative_location=(None, None), close_when_chosen=False, icon=None, locale=None, month_names=None, day_abbreviations=None, day_font = 'TkFixedFont 9', mon_year_font = 'TkFixedFont 10', arrow_font = 'TkFixedFont 7', modal=True):
    """
    Display a calendar window, get the user's choice, return as a tuple (mon, day, year)

    :param start_mon:            The starting month
    :type start_mon:             (int)
    :param start_day:            The starting day - optional. Set to None or 0 if no date to be chosen at start
    :type start_day:             int | None
    :param start_year:           The starting year
    :type start_year:            (int)
    :param begin_at_sunday_plus: Determines the left-most day in the display. 0=sunday, 1=monday, etc
    :type begin_at_sunday_plus:  (int)
    :param icon:                 Same as Window icon parameter. Can be either a filename or Base64 value. For Windows if filename, it MUST be ICO format. For Linux, must NOT be ICO
    :type icon:                  (str | bytes)
    :param location:             (x,y) location on the screen to place the top left corner of your window. Default is to center on screen
    :type location:              (int, int)
    :param relative_location:    (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
    :type relative_location:     (int, int)
    :param title:                Title that will be shown on the window
    :type title:                 (str)
    :param close_when_chosen:    If True, the window will close and function return when a day is clicked
    :type close_when_chosen:     (bool)
    :param locale:               locale used to get the day names
    :type locale:                (str)
    :param no_titlebar:          If True no titlebar will be shown
    :type no_titlebar:           (bool)
    :param keep_on_top:          If True the window will remain above all current windows
    :type keep_on_top:           (bool)
    :param month_names:          optional list of month names to use (should be 12 items)
    :type month_names:           List[str]
    :param day_abbreviations:    optional list of abbreviations to display as the day of week
    :type day_abbreviations:     List[str]
    :param day_font:             Font and size to use for the calendar
    :type day_font:              str | tuple
    :param mon_year_font:        Font and size to use for the month and year at the top
    :type mon_year_font:         str | tuple
    :param arrow_font:           Font and size to use for the arrow buttons
    :type arrow_font:            str | tuple
    :param modal:                If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal:                 bool
    :return:                     Tuple containing (month, day, year) of chosen date or None if was cancelled
    :rtype:                      None | (int, int, int)
    """

    if month_names is not None and len(month_names) != 12:
        if not SUPPRESS_ERROR_POPUPS:
            popup_error('Incorrect month names list specified. Must have 12 entries.', 'Your list:', month_names)

    if day_abbreviations is not None and len(day_abbreviations) != 7:
        if not SUPPRESS_ERROR_POPUPS:
            popup_error('Incorrect day abbreviation list. Must have 7 entries.', 'Your list:', day_abbreviations)

    now = datetime.datetime.now()
    cur_month, cur_day, cur_year = now.month, now.day, now.year
    cur_month = start_mon or cur_month
    if start_mon is not None:
        cur_day = start_day
    else:
        cur_day = cur_day
    cur_year = start_year or cur_year

    def update_days(window, month, year, begin_at_sunday_plus):
        [window[(week, day)].update('') for day in range(7) for week in range(6)]
        weeks = calendar.monthcalendar(year, month)
        month_days = list(itertools.chain.from_iterable([[0 for _ in range(8 - begin_at_sunday_plus)]] + weeks))
        if month_days[6] == 0:
            month_days = month_days[7:]
            if month_days[6] == 0:
                month_days = month_days[7:]
        for i, day in enumerate(month_days):
            offset = i
            if offset >= 6 * 7:
                break
            window[(offset // 7, offset % 7)].update(str(day) if day else '')

    def make_days_layout():
        days_layout = []
        for week in range(6):
            row = []
            for day in range(7):
                row.append(T('', size=(4, 1), justification='c', font=day_font, key=(week, day), enable_events=True, pad=(0, 0)))
            days_layout.append(row)
        return days_layout

    # Create table of month names and week day abbreviations

    if day_abbreviations is None or len(day_abbreviations) != 7:
        fwday = calendar.SUNDAY
        try:
            if locale is not None:
                _cal = calendar.LocaleTextCalendar(fwday, locale)
            else:
                _cal = calendar.TextCalendar(fwday)
            day_names = _cal.formatweekheader(3).split()
        except Exception as e:
            print('Exception building day names from locale', locale, e)
            day_names = ('Sun', 'Mon', 'Tue', 'Wed', 'Th', 'Fri', 'Sat')
    else:
        day_names = day_abbreviations

    mon_names = month_names if month_names is not None and len(month_names) == 12 else [calendar.month_name[i] for i in range(1, 13)]
    days_layout = make_days_layout()

    layout = [[B('◄◄', font=arrow_font, border_width=0, key='-YEAR-DOWN-', pad=((10, 2), 2)),
               B('◄', font=arrow_font, border_width=0, key='-MON-DOWN-', pad=(0, 2)),
               Text('{} {}'.format(mon_names[cur_month - 1], cur_year), size=(16, 1), justification='c', font=mon_year_font, key='-MON-YEAR-', pad=(0, 2)),
               B('►', font=arrow_font, border_width=0, key='-MON-UP-', pad=(0, 2)),
               B('►►', font=arrow_font, border_width=0, key='-YEAR-UP-', pad=(2, 2))]]
    layout += [[Col([[T(day_names[i - (7 - begin_at_sunday_plus) % 7], size=(4, 1), font=day_font, background_color=theme_text_color(),
                        text_color=theme_background_color(), pad=(0, 0)) for i in range(7)]], background_color=theme_text_color(), pad=(0, 0))]]
    layout += days_layout
    if not close_when_chosen:
        layout += [[Button('Ok', border_width=0, font='TkFixedFont 8'), Button('Cancel', border_width=0, font='TkFixedFont 8')]]

    window = Window(title, layout, no_titlebar=no_titlebar, grab_anywhere=True, keep_on_top=keep_on_top, font='TkFixedFont 12', use_default_focus=False,
                    location=location, relative_location=relative_location, finalize=True, icon=icon)

    update_days(window, cur_month, cur_year, begin_at_sunday_plus)

    prev_choice = chosen_mon_day_year = None

    if cur_day:
        chosen_mon_day_year = cur_month, cur_day, cur_year
        for week in range(6):
            for day in range(7):
                if window[(week, day)].DisplayText == str(cur_day):
                    window[(week, day)].update(background_color=theme_text_color(), text_color=theme_background_color())
                    prev_choice = (week, day)
                    break

    if modal or DEFAULT_MODAL_WINDOWS_FORCED:
        window.make_modal()

    while True:  # Event Loop
        event, values = window.read()
        if event in (None, 'Cancel'):
            chosen_mon_day_year = None
            break
        if event == 'Ok':
            break
        if event in ('-MON-UP-', '-MON-DOWN-', '-YEAR-UP-', '-YEAR-DOWN-'):
            cur_month += (event == '-MON-UP-')
            cur_month -= (event == '-MON-DOWN-')
            cur_year += (event == '-YEAR-UP-')
            cur_year -= (event == '-YEAR-DOWN-')
            if cur_month > 12:
                cur_month = 1
                cur_year += 1
            elif cur_month < 1:
                cur_month = 12
                cur_year -= 1
            window['-MON-YEAR-'].update('{} {}'.format(mon_names[cur_month - 1], cur_year))
            update_days(window, cur_month, cur_year, begin_at_sunday_plus)
            if prev_choice:
                window[prev_choice].update(background_color=theme_background_color(), text_color=theme_text_color())
        elif type(event) is tuple:
            if window[event].DisplayText != "":
                chosen_mon_day_year = cur_month, int(window[event].DisplayText), cur_year
                if prev_choice:
                    window[prev_choice].update(background_color=theme_background_color(), text_color=theme_text_color())
                window[event].update(background_color=theme_text_color(), text_color=theme_background_color())
                prev_choice = event
                if close_when_chosen:
                    break
    window.close()
    return chosen_mon_day_year


# --------------------------- PopupAnimated ---------------------------

def popup_animated(image_source, message=None, background_color=None, text_color=None, font=None, no_titlebar=True, grab_anywhere=True, keep_on_top=True,
                   location=(None, None), relative_location=(None, None), alpha_channel=None, time_between_frames=0, transparent_color=None, title='', icon=None, no_buffering=False):
    """
     Show animation one frame at a time.  This function has its own internal clocking meaning you can call it at any frequency
     and the rate the frames of video is shown remains constant.  Maybe your frames update every 30 ms but your
     event loop is running every 10 ms.  You don't have to worry about delaying, just call it every time through the
     loop.

    :param image_source:        Either a filename or a base64 string. Use None to close the window.
    :type image_source:         str | bytes | None
    :param message:             An optional message to be shown with the animation
    :type message:              (str)
    :param background_color:    color of background
    :type background_color:     (str)
    :param text_color:          color of the text
    :type text_color:           (str)
    :param font:                specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                 str | tuple
    :param no_titlebar:         If True then the titlebar and window frame will not be shown
    :type no_titlebar:          (bool)
    :param grab_anywhere:       If True then you can move the window just clicking anywhere on window, hold and drag
    :type grab_anywhere:        (bool)
    :param keep_on_top:         If True then Window will remain on top of all other windows currently shownn
    :type keep_on_top:          (bool)
    :param location:            (x,y) location on the screen to place the top left corner of your window. Default is to center on screen
    :type location:             (int, int)
    :param relative_location:   (x,y) location relative to the default location of the window, in pixels. Normally the window centers.  This location is relative to the location the window would be created. Note they can be negative.
    :type relative_location:    (int, int)
    :param alpha_channel:       Window transparency 0 = invisible 1 = completely visible. Values between are see through
    :type alpha_channel:        (float)
    :param time_between_frames: Amount of time in milliseconds between each frame
    :type time_between_frames:  (int)
    :param transparent_color:   This color will be completely see-through in your window. Can even click through
    :type transparent_color:    (str)
    :param title:               Title that will be shown on the window
    :type title:                (str)
    :param icon:                Same as Window icon parameter. Can be either a filename or Base64 byte string. For Windows if filename, it MUST be ICO format. For Linux, must NOT be ICO
    :type icon:                 str | bytes
    :param no_buffering:        If True then no buffering will be used for the GIF. May work better if you have a large animation
    :type no_buffering:         (bool)
    :return:                    True if the window updated OK. False if the window was closed or if the GIF has reached the end
    :rtype:                     bool
    """
    if image_source is None:
        for image in Window._animated_popup_dict:
            window = Window._animated_popup_dict[image]
            window.close()
        Window._animated_popup_dict = {}
        return False
    not_done = True
    if image_source not in Window._animated_popup_dict:
        if type(image_source) is bytes or len(image_source) > 300:
            layout = [[Image(data=image_source, background_color=background_color, key='-IMAGE-')], ]
        else:
            layout = [[Image(filename=image_source, background_color=background_color, key='-IMAGE-', )], ]
        if message:
            layout.append([Text(message, background_color=background_color, text_color=text_color, font=font)])

        window = Window(title, layout, no_titlebar=no_titlebar, grab_anywhere=grab_anywhere,
                        keep_on_top=keep_on_top, background_color=background_color, location=location,
                        alpha_channel=alpha_channel, element_padding=(0, 0), margins=(0, 0),
                        transparent_color=transparent_color, finalize=True, element_justification='c', icon=icon, relative_location=relative_location)
        Window._animated_popup_dict[image_source] = window
    else:
        window = Window._animated_popup_dict[image_source]
        if no_buffering:
            not_done = window['-IMAGE-'].update_animation_no_buffering(image_source, time_between_frames=time_between_frames)
        else:
            not_done = window['-IMAGE-'].update_animation(image_source, time_between_frames=time_between_frames)
    event, values = window.read(1)
    if event == WIN_CLOSED:
        return False
    # window.refresh() # call refresh instead of Read to save significant CPU time
    return not_done


# Popup Notify
def popup_notify(*args, title='', icon=SYSTEM_TRAY_MESSAGE_ICON_INFORMATION, display_duration_in_ms=SYSTEM_TRAY_MESSAGE_DISPLAY_DURATION_IN_MILLISECONDS,
                 fade_in_duration=SYSTEM_TRAY_MESSAGE_FADE_IN_DURATION, alpha=0.9, location=None):
    """
    Displays a "notification window", usually in the bottom right corner of your display.  Has an icon, a title, and a message.  It is more like a "toaster" window than the normal popups.

    The window will slowly fade in and out if desired.  Clicking on the window will cause it to move through the end the current "phase". For example, if the window was fading in and it was clicked, then it would immediately stop fading in and instead be fully visible.  It's a way for the user to quickly dismiss the window.

    The return code specifies why the call is returning (e.g. did the user click the message to dismiss it)

    :param title:                  Text to be shown at the top of the window in a larger font
    :type title:                   (str)
    :param message:                Text message that makes up the majority of the window
    :type message:                 (str)
    :param icon:                   A base64 encoded PNG/GIF image or PNG/GIF filename that will be displayed in the window
    :type icon:                    bytes | str
    :param display_duration_in_ms: Number of milliseconds to show the window
    :type display_duration_in_ms:  (int)
    :param fade_in_duration:       Number of milliseconds to fade window in and out
    :type fade_in_duration:        (int)
    :param alpha:                  Alpha channel. 0 - invisible 1 - fully visible
    :type alpha:                   (float)
    :param location:               Location on the screen to display the window
    :type location:                (int, int)
    :return:                       reason for returning
    :rtype:                        (int)
    """

    if not args:
        args_to_print = ['']
    else:
        args_to_print = args
    output = ''
    max_line_total, total_lines, local_line_width = 0, 0, SYSTEM_TRAY_MESSAGE_MAX_LINE_LENGTH
    for message in args_to_print:
        # fancy code to check if string and convert if not is not need. Just always convert to string :-)
        # if not isinstance(message, str): message = str(message)
        message = str(message)
        if message.count('\n'):
            message_wrapped = message
        else:
            message_wrapped = textwrap.fill(message, local_line_width)
        message_wrapped_lines = message_wrapped.count('\n') + 1
        longest_line_len = max([len(l) for l in message.split('\n')])
        width_used = min(longest_line_len, local_line_width)
        max_line_total = max(max_line_total, width_used)
        # height = _GetNumLinesNeeded(message, width_used)
        height = message_wrapped_lines
        output += message_wrapped + '\n'
        total_lines += height

    message = output

    # def __init__(self, menu=None, filename=None, data=None, data_base64=None, tooltip=None, metadata=None):
    return SystemTray.notify(title=title, message=message, icon=icon, display_duration_in_ms=display_duration_in_ms, fade_in_duration=fade_in_duration,
                             alpha=alpha, location=location)


def popup_menu(window, element, menu_def, title=None, location=(None, None)):
    """
    Makes a "popup menu"
    This type of menu is what you get when a normal menu or a right click menu is torn off
    The settings for the menu are obtained from the window parameter's Window


    :param window:   The window associated with the popup menu. The theme and right click menu settings for this window will be used
    :type window:    Window
    :param element:  An element in your window to associate the menu to. It can be any element
    :type element:   Element
    :param menu_def: A menu definition. This will be the same format as used for Right Click Menus1
    :type  menu_def: List[List[ List[str] | str ]]
    :param title:    The title that will be shown on the torn off menu window. Defaults to window titlr
    :type title:     str
    :param location: The location on the screen to place the window
    :type location:  (int, int) | (None, None)
    """

    element._popup_menu_location = location
    top_menu = tk.Menu(window.TKroot, tearoff=True, tearoffcommand=element._tearoff_menu_callback)
    if window.right_click_menu_background_color not in (COLOR_SYSTEM_DEFAULT, None):
        top_menu.config(bg=window.right_click_menu_background_color)
    if window.right_click_menu_text_color not in (COLOR_SYSTEM_DEFAULT, None):
        top_menu.config(fg=window.right_click_menu_text_color)
    if window.right_click_menu_disabled_text_color not in (COLOR_SYSTEM_DEFAULT, None):
        top_menu.config(disabledforeground=window.right_click_menu_disabled_text_color)
    if window.right_click_menu_font is not None:
        top_menu.config(font=window.right_click_menu_font)
    if window.right_click_menu_selected_colors[0] != COLOR_SYSTEM_DEFAULT:
        top_menu.config(activeforeground=window.right_click_menu_selected_colors[0])
    if window.right_click_menu_selected_colors[1] != COLOR_SYSTEM_DEFAULT:
        top_menu.config(activebackground=window.right_click_menu_selected_colors[1])
    top_menu.config(title=window.Title if title is None else title)
    AddMenuItem(top_menu, menu_def[1], element, right_click_menu=True)
    # element.Widget.bind('<Button-3>', element._RightClickMenuCallback)
    top_menu.invoke(0)


def popup_error_with_traceback(title, *messages, emoji=None):
    """
    Show an error message and as many additoinal lines of messages as you want.
    Will show the same error window as PySimpleGUI uses internally.  Has a button to
    take the user to the line of code you called this popup from.
    If you include the Exception information in your messages, then it will be parsed and additional information
    will be in the window about such as the specific line the error itself occurred on.

    :param title:     The title that will be shown in the popup's titlebar and in the first line of the window
    :type title:      str
    :param *messages: A variable number of lines of messages you wish to show your user
    :type *messages:  Any
    :param emoji:     An optional BASE64 Encoded image to shows in the error window
    :type emoji:      bytes
    """

    # For now, call the function that PySimpleGUI uses internally
    _error_popup_with_traceback(str(title), *messages, emoji=emoji)


def _error_popup_with_traceback(title, *args, emoji=None):
    if SUPPRESS_ERROR_POPUPS:
        return
    trace_details = traceback.format_stack()
    error_message = ''
    file_info_pysimplegui = None
    for line in reversed(trace_details):
        if __file__ not in line:
            file_info_pysimplegui = line.split(",")[0]
            error_message = line
            break
    if file_info_pysimplegui is None:
        _error_popup_with_code(title, None, None, 'Did not find your traceback info', *args, emoji=emoji)
        return

    error_parts = None
    if error_message != '':
        error_parts = error_message.split(', ')
        if len(error_parts) < 4:
            error_message = error_parts[0] + '\n' + error_parts[1] + '\n' + ''.join(error_parts[2:])
    if error_parts is None:
        print('*** Error popup attempted but unable to parse error details ***')
        print(trace_details)
        return
    filename = error_parts[0][error_parts[0].index('File ') + 5:]
    line_num = error_parts[1][error_parts[1].index('line ') + 5:]
    _error_popup_with_code(title, filename, line_num, error_message, *args, emoji=emoji)


def _error_popup_with_code(title, filename, line_num, *args, emoji=None):
    """
    Makes the error popup window

    :param title:     The title that will be shown in the popup's titlebar and in the first line of the window
    :type title:      str
    :param filename:  The filename to show.. may not be the filename that actually encountered the exception!
    :type filename:   str
    :param line_num:  Line number within file with the error
    :type line_num:   int | str
    :param args:      A variable number of lines of messages
    :type args:       *Any
    :param emoji:     An optional BASE64 Encoded image to shows in the error window
    :type emoji:      bytes
    """
    editor_filename = execute_get_editor()
    emoji_data = emoji if emoji is not None else _random_error_emoji()
    layout = [[Text('ERROR'), Text(title)],
              [Image(data=emoji_data)]]
    lines = []
    for msg in args:
        if isinstance(msg, Exception):
            lines += [[f'Additional Exception info pased in by PySimpleGUI or user: Error type is: {type(msg).__name__}']]
            lines += [[f'In file {__file__} Line number {msg.__traceback__.tb_lineno}']]
            lines += [[f'{msg}']]
        else:
            lines += [str(msg).split('\n')]
    max_line_len = 0
    for line in lines:
        max_line_len = max(max_line_len, max([len(s) for s in line]))

    layout += [[Text(''.join(line), size=(min(max_line_len, 90), None))] for line in lines]
    layout += [[Button('Close'), Button('Take me to error', disabled=True if not editor_filename else False), Button('Kill Application', button_color='white on red')]]
    if not editor_filename:
        layout += [[Text('Configure editor in the Global settings to enable "Take me to error" feature')]]
    window = Window(title, layout, keep_on_top=True)

    while True:
        event, values = window.read()
        if event in ('Close', WIN_CLOSED):
            break
        if event == 'Kill Application':
            window.close()
            popup_quick_message('KILLING APP!  BYE!', font='_ 18', keep_on_top=True, text_color='white', background_color='red', non_blocking=False)
            sys.exit()
        if event == 'Take me to error' and filename is not None and line_num is not None:
            execute_editor(filename, line_num)

    window.close()


#####################################################################
# Animated window while shell command is executed
#####################################################################

def _process_thread(*args):
    global __shell_process__

    # start running the command with arugments
    try:
        __shell_process__ = subprocess.run(args, shell=True, stdout=subprocess.PIPE)
    except Exception as e:
        print('Exception running process args = {}'.format(args))
        __shell_process__ = None


def shell_with_animation(command, args=None, image_source=DEFAULT_BASE64_LOADING_GIF, message=None, background_color=None, text_color=None, font=None,
                         no_titlebar=True, grab_anywhere=True, keep_on_top=True, location=(None, None), alpha_channel=None, time_between_frames=100,
                         transparent_color=None):
    """
    Execute a "shell command" (anything capable of being launched using subprocess.run) and
    while the command is running, show an animated popup so that the user knows that a long-running
    command is being executed.  Without this mechanism, the GUI appears locked up.

    :param command:             The command to run
    :type command:              (str)
    :param args:                List of arguments
    :type args:                 List[str]
    :param image_source:        Either a filename or a base64 string.
    :type image_source:         str | bytes
    :param message:             An optional message to be shown with the animation
    :type message:              (str)
    :param background_color:    color of background
    :type background_color:     (str)
    :param text_color:          color of the text
    :type text_color:           (str)
    :param font:                specifies the  font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike
    :type font:                 str | tuple
    :param no_titlebar:         If True then the titlebar and window frame will not be shown
    :type no_titlebar:          (bool)
    :param grab_anywhere:       If True then you can move the window just clicking anywhere on window, hold and drag
    :type grab_anywhere:        (bool)
    :param keep_on_top:         If True then Window will remain on top of all other windows currently shownn
    :type keep_on_top:          (bool)
    :param location:            (x,y) location on the screen to place the top left corner of your window. Default is to center on screen
    :type location:             (int, int)
    :param alpha_channel:       Window transparency 0 = invisible 1 = completely visible. Values between are see through
    :type alpha_channel:        (float)
    :param time_between_frames: Amount of time in milliseconds between each frame
    :type time_between_frames:  (int)
    :param transparent_color:   This color will be completely see-through in your window. Can even click through
    :type transparent_color:    (str)
    :return:                    The resulting string output from stdout
    :rtype:                     (str)
    """

    global __shell_process__

    real_args = [command]
    if args is not None:
        for arg in args:
            real_args.append(arg)
        # real_args.append(args)
    thread = threading.Thread(target=_process_thread, args=real_args, daemon=True)
    thread.start()

    # Poll to see if the thread is still running.  If so, then continue showing the animation
    while True:
        popup_animated(image_source=image_source, message=message, time_between_frames=time_between_frames, transparent_color=transparent_color,
                       text_color=text_color, background_color=background_color, font=font, no_titlebar=no_titlebar, grab_anywhere=grab_anywhere,
                       keep_on_top=keep_on_top, location=location, alpha_channel=alpha_channel)
        thread.join(timeout=time_between_frames / 1000)
        if not thread.is_alive():
            break
    popup_animated(None)  # stop running the animation

    output = __shell_process__.__str__().replace('\\r\\n', '\n')  # fix up the output string
    output = output[output.index("stdout=b'") + 9:-2]
    return output


#######################################################################
#  8888888888
#  888
#  888
#  8888888    888d888 888d888 .d88b.  888d888
#  888        888P"   888P"  d88""88b 888P"
#  888        888     888    888  888 888
#  888        888     888    Y88..88P 888
#  8888888888 888     888     "Y88P"  888
#
#
#
#  888b     d888
#  8888b   d8888
#  88888b.d88888
#  888Y88888P888  .d88b.  .d8888b  .d8888b   8888b.   .d88b.   .d88b.
#  888 Y888P 888 d8P  Y8b 88K      88K          "88b d88P"88b d8P  Y8b
#  888  Y8P  888 88888888 "Y8888b. "Y8888b. .d888888 888  888 88888888
#  888   "   888 Y8b.          X88      X88 888  888 Y88b 888 Y8b.
#  888       888  "Y8888   88888P'  88888P' "Y888888  "Y88888  "Y8888
#                                                         888
#                                                    Y8b d88P
#                                                     "Y88P"
# Code to make messages to help user find errors in their code
#######################################################################

def _create_error_message():
    """
    Creates an error message containing the filename and line number of the users
    code that made the call into PySimpleGUI
    :return: Error string to display with file, line number, and line of code
    :rtype:  str
    """

    called_func = inspect.stack()[1].function
    trace_details = traceback.format_stack()
    error_message = ''
    file_info_pysimplegui = trace_details[-1].split(",")[0]
    for line in reversed(trace_details):
        if line.split(",")[0] != file_info_pysimplegui:
            error_message = line
            break
    if error_message != '':
        error_parts = error_message.split(', ')
        if len(error_parts) < 4:
            error_message = error_parts[0] + '\n' + error_parts[1] + '\n' + ''.join(error_parts[2:])
    return 'The PySimpleGUI internal reporting function is ' + called_func + '\n' + \
           'The error originated from:\n' + error_message


#   .d8888b.           888    888    d8b
#  d88P  Y88b          888    888    Y8P
#  Y88b.               888    888
#   "Y888b.    .d88b.  888888 888888 888 88888b.   .d88b.  .d8888b
#      "Y88b. d8P  Y8b 888    888    888 888 "88b d88P"88b 88K
#        "888 88888888 888    888    888 888  888 888  888 "Y8888b.
#  Y88b  d88P Y8b.     Y88b.  Y88b.  888 888  888 Y88b 888      X88
#   "Y8888P"   "Y8888   "Y888  "Y888 888 888  888  "Y88888  88888P'
#                                                      888
#                                                 Y8b d88P
#                                                  "Y88P"

# Interface to saving / loading user program settings in json format
# This is a new set of APIs supplied by PySimpleGUI that enables users to easily set/save/load individual
# settings.  They are automatically saved to a JSON file. If no file/path is specified then a filename is
# created from the source file filename.

class UserSettings:
    # A reserved settings object for use by the setting functions. It's a way for users
    # to access the user settings without diarectly using the UserSettings class
    _default_for_function_interface = None  # type: UserSettings

    def __init__(self, filename=None, path=None, silent_on_error=False, autosave=True, use_config_file=None, convert_bools_and_none=True):
        """
        User Settings

        :param filename:               The name of the file to use. Can be a full path and filename or just filename
        :type filename:                (str or None)
        :param path:                   The folder that the settings file will be stored in. Do not include the filename.
        :type path:                    (str or None)
        :param silent_on_error:        If True errors will not be reported
        :type silent_on_error:         (bool)
        :param autosave:               If True the settings file is saved after every update
        :type autosave:                (bool)
        :param use_config_file:        If True then the file format will be a config.ini rather than json
        :type use_config_file:         (bool)
        :param convert_bools_and_none: If True then "True", "False", "None" will be converted to the Python values True, False, None when using INI files. Default is TRUE
        :type convert_bools_and_none:  (bool)
        """

        self.path = path
        self.filename = filename
        self.full_filename = None
        self.dict = {}
        self.default_value = None
        self.silent_on_error = silent_on_error
        self.autosave = autosave
        if filename is not None and filename.endswith('.ini') and use_config_file is None:
            warnings.warn('[UserSettings] You have specified a filename with .ini extension but did not set use_config_file. Setting use_config_file for you.', UserWarning)
            use_config_file = True
        self.use_config_file = use_config_file
        # self.retain_config_comments = retain_config_comments
        self.convert_bools = convert_bools_and_none
        if use_config_file:
            self.config = configparser.ConfigParser()
            self.config.optionxform = str
            # self.config_dict = {}
            self.section_class_dict = {}  # type: dict[_SectionDict]
        if filename is not None or path is not None:
            self.load(filename=filename, path=path)

    ########################################################################################################
    ## FIRST is the _SectionDict helper class
    ## It is typically not directly accessed, although it is possible to call delete_section, get, set
    ########################################################################################################

    class _SectionDict:
        item_count = 0

        def __init__(self, section_name, section_dict, config, user_settings_parent):  # (str, Dict, configparser.ConfigParser)
            """
            The Section Dictionary.  It holds the values for a section.

            :param section_name:                Name of the section
            :type section_name:                 str
            :param section_dict:                Dictionary of values for the section
            :type section_dict:                 dict
            :param config:                      The configparser object
            :type config:                       configparser.ConfigParser
            :param user_settings_parent:        The parent UserSettings object that hdas this section
            :type user_settings_parent:         UserSettings
            """
            self.section_name = section_name
            self.section_dict = section_dict  # type: Dict
            self.new_section = False
            self.config = config  # type: configparser.ConfigParser
            self.user_settings_parent = user_settings_parent  # type: UserSettings
            UserSettings._SectionDict.item_count += 1

            if self.user_settings_parent.convert_bools:
                for key, value in self.section_dict.items():
                    if value == 'True':
                        value = True
                        self.section_dict[key] = value
                    elif value == 'False':
                        value = False
                        self.section_dict[key] = value
                    elif value == 'None':
                        value = None
                        self.section_dict[key] = value
            # print(f'++++++ making a new SectionDict with name = {section_name}')

        def __repr__(self):
            """
            Converts the settings dictionary into a string for easy display

            :return: the dictionary as a string
            :rtype:  (str)
            """
            return_string = '{}:\n'.format(self.section_name)
            for entry in self.section_dict.keys():
                return_string += '          {} : {}\n'.format(entry, self.section_dict[entry])

            return return_string

        def get(self, key, default=None):
            """
            Returns the value of a specified setting.  If the setting is not found in the settings dictionary, then
            the user specified default value will be returned.  It no default is specified and nothing is found, then
            the "default value" is returned.  This default can be specified in this call, or previously defined
            by calling set_default. If nothing specified now or previously, then None is returned as default.

            :param key:     Key used to lookup the setting in the settings dictionary
            :type key:      (Any)
            :param default: Value to use should the key not be found in the dictionary
            :type default:  (Any)
            :return:        Value of specified settings
            :rtype:         (Any)
            """
            value = self.section_dict.get(key, default)
            if self.user_settings_parent.convert_bools:
                if value == 'True':
                    value = True
                elif value == 'False':
                    value = False
            return value

        def set(self, key, value):
            value = str(value)  # all values must be strings
            if self.new_section:
                self.config.add_section(self.section_name)
                self.new_section = False
            self.config.set(section=self.section_name, option=key, value=value)
            self.section_dict[key] = value
            if self.user_settings_parent.autosave:
                self.user_settings_parent.save()

        def delete_section(self):
            # print(f'** Section Dict deleting section = {self.section_name}')
            self.config.remove_section(section=self.section_name)
            del self.user_settings_parent.section_class_dict[self.section_name]
            if self.user_settings_parent.autosave:
                self.user_settings_parent.save()

        def __getitem__(self, item):
            # print('*** In SectionDict Get ***')
            return self.get(item)

        def __setitem__(self, item, value):
            """
            Enables setting a setting by using [ ] notation like a dictionary.
            Your code will have this kind of design pattern:
            settings = sg.UserSettings()
            settings[item] = value

            :param item:  The key for the setting to change. Needs to be a hashable type. Basically anything but a list
            :type item:   Any
            :param value: The value to set the setting to
            :type value:  Any
            """
            # print(f'*** In SectionDict SET *** item = {item} value = {value}')
            self.set(item, value)
            self.section_dict[item] = value

        def __delitem__(self, item):
            """
            Delete an individual user setting.  This is the same as calling delete_entry.  The syntax
            for deleting the item using this manner is:
                del settings['entry']
            :param item: The key for the setting to delete
            :type item:  Any
            """
            # print(f'** In SectionDict delete! section name = {self.section_name} item = {item} ')
            self.config.remove_option(section=self.section_name, option=item)
            try:
                del self.section_dict[item]
            except Exception as e:
                pass
                # print(e)
            if self.user_settings_parent.autosave:
                self.user_settings_parent.save()

    ########################################################################################################

    def __repr__(self):
        """
        Converts the settings dictionary into a string for easy display

        :return: the dictionary as a string
        :rtype:  (str)
        """
        if not self.use_config_file:
            return pprint.pformat(self.dict)
        else:
            # rvalue = '-------------------- Settings ----------------------\n'
            rvalue = ''
            for name, section in self.section_class_dict.items():
                rvalue += str(section)

            # rvalue += '\n-------------------- Settings End----------------------\n'
            rvalue += '\n'
            return rvalue

    def set_default_value(self, default):
        """
        Set the value that will be returned if a requested setting is not found

        :param default: value to be returned if a setting is not found in the settings dictionary
        :type default:  Any
        """
        self.default_value = default

    def _compute_filename(self, filename=None, path=None):
        """
        Creates the full filename given the path or the filename or both.

        :param filename: The name of the file to use. Can be a full path and filename or just filename
        :type filename:  (str or None)
        :param path:     The folder that the settings file will be stored in. Do not include the filename.
        :type path:      (str or None)
        :return:         Tuple with (full filename, path, filename)
        :rtype:          Tuple[str, str, str]
        """
        if filename is not None:
            dirname_from_filename = os.path.dirname(filename)  # see if a path was provided as part of filename
            if dirname_from_filename:
                path = dirname_from_filename
                filename = os.path.basename(filename)
        elif self.filename is not None:
            filename = self.filename
        else:
            filename = os.path.splitext(os.path.basename(sys.argv[0]))[0]
            if filename == '__main__':      # if got __main__ then try an alternative approach
                filename = os.path.splitext(os.path.basename(sys.modules["__main__"].__file__))[0]
                if filename == '__main__':
                    # filename = os.path.splitext(os.path.basename(__file__))[0]      # likely to be PySimpleGUI.py which may be a problem...
                    filename = os.path.splitext(os.path.basename(inspect.getsourcefile(lambda: 0)))[0]
                    if filename == '__main__':
                        print(f'Error setting the default settings filename.   Please report this error.  filename = {filename}')
            if not self.use_config_file:            # add the extension to the filename
                filename += '.json'
            else:
                filename += '.ini'

        if path is None:
            if self.path is not None:
                # path = self.path
                path = os.path.expanduser(self.path)  # expand user provided path in case it has user ~ in it. Don't think it'll hurt
            elif DEFAULT_USER_SETTINGS_PATH is not None:  # if user set the path manually system-wide using set options
                path = os.path.expanduser(DEFAULT_USER_SETTINGS_PATH)
            elif running_trinket():
                path = os.path.expanduser(DEFAULT_USER_SETTINGS_TRINKET_PATH)
            elif running_replit():
                path = os.path.expanduser(DEFAULT_USER_SETTINGS_REPLIT_PATH)
            elif running_windows():
                path = os.path.expanduser(DEFAULT_USER_SETTINGS_WIN_PATH)
            elif running_linux():
                path = os.path.expanduser(DEFAULT_USER_SETTINGS_LINUX_PATH)
            elif running_mac():
                path = os.path.expanduser(DEFAULT_USER_SETTINGS_MAC_PATH)
            else:
                path = '.'

        full_filename = os.path.join(path, filename)
        return (full_filename, path, filename)

    def set_location(self, filename=None, path=None):
        """
        Sets the location of the settings file

        :param filename: The name of the file to use. Can be a full path and filename or just filename
        :type filename:  (str or None)
        :param path:     The folder that the settings file will be stored in. Do not include the filename.
        :type path:      (str or None)
        """
        cfull_filename, cpath, cfilename = self._compute_filename(filename=filename, path=path)

        self.filename = cfilename
        self.path = cpath
        self.full_filename = cfull_filename

    def get_filename(self, filename=None, path=None):
        """
        Sets the filename and path for your settings file.  Either paramter can be optional.

        If you don't choose a path, one is provided for you that is OS specific
        Windows path default = users/name/AppData/Local/PySimpleGUI/settings.

        If you don't choose a filename, your application's filename + '.json' will be used.

        Normally the filename and path are split in the user_settings calls. However for this call they
        can be combined so that the filename contains both the path and filename.

        :param filename: The name of the file to use. Can be a full path and filename or just filename
        :type filename:  (str or None)
        :param path:     The folder that the settings file will be stored in. Do not include the filename.
        :type path:      (str or None)
        :return:         The full pathname of the settings file that has both the path and filename combined.
        :rtype:          (str)
        """
        if filename is not None or path is not None or (filename is None and path is None and self.full_filename is None):
            self.set_location(filename=filename, path=path)
            self.read()
        return self.full_filename

    def save(self, filename=None, path=None):
        """
        Saves the current settings dictionary.  If a filename or path is specified in the call, then it will override any
        previously specitfied filename to create a new settings file.  The settings dictionary is then saved to the newly defined file.

        :param filename: The fFilename to save to. Can specify a path or just the filename. If no filename specified, then the caller's filename will be used.
        :type filename:  (str or None)
        :param path:     The (optional) path to use to save the file.
        :type path:      (str or None)
        :return:         The full path and filename used to save the settings
        :rtype:          (str)
        """
        if filename is not None or path is not None:
            self.set_location(filename=filename, path=path)
        try:
            if not os.path.exists(self.path):
                os.makedirs(self.path)
            with open(self.full_filename, 'w') as f:
                if not self.use_config_file:
                    json.dump(self.dict, f)
                else:
                    self.config.write(f)
        except Exception as e:
            if not self.silent_on_error:
                _error_popup_with_traceback('UserSettings.save error', '*** UserSettings.save()  Error saving settings to file:***\n', self.full_filename, e)

        return self.full_filename

    def load(self, filename=None, path=None):
        """
        Specifies the path and filename to use for the settings and reads the contents of the file.
        The filename can be a full filename including a path, or the path can be specified separately.
        If  no filename is specified, then the caller's filename will be used with the extension ".json"

        :param filename: Filename to load settings from (and save to in the future)
        :type filename:  (str or None)
        :param path:     Path to the file. Defaults to a specific folder depending on the operating system
        :type path:      (str or None)
        :return:         The settings dictionary (i.e. all settings)
        :rtype:          (dict)
        """
        if filename is not None or path is not None or self.full_filename is None:
            self.set_location(filename, path)
        self.read()
        return self.dict

    def delete_file(self, filename=None, path=None, report_error=False):
        """
        Deltes the filename and path for your settings file.  Either paramter can be optional.
        If you don't choose a path, one is provided for you that is OS specific
        Windows path default = users/name/AppData/Local/PySimpleGUI/settings.
        If you don't choose a filename, your application's filename + '.json' will be used
        Also sets your current dictionary to a blank one.

        :param filename:     The name of the file to use. Can be a full path and filename or just filename
        :type filename:      (str or None)
        :param path:         The folder that the settings file will be stored in. Do not include the filename.
        :type path:          (str or None)
        :param report_error: Determines if an error should be shown if a delete error happen (i.e. file isn't present)
        :type report_error:  (bool)
        """

        if filename is not None or path is not None or (filename is None and path is None):
            self.set_location(filename=filename, path=path)
        try:
            os.remove(self.full_filename)
        except Exception as e:
            if report_error:
                _error_popup_with_traceback('UserSettings delete_file warning ***', 'Exception trying to perform os.remove', e)
        self.dict = {}

    def write_new_dictionary(self, settings_dict):
        """
        Writes a specified dictionary to the currently defined settings filename.

        :param settings_dict: The dictionary to be written to the currently defined settings file
        :type settings_dict:  (dict)
        """
        if self.full_filename is None:
            self.set_location()
        self.dict = settings_dict
        self.save()

    def read(self):
        """
        Reads settings file and returns the dictionary.
        If you have anything changed in an existing settings dictionary, you will lose your changes.
        :return: settings dictionary
        :rtype:  (dict)
        """
        if self.full_filename is None:
            return {}
        try:
            if os.path.exists(self.full_filename):
                with open(self.full_filename, 'r') as f:
                    if not self.use_config_file:  # if using json
                        self.dict = json.load(f)
                    else:  # if using a config file
                        self.config.read_file(f)
                        # Make a dictionary of SectionDict classses. Keys are the config.sections().
                        self.section_class_dict = {}
                        for section in self.config.sections():
                            section_dict = dict(self.config[section])
                            self.section_class_dict[section] = self._SectionDict(section, section_dict, self.config, self)

                        self.dict = self.section_class_dict
                        self.config_sections = self.config.sections()
                        # self.config_dict = {section_name : dict(self.config[section_name]) for section_name in self.config.sections()}
                    # if self.retain_config_comments:
                    #     self.config_file_contents = f.readlines()
        except Exception as e:
            if not self.silent_on_error:
                _error_popup_with_traceback('User Settings read warning', 'Error reading settings from file', self.full_filename, e)
                # print('*** UserSettings.read - Error reading settings from file: ***\n', self.full_filename, e)
                # print(_create_error_message())

        return self.dict

    def exists(self, filename=None, path=None):
        """
        Check if a particular settings file exists.  Returns True if file exists

        :param filename: The name of the file to use. Can be a full path and filename or just filename
        :type filename:  (str or None)
        :param path:     The folder that the settings file will be stored in. Do not include the filename.
        :type path:      (str or None)
        """
        cfull_filename, cpath, cfilename = self._compute_filename(filename=filename, path=path)
        if os.path.exists(cfull_filename):
            return True
        return False

    def delete_entry(self, key, section=None, silent_on_error=None):
        """
        Deletes an individual entry.  If no filename has been specified up to this point,
        then a default filename will be used.
        After value has been deleted, the settings file is written to disk.

        :param key: Setting to be deleted. Can be any valid dictionary key type (i.e. must be hashable)
        :type key:  (Any)
        :param silent_on_error: Determines if error should be shown. This parameter overrides the silent on error setting for the object.
        :type silent_on_error:  (bool)
        """
        if self.full_filename is None:
            self.set_location()
            self.read()
        if not self.use_config_file:  # Is using JSON file
            if key in self.dict:
                del self.dict[key]
                if self.autosave:
                    self.save()
            else:
                if silent_on_error is False or (silent_on_error is not True and not self.silent_on_error):
                    _error_popup_with_traceback('User Settings delete_entry Warning - key', key, ' not found in settings')

        else:
            if section is not None:
                section_dict = self.get(section)
                # print(f'** Trying to delete an entry with a config file in use ** id of section_dict = {id(section_dict)}')
                # section_dict = self.section_class_dict[section]
                del self.get(section)[key]
                # del section_dict[key]
                # del section_dict[key]

    def delete_section(self, section):
        """
        Deletes a section with the name provided in the section parameter.  Your INI file will be saved afterwards if auto-save enabled (default is ON)
        :param section:     Name of the section to delete
        :type section:      str
        """
        if not self.use_config_file:
            return

        section_dict = self.section_class_dict.get(section, None)
        section_dict.delete_section()
        del self.section_class_dict[section]
        if self.autosave:
            self.save()

    def set(self, key, value):
        """
        Sets an individual setting to the specified value.  If no filename has been specified up to this point,
        then a default filename will be used.
        After value has been modified, the settings file is written to disk.
        Note that this call is not value for a config file normally. If it is, then the key is assumed to be the
            Section key and the value written will be the default value.
        :param key:      Setting to be saved. Can be any valid dictionary key type
        :type key:       (Any)
        :param value:    Value to save as the setting's value. Can be anything
        :type value:     (Any)
        :return:         value that key was set to
        :rtype:          (Any)
        """

        if self.full_filename is None:
            self.set_location()
        # if not autosaving, then don't read the file or else will lose changes
        if not self.use_config_file:
            if self.autosave or self.dict == {}:
                self.read()
            self.dict[key] = value
        else:
            self.section_class_dict[key].set(value, self.default_value)

        if self.autosave:
            self.save()
        return value

    def get(self, key, default=None):
        """
        Returns the value of a specified setting.  If the setting is not found in the settings dictionary, then
        the user specified default value will be returned.  It no default is specified and nothing is found, then
        the "default value" is returned.  This default can be specified in this call, or previously defined
        by calling set_default. If nothing specified now or previously, then None is returned as default.

        :param key:     Key used to lookup the setting in the settings dictionary
        :type key:      (Any)
        :param default: Value to use should the key not be found in the dictionary
        :type default:  (Any)
        :return:        Value of specified settings
        :rtype:         (Any)
        """
        if self.default_value is not None:
            default = self.default_value

        if self.full_filename is None:
            self.set_location()
            if self.autosave or self.dict == {}:
                self.read()
        if not self.use_config_file:
            value = self.dict.get(key, default)
        else:
            value = self.section_class_dict.get(key, None)
            if key not in list(self.section_class_dict.keys()):
                self.section_class_dict[key] = self._SectionDict(key, {}, self.config, self)
                value = self.section_class_dict[key]
                value.new_section = True
        return value

    def get_dict(self):
        """
        Returns the current settings dictionary.  If you've not setup the filename for the
        settings, a default one will be used and then read.

        Note that you can display the dictionary in text format by printing the object itself.

        :return: The current settings dictionary
        :rtype:  Dict
        """
        if self.full_filename is None:
            self.set_location()
            if self.autosave or self.dict == {}:
                self.read()
                self.save()
        return self.dict

    def __setitem__(self, item, value):
        """
        Enables setting a setting by using [ ] notation like a dictionary.
        Your code will have this kind of design pattern:
        settings = sg.UserSettings()
        settings[item] = value

        :param item:  The key for the setting to change. Needs to be a hashable type. Basically anything but a list
        :type item:   Any
        :param value: The value to set the setting to
        :type value:  Any
        """
        return self.set(item, value)

    def __getitem__(self, item):
        """
        Enables accessing a setting using [ ] notation like a dictionary.
        If the entry does not exist, then the default value will be returned.  This default
        value is None unless user sets by calling UserSettings.set_default_value(default_value)

        :param item: The key for the setting to change. Needs to be a hashable type. Basically anything but a list
        :type item:  Any
        :return:     The setting value
        :rtype:      Any
        """
        return self.get(item, self.default_value)

    def __delitem__(self, item):
        """
        Delete an individual user setting.  This is the same as calling delete_entry.  The syntax
        for deleting the item using this manner is:
            del settings['entry']
        :param item: The key for the setting to delete
        :type item:  Any
        """
        if self.use_config_file:
            return self.get(item)
        else:
            self.delete_entry(key=item)


# Create a singleton for the settings information so that the settings functions can be used
if UserSettings._default_for_function_interface is None:
    UserSettings._default_for_function_interface = UserSettings()


def user_settings_filename(filename=None, path=None):
    """
    Sets the filename and path for your settings file.  Either paramter can be optional.

    If you don't choose a path, one is provided for you that is OS specific
    Windows path default = users/name/AppData/Local/PySimpleGUI/settings.

    If you don't choose a filename, your application's filename + '.json' will be used.

    Normally the filename and path are split in the user_settings calls. However for this call they
    can be combined so that the filename contains both the path and filename.

    :param filename: The name of the file to use. Can be a full path and filename or just filename
    :type filename:  (str)
    :param path:     The folder that the settings file will be stored in. Do not include the filename.
    :type path:      (str)
    :return:         The full pathname of the settings file that has both the path and filename combined.
    :rtype:          (str)
    """
    settings = UserSettings._default_for_function_interface
    if filename is not None or path is not None:       # Any parameter set means we're changing the location
        settings.set_location(filename, path)
    return settings.get_filename(filename, path)       # Return the full filename regardless of it being modified


def user_settings_delete_filename(filename=None, path=None, report_error=False):
    """
    Deltes the filename and path for your settings file.  Either paramter can be optional.
    If you don't choose a path, one is provided for you that is OS specific
    Windows path default = users/name/AppData/Local/PySimpleGUI/settings.
    If you don't choose a filename, your application's filename + '.json' will be used
    Also sets your current dictionary to a blank one.

    :param filename: The name of the file to use. Can be a full path and filename or just filename
    :type filename:  (str)
    :param path:     The folder that the settings file will be stored in. Do not include the filename.
    :type path:      (str)
    """
    settings = UserSettings._default_for_function_interface
    settings.delete_file(filename, path, report_error=report_error)


def user_settings_set_entry(key, value):
    """
    Sets an individual setting to the specified value.  If no filename has been specified up to this point,
    then a default filename will be used.
    After value has been modified, the settings file is written to disk.

    :param key:   Setting to be saved. Can be any valid dictionary key type
    :type key:    (Any)
    :param value: Value to save as the setting's value. Can be anything
    :type value:  (Any)
    """
    settings = UserSettings._default_for_function_interface
    settings.set(key, value)


def user_settings_delete_entry(key, silent_on_error=None):
    """
    Deletes an individual entry.  If no filename has been specified up to this point,
    then a default filename will be used.
    After value has been deleted, the settings file is written to disk.

    :param key: Setting to be saved. Can be any valid dictionary key type (hashable)
    :type key:  (Any)
    :param silent_on_error: Determines if an error popup should be shown if an error occurs. Overrides the silent onf effort setting from initialization
    :type silent_on_error:  (bool)
    """
    settings = UserSettings._default_for_function_interface
    settings.delete_entry(key, silent_on_error=silent_on_error)


def user_settings_get_entry(key, default=None):
    """
    Returns the value of a specified setting.  If the setting is not found in the settings dictionary, then
    the user specified default value will be returned.  It no default is specified and nothing is found, then
    None is returned.  If the key isn't in the dictionary, then it will be added and the settings file saved.
    If no filename has been specified up to this point, then a default filename will be assigned and used.
    The settings are SAVED prior to returning.

    :param key:     Key used to lookup the setting in the settings dictionary
    :type key:      (Any)
    :param default: Value to use should the key not be found in the dictionary
    :type default:  (Any)
    :return:        Value of specified settings
    :rtype:         (Any)
    """
    settings = UserSettings._default_for_function_interface
    return settings.get(key, default)


def user_settings_save(filename=None, path=None):
    """
    Saves the current settings dictionary.  If a filename or path is specified in the call, then it will override any
    previously specitfied filename to create a new settings file.  The settings dictionary is then saved to the newly defined file.

    :param filename: The fFilename to save to. Can specify a path or just the filename. If no filename specified, then the caller's filename will be used.
    :type filename:  (str)
    :param path:     The (optional) path to use to save the file.
    :type path:      (str)
    :return:         The full path and filename used to save the settings
    :rtype:          (str)
    """
    settings = UserSettings._default_for_function_interface
    return settings.save(filename, path)


def user_settings_load(filename=None, path=None):
    """
    Specifies the path and filename to use for the settings and reads the contents of the file.
    The filename can be a full filename including a path, or the path can be specified separately.
    If  no filename is specified, then the caller's filename will be used with the extension ".json"

    :param filename: Filename to load settings from (and save to in the future)
    :type filename:  (str)
    :param path:     Path to the file. Defaults to a specific folder depending on the operating system
    :type path:      (str)
    :return:         The settings dictionary (i.e. all settings)
    :rtype:          (dict)
    """
    settings = UserSettings._default_for_function_interface
    return settings.load(filename, path)


def user_settings_file_exists(filename=None, path=None):
    """
    Determines if a settings file exists.  If so a boolean True is returned.
    If either a filename or a path is not included, then the appropriate default
    will be used.

    :param filename: Filename to check
    :type filename:  (str)
    :param path:     Path to the file. Defaults to a specific folder depending on the operating system
    :type path:      (str)
    :return:         True if the file exists
    :rtype:          (bool)
    """
    settings = UserSettings._default_for_function_interface
    return settings.exists(filename=filename, path=path)


def user_settings_write_new_dictionary(settings_dict):
    """
    Writes a specified dictionary to the currently defined settings filename.

    :param settings_dict: The dictionary to be written to the currently defined settings file
    :type settings_dict:  (dict)
    """
    settings = UserSettings._default_for_function_interface
    settings.write_new_dictionary(settings_dict)


def user_settings_silent_on_error(silent_on_error=False):
    """
    Used to control the display of error messages.  By default, error messages are displayed to stdout.

    :param silent_on_error: If True then all error messages are silenced (not displayed on the console)
    :type silent_on_error:  (bool)
    """
    settings = UserSettings._default_for_function_interface
    settings.silent_on_error = silent_on_error


def user_settings():
    """
    Returns the current settings dictionary.  If you've not setup the filename for the
    settings, a default one will be used and then read.
    :return:            The current settings dictionary as a dictionary or a nicely formatted string representing it
    :rtype:             (dict or str)
    """
    settings = UserSettings._default_for_function_interface
    return settings.get_dict()


def user_settings_object():
    """
    Returns the object that is used for the function version of this API.
    With this object you can use the object interface, print it out in a nice format, etc.

    :return:    The UserSettings obect used for the function level interface
    :rtype:     (UserSettings)
    """
    return UserSettings._default_for_function_interface


'''
'########:'##::::'##:'########::'######::::::::'###::::'########::'####:
 ##.....::. ##::'##:: ##.....::'##... ##::::::'## ##::: ##.... ##:. ##::
 ##::::::::. ##'##::: ##::::::: ##:::..::::::'##:. ##:: ##:::: ##:: ##::
 ######:::::. ###:::: ######::: ##::::::::::'##:::. ##: ########::: ##::
 ##...:::::: ## ##::: ##...:::: ##:::::::::: #########: ##.....:::: ##::
 ##:::::::: ##:. ##:: ##::::::: ##::: ##:::: ##.... ##: ##::::::::: ##::
 ########: ##:::. ##: ########:. ######::::: ##:::: ##: ##::::::::'####:
........::..:::::..::........:::......::::::..:::::..::..:::::::::....::
'''


def execute_command_subprocess(command, *args, wait=False, cwd=None, pipe_output=False, merge_stderr_with_stdout=True, stdin=None):
    """
    Runs the specified command as a subprocess.
    By default the call is non-blocking.
    The function will immediately return without waiting for the process to complete running. You can use the returned Popen object to communicate with the subprocess and get the results.
    Returns a subprocess Popen object.

    :param command:                  The command/file to execute. What you would type at a console to run a program or shell command.
    :type command:                   (str)
    :param *args:                    Variable number of arguments that are passed to the program being started as command line parms
    :type *args:                     (Any)
    :param wait:                     If True then wait for the subprocess to finish
    :type wait:                      (bool)
    :param cwd:                      Working directory to use when executing the subprocess
    :type cwd:                       (str))
    :param pipe_output:              If True then output from the subprocess will be piped. You MUST empty the pipe by calling execute_get_results or your subprocess will block until no longer full
    :type pipe_output:               (bool)
    :param merge_stderr_with_stdout: If True then output from the subprocess stderr will be merged with stdout. The result is ALL output will be on stdout.
    :type merge_stderr_with_stdout:  (bool)
    :param stdin:                    Value passed to the Popen call. Defaults to subprocess.DEVNULL so that the pyinstaller created executable work correctly
    :type stdin:                     (bool)
    :return:                         Popen object
    :rtype:                          (subprocess.Popen)
    """
    if stdin is None:
        stdin = subprocess.DEVNULL
    if command == '' or command is None:
        return None
    try:
        if args is not None:
            expanded_args = ' '.join(args)
            # print('executing subprocess command:',command, 'args:',expanded_args)
            if command[0] != '"' and ' ' in command:
                command = '"' + command + '"'
            # print('calling popen with:', command +' '+ expanded_args)
            # sp = subprocess.Popen(command +' '+ expanded_args, shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, cwd=cwd)
            if pipe_output:
                if merge_stderr_with_stdout:
                    sp = subprocess.Popen(command + ' ' + expanded_args, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=cwd, stdin=stdin)
                else:
                    sp = subprocess.Popen(command + ' ' + expanded_args, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd, stdin=stdin)
            else:
                sp = subprocess.Popen(command + ' ' + expanded_args, shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, cwd=cwd, stdin=stdin)
        else:
            sp = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd, stdin=stdin)
        if wait:
            out, err = sp.communicate()
            if out:
                print(out.decode("utf-8"))
            if err:
                print(err.decode("utf-8"))
    except Exception as e:
        warnings.warn('Error in execute_command_subprocess {}'.format(e), UserWarning)
        _error_popup_with_traceback('Error in execute_command_subprocess', e, 'command={}'.format(command), 'args={}'.format(args), 'cwd={}'.format(cwd))
        sp = None
    return sp


def execute_py_file(pyfile, parms=None, cwd=None, interpreter_command=None, wait=False, pipe_output=False, merge_stderr_with_stdout=True):
    """
    Executes a Python file.
    The interpreter to use is chosen based on this priority order:
        1. interpreter_command paramter
        2. global setting "-python command-"
        3. the interpreter running running PySimpleGUI
    :param pyfile:                   the file to run
    :type pyfile:                    (str)
    :param parms:                    parameters to pass on the command line
    :type parms:                     (str)
    :param cwd:                      the working directory to use
    :type cwd:                       (str)
    :param interpreter_command:      the command used to invoke the Python interpreter
    :type interpreter_command:       (str)
    :param wait:                     the working directory to use
    :type wait:                      (bool)
    :param pipe_output:              If True then output from the subprocess will be piped. You MUST empty the pipe by calling execute_get_results or your subprocess will block until no longer full
    :type pipe_output:               (bool)
    :param merge_stderr_with_stdout: If True then output from the subprocess stderr will be merged with stdout. The result is ALL output will be on stdout.
    :type merge_stderr_with_stdout:  (bool)
    :return:                         Popen object
    :rtype:                          (subprocess.Popen) | None
    """

    if cwd is None:
        # if the specific file is not found (not an absolute path) then assume it's relative to '.'
        if not os.path.exists(pyfile):
            cwd = '.'

    if pyfile[0] != '"' and ' ' in pyfile:
        pyfile = '"' + pyfile + '"'
    if interpreter_command is not None:
        python_program = interpreter_command
    else:
        # use the version CURRENTLY RUNNING if nothing is specified. Previously used the one from the settings file
        # ^ hmmm... that's not the code is doing now... it's getting the one from the settings file first
        pysimplegui_user_settings.load()  # Refresh the settings just in case they've changed via another program
        python_program = pysimplegui_user_settings.get('-python command-', '')
        if python_program == '':  # if no interpreter set in the settings, then use the current one
            python_program = sys.executable
            # python_program = 'python' if running_windows() else 'python3'
    if parms is not None and python_program:
        sp = execute_command_subprocess(python_program, pyfile, parms, wait=wait, cwd=cwd, pipe_output=pipe_output, merge_stderr_with_stdout=merge_stderr_with_stdout)
    elif python_program:
        sp = execute_command_subprocess(python_program, pyfile, wait=wait, cwd=cwd, pipe_output=pipe_output, merge_stderr_with_stdout=merge_stderr_with_stdout)
    else:
        print('execute_py_file - No interpreter has been configured')
        sp = None
    return sp


def execute_py_get_interpreter():
    """
    Returns Python Interpreter from the system settings. If none found in the settings file
    then the currently running interpreter is returned.

    :return: Full path to python interpreter (uses settings file or sys.executable)
    :rtype:  (str)
    """
    pysimplegui_user_settings.load()  # Refresh the settings just in case they've changed via another program
    interpreter = pysimplegui_user_settings.get('-python command-', '')
    if interpreter == '':
        interpreter = sys.executable
    return interpreter


def execute_py_get_running_interpreter():
    """
    Returns the command that is currently running.

    :return: Full path to python interpreter (uses sys.executable)
    :rtype:  (str)
    """
    return sys.executable


def execute_editor(file_to_edit, line_number=None):
    """
    Runs the editor that was configured in the global settings and opens the file to a specific line number.
    Two global settings keys are used.
    '-editor program-' the command line used to startup your editor. It's set
        in the global settings window or by directly manipulating the PySimpleGUI settings object
    '-editor format string-' a string containing 3 "tokens" that describes the command that is executed
            <editor> <file> <line>
    :param file_to_edit: the full path to the file to edit
    :type file_to_edit:  (str)
    :param line_number:  optional line number to place the cursor
    :type line_number:   (int)
    :return:             Popen object
    :rtype:              (subprocess.Popen) | None
    """
    if file_to_edit is not None and len(file_to_edit) != 0 and file_to_edit[0] not in ('\"', "\'") and ' ' in file_to_edit:
        file_to_edit = '"' + file_to_edit + '"'
    pysimplegui_user_settings.load()  # Refresh the settings just in case they've changed via another program
    editor_program = pysimplegui_user_settings.get('-editor program-', None)
    if editor_program is not None:
        format_string = pysimplegui_user_settings.get('-editor format string-', None)
        # if no format string, then just launch the editor with the filename
        if not format_string or line_number is None:
            sp = execute_command_subprocess(editor_program, file_to_edit)
        else:
            command = _create_full_editor_command(file_to_edit, line_number, format_string)
            # print('final command line = ', command)
            sp = execute_command_subprocess(editor_program, command)
    else:
        print('No editor has been configured in the global settings')
        sp = None
    return sp


def execute_get_results(subprocess_id, timeout=None):
    """
    Get the text results of a previously executed execute call
    Returns a tuple of the strings (stdout, stderr)
    :param subprocess_id: a Popen subprocess ID returned from a previous execute call
    :type subprocess_id:  (subprocess.Popen)
    :param timeout:       Time in fractions of a second to wait. Returns '','' if timeout. Default of None means wait forever
    :type timeout:        (None | float)
    :returns:             Tuple with 2 strings (stdout, stderr)
    :rtype:               (str | None , str | None)
    """

    out_decoded = err_decoded = None
    if subprocess_id is not None:
        try:
            out, err = subprocess_id.communicate(timeout=timeout)
            if out:
                out_decoded = out.decode("utf-8")
            if err:
                err_decoded = err.decode("utf-8")
        except ValueError:
            # will get an error if stdout and stderr are combined and attempt to read stderr
            # so ignore the error that would be generated
            pass
        except subprocess.TimeoutExpired:
            # a Timeout error is not actually an error that needs to be reported
            pass
        except Exception as e:
            popup_error('Error in execute_get_results', e)
    return out_decoded, err_decoded


def execute_subprocess_still_running(subprocess_id):
    """
    Returns True is the subprocess ID provided is for a process that is still running

    :param subprocess_id: ID previously returned from Exec API calls that indicate this value is returned
    :type subprocess_id:  (subprocess.Popen)
    :return:              True if the subproces is running
    :rtype:               bool
    """
    if subprocess_id.poll() == 0:
        return False
    return True


def execute_file_explorer(folder_to_open=''):
    """
    The global settings has a setting called -   "-explorer program-"
    It defines the program to run when this function is called.
    The optional folder paramter specified which path should be opened.

    :param folder_to_open: The path to open in the explorer program
    :type folder_to_open:  str
    :return:               Popen object
    :rtype:                (subprocess.Popen) | None
    """
    pysimplegui_user_settings.load()  # Refresh the settings just in case they've changed via another program
    explorer_program = pysimplegui_user_settings.get('-explorer program-', None)
    if explorer_program is not None:
        sp = execute_command_subprocess(explorer_program, folder_to_open)
    else:
        print('No file explorer has been configured in the global settings')
        sp = None
    return sp


def execute_find_callers_filename():
    """
    Returns the first filename found in a traceback that is not the name of this file (__file__)
    Used internally with the debugger for example.

    :return: filename of the caller, assumed to be the first non PySimpleGUI file
    :rtype:  str
    """
    try:  # lots can go wrong so wrapping the entire thing
        trace_details = traceback.format_stack()
        file_info_pysimplegui, error_message = None, ''
        for line in reversed(trace_details):
            if __file__ not in line:
                file_info_pysimplegui = line.split(",")[0]
                error_message = line
                break
        if file_info_pysimplegui is None:
            return ''
        error_parts = None
        if error_message != '':
            error_parts = error_message.split(', ')
            if len(error_parts) < 4:
                error_message = error_parts[0] + '\n' + error_parts[1] + '\n' + ''.join(error_parts[2:])
        if error_parts is None:
            print('*** Error popup attempted but unable to parse error details ***')
            print(trace_details)
            return ''
        filename = error_parts[0][error_parts[0].index('File ') + 5:]
        return filename
    except:
        return ''


def _create_full_editor_command(file_to_edit, line_number, edit_format_string):
    """
    The global settings has a setting called -   "-editor format string-"
    It uses 3 "tokens" to describe how to invoke the editor in a way that starts at a specific line #
    <editor> <file> <line>

    :param file_to_edit:
    :type file_to_edit:        str
    :param edit_format_string:
    :type edit_format_string:  str
    :return:
    :rtype:
    """

    command = edit_format_string
    command = command.replace('<editor>', '')
    command = command.replace('<file>', file_to_edit)
    command = command.replace('<line>', str(line_number) if line_number is not None else '')
    return command


def execute_get_editor():
    """
    Get the path to the editor based on user settings or on PySimpleGUI's global settings

    :return: Path to the editor
    :rtype:  str
    """
    try:  # in case running with old version of PySimpleGUI that doesn't have a global PSG settings path
        global_editor = pysimplegui_user_settings.get('-editor program-')
    except:
        global_editor = ''

    return user_settings_get_entry('-editor program-', global_editor)


def execute_restart(your_filename, parms=''):
    """
    Restarts your program.  The currently running process is exited and a new one is started.
    NOTE - this function calls exit and thus will not return

    :param your_filename:       Set this parm to __file__
    :type your_filename:        str
    :param parms:               Parameters to pass to your program when it's restarted
    :type parms:                str

    """

    try:
        execute_py_file(your_filename, parms, pipe_output=False, wait=False)  # restart this program
        exit()      # Exit instead of returning
    except Exception as e:
        print(f'ERROR restarting your program: {your_filename}')
        exit()



# '##::: ##:'########:'########:'##:::::'##::'#######::'########::'##:::'##::::
#  ###:: ##: ##.....::... ##..:: ##:'##: ##:'##.... ##: ##.... ##: ##::'##:::::
#  ####: ##: ##:::::::::: ##:::: ##: ##: ##: ##:::: ##: ##:::: ##: ##:'##::::::
#  ## ## ##: ######:::::: ##:::: ##: ##: ##: ##:::: ##: ########:: #####:::::::
#  ##. ####: ##...::::::: ##:::: ##: ##: ##: ##:::: ##: ##.. ##::: ##. ##::::::
#  ##:. ###: ##:::::::::: ##:::: ##: ##: ##: ##:::: ##: ##::. ##:: ##:. ##:::::
#  ##::. ##: ########:::: ##::::. ###. ###::. #######:: ##:::. ##: ##::. ##::::
# ..::::..::........:::::..::::::...::...::::.......:::..:::::..::..::::..:::::
# :::'###::::'########::'####:
# ::'## ##::: ##.... ##:. ##::
# :'##:. ##:: ##:::: ##:: ##::
# '##:::. ##: ########::: ##::
#  #########: ##.....:::: ##::
#  ##.... ##: ##::::::::: ##::
#  ##:::: ##: ##::::::::'####:
# ..:::::..::..:::::::::....::

__UA_FOR_URLLIB = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'

def net_download_file(url, encoding='utf-8', raise_exception_on_error=False):
    """
    Download a file located at a URL on the network
    :param url:                      The address of the file
    :type url:                       str
    :param encoding:                 Encoding data is in. If binary set to ''
    :type encoding:                  str
    :param raise_exception_on_error: If True, pass back error by raising an exception
    :type raise_exception_on_error:  bool
    :return:                         The file contents.  Returns None if an error happened
    :rtype:                          None | str | bytes
    """

    try:
        req = urllib.request.Request(url, headers={'User-Agent': var_GxlHTWBg})
        res = urllib.request.urlopen(req)
        data = res.read()
        if encoding:
            data = data.decode(encoding)
    except Exception as e:
        if raise_exception_on_error:
            raise e
        return None         # error

    return data


def net_download_file_binary(url):
    """
    Download a binary file located at a URL on the network. Can also use the plain download_file to accomplish
    :param url:     The address of the file
    :type url:      str
    :return:        The file contents.  Returns None if an error happened
    :rtype:         None | bytes
    """
    data = net_download_file(url, encoding='')

    return data



'''
'##::::'##::::'###:::::'######::::::'######::'########::'########::'######::'####:'########:'####::'######::
 ###::'###:::'## ##:::'##... ##::::'##... ##: ##.... ##: ##.....::'##... ##:. ##:: ##.....::. ##::'##... ##:
 ####'####::'##:. ##:: ##:::..::::: ##:::..:: ##:::: ##: ##::::::: ##:::..::: ##:: ##:::::::: ##:: ##:::..::
 ## ### ##:'##:::. ##: ##::::::::::. ######:: ########:: ######::: ##:::::::: ##:: ######:::: ##:: ##:::::::
 ##. #: ##: #########: ##:::::::::::..... ##: ##.....::: ##...:::: ##:::::::: ##:: ##...::::: ##:: ##:::::::
 ##:.:: ##: ##.... ##: ##::: ##::::'##::: ##: ##:::::::: ##::::::: ##::: ##:: ##:: ##:::::::: ##:: ##::: ##:
 ##:::: ##: ##:::: ##:. ######:::::. ######:: ##:::::::: ########:. ######::'####: ##:::::::'####:. ######::
..:::::..::..:::::..:::......:::::::......:::..:::::::::........:::......:::....::..::::::::....:::......:::
'''


# Dictionary of Mac Patches.  Used to find the key in the global settings and the default value
MAC_PATCH_DICT = {'Enable No Titlebar Patch': ('-mac feature enable no titlebar patch-', False),
                  'Disable Modal Windows': ('-mac feature disable modal windows-', True),
                  'Disable Grab Anywhere with Titlebar': ('-mac feature disable grab anywhere with titlebar-', True),
                  'Set Alpha Channel to 0.99 for MacOS >= 12.3': ('-mac feature disable Alpha 0.99', True)}


def _read_mac_global_settings():
    """
    Reads the settings from the PySimpleGUI Global Settings and sets variables that
    are used at runtime to control how certain features behave
    """

    global ENABLE_MAC_MODAL_DISABLE_PATCH
    global ENABLE_MAC_NOTITLEBAR_PATCH
    global ENABLE_MAC_DISABLE_GRAB_ANYWHERE_WITH_TITLEBAR
    global ENABLE_MAC_ALPHA_99_PATCH

    ENABLE_MAC_MODAL_DISABLE_PATCH = pysimplegui_user_settings.get(MAC_PATCH_DICT['Disable Modal Windows'][0],
                                                                   MAC_PATCH_DICT['Disable Modal Windows'][1])
    ENABLE_MAC_NOTITLEBAR_PATCH = pysimplegui_user_settings.get(MAC_PATCH_DICT['Enable No Titlebar Patch'][0],
                                                                MAC_PATCH_DICT['Enable No Titlebar Patch'][1])
    ENABLE_MAC_DISABLE_GRAB_ANYWHERE_WITH_TITLEBAR = pysimplegui_user_settings.get(MAC_PATCH_DICT['Disable Grab Anywhere with Titlebar'][0],
                                                                                   MAC_PATCH_DICT['Disable Grab Anywhere with Titlebar'][1])
    ENABLE_MAC_ALPHA_99_PATCH = pysimplegui_user_settings.get(MAC_PATCH_DICT['Set Alpha Channel to 0.99 for MacOS >= 12.3'][0],
                                                              MAC_PATCH_DICT['Set Alpha Channel to 0.99 for MacOS >= 12.3'][1])


def _mac_should_apply_notitlebar_patch():
    """
    Uses a combination of the tkinter version number and the setting from the global settings
    to determine if the notitlebar patch should be applied

    :return:    True if should apply the no titlebar patch on the Mac
    :rtype:     (bool)
    """

    if not running_mac():
        return False

    try:
        tver = [int(n) for n in framework_version.split('.')]
        if tver[0] == 8 and tver[1] == 6 and tver[2] < 10 and ENABLE_MAC_NOTITLEBAR_PATCH:
            return True
    except Exception as e:
        warnings.warn('Exception while trying to parse tkinter version {} Error = {}'.format(framework_version, e), UserWarning)

    return False


def _mac_should_set_alpha_to_99():
    if not running_mac():
        return False

    if not ENABLE_MAC_ALPHA_99_PATCH:
        return False

    # At this point, we're running a Mac and the alpha patch is enabled
    # Final check is to see if Mac OS version is 12.3 or later
    try:
        platform_mac_ver = platform.mac_ver()[0]
        mac_ver = platform_mac_ver.split('.') if '.' in platform_mac_ver else (platform_mac_ver, 0)
        if (int(mac_ver[0]) >= 12 and int(mac_ver[1]) >= 3) or int(mac_ver[0]) >= 13:
            # print("Mac OS Version is {} and patch enabled so applying the patch".format(platform_mac_ver))
            return True
    except Exception as e:
        warnings.warn('_mac_should_seet_alpha_to_99 Exception while trying check mac_ver. Error = {}'.format(e), UserWarning)
        return False

    return False


def main_mac_feature_control():
    """
    Window to set settings that will be used across all PySimpleGUI programs that choose to use them.
    Use set_options to set the path to the folder for all PySimpleGUI settings.

    :return: True if settings were changed
    :rtype:  (bool)
    """

    current_theme = theme()
    theme('dark red')

    layout = [[T('Mac PySimpleGUI Feature Control', font='DEFAIULT 18')],
              [T('Use this window to enable / disable features.')],
              [T('Unfortunately, on some releases of tkinter on the Mac, there are problems that')],
              [T('create the need to enable and disable sets of features. This window facilitates the control.')],
              [T('Feature Control / Settings', font='_ 16 bold')],
              [T('You are running tkinter version:', font='_ 12 bold'), T(framework_version, font='_ 12 bold')]]

    for key, value in MAC_PATCH_DICT.items():
        layout += [[Checkbox(key, k=value[0], default=pysimplegui_user_settings.get(value[0], value[1]))]]
    layout += [[T('Currently the no titlebar patch ' + ('WILL' if _mac_should_apply_notitlebar_patch() else 'WILL NOT') + ' be applied')],
               [T('The no titlebar patch will ONLY be applied on tkinter versions < 8.6.10')]]
    layout += [[Button('Ok'), Button('Cancel')]]

    window = Window('Mac Feature Control', layout, keep_on_top=True, finalize=True)
    while True:
        event, values = window.read()
        if event in ('Cancel', WIN_CLOSED):
            break
        if event == 'Ok':
            for key, value in values.items():
                print('setting {} to {}'.format(key, value))
                pysimplegui_user_settings.set(key, value)
            break
    window.close()
    theme(current_theme)


'''
'########::'########:'########::'##::::'##::'######::::'######:::'########:'########::
 ##.... ##: ##.....:: ##.... ##: ##:::: ##:'##... ##::'##... ##:: ##.....:: ##.... ##:
 ##:::: ##: ##::::::: ##:::: ##: ##:::: ##: ##:::..::: ##:::..::: ##::::::: ##:::: ##:
 ##:::: ##: ######::: ########:: ##:::: ##: ##::'####: ##::'####: ######::: ########::
 ##:::: ##: ##...:::: ##.... ##: ##:::: ##: ##::: ##:: ##::: ##:: ##...:::: ##.. ##:::
 ##:::: ##: ##::::::: ##:::: ##: ##:::: ##: ##::: ##:: ##::: ##:: ##::::::: ##::. ##::
 ########:: ########: ########::. #######::. ######:::. ######::: ########: ##:::. ##:
........:::........::........::::.......::::......:::::......::::........::..:::::..::
'''



red_x = b"R0lGODlhEAAQAPeQAIsAAI0AAI4AAI8AAJIAAJUAAJQCApkAAJoAAJ4AAJkJCaAAAKYAAKcAAKcCAKcDA6cGAKgAAKsAAKsCAKwAAK0AAK8AAK4CAK8DAqUJAKULAKwLALAAALEAALIAALMAALMDALQAALUAALYAALcEALoAALsAALsCALwAAL8AALkJAL4NAL8NAKoTAKwbAbEQALMVAL0QAL0RAKsREaodHbkQELMsALg2ALk3ALs+ALE2FbgpKbA1Nbc1Nb44N8AAAMIWAMsvAMUgDMcxAKVABb9NBbVJErFYEq1iMrtoMr5kP8BKAMFLAMxKANBBANFCANJFANFEB9JKAMFcANFZANZcANpfAMJUEMZVEc5hAM5pAMluBdRsANR8AM9YOrdERMpIQs1UVMR5WNt8X8VgYMdlZcxtYtx4YNF/btp9eraNf9qXXNCCZsyLeNSLd8SSecySf82kd9qqc9uBgdyBgd+EhN6JgtSIiNuJieGHhOGLg+GKhOKamty1ste4sNO+ueenp+inp+HHrebGrefKuOPTzejWzera1O7b1vLb2/bl4vTu7fbw7ffx7vnz8f///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAJAALAAAAAAQABAAAAjUACEJHEiwYEEABniQKfNFgQCDkATQwAMokEU+PQgUFDAjjR09e/LUmUNnh8aBCcCgUeRmzBkzie6EeQBAoAAMXuA8ciRGCaJHfXzUMCAQgYooWN48anTokR8dQk4sELggBhQrU9Q8evSHiJQgLCIIfMDCSZUjhbYuQkLFCRAMAiOQGGLE0CNBcZYmaRIDLqQFGF60eTRoSxc5jwjhACFWIAgMLtgUocJFy5orL0IQRHAiQgsbRZYswbEhBIiCCH6EiJAhAwQMKU5DjHCi9gnZEHMTDAgAOw=="


class _Debugger:
    debugger = None
    DEBUGGER_MAIN_WINDOW_THEME = 'dark grey 13'
    DEBUGGER_POPOUT_THEME = 'dark grey 13'
    WIDTH_VARIABLES = 23
    WIDTH_RESULTS = 46

    WIDTH_WATCHER_VARIABLES = 20
    WIDTH_WATCHER_RESULTS = 60

    WIDTH_LOCALS = 80
    NUM_AUTO_WATCH = 9

    MAX_LINES_PER_RESULT_FLOATING = 4
    MAX_LINES_PER_RESULT_MAIN = 3

    DEBUGGER_POPOUT_WINDOW_FONT = 'Sans 8'
    DEBUGGER_VARIABLE_DETAILS_FONT = 'Courier 10'

    '''
        #     #                    ######
        ##   ##   ##   # #    #    #     # ###### #####  #    #  ####   ####  ###### #####
        # # # #  #  #  # ##   #    #     # #      #    # #    # #    # #    # #      #    #
        #  #  # #    # # # #  #    #     # #####  #####  #    # #      #      #####  #    #
        #     # ###### # #  # #    #     # #      #    # #    # #  ### #  ### #      #####
        #     # #    # # #   ##    #     # #      #    # #    # #    # #    # #      #   #
        #     # #    # # #    #    ######  ###### #####   ####   ####   ####  ###### #    #
    '''

    def __init__(self):
        self.watcher_window = None  # type: Window
        self.popout_window = None  # type: Window
        self.local_choices = {}
        self.myrc = ''
        self.custom_watch = ''
        self.locals = {}
        self.globals = {}
        self.popout_choices = {}

    # Includes the DUAL PANE (now 2 tabs)!  Don't forget REPL is there too!
    def _build_main_debugger_window(self, location=(None, None)):
        old_theme = theme()
        theme(_Debugger.DEBUGGER_MAIN_WINDOW_THEME)

        def InVar(key1):
            row1 = [T('    '),
                    I(key=key1, size=(_Debugger.WIDTH_VARIABLES, 1)),
                    T('', key=key1 + 'CHANGED_', size=(_Debugger.WIDTH_RESULTS, 1)), B('Detail', key=key1 + 'DETAIL_'),
                    B('Obj', key=key1 + 'OBJ_'), ]
            return row1

        variables_frame = [InVar('_VAR0_'),
                           InVar('_VAR1_'),
                           InVar('_VAR2_'), ]

        interactive_frame = [[T('>>> '), In(size=(83, 1), key='-REPL-',
                                            tooltip='Type in any "expression" or "statement"\n and it will be disaplayed below.\nPress RETURN KEY instead of "Go"\nbutton for faster use'),
                              B('Go', bind_return_key=True, visible=True)],
                             [Multiline(size=(93, 26), key='-OUTPUT-', autoscroll=True, do_not_clear=True, expand_x=True, expand_y=True)], ]

        autowatch_frame = [[Button('Choose Variables To Auto Watch', key='-LOCALS-'),
                            Button('Clear All Auto Watches'),
                            Button('Show All Variables', key='-SHOW_ALL-'),
                            Button('Locals', key='-ALL_LOCALS-'),
                            Button('Globals', key='-GLOBALS-'),
                            Button('Popout', key='-POPOUT-')]]

        var_layout = []
        for i in range(_Debugger.NUM_AUTO_WATCH):
            var_layout.append([T('', size=(_Debugger.WIDTH_WATCHER_VARIABLES, 1), key='_WATCH%s_' % i),
                               T('', size=(_Debugger.WIDTH_WATCHER_RESULTS, _Debugger.MAX_LINES_PER_RESULT_MAIN), key='_WATCH%s_RESULT_' % i, )])

        col1 = [
            # [Frame('Auto Watches', autowatch_frame+variable_values, title_color='blue')]
            [Frame('Auto Watches', autowatch_frame + var_layout, title_color=theme_button_color()[0])]
        ]

        col2 = [
            [Frame('Variables or Expressions to Watch', variables_frame, title_color=theme_button_color()[0]), ],
            [Frame('REPL-Light - Press Enter To Execute Commands', interactive_frame, title_color=theme_button_color()[0], expand_x=True, expand_y=True), ]
        ]

        # Tab based layout
        layout = [[Text('Debugging: ' + self._find_users_code())],
                  [TabGroup([[Tab('Variables', col1), Tab('REPL & Watches', col2)]], expand_x=True, expand_y=True)]]

        # ------------------------------- Create main window -------------------------------
        window = Window("PySimpleGUI Debugger", layout, icon=PSG_DEBUGGER_LOGO, margins=(0, 0), location=location, keep_on_top=True, right_click_menu=[[''], ['Exit', ]], resizable=True)

        Window._read_call_from_debugger = True
        window.finalize()
        Window._read_call_from_debugger = False

        window.Element('_VAR1_').SetFocus()
        self.watcher_window = window
        theme(old_theme)
        return window

    '''
        #     #                    #######                               #
        ##   ##   ##   # #    #    #       #    # ###### #    # #####    #        ####   ####  #####
        # # # #  #  #  # ##   #    #       #    # #      ##   #   #      #       #    # #    # #    #
        #  #  # #    # # # #  #    #####   #    # #####  # #  #   #      #       #    # #    # #    #
        #     # ###### # #  # #    #       #    # #      #  # #   #      #       #    # #    # #####
        #     # #    # # #   ##    #        #  #  #      #   ##   #      #       #    # #    # #
        #     # #    # # #    #    #######   ##   ###### #    #   #      #######  ####   ####  #
    '''

    def _refresh_main_debugger_window(self, mylocals, myglobals):
        if not self.watcher_window:  # if there is no window setup, nothing to do
            return False
        event, values = self.watcher_window.read(timeout=1)
        if event in (None, 'Exit', '_EXIT_', '-EXIT-'):  # EXIT BUTTON / X BUTTON
            try:
                self.watcher_window.close()
            except:
                pass
            self.watcher_window = None
            return False
        # ------------------------------- Process events from REPL Tab -------------------------------
        cmd = values['-REPL-']  # get the REPL entered
        # BUTTON - GO (NOTE - This button is invisible!!)
        if event == 'Go':  # GO BUTTON
            self.watcher_window.Element('-REPL-').Update('')
            self.watcher_window.Element('-OUTPUT-').Update(">>> {}\n".format(cmd), append=True, autoscroll=True)

            try:
                result = eval('{}'.format(cmd), myglobals, mylocals)
            except Exception as e:
                if sys.version_info[0] < 3:
                    result = 'Not available in Python 2'
                else:
                    try:
                        result = exec('{}'.format(cmd), myglobals, mylocals)
                    except Exception as e:
                        result = 'Exception {}\n'.format(e)

            self.watcher_window.Element('-OUTPUT-').Update('{}\n'.format(result), append=True, autoscroll=True)
        # BUTTON - DETAIL
        elif event.endswith('_DETAIL_'):  # DETAIL BUTTON
            var = values['_VAR{}_'.format(event[4])]
            try:
                result = str(eval(str(var), myglobals, mylocals))
            except:
                result = ''
            old_theme = theme()
            theme(_Debugger.DEBUGGER_MAIN_WINDOW_THEME)
            popup_scrolled(str(values['_VAR{}_'.format(event[4])]) + '\n' + result, title=var, non_blocking=True, font=_Debugger.DEBUGGER_VARIABLE_DETAILS_FONT)
            theme(old_theme)
        # BUTTON - OBJ
        elif event.endswith('_OBJ_'):  # OBJECT BUTTON
            var = values['_VAR{}_'.format(event[4])]
            try:
                result = ObjToStringSingleObj(mylocals[var])
            except Exception as e:
                try:
                    result = eval('{}'.format(var), myglobals, mylocals)
                    result = ObjToStringSingleObj(result)
                except Exception as e:
                    result = '{}\nError showing object {}'.format(e, var)
            old_theme = theme()
            theme(_Debugger.DEBUGGER_MAIN_WINDOW_THEME)
            popup_scrolled(str(var) + '\n' + str(result), title=var, non_blocking=True, font=_Debugger.DEBUGGER_VARIABLE_DETAILS_FONT)
            theme(old_theme)
        # ------------------------------- Process Watch Tab -------------------------------
        # BUTTON - Choose Locals to see
        elif event == '-LOCALS-':  # Show all locals BUTTON
            self._choose_auto_watches(mylocals)
        # BUTTON - Locals (quick popup)
        elif event == '-ALL_LOCALS-':
            self._display_all_vars('All Locals', mylocals)
        # BUTTON - Globals (quick popup)
        elif event == '-GLOBALS-':
            self._display_all_vars('All Globals', myglobals)
        # BUTTON - clear all
        elif event == 'Clear All Auto Watches':
            if popup_yes_no('Do you really want to clear all Auto-Watches?', 'Really Clear??') == 'Yes':
                self.local_choices = {}
                self.custom_watch = ''
        # BUTTON - Popout
        elif event == '-POPOUT-':
            if not self.popout_window:
                self._build_floating_window()
        # BUTTON - Show All
        elif event == '-SHOW_ALL-':
            for key in self.locals:
                self.local_choices[key] = not key.startswith('_')

        # -------------------- Process the manual "watch list" ------------------
        for i in range(3):
            key = '_VAR{}_'.format(i)
            out_key = '_VAR{}_CHANGED_'.format(i)
            self.myrc = ''
            if self.watcher_window.Element(key):
                var = values[key]
                try:
                    result = eval(str(var), myglobals, mylocals)
                except:
                    result = ''
                self.watcher_window.Element(out_key).Update(str(result))
            else:
                self.watcher_window.Element(out_key).Update('')

        # -------------------- Process the automatic "watch list" ------------------
        slot = 0
        for key in self.local_choices:
            if key == '-CUSTOM_WATCH-':
                continue
            if self.local_choices[key]:
                self.watcher_window.Element('_WATCH{}_'.format(slot)).Update(key)
                try:
                    self.watcher_window.Element('_WATCH{}_RESULT_'.format(slot), silent_on_error=True).Update(mylocals[key])
                except:
                    self.watcher_window.Element('_WATCH{}_RESULT_'.format(slot)).Update('')
                slot += 1

            if slot + int(not self.custom_watch in (None, '')) >= _Debugger.NUM_AUTO_WATCH:
                break
        # If a custom watch was set, display that value in the window
        if self.custom_watch:
            self.watcher_window.Element('_WATCH{}_'.format(slot)).Update(self.custom_watch)
            try:
                self.myrc = eval(self.custom_watch, myglobals, mylocals)
            except:
                self.myrc = ''
            self.watcher_window.Element('_WATCH{}_RESULT_'.format(slot)).Update(self.myrc)
            slot += 1
        # blank out all of the slots not used (blank)
        for i in range(slot, _Debugger.NUM_AUTO_WATCH):
            self.watcher_window.Element('_WATCH{}_'.format(i)).Update('')
            self.watcher_window.Element('_WATCH{}_RESULT_'.format(i)).Update('')

        return True  # return indicating the window stayed open

    def _find_users_code(self):
        try:  # lots can go wrong so wrapping the entire thing
            trace_details = traceback.format_stack()
            file_info_pysimplegui, error_message = None, ''
            for line in reversed(trace_details):
                if __file__ not in line:
                    file_info_pysimplegui = line.split(",")[0]
                    error_message = line
                    break
            if file_info_pysimplegui is None:
                return ''
            error_parts = None
            if error_message != '':
                error_parts = error_message.split(', ')
                if len(error_parts) < 4:
                    error_message = error_parts[0] + '\n' + error_parts[1] + '\n' + ''.join(error_parts[2:])
            if error_parts is None:
                print('*** Error popup attempted but unable to parse error details ***')
                print(trace_details)
                return ''
            filename = error_parts[0][error_parts[0].index('File ') + 5:]
            return filename
        except:
            return

    '''
        ######                                 #     #
        #     #  ####  #####  #    # #####     #  #  # # #    # #####   ####  #    #
        #     # #    # #    # #    # #    #    #  #  # # ##   # #    # #    # #    #
        ######  #    # #    # #    # #    #    #  #  # # # #  # #    # #    # #    #
        #       #    # #####  #    # #####     #  #  # # #  # # #    # #    # # ## #
        #       #    # #      #    # #         #  #  # # #   ## #    # #    # ##  ##
        #        ####  #       ####  #          ## ##  # #    # #####   ####  #    #

        ######                                    #                     #     #
        #     # #    # #    # #####   ####       # #   #      #         #     #   ##   #####   ####
        #     # #    # ##  ## #    # #          #   #  #      #         #     #  #  #  #    # #
        #     # #    # # ## # #    #  ####     #     # #      #         #     # #    # #    #  ####
        #     # #    # #    # #####       #    ####### #      #          #   #  ###### #####       #
        #     # #    # #    # #      #    #    #     # #      #           # #   #    # #   #  #    #
        ######   ####  #    # #       ####     #     # ###### ######       #    #    # #    #  ####
    '''

    # displays them into a single text box

    def _display_all_vars(self, title, dict):
        num_cols = 3
        output_text = ''
        num_lines = 2
        cur_col = 0
        out_text = title + '\n'
        longest_line = max([len(key) for key in dict])
        line = []
        sorted_dict = {}
        for key in sorted(dict.keys()):
            sorted_dict[key] = dict[key]
        for key in sorted_dict:
            value = dict[key]
            # wrapped_list = textwrap.wrap(str(value), 60)
            # wrapped_text = '\n'.join(wrapped_list)
            wrapped_text = str(value)
            out_text += '{} - {}\n'.format(key, wrapped_text)
            # if cur_col + 1 == num_cols:
            #     cur_col = 0
            #     num_lines += len(wrapped_list)
            # else:
            #     cur_col += 1
        old_theme = theme()
        theme(_Debugger.DEBUGGER_MAIN_WINDOW_THEME)
        popup_scrolled(out_text, title=title, non_blocking=True, font=_Debugger.DEBUGGER_VARIABLE_DETAILS_FONT, keep_on_top=True, icon=PSG_DEBUGGER_LOGO)
        theme(old_theme)

    '''
        #####                                        #     #
       #     # #    #  ####   ####   ####  ######    #  #  #   ##   #####  ####  #    #
       #       #    # #    # #    # #      #         #  #  #  #  #    #   #    # #    #
       #       ###### #    # #    #  ####  #####     #  #  # #    #   #   #      ######
       #       #    # #    # #    #      # #         #  #  # ######   #   #      #    #
       #     # #    # #    # #    # #    # #         #  #  # #    #   #   #    # #    #
        #####  #    #  ####   ####   ####  ######     ## ##  #    #   #    ####  #    #

        #     #                                                       #     #
        #     #   ##   #####  #   ##   #####  #      ######  ####     #  #  # # #    #
        #     #  #  #  #    # #  #  #  #    # #      #      #         #  #  # # ##   #
        #     # #    # #    # # #    # #####  #      #####   ####     #  #  # # # #  #
         #   #  ###### #####  # ###### #    # #      #           #    #  #  # # #  # #
          # #   #    # #   #  # #    # #    # #      #      #    #    #  #  # # #   ##
           #    #    # #    # # #    # #####  ###### ######  ####      ## ##  # #    #
    '''

    def _choose_auto_watches(self, my_locals):
        old_theme = theme()
        theme(_Debugger.DEBUGGER_MAIN_WINDOW_THEME)
        num_cols = 3
        output_text = ''
        num_lines = 2
        cur_col = 0
        layout = [[Text('Choose your "Auto Watch" variables', font='ANY 14', text_color='red')]]
        longest_line = max([len(key) for key in my_locals])
        line = []
        sorted_dict = {}
        for key in sorted(my_locals.keys()):
            sorted_dict[key] = my_locals[key]
        for key in sorted_dict:
            line.append(CB(key, key=key, size=(longest_line, 1),
                           default=self.local_choices[key] if key in self.local_choices else False))
            if cur_col + 1 == num_cols:
                cur_col = 0
                layout.append(line)
                line = []
            else:
                cur_col += 1
        if cur_col:
            layout.append(line)

        layout += [
            [Text('Custom Watch (any expression)'), Input(default_text=self.custom_watch, size=(40, 1), key='-CUSTOM_WATCH-')]]
        layout += [
            [Ok(), Cancel(), Button('Clear All'), Button('Select [almost] All', key='-AUTO_SELECT-')]]

        window = Window('Choose Watches', layout, icon=PSG_DEBUGGER_LOGO, finalize=True, keep_on_top=True)

        while True:  # event loop
            event, values = window.read()
            if event in (None, 'Cancel', '-EXIT-'):
                break
            elif event == 'Ok':
                self.local_choices = values
                self.custom_watch = values['-CUSTOM_WATCH-']
                break
            elif event == 'Clear All':
                popup_quick_message('Cleared Auto Watches', auto_close=True, auto_close_duration=3, non_blocking=True, text_color='red', font='ANY 18')
                for key in sorted_dict:
                    window.Element(key).Update(False)
                window.Element('-CUSTOM_WATCH-').Update('')
            elif event == 'Select All':
                for key in sorted_dict:
                    window.Element(key).Update(False)
            elif event == '-AUTO_SELECT-':
                for key in sorted_dict:
                    window.Element(key).Update(not key.startswith('_'))

        # exited event loop
        window.Close()
        theme(old_theme)

    '''
        ######                            #######
        #     # #    # # #      #####     #       #       ####    ##   ##### # #    #  ####
        #     # #    # # #      #    #    #       #      #    #  #  #    #   # ##   # #    #
        ######  #    # # #      #    #    #####   #      #    # #    #   #   # # #  # #
        #     # #    # # #      #    #    #       #      #    # ######   #   # #  # # #  ###
        #     # #    # # #      #    #    #       #      #    # #    #   #   # #   ## #    #
        ######   ####  # ###### #####     #       ######  ####  #    #   #   # #    #  ####

        #     #
        #  #  # # #    # #####   ####  #    #
        #  #  # # ##   # #    # #    # #    #
        #  #  # # # #  # #    # #    # #    #
        #  #  # # #  # # #    # #    # # ## #
        #  #  # # #   ## #    # #    # ##  ##
         ## ##  # #    # #####   ####  #    #
    '''

    def _build_floating_window(self, location=(None, None)):
        """

        :param location:
        :type location:

        """
        if self.popout_window:  # if floating window already exists, close it first
            self.popout_window.Close()
        old_theme = theme()
        theme(_Debugger.DEBUGGER_POPOUT_THEME)
        num_cols = 2
        width_var = 15
        width_value = 30
        layout = []
        line = []
        col = 0
        # self.popout_choices = self.local_choices
        self.popout_choices = {}
        if self.popout_choices == {}:  # if nothing chosen, then choose all non-_ variables
            for key in sorted(self.locals.keys()):
                self.popout_choices[key] = not key.startswith('_')

        width_var = max([len(key) for key in self.popout_choices])
        for key in self.popout_choices:
            if self.popout_choices[key] is True:
                value = str(self.locals.get(key))
                h = min(len(value) // width_value + 1, _Debugger.MAX_LINES_PER_RESULT_FLOATING)
                line += [Text('{}'.format(key), size=(width_var, 1), font=_Debugger.DEBUGGER_POPOUT_WINDOW_FONT),
                         Text(' = ', font=_Debugger.DEBUGGER_POPOUT_WINDOW_FONT),
                         Text(value, key=key, size=(width_value, h), font=_Debugger.DEBUGGER_POPOUT_WINDOW_FONT)]
                if col + 1 < num_cols:
                    line += [VerticalSeparator(), T(' ')]
                col += 1
            if col >= num_cols:
                layout.append(line)
                line = []
                col = 0
        if col != 0:
            layout.append(line)
        layout = [[T(SYMBOL_X, enable_events=True, key='-EXIT-', font='_ 7')], [Column(layout)]]

        Window._read_call_from_debugger = True
        self.popout_window = Window('Floating', layout, alpha_channel=0, no_titlebar=True, grab_anywhere=True,
                                    element_padding=(0, 0), margins=(0, 0), keep_on_top=True,
                                    right_click_menu=['&Right', ['Debugger::RightClick', 'Exit::RightClick']], location=location, finalize=True)
        Window._read_call_from_debugger = False

        if location == (None, None):
            screen_size = self.popout_window.GetScreenDimensions()
            self.popout_window.Move(screen_size[0] - self.popout_window.Size[0], 0)
        self.popout_window.SetAlpha(1)
        theme(old_theme)
        return True

    '''
        ######
        #     # ###### ###### #####  ######  ####  #    #
        #     # #      #      #    # #      #      #    #
        ######  #####  #####  #    # #####   ####  ######
        #   #   #      #      #####  #           # #    #
        #    #  #      #      #   #  #      #    # #    #
        #     # ###### #      #    # ######  ####  #    #

        #######
        #       #       ####    ##   ##### # #    #  ####
        #       #      #    #  #  #    #   # ##   # #    #
        #####   #      #    # #    #   #   # # #  # #
        #       #      #    # ######   #   # #  # # #  ###
        #       #      #    # #    #   #   # #   ## #    #
        #       ######  ####  #    #   #   # #    #  ####

        #     #
        #  #  # # #    # #####   ####  #    #
        #  #  # # ##   # #    # #    # #    #
        #  #  # # # #  # #    # #    # #    #
        #  #  # # #  # # #    # #    # # ## #
        #  #  # # #   ## #    # #    # ##  ##
         ## ##  # #    # #####   ####  #    #
    '''

    def _refresh_floating_window(self):
        if not self.popout_window:
            return
        for key in self.popout_choices:
            if self.popout_choices[key] is True and key in self.locals:
                if key is not None and self.popout_window is not None:
                    self.popout_window.Element(key, silent_on_error=True).Update(self.locals.get(key))
        event, values = self.popout_window.read(timeout=5)
        if event in (None, '_EXIT_', 'Exit::RightClick', '-EXIT-'):
            self.popout_window.Close()
            self.popout_window = None
        elif event == 'Debugger::RightClick':
            show_debugger_window()

'''
M""""""'YMM          dP
M  mmmm. `M          88
M  MMMMM  M .d8888b. 88d888b. dP    dP .d8888b. .d8888b. .d8888b. 88d888b.
M  MMMMM  M 88ooood8 88'  `88 88    88 88'  `88 88'  `88 88ooood8 88'  `88
M  MMMM' .M 88.  ... 88.  .88 88.  .88 88.  .88 88.  .88 88.  ... 88
M       .MM `88888P' 88Y8888' `88888P' `8888P88 `8888P88 `88888P' dP
MMMMMMMMMMM                                 .88      .88
                                        d8888P   d8888P
MM""""""""`M
MM  mmmmmmmM
M'      MMMM dP    dP 88d888b. .d8888b. .d8888b.
MM  MMMMMMMM 88    88 88'  `88 88'  `"" Y8ooooo.
MM  MMMMMMMM 88.  .88 88    88 88.  ...       88
MM  MMMMMMMM `88888P' dP    dP `88888P' `88888P'
MMMMMMMMMMMM
'''


def show_debugger_window(location=(None, None), *args):
    """
    Shows the large main debugger window
    :param location: Locations (x,y) on the screen to place upper left corner of the window
    :type location:  (int, int)
    :return:         None
    :rtype:          None
    """
    if _Debugger.debugger is None:
        _Debugger.debugger = _Debugger()
    debugger = _Debugger.debugger
    frame = inspect.currentframe()
    prev_frame = inspect.currentframe().f_back
    # frame, *others = inspect.stack()[1]
    try:
        debugger.locals = frame.f_back.f_locals
        debugger.globals = frame.f_back.f_globals
    finally:
        del frame

    if not debugger.watcher_window:
        debugger.watcher_window = debugger._build_main_debugger_window(location=location)
    return True


def show_debugger_popout_window(location=(None, None), *args):
    """
    Shows the smaller "popout" window.  Default location is the upper right corner of your screen

    :param location: Locations (x,y) on the screen to place upper left corner of the window
    :type location:  (int, int)
    :return:         None
    :rtype:          None
    """
    if _Debugger.debugger is None:
        _Debugger.debugger = _Debugger()
    debugger = _Debugger.debugger
    frame = inspect.currentframe()
    prev_frame = inspect.currentframe().f_back
    # frame = inspect.getframeinfo(prev_frame)
    # frame, *others = inspect.stack()[1]
    try:
        debugger.locals = frame.f_back.f_locals
        debugger.globals = frame.f_back.f_globals
    finally:
        del frame
    if debugger.popout_window:
        debugger.popout_window.Close()
        debugger.popout_window = None
    debugger._build_floating_window(location=location)


def _refresh_debugger():
    """
    Refreshes the debugger windows. USERS should NOT be calling this function. Within PySimpleGUI it is called for the USER every time the Window.Read function is called.

    :return: return code False if user closed the main debugger window.
    :rtype:  (bool)
    """
    if _Debugger.debugger is None:
        _Debugger.debugger = _Debugger()
    debugger = _Debugger.debugger
    Window._read_call_from_debugger = True
    rc = None
    # frame = inspect.currentframe()
    # frame = inspect.currentframe().f_back

    frame, *others = inspect.stack()[1]
    try:
        debugger.locals = frame.f_back.f_locals
        debugger.globals = frame.f_back.f_globals
    finally:
        del frame
    if debugger.popout_window:
        rc = debugger._refresh_floating_window()
    if debugger.watcher_window:
        rc = debugger._refresh_main_debugger_window(debugger.locals, debugger.globals)
    Window._read_call_from_debugger = False
    return rc


def _debugger_window_is_open():
    """
    Determines if one of the debugger window is currently open
    :return: returns True if the popout window or the main debug window is open
    :rtype: (bool)
    """

    if _Debugger.debugger is None:
        return False
    debugger = _Debugger.debugger
    if debugger.popout_window or debugger.watcher_window:
        return True
    return False



def get_versions():
    """
    Returns a human-readable string of version numbers for:

    Python version
    Platform (Win, Mac, Linux)
    Platform version (tuple with information from the platform module)
    PySimpleGUI Port (PySimpleGUI in this case)
    tkinter version
    PySimpleGUI version
    The location of the PySimpleGUI.py file

    The format is a newline between each value and descriptive text for each line

    :return:
    :rtype:  str
    """
    if running_mac():
        platform_name, platform_ver = 'Mac', platform.mac_ver()
    elif running_windows():
        platform_name, platform_ver = 'Windows', platform.win32_ver()
    elif running_linux():
        platform_name, platform_ver = 'Linux', platform.libc_ver()
    else:
        platform_name, platform_ver = 'Unknown platorm', 'Unknown platform version'

    versions = "Python Interpeter: {}\nPython version: {}.{}.{}\nPlatform: {}\nPlatform version: {}\nPort: {}\ntkinter version: {}\nPySimpleGUI version: {}\nPySimpleGUI filename: {}".format(
        sys.executable, sys.version_info.major,
        sys.version_info.minor,
        sys.version_info.micro,
        platform_name, platform_ver,
        port,
        tclversion_detailed,
        ver,
        __file__)
    return versions


def scheck_hh():
    with open(__file__, "r", encoding="utf8") as file:
        lines_in_file = file.readlines()
    combined_lines = ''.join(lines_in_file[:-1])
    entire_file_bytes = bytearray(combined_lines, encoding='utf8')
    cfileh = sha256(entire_file_bytes)
    return cfileh.hexdigest()


def read_last_line():
    with open(__file__, "r", encoding="utf8") as file:
        last_line = file.readlines()[-1]
    return last_line


# ==================================================#
#
# MM""""""""`M                     oo oo
# MM  mmmmmmmM
# M`      MMMM 88d8b.d8b. .d8888b. dP dP
# MM  MMMMMMMM 88'`88'`88 88'  `88 88 88
# MM  MMMMMMMM 88  88  88 88.  .88 88 88
# MM        .M dP  dP  dP `88888P' 88 dP
# MMMMMMMMMMMM                     88
#                                  dP
# M""MMM""MMM""M                   dP       dP
# M  MMM  MMM  M                   88       88
# M  MMP  MMP  M .d8888b. 88d888b. 88 .d888b88
# M  MM'  MM' .M 88'  `88 88'  `88 88 88'  `88
# M  `' . '' .MM 88.  .88 88       88 88.  .88
# M    .d  .dMMM `88888P' dP       dP `88888P8
# MMMMMMMMMMMMMM
#
# When things look bleak, show your user an emoji
# and a little hope
# ==================================================#

EMOJI_BASE64_BLANK_STARE = b'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'
EMOJI_BASE64_CLAP = b'iVBORw0KGgoAAAANSUhEUgAAADgAAAA4CAMAAACfWMssAAAC9FBMVEUAAABgYmJDEgMnBQAbEgcOAQAcEgcWDAU9FQI1CgD/ugB8RgJiKwAnBQAWAgASAgBFGQIwCAANAAB0PABpNABlLwBGGgg1DQAwBwArBgB2PABhKgBXJABKGAE5EQBnamxKHw9iLQBYJQAvCADWmAGVbCNiPh2DSQBLNSVvNwBDFAYgAACjnkYzXWOpwlpfKgC/pEeDVyD//3KLaCj//nH//nH/92XV1F/V1F+Aai82DQA8PDwAw/83IB1fX1//vwA8OTg+NTLTngAAyP87Pj8+NzU4KCfOmgDMlwDRnAD/xgD/wgDHkwBmZ2g5Ly46Dwg9DgRgY2Q8MS0AzP84Kyo8Ozo9LSk2IyI6HBakawE5MzM8KCRFJRn/yAC1gACMUwACwvslcIcpaH33twHCjwAGwPVqZ2U6GRM9FQ2DTAHmpgBcJgBIFQAbhKRfZGiZYgHZoQDYmwC8hwCSWwBwOwAVk7v/6Z8ffJkGZJf/6pSYyG9hV1S2v0n+1j3Cvz1RNSk7JCD7vwRnNwT5uwHGfQCocQBhKgBUHwBPGwACzv8FuO0Jrd7+6qghd5AsXm40TVVbVFJYSEM6QUPMvjFVPTFdPiZlPRf1vBRzRg3trADGiQCeYwCu7O8cxuVbxKZuyJh9yYqHxX09aXmPyHj/3WNjW1j+3VG6v0VRQkJBMi3fvyJCKyLJnBVZNAnepgZVRQXilwDSlQDYjgDOhAC9gQDBdwCudwBpMwBKwrMXi67/5nz/4W6cxWgwVmJbWl/t117UyVlQR04sQkw3RkswNz47OztCPC//zSjSnCP/zBhbTQVsWQP1sADMjgCzdgCH7P+a6PwPwu4kwdQOpdMvtsJDxsAAaJ9EiI//6YsNXYuTyHVPZXL/7V5UUVfyxUPvvC5MLiaQehtWMRnZrRi0kxe1gRZ7aQ9GGw1MLAvnnAAezv9A0PZz2uWQ2M0Rncn+8KfZ2ZAfco4jZodjnXdsmWiViUrmsTJxVCt2TR0vGBpsQRXWpg2rbZ78AAAAO3RSTlMA/v5KFAslHbWH/v3RVjwzqn0r8vDl0KV0X9zKxbqZ++/c2mr+/f3s6uXkgm3+/vr58tnMvr2un5mIXOtDfcsAAAY+SURBVEjH7ZZ1WBNhGMDZmEpIGIjY3d0Kx+5ucdttjI2NjRobbEhIp4gIiISUUoJiB5JKid3d3d3drf/43Q2JwfTxf3/Pdnvvee5333vv++37Tu8//wTN1GqkpUGvnh0BPXsZWI40MaP93Wo/sHcP54pjXwoS6HQej05PPOVXvayoh7kV7c9any6P7+y8tqP4KHBIgI3jOG9pkoVhB91e9y7H1kdHrz9KNzKit4QnNzpjYaVDa2c+eO/bjHf7cnPnzZu3ce7chg84yc3NLSsre1Ro2LZofnX58nMvz3vZtIHS6/yKFRfWtml2v3r23NkXNn+AsXC0fmuvw7BXy5e/3rZy1arVq9esW3djzpw5u3aBw41169asXr1q1cptly9duNStXSvR8HF0ZPRx3tLnVVU1NbW1CxYs2AIAP7W1NTVVVc9P4fQQfoWvSavKDLgbGbnezzjVnyoUCu2bIwRQ/VMUpzZxUPfe2qKpYn1k5N1Z9lIEQVgsuDksFuLg4CC1Dw/mYFhX7W52qtuRsSPIHmYSOLKAy7QmAaH1YbaMDSNCZ5SDKrRzNdh0LeNOcjx5Ncz02J55ECZCRzjLIwvcCIIg2Gkrl4MmGWo9YseCyOhjQoRJXhwhZogv5hAmK4ohFkcwrdkQJJGmhnK5oQZazRh+NGOns70jmdxuGwbDRuyJgHCRF8MGhCwXCJIRuWLqji1FM9/YjFhjJzJTxGOhMl25MAABoaeY4cUQB7BgGQS5+PiiGKc/rWVRw2KjCxoeEYlKy8rZnR5BiJlKj0WeaSAEuQqIh+R2bd9C1C8q3umX6kCKLI+sUhhZ5AkToUcpq3R3JmwtAQ/pOouPoV06txSdi2MHURFNC5gwUVqyqjnEgeiMAILYRHVQY20x9vhpIUsjOpJHTUjGjhrRwd+9DfE4vkzIstZBk6idqmkQ3kwE86ZpTBiBm4taxTFT4PhpIXKYvBb2yMpBfgMf9PSEm0TMouVkbd8Fx0OoDi6kiEQw0t9sD4jKjIoKiLiYRnaUTRQnJZTL79/yH0kbTuf5pUglMClmihnNAXPIUaZpB1fdS68lPZfyEpPj2RLgaSZaI4y0gzCTBRETIBzlultqiZbBOO7r7QIJrJnWTFaUuMkTe7CYjmyImHIKFHXupL1U1eF4nRCRQWyBi4sLEsAA2QKLIVa+l0okMuDJBNR6FFXoa68AYWC5TnEVQBqcFm1P91Iq09IDDnhDJN8/f03hYxytboDqWCTScYU9LGkwvb3Zhw4cOMT2doJIZJJ933xRzsOJetpYhiRu4qf6SBEBW6YZ1Mm70WILBHn7CkMx7q3prUT9IB4Hcw/3pzq5Sh0EAgm7AYkALFTx3sIfe9UYP3Zc59Y7Rzc/sPypN1eGz/IX+vg4QfGugHjIyceHmpoc/ux+MYdfttecWC20h/RdimHqzSdRvntSmG/41uRZgOSt4b5hSWCtOfHkIf/nrfFgwKlTtMfspMBQ/omTXIyLArgcPoBDhMHqojBwQ7RisIkebdJkWuttp6t78JMTaoxDgpFwuaDpD0pK4iqdkwaY6LWfME2vDcx6Gwdtvh+McoGh0bn1xmFBD/aIRKI9cVQwaUaN0msb0z4DKoPqQ9V8Dkaki/Ir95c8XUyxtbWliPKo3UD3ddLOzMrQoFfH/hbzCcbGBVIW22qg3CsHu9xfoXUDk1YyYpjIltIgirJdy2f8Wepg0sfAoJ8bgJonsv0NJdsVMdSZqOnAPuYG/fJiNmzYEBMTsyEum9IoiuKQ0k46PKsezsv49XF2fe3s7GaCb997i0WNXrYbs9xER4pDE+Q4XZ1vR3iBgTPtsufn3aY0eIvdYGY/HWXVPyMH70LVQwhv7ezZN/PrEkIK95NjUmLcHJis3rrerKpxIIYsIb0rsw8/ktNxlfF+Chgvxk3KZJYP1CGa+/GAGLwkkPSOfFqxBpyqCm9TQJ7EhjSCpkPsqfotfvC8fuTjQhublQV03C9/T4mP7BAzR2qoqxc9eHRACBBvXj9ScdkGsK2ALnd3U5wJK3wme2qmp6uoOCFWLwm0s80PkSesUQJzZYL8tEIux3l+SSn6OkSzIp6RkZFq2ZC+lHx+giqRPmaFl5dylypoUKJKpTKSFzVv/y9WCJ69O0CBmgAAAABJRU5ErkJggg=='
EMOJI_BASE64_COOL = b'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'
EMOJI_BASE64_CRAZY = b'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'
EMOJI_BASE64_CRY = b'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'
EMOJI_BASE64_DEAD = b'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'
EMOJI_BASE64_DEPRESSED = b'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'
EMOJI_BASE64_DREAMING = b'iVBORw0KGgoAAAANSUhEUgAAADgAAAA4CAMAAACfWMssAAAC91BMVEUAAABnMgARCgoRCwo3DAA3DgAiIiQOBQV6RAKNVABHGQAcCAUWDw9NHgcsBwAlBACdpquYo6hhLABVYGYfAwBtNgOOmqBgbXQvCQBGTVMqBQB4hIrPy2l3TB5YJQBEHQ5MGwE1CgAzOT0vNTqNmqJ/RgB8iI5yfodueoBdZ20rBwBGUFWGkpimrrNVJAFHGAluNgBYJQArBgA8VVGOYjp8iI5jY21GFAJve4F0gIhiMQT///88PDw3IBzTngD/vgAAw//MmAA/NTI9NzU6MjE8OTjNmgE8PT3/xwH/wQA6Liw4KCY8Pj9mZ2fPmwA7FAy5xMg3IyD/xAEA0f9iYmUAZZo9KiY8DgS0wMQ6GBMAyv/3+Ploams8JSA8HRZeJwAAx/+wur4sXWxBLyr6+/vj5+lpZmUyTVZmMwWDTwHboQBUIABNGACtt7wVkbcah6n/6aIxU16cZwBFEQDQ19rAys0cfp3//2bmqQb0tQDFkgC5ggCIUgAAzv8EuvEhw97X2t0KrN0RmcOgq7E5QkTLxDn/zin5uwK/iwDBgwCzfgCiagCSXAACv/gIsONBwr1gXl/uwBY/FQrnoADTkQCocQDw8vPp6+0HturIz9Iyw8yptLmnr7MlZ4AsZnX/5HQ0SVBeUU84RUpzUC1SNClIKx9jUAXtrgDVmAC1eACteACZXQCGRwDe4eNYxKoMZ5Qgd5IVZo8kc4v85YUmboRPT0ouPkVHRUTgxCR+SwaIawT3rQBzOwCb6v8MxfIMp9cNo9EPoM2UnqP/6ZeKwHRPZ3J7e2b29WX/3GSoxl3+10v0xD0xMTXksTB/6v8Uw+v17KxmxJuij5A7fIeFyYI2Zn3W22m0wFVzWEtbQzv2wSmifwywhgHEewCqYwDx5+Tc6MQujZ//5pFxwpCKfX/IjhBHQAhGPghSRgZ5YAWPYwHKjwBS2f8vyvO/uL7D3rTS5p5ntYqoiYDu7mZ2Y19nT0yUqEuxg0DqvD9sQSLXnxhGHAlGNwdP14qnAAAAO3RSTlMA7BEHkqMsIf79szQb12NI/frddz7744hvZVb+/v7OycKEQDf679O1rJp7Wffz6d3awXX++uzn59XQww8+etYAAAc3SURBVEjHlZZ3WFJRGMYvCTlytPfee+/kFlzmvQmCxCpAJRQQjBSMlMqyNEfLsrIyK8sc7b333nvvvfeuPzr3AsktW+/z+PjHvb/vfb/znXs4EFn+dVr1qAfUslZT6D/kVa3lnpQIIHNK8/atm/0b492sUrNWVcyhbpkrN/+7aYV2bVrWrFKlyh5zqJxQxNx581L29K74F65OzRSzOUIeGrEnQm5L1umWJ9sigKc8pXmrP8X1aj1XLrdZdTMHJ89NsfbDNdhqq3zv3aWCggYN+vrRqF3rVvf2+hWsZQ616YY6Ad1g4n/ovQKfuPtfjh89evTKNHvRjPTMFp39mgR5k7imVUKtAPPQ0Dc1Mo8fWmvZu/ZQaqqYL+bh4i8tKm7RpWtFD8OUXDJ389L6+qdOnVp7RNzfU3xAL33q6xfkBqulLCdzl2+f2L79xPMxc6asuLvv4oRN00iwPcuvkhOsWDOZlPMSzj0b8EM7QIXTeIE0ghWLZ1Bqu4Yx1zPqmc2vbt16eXfFlDljTg7w1MkxBD+tP2/6MqorbGWdGxucrD++d++dVP7WrWnTNk2YcPjcaVBhhwc/Zs6KfR8KmhBZW1dePhRMkQh6pjTfYjlS5KPR6LctK71xfcb0rSOnbQIFVkwp48N3dAsCflVmAmKWDexss9z62b7XsvZ+vFCFiegKoVAmi4/RbFtGFHDyc/AGlLMbeUGV3bO3Wm1z5y07YrEc1Si4AwkFsxEWqqIrQAGTpgbgp4MOJhx+PWXM/LrQLI8VzX2fnm/Jz5EhA4Od4nLdBVAp4IG/3nc6b/oMzlUalOuiCNsG9juWKxo14FwiFQhmoVKR0DTDzih62hDqYy0Dk31SLfnpMmYZSMZZIowVrNDAHAZMgSq06bB8sMvwTOkRS6qPEGEymQi7PBKj01lMWQ7MgA34HNuH5up0ybkR8xam5+cvjVGti101f/gCLpPgyZZ0ugjJ9gVgFgR515Tbcm1y8M3LC4rWpqbLtOPCwsLCR48dN2xN5PBFbA+eyxbR6YhiGwDjIKid2QqiDh08c+bMAvshXqmQPT5y3bBxY0eHjwobNWD2ztiEvMjo8c74OMhS6wUcHKxYGXCEZjW4ksrfphgYvYit1TLHR0euGbZ78iRlWJhy0uRdRPyBdIUaVWkSCRCq08E1y+Wb+fyRGnVk+KTJu4etATZMrZa9aPj8hNhdsweMcsZP2IBJYyYKcBB4tqkZmqybNeuFQSy2x0ijY3fi740i2lwXuYCr1Wq5C4avS8Djhw2jE2CW63xs2q5arVo9HWKx0YSymcAGxCTec7U5f7gz/oboY05HB+mY9OWJjfEoKxhsMSYQsJm/KnaXq00Qf1XkBpECU8WAHn08wUpOEHXNzsUjYJXyEoj4gB97DFNpGBwBhQQ6eOLpJhRjcQmsDAe8O37sMVSthzmJDT3BipvBKRgjxUTBbhJBEE97RKpQ0FnCzTCc5OcJelP4/DQ9nUXH2FxcyMDoaHz0iOdeFbFkcTCc2Zb021N1JJ+3TIGApxiKsJF1Y0dPGj15d8Jw944DT+iY1JQkgA1BkKca2/niYhmC0XGJ1AlhyvDwcKVy0rDxwSDAwGCMTuw4DodB8SeBtBn9jUUmNRsVOdG8XQOUSiX4i5aygHBOxJRlwXCGH0RS3Uw+Q5BpypaynKhCtCFyVWz45AX0H2KpTPi+CSSD/pSR4IvJiInPVqEsFBMBVCHcMCpB+IPDEJkBBkm9IbKoxXaG4NqjQocmXqiW4jAmwvKOqXGGWDK2Gt9vJTQyBiwDJsLw1YdbjIklBo1JJlSrpCgKCjiFalXC+DiQyac69LMqdcwwXnuwBebAMCcp06DXmOJl2UJC2dmyeJNPiQD00rgMKCMD4hILH8MMBtiPMAwnJpVklvo6DAaDIyvzybfHRpjB4dSoXu4NhFqjsDAR5gDURbuFRwEc7EuFyldFakdDEgO8KQC0h+AtD6+CDhw0L+h38g/0q7o5LmMi6JTgORzcO7GwUCAoqdGkjCs3cfXatIaUbY64nIyJiYASCBhbHj3JotAq/f2S5gVRVSim+hrQsCoFqGpAY2pd79+/HkhtG1g9qDatUUBAo15gjqzs6pBXBX9vf/8/R2zy8bgxKUu/eOFUiWTqwoWXFy9e0qkRLeiv+Sp1P5TKEy/NuTwkBGgIoakbNy4OCKzwZ7DxJzG4zow0LARgVJQkKiREIgmZun7jxiWdqIFBv79NBubw+gPQqJ8KOEneyvNRkgNRkhDJ+o1LSjPSi339SL7ks6M/UMbiISFR+1cPGjRof/2DFw7g5JL0NHCpS69dPlg7iTAc6Vg/JGr/ykFAKy+MGPEWkFOXJPHxJ13KN+ycRhjCIGlU3vnVOHr24IgR9YElAfYXtyh3kG2LnYY5zqSrV7vAgwckEmkJXpJXXLfcDpfiVdNgH2JNzxOGF0YAxyEhEm1OGu5o/PFlfAc9blD78S3UwwAAAABJRU5ErkJggg=='
EMOJI_BASE64_SKEPTICAL = b'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'
EMOJI_BASE64_EYE_ROLL = b'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'
EMOJI_BASE64_FINGERS_CROSSED = b'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'
EMOJI_BASE64_FRUSTRATED = b'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'
EMOJI_BASE64_HAPPY_GASP = b'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'
EMOJI_BASE64_GLASSES = b'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'
EMOJI_BASE64_GOLD_STAR = b'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'
EMOJI_BASE64_YIKES = b'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'
EMOJI_BASE64_GUESS = b'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'
EMOJI_BASE64_HAPPY_BIG_SMILE = b'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'
EMOJI_BASE64_HONEST = b'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'
EMOJI_BASE64_HAPPY_IDEA = b'iVBORw0KGgoAAAANSUhEUgAAADgAAAA4CAMAAACfWMssAAAC91BMVEUAAAAMAwCDTQAWCwAvBwB1PwAsIBEnBQBqMwIuBwBDEgAmBQAyIxgVCgBEFwAgBAD/53z/5HZiKwAwCQAkBgBoMABbJgBKFwJcJwBVIgJgKwBWIwA1DwA1CwD/5kvKrTZ0OwBIIQj/41dGRkb80ytuST89DgBtRC5sRkAtIx9rRj8lAwC0kQ+YdwVoRUD/66NYIwBQTk310zb41jjGoyPMpyD40intxSPJqhv/7qH/7qEAw/88PDw3IB3/vgDMmADSngBnZmb/xgD/wQA8Ojo+NzU/NjPPmwA7EAc6MzI6GxUAyf8AzP89MS43JSI8OTgAZppnaWv//2U9Fg1hYmY4Kin9vgHUnwA+KCJ7RgD/6aI/Lik6FA7//fEVk7k4LzBkMQHurwDFkgCzfwCMUABADgD/6pIuW2k1SE5ZQzs4Hhr4ugDaogCVVAAFwvj/+eAxws7/8bwah6k0TlfhxyZvOgHkpwAFue4Jr+H/9s7/9Mf/77AOZpPaxy71tAC6hwC5gACrdABWJABGEwALw/T/99UNpdP/65kidI3/5YYoZHf/4GovVWD/0zg7NzXYlwDNiwCqawCcYwACwvw3wsheXWDNxzu+iwDFhQClcACgZwCV6///++eXl5cee5dOZnL/6m4lWGq3tWX/21ZER0c5Q0XkrB9NRAdaSwaVXgFOHAE7CwG+dwCNWwAKq9xPwa2Li4svZoIoan7392b/4l1ZVlhQTlC9yEsuO0JTNCb/yRDQlApkUgWjXgAQw+8RnMdDwrz/76QAXZwcZos+e4V9f4Sxy4L/4HLY22d+fmbq6WWqwVRzbkX3ykJJRUBOPTjzwTXToyVOLRlhOhRBHRF+YwSSbgO1cgBo3fuq5tYQn8o9wsKoqrJowpeUxnpWZm6NjWbNsD9wYTHBixTutxFzXQWabQFGw+HN6trP58/U8M3T6M0QocwQoMwQoctjy8O1uL2jo6Rrt4X/7IO8zG6bm2bkv2K5k1zRy1AqLC4dICrQmihGOBL6/7s9AAAAO3RSTlMACP0gaf4VW9V9vkosDrE2/v7nmT7z29LQxsC7o5L7++3p3sHBnpaGbtaVhnhWS0jy18bEuKyom4otIwPAsygAAAbrSURBVEjHlZZ1eBJxGMcRBsjK7u7u1jFuB8dRN4whpQPGYBNw6ubCWuqmLnSburC7u7u7u7u72z987whBNx/9Pnue8d7v97nv933vdw/Q/lM927XrUdoaoxybU6e2f62aNWvW8q9dicOuzHAu+XVvWKF8w26sEqhynBr1l97/fnaRwZCYmGgwxE3aXlhcv2wdHz9YZHXaOwy0t6Hvb1QZtnf49jOZ5SvMz97GdwgllTipuCqHRes6ctzIESNGDjN3LOPp5j14UWaG5nA2P/A3AW4ortbMPHDGuCFDxo3UzGnjznlVOVshwzx/G7W1v1Mull94f8TAgUPgb8So913cuVOHnj25+nr16j3Xp0yZMtQp+Hx9z57Vq2/efPdlhhOc0PgX57PgyvTpV3r9TYfGzYCoM8aNdAf9WjyePn26Y0dUVNTYsWN37do1FhQVle+4fGvEwCHUcDTlO/8KeuLq0+eHjm/ePG3atDGg4U6RBVzbvPn4rePmgeNGweMYNWFOa9eDqLYoI2MCGjhpxYrLuTt3DgaFkyI/7NyZe3nFismJqOHkkJGaUaP2mjPruo5EZfp8jWb+dv1ykV0D3GS/sjw1OdF2eJQ5I8OcuQEMHWqVXF6TsWjZAAKTC4ULYyIxeYBDwoCYGLmWEAslJiPyoMKECRMqbHCbqfcis6ZCuAi2YzGh8b3iQ2OEFCYQjE/Iz0+YaOHqAiR6nq3unDlzNtT99fhZFc9oNGdSucBlJSSERocmJGRhFBcdfy06+kX8LItFR6SlKM/Wq3f3bj2GC/RlZmvM200EbI2IwLRaLfwTkGDkxEhCqyUi5yoswTmicOTem7cHD3bwc4FtB8/XZOaJyL0YETlxXZackDtaJMsIuZbL5Yoh64kbM2fObERzqXnuBk12rIQKNyteKsvfHYPZe8TGQ9nrVYyFy1WoliUBuGaNG9hsxWHzg9Rg0jBaJoVDIkuIlFOGs6RUGb9Fwg0mTMZ7B9escXdsWVg+05ZGABfRyy5ZKIwVRpXvLAEUi/LCfnz72oLxC2wyuXz25OVCcAiVOsh40lIYLXMeX7AU96Pbki428KW5g5nbkkUYdJjuBKUR5H1eOktZFgmqEQSvTvMAs9EUePyCgFUeIJbuAucCKIlF8LDqZdzAlpO3obkiMttu5878LMw9uTTSCXo4NitEwZEEx8scG9MDBFCukzrKVQqLHSyo4Q42v4yiRpEYsi5cZSelEyEpsOn2UjZRwoUemQie5O0BFqNo4XJCR57xVTKpVBY1HiYlFAqwyHSy7DVLyyVBOoIYa7uDbcNRdFKaViEHcuGsa+nRWUKBIGDiuoUCbOH43emhEXIFCYqWIkhRK3fQl4nyDakqhQLiwQuJCTHqDMlCBeBLloJgLnlyUhBkqZc7yKpo5fNjJWKLOMAhyBwFvUVg9krHtZ9VXKmuTHOXdxwfzRPlwKo4Ry6AmDBfKYwoWiiX5+SIISj1duA8vArDA6w0GZo0EdSGYEqW8TLqiAZDSErBmGilEi+oTvMQOw/l99dLoBWnJFsSZLIoOC9O5ajSkhEkpZInyKjf32pNWa6S61yoRTd37haL006RQ4hiEZ6S7kPzlLfNysPVpn4qQqxTKChaAqKSK3RiQnvBpE/C8bCKLNrvWfk8HlKUmmbqJ1FpCYIQO0QQWpWknylt2UoezlMWQVJP+VWLi4OVHUvy6HqgRf2cEpnSUvXq4h2Lk5Swrvel/S4fZhwkWbKDp0TCjCl5K+lqZiyTqQ5fWmQswJW2i4uNCK6kc2h/iqMOU4JjGDwrxFM4NPFwcYESD/d3vYue38gptktwY96fgigPlUmxTYErSeX8mY+WXFQiOO5J4Qjc8BK9GptWqipXqpq60pgUxkOUv4KGFRgf6Rv4s8HuL2JV9qpdo2rFKrFMNSVmlYpVa/hzfBi0f1EZFsPXS6LT6VSVfBksu9O/geXYXk0vqFSqC95sr381K8OqXKfa1kFOnT69tYG3l28Zv7/6lqtVtmzZqssGTe3jUsimBQtOnWsP12tySmX9yn46yY/D6Rv7BDkUEhIUtHHBgnNGmzXQmutVGsj+nA0/vQxqCpy99nZQyNGjQE7dpEruzw9ErdVLs6xxkg9g3PmpJNe79+jZ8/qunwemIdoi8icdmutTSodL0UAAeedDKA7ID3379p0HFbbSSt3Sv2SwziQSDEze2ifo9ujRFHkEyDshfU4xDXzSks4oeTRkHr61+HSfoNn715Lovnl2y016GwUWljgen1wqqYG+CWazdvR+4A4c69t3/Z2QoI3nCvpTa7VKApvakyphNiAX9xHKqaqixFKzsipSA0gkWwRH6JDijhw5CmPF6HGBJJjMce3/CSmzD1u3LwZvAAAAAElFTkSuQmCC'
EMOJI_BASE64_ILL2 = b'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'
EMOJI_BASE64_ILL = b'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'
EMOJI_BASE64_JEDI = b'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'
EMOJI_BASE64_HAPPY_JOY = b'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'
EMOJI_BASE64_KEY = b'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'
EMOJI_BASE64_LAPTOP = b'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'
EMOJI_BASE64_HAPPY_LAUGH = b'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'
EMOJI_BASE64_HAPPY_HEARTS = b'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'
EMOJI_BASE64_MASK = b'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'
EMOJI_BASE64_NOTUNDERSTANDING = b'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'
EMOJI_BASE64_NO_HEAR = b'iVBORw0KGgoAAAANSUhEUgAAADgAAAA4CAMAAACfWMssAAAC7lBMVEUAAAAMAABpMgAcDAeRVwGASgBCFQMlBABlZmYcEw0lHhsNAABQHwQzDAMnBACKVQBIHQs3EQYZBAFFZXaKhoRcKQEyEQg0CgIaBADIvL9EFAJlMRBcKABQHwZMHAPs7GZWKhptOABNJAd3QAA+DwVBEgFbSkR0WS4uBwAwCgFQMSf/0iggZomfn2Z2dWaAaGK2tLSQXyqUk5MiBACD3M8pY4SkpaReXmJZIwBiLgBWLB1CGgt6QAA4BgCPaEJb2vnZ2WZ60t9oamuQu7GIdnD/0SiheklLNCz/vgA8PDs3IB0Aw/9lZmb/xgDSngD/wgDNmQA8PT07MjA4JiTQmwBoaGk7Pj86LixjY2M6MC84KSj//2Y8ODcAzf9FR0j9vgDUnwA4x8w+NzU7Fg5WIABpa23AjQAAZptmZ2djXFo6NDQ5GxbkqAK1fQBOHABpZmQ/NjNHJRfJlQHHiwBlLAA7LCk8DgWncwGVXgCGUABVUVI9IBpDFAT/ygN1QQH6uADQkwC9hQAAyv8rxtdPwbBYwacXZ43/5XZgYGbjtRHcngPWlgH0twCtegAAx/8AX5sEZpj7+WQ+QkT/zSCcZALurgDkogCgagBzPAAGwfYQnsqSv2szTldTLAtjUAVtNwHaowBeKAAFue4IsuX/65z/6Ykna393d3fh4mawsGY0SVD2yEo4RElNOjZzWQSxdAClawCY7P8XxOwhxeELqtpbZmwqU2FMTlC7wkT/1UA0MTReQi9BKCbkxSDzwQxVSgfvtAB6RgAmv9YXkbfm6bIZia14zqv/6qZjwZwheJJrwJErdon/3mVWWFn/2U9gTUVUQ0NIQ0HisT1eOirVvynRmiChbSBEHg1n3/8cqshHwrgehaB8wYNul3qMrHbCw2qLimWFiWLQpEzuujGgkyyteSTyuRp+7v92yt/d79C44s4TmsJLn66AqKkCcqNYkII2cnvn1GpjhliXo0Gcoz2qpDFdQhfWoRCEaQSRbgOQ2S/MAAAASHRSTlMACN0p/v2xXPIjGxDQbU/+wn4y/ffls5I4D/PPxsWs/vry8PDpnJWNhXb9/Pv7+/v6+vlA+fn28/Hu4+PZy/n49vXx7+/s4IuCSKTGAAAGxElEQVRIx+WWZVwTYRjAFbdhoCB2d3d35253t7m747bBQucGDqeyuR5joogKWICAoIDd3d3d3d3d8c33fefGfor12f+Hcc/x/Pe8cfc+K/JfUwXxL0bR0MDGvOrVAhDVqvMqBVYu9RdauwbdLRfPLd+aSiCEg+NmuVd3r1mm6O+1MjXSziUuTDyVKhzsRSgEfvqaoMDfDbISZ/nCBSdSfVKBHZvOqVnqlx7v7oGnzw4dO3YkIWEC4No1+JmQcOTIsRs3srPfhZT8hdjgxdq1VwS/RH41pGjh83vzeO3adevWrx8/fvxQP0C4fv26dVkC+fXShQ60xu0DB97u3DkZMBIyC4Au4J2dOy98/PC+QmHTrMxJXLBQqM8cO3Zs/nDIKAi8yAe3MlcPnuWeYi1saRtfXHj4hNWMyWQsK4WIIfCClclkmJmbJ6LH8X60SlQuUf3+ggUXzWxYWBh/2LAI8GcIwBOJKZlumDmDFIkCQiuX8H9aeHVj6tc7dTiRow7j84etWHQ8ZxgfgaJFyzAM0zlyaZGKWzWmLq+y1ytb+/QIidh64vDysVQYP2LZBrl83iaPCaN4+bycaEzGjhpHk2ksPuJ07Sbfve2LNYxEtjpxwWenbgh/zEE52LPZEcjzRqCkGIyVtOzAGc3i82hbSnUtz+DMScyYmKg384E4O14gmDo/DHneiMUwabSNJPUxJ0Fy+drF4Lr0XyzBoxTRSQu3cqLDQOpR+VSBfD8aKooEIDJhmMyRS9Lj5igYXLK4VWkolsfxKMnMy1MSU10YrBN2cF7W8xVoqDDan5U1e5kYiLJ8A62dMxMH6eXLArFkeYlHPKXMpaAYMSwnh+/xYBSRswl8YBjFDteSxjkzJVG4pG1DfzE1bqwMiEjlFwD2kT8EimBZoYjjXrGtBBRXqJNik6FYGD5RpQVzBGJHJHaUMBrN5mg3EQe30Y8xY34Sx8Vs1oC9aw3FEq019jMrd6jHEcJcSucvLlo0xCvqwOKYhmtVevWOlWfsi1sPAmKxVuf3rjG6rWsIgouxESDXuxHx8utjvossEKl8kSrD5jaucW1vBZ+d0EuzwHEUm8QhiAy1VDbEV2VD/NT53l2hMIx1ZJJksDEWnHxT2pSFFZvBE20XyVUSRrMYY/nwtQD6ivlTp87LiYCvyBApfOTUVpLca9gFj66tjeDiDLiQnTB0/L7t6UT6cJMMo0xSsQ4gni2Xb9CBN5I1UcCjxE496f50dfzQhOwLSCzRPksA2ZREELZoHeYletn8eZuifaHUMRa8yDNRalZ7KBbrhYL4V2mE0m1mdZTP3LbN51FSsdmqItMmxqPkK0jsM1WwLyF7ywOXMk9lczpMUqmMopCJPIqSsVKTw5xpENGuB1uyE/YJ4p+gh7zfoS1wxnF7jekG2jLH6VQ7KJmJFSNYMEOH2ukclUaLSH1mHFzHLYdeloHv48BmgyFKvStdRBvmzk0JzswfPsqpRjhHDc/PtVlW7dYC0WXxtJRmPUOLAKotH4wY6bLlAXFVHqkSafUploy0tAxLil5rIMm8L7u1pCrYNdKTubwaOtIr3SNQuMdSv542b9VcEYCmSS80CMlVc1UGbtWUZJQYew/sPyC0TSqK4+gKlYKslt0pKpDrD63S7v6aUaFiF1UcSkxtU6wIosZ9oWeWScEV6letOzdFaygoqKINWv2qulWrVuBMUXpa3rmaRTwEPoz93gWJZDenc48GNasHBNTjcm02LrdeQED1mrwena1JcaA7I2IvlfG2m2qP0D2kEntWB5QuVbRUyUrUtm2miiVLFS3ZJEC/hyB8PfZRDV+3K+0p6Su7OqhxxYrdYgDdKlZsEKT3FfMUDCzocEFTCP++Lcw9M+I7dsUYF9R8EEkh/i2ui1FZ8F/C2FTDMMxohgGHkV0Rk0QUfKdSWwEuqY/QEI7Kpwq5dgYfXa5clKRly0m4XRpMeEeipIND/Dw02sCgYEOyELqEu3YU8KZHdrhTq9ZSXKKImUIgLdloK+xHS9EyvDoWOlmpTM+0M6PLRUZGTns9Izx8KT5JvHePUplMr6nD+9XPpGJNatSxptiaMqM3Tpw4fXrktFvh4eF3J9ljOCnWOiGlvYMs3A2sv1ISNXpjc2B6xDuTJGd3OMqW+J3l6XqaKBwHJYF3c0b4jKWTcHyzYiWY2x8IbarBcbQ2yFuyFMcZIJb9o9juvAZ4OPCOg6WpteR2i0mMXXG20h/FMttRxeaRkROXhIeDkkA8qTjL+6NY+jQQ4RxBSWiCOTIjFIqQP4qNR/QtjujQvFzL3rVadAKXnRSKoB938BsjqTxE4SAToQAAAABJRU5ErkJggg=='
EMOJI_BASE64_NO_SEE = b'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'
EMOJI_BASE64_NO_SPEAK = b'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'
EMOJI_BASE64_OK = b'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'
EMOJI_BASE64_FACEPALM = b'iVBORw0KGgoAAAANSUhEUgAAADgAAAA4CAMAAACfWMssAAAC+lBMVEUAAAATAQAxCQARAgBbJQAzCQAPAgBDEgJDEwEqBgBMJxozBwAoBgAbAwBhMQdrMwBGEwAsBgAvCQArBQAgBAAPAQBNHQhdJwBQGQMTAQBMGwB4PwBYJAH/ogU9CwA7CwA5YGKBVxlNHwtBDQBdKgqTXwtCDgGUVAHQkxb2nQT/pAXylwL/pAVfX1//vwA8PDwAw//MmAA7Pj83IB1mZmb/xwDRnQDTnwBgYWEAZpr//2Y8OTj/wgBNTEw/LilADgHOmgBDFQRoa2tFSElFRUVqZmRoaGhbW1tCGAhFEQD/551gYWU6OTo+Mi0+HhZ1PwA8Fw5JFwM6NTU5MDA4Kyo3JiRPMCI7EAn7vAH/vACJTwA+NjM/KB/tsQBvOABZV1b+zDVHIRREHQ86CgLAiwCASgBoMgBRHAA9CwAGxPgcwuPYowCyeACocwBfKgADy/9SU1NSRUM8NDE/LCQ7GhTTlAH3tQDorAC2fwCdaACOWQB8RAAPZZI/QUFSOC/iwB7dpQDamwDHlAC4hABjLgBYIwCWwmpjZGW8wkX/1TzUwy4/IxzHiwXgpACkZwCaYACRVACY6v8Pwe40wslEwrpSwaz/6KQAYZz/5pRvwZBHZnZUZm//2kpKOjdWPTVLQwengAKhbQAuwtGam5wZZo17xIcwZoFzc3PIwzuinzU9Kyb9xh3wxRbopQHzqgDflgDNkADEkACwbgCkbgCWWQCzs7Smp6hbwaMeaoyftXH/5Gv/2mqPl2ry8Wbo6Gbj42bDw2aFhGb++WOpyF2zwk9bUU1ZTEtVQjr/0Cv/xQzengDSmADGhACSXQBk4/+F3ejFxcbe57wYlrY/o6ZRtZwBX5gofpGOj49Eg4X/6IP/4X+FwHjI0nDd3WbatVtlWVRZR0DwwT9DMyj4vSHDmR3ZpRZSLRD2wg205+YTrNRSt83DxsbA4sWL1cS7vb5Etavt66FdvJyEhYZ5tXdNf2tkYF/q0l5eUCedfxf7wA1wXAZgUQaLbQSVcgOol2N5AAAALXRSTlMAKJoR7owHvrFS/nlIMvzq0W5lXTwg/N7bGsn12K+ilP368e7R+uDPubivr66OWC8wAAAHaElEQVRIx43WdVgacRgHcNfd3d2T2x0cx0YLczAaFJQBCoq6icy5GdPp5qbr7u7u7u7u7u7ufJ69BzcO1u/z+Ife87nv+/5+v7sz6DdVtJT9w9A70VAH7ww15xWrVCjov6pA8fqPTzw91XHixI4dJ17ecutuk8ZFKv+HK134zPFRUCeeXY1esiQ6etDUQUtSR9asUOOf7t7LUw9HHe/apk3nMf17R5LFwHGrq1yRAn9zZQrfu9RxYsf3V2a3IWv0hoEPGGTx8IihtQr+mRYqv3Lz+I4dB/F4+MJJXTx29pXeAKFw3spaRf7UcMHhU8FFu7Js5qNpS/eM7UzFRlA0tlzF3w+oWQJLeUsTo+1hSshfuyJy8DxvLEzrpWk9i/8mtGj5XGg0OitGgGGISm2Sx61e/oCK7TJpsHfWldV+3ZsKaw/CfCPBIQiCYVxBj5h4c2rkYO+0ncftjSBD08uV/nllqqdfHj/VlWABB0XaThaTEGKX9h9DdbwU5LKyP8kKIwaNnzpMpyadjyJk7MgVvIHjvB3P6x2J5xYuEDBh9WWXtjA0Ji4dSMUOMck1RyN7exdqNAy7ulhRP1jCPGgLnpEgoByMqALlnXaxNsFNdjzbM+yGRVmV/GDx1KmH0tzaH66TTKcTq8EiUOQix8SvXXZo71gPPVOMdlXKfTqEu2JUGOXEJfn86SV1MgvX13GMzryCt5ActqvEb2mG44yIOK3PGfkYIuV3y6kq7o5RI3MtMOwKfPCr0V3P07BYLo6vFAow73yyknwlWZiUnyO3YOSfuJjSkCIwyYfiyxadPe3XaQQDH2niem+urspXZicn86WIUik5IIdMixiSw5kGRJtvTUzN/Uiv6Vqcl+ZW60mJddd1wyTBHA4nOIqfrZTkyAUO3YEcsSqMydSnJGQQKNvlg0WO4niuXBDmiZQZs6WgoDicDvxsiVFoj1JIZN0NTGYYV9iTjbKT6BGH8fCMGFU4CbniackLSOalwcl8Y9QAvkWGhAHs5IE9fee0WhoPH2FKYeo9sNv6OR2CaQo/yVyxAAsHmCJMApjpe7XV4jFwp1bPNGAAhTeerCchbTtkC2QIQkKBPIONEpofsLIZZ+CaHnpmOOw3Jpu+bh0LJA35SHcHxmUymQZLfKwIRav5FnUEbuXZADLD9Rimts85uSAASpBO4k4GgPoeeSKUneE7cpWG80TpNq2SCRWGCOTtT14IgMlKzO4Ig4spJieBEiNK0YkMlH0sQQCREBomNq5fFxxQUohUwyWVcBYbFdnK+N6nzghUhNqEAmgHqoe8/fPAXqMQzKGFEYfAiOx+NYPo7RgmQomZMqFFH05Ksf0CbEjg8lhkZKcaWNPMCkH0yVlDoOjnGWXl6pQwUgoPzAkJjMRui2EzYBdFfQvXoGGVwquIfjO+9J0Vb+qeAqFacfvXP0GVmKnX5qEo0bNewKsqK3HmjK8EEasRalWGcKbQviA0sFWVfLFA2BMaKxv4DambOXPGTDhN7DXuBLXKwBTmDPAfMhvhylTaODKw4E/v8eIaEsKVvsfygXYX31T4BSoRxCGTu8gJITBQ1rv/LRGFEhGrMvOFPWS6fQrqlCuiMAzLdiSYCVjSIkG/VMXCs9hsL+07Ik+e4IjiBHMUwVHdppHHwgCNwh5WL/Tb77+mH0FR1OWMd3Tg7JumluXHZTmzbPkxGgIOTYmfCHWfEuWdFEXZRGyefYjONjzVCh9znGd16folHqsbwGoUb1CuYGXqvJd3ZrDZIpISs4TmoX2sOM/7OWe4MzPKFwqIa3x9c3SuuWbBUhVLlCkaVFFnW9OXjGXPij8C3UUwvIUPjy9cJsDVvn4wkodbY/OmT88xVi9SaohB7c7sxybYsfFJ7COpaQxG78ELBw4cuEhYKdANwyPhhhGryipCQkLe3SzpWKzUM6tq1qxKjDMfvrvozbgxXbz/DRj9A6vUPgwOKj2rWwiLxQoNYe0zOiz2imUKVnPajOO6gKCqaye/xEI1c3FQEJhkDGVBtW/PCgm5Md1evHJQ0dJ1b9MMIFaKdsWHUg4t2yGUVJMne2IHdCtZrEBQlYaPuvrB+vXo53A4OLKGOaHR9lPm92rbdnJ7hYIVypFMa1g6qPppCnaZPXbengb0+W6W5t2k9J5GyJvcqy1Ur9Bdu1gDQpOl0pIVi70d++LspP57F/aGTcFH0rAFw+sy7gcDnD9/I8AJW9u126lgDeBLJSUbjTycmrr8x0aaadjaM196bNmoEBZ02mvuXIAXd7drt1UR2kEqkaiz4IEZ9gM66SejDvxu7RMbtx8cwLm9yMSN2zyRLIhcbAPYh4I8TSkagkOT3LAwUPPbkuzcxk3t2rXbHjqAhII4goZpcSX8oJXItFN5pDt3cdN2cABZHIlUMiRP5IO89PzKPtjSSiRVDQZHwV6bYD6oHZ4ZpVKZG/VB/EijKj7YKjFJB3nemtt2wnnSbduxk6VgwX5IpjV19xX5oKt8UR9snqTLoRxsIyReBXft2o5d3rUxlqoKX7XEX3fjO78n9BlcEbyhAAAAAElFTkSuQmCC'
EMOJI_BASE64_PARTY = b'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'
EMOJI_BASE64_PONDER = b'iVBORw0KGgoAAAANSUhEUgAAADgAAAA4CAMAAACfWMssAAAC/VBMVEUAAAAOAgAfFhRsNwNHFgEkBAATAgASAgA3CwAnBAAhAgAeFhZPGgELAQB2PgByOgBWHgBWIwMyCQAsBQAeBABIIBJAEQE9CwA7DQA0CgAsBgAdAwBYJQA5BwAoBABlLwBhKwBtSEBCIhVnMQA1DQBtSEBuSEBqRkBDFASCSwBTQUAAw/88PDw3IB3/vgBfX1/SngD/xwHNmQAAy/87Pj8Ax///xAE+NTM8GBI8OzvQnAA6MzI9OTg+NzU8DQNhLADZowA3IyH/6aBiZGZdXV09Mi4+Lys4LCvKlwCBSgBZJAA8KyejagFlaGiVXQA6Njc3JyU8IBk6GxZRHABBDgA9JiHUoABxOgABw/sxUVxFQ0Q7FQ7prQNoMgHvsACOVwCKTwAEvPL/5YVCMi0+FArioAOtdwP6vQLDjAHMjQCiZQCYYwCJVQAUw+oiboYsXm5sWFM2SU//0TA7Ix46EQm/hwRKFgK2gwCdZABFEQACwPgHs+cOpdIuwtAOn8wXlLlYWVpTVFRBQT82MDHHkyJBHRK7egHlqACocwB5RAA4w8hExL1jw58gdI96enwoZHZvcXAuVmMyTFX/1UPUxDBTJxLxvQ/3uQDUkQCyfQAgw98Lr95JwrUVjLEahab/6pIna32oxFw0RErExkYtOEFUREBLMzBIKSH/yRRHQAdxXAX/tgD7sACydgCqaAB+RAB7PQCZ7f+T5/8Kw/UGtuwLqdkSmsPZ6r0de5htwpN3w4mGhIT/5Xj/5XCSw3CBc27k5Wn/4mn/21hKSkvEvkHuvjpFOjpnRDeedjZCKyPpxx7dvh3ovhdePBNMRAeDZwSPbwOkfwLanADFkQAAz/9F1PxZw6mKv4iAvXp3YWDz7l1kXFunpkGMeCv6xypWLCBwThf1xhJfUAZHNAWZdgN4RwHypwDdpQDMgwAoz/9i2/Umwtrc7cvW6Mrg6MXG37ZWzbS21qC/z3v//2uaxGl/f2e7u2bvyF88U0+gsEe8pTpZQTffxyi2nRyHYQIaqhW/AAAAK3RSTlMAEQn9yFszKaZjTR3aBf7o1sSaa0T+uK6VjXs983FW6tp96M55cF9G+fM3GVTDbAAABv5JREFUSMeNlnV4UlEUwFWYztnd3QIPHvEeDQPpknZuMBauXLjNlU63OVd2d3d3d3d3d3e3fl6eugcO4/cP8H38zj3n3HPfu+V8UK1iQLOG/g3q+9du1Kx53Urly/0X5QNq16qhj0obCIhJW5rZqUabWrXr1K3yL61xzdCBe3eGTw/fuitlAewGgZynYjNr1Gpc8S9eQE3t3q3TJeFAgjxAgB4S66pV+U9ZNxtwfv2TZ89fzT58eFw0pnjJIXFV/Xx6dT48Wrly1VkSibQ6YVK/QVOGbNo2c8+Yw+Nwt0jVwEexTZhnV65a9ZDkTbeExyDEBRDhSDQEL46rWqnMJhCvrF//9OWmjecGD+o3KWE16TdWT+o3ZeO2j1fLmH6uXRJJOIwsWbIYQm4e+jJm9sxtm4YMBjG8fEYOscJvC/aYLpGMnlCiVosc9hUu/bLCBxN63FsSffMQCHEeREjohplnZjTzrnD5aIlkS1pW71RrqtHEDg7uLRQKs8xqR3VXXCGIsBgBAd5snNIvIay11640LNwpkew1szlkvkDAJzPBByqTa1KNbBACRBDZXcseLIEXK79eueG5KRVqhoRLtmiFKDM5afjwIDJKJpOZGFgIuTXVBAKoYyA6/VSxv4dYsXqKRHJNZOIk5UwmMbplJ6Eccilu3ZDPE6Ds9FibkhtT1aM9leNGS7bECOVMAX/4ujCgDsVMHE5XSiCP3NtuU9LpTT2moHbsTkmKqjcHHbUOax6LNRT1sASoQE6hUAxWcwyXTrN3wEVij/BwpzqVH9SXQcJgdUuK4P/UUE7QjMSkfLZJIbNE0eg0VXv8OLUcN310rEXOzMY8jLDEUcACnWHOyO7GYLD6buhKQYU9gRjarlSsVONaOKwVRiTiXp/snJEcMicoaHg2i+WOs7Z/zhxZpAqI+lZ4U5enjEaWB/P7s/DZGupOlT9ybZ+fufcdmT+Hx7Z7i3VDUxZEO9jJfXGRNRXrjiA5p9uvqmcFG0wirpfYPBNGnGrjqDVlxZF9SnPoT+EZRUqvGv20MFJktnquyNiAiWgOA481S4OJLryrlYHYI12DghpLGSlwN3WWZ6wZP8SSDr+LmkQGnhef4840CGSK90uD1ejojKcaB0Szpquh/6/9DwsSkMuIiRrQVa+RC9CDB6DaqrAmZzPArrEYa5J+TBw/2bNfQRqwj15D3sQFQ+NFRh5FxtywNixs8rRk4GEI1jFKvckKOZgc7sT65fDJqY5AyIpgAzgBKHPUKCbKJ/8ETWKVZjrcKM+ayKVpG+FilRbjITiuNxpICeyqkAENRzCNgamsM9NM+Ub1aTDjAbhYrWYRAsdaZAqKm0BgK3g8gwE0FjCtDwMQNpRCQSNLQG9aeD4g/ScgTqeazQEmTiCIAEidlTh1auIcE0UhtxTTuBlEr8e/FqbZMi1sGU8RSPkdExtgolD4bPf292zsKVYiQGIlV6u2FGgw1xc8mfs00gne77sGsSFKuvj4bXW6kG2Vy/IVXQM9dVC1QRAMFuROJFbzEisSisAwLVp4MiPUYbZEslM1chmvFJlMfrBAaI4Cf1FVLudNYxWXS1t0LMNms8VExTvU6RZhZDD7B5GRQkuWOT6NS+emVS3zdm1U/bT4+MIMWozK3pNuO51R3DNeVd1OIBDsJapQ7bfbi8RcOp22vI6PF2vT4pPH7ojjA7vPF6XRuDQaTfwDG/h2cuFx0Bhbz/p4hTiV/AlHF9H0mlzpPDuohqacqA2Nd8XrM8CPEwvvgFg9iX+4flRsWPVuaEF3apexacpiFWH//l5uxk6kKW/dUtoyShqU//OFpW6j1oJcXT0CYf/FYcOGjdBJpSPm6e+fOHYiqqQm3lCf+Efsnnf94uZhOmoXQG5e3vzq8aKmNf0D8GPoG6K8oNfmYcCi5u3uPoDMn09s61e30l+sagGVm9et2KRtx3rbN1O7UKnULgMMHA4zosG/Vmp4YGBhnEqUNXb7iFwqRndwrJgRDf/hBRzYmgJDIaFjt+vAcrh4sF59v7/dASvUeo9AMLz0+ggp8DzEgn3z1C3AFdLvDxlXjloAO/Wi9MuYh4vkegMORolDnPeXNfK9fy3Hw4VmR6aIPVeKSVhzOGSmbH6eNSoaQWC4hs+E6xTCLrYWgsfrLcD0EK2fddZiCAAv9fNVYUvnivzJL8ZBCLy01MwFFSrqXZbKtdFARHr4+xCbx62Yk8AgDToCIi8T5mGedDfTYLzRSyeN0I+H3NQoX3ZBoshxATyyMRNRFWBinoEy9tOOEVLdvngnlmtmk7KnIktdhJwjAQZHQ9GnzHOpud3lpqMHLu14K9Xp9t0twsTYxmXE2ukTYGjcYLc5JIQrzoyMMB69uufS6x3vdEDs7hC7RSSkPm58B46ztH1QHquBAAAAAElFTkSuQmCC'
EMOJI_BASE64_PRAY = b'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'
EMOJI_BASE64_QUESTION = b'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'
EMOJI_BASE64_RAINEDON = b'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'
EMOJI_BASE64_READING = b'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'
EMOJI_BASE64_NEWS = b'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'
EMOJI_BASE64_HAPPY_RELIEF = b'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'
EMOJI_BASE64_SALUTE = b'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'
EMOJI_BASE64_SANTA = b'iVBORw0KGgoAAAANSUhEUgAAADgAAAA4CAMAAACfWMssAAAC91BMVEUAAAAJAAALAAAKAAAQAwAYBAAUAwAMAQBsbnAOCgowCgAVDQ1cXF7+uAFmMwAAAACSVwFjZml0PgBjMABVIwBPIQAQDAwFAwM/GAMEAwMKf6/yzDBJEREyMjNPJBQeHh4RBASiNDTvsgDWlQCWNDSLUwClZwBfOAh3QwBPJx84CAhiLABFIRgxEQt1PQAlJicYDxAJCAjqsAFiDg6xqk5GOjuGfVobe6B5LS0xMTFgJxYOBAQ6Fwc0NDSqfUMpKiojDQ1jSDEgICD///88PDzcICA3IB2nqayjpajTngA4Kik9ODfNmQCusbQ8Pj43IiCrrrE6HBdmZmY+NzQ3JSI9Ojk3LS3/wQAAzP+xs7dnaWrnISHhICDfHx83JybkICC9vsClp6qMj5I6NDM/NDE4MTHIHR1BFgz/vgCqrK4ldI3VoQD5+fno6uvd3t8LqtrU2Ni1uLp1d3hhY2chGBV2Bwb/yQH/xQBeLADDxsd8f4FqZmRPMSbZHR2+FRRNHwWxdgLAjAH2twDRnAC8hQCDhIYuXGo0TVT/1ivQHh4xIRuQDAxmBweAUwSfagFZJwHKlQDEkACQWwBlMQD19/fJyswVkbgwVGBWVFVLTU9JRUU6QEPqIiI7JBuiExN8EBCsDQ3XogC2ggClbwCbYwBwOgDj5OXN0NEAgrsbiKiVmZtYRkP5Pz/xyjZMMzHoKyvEFBS1ExM2FBJtSQtaCAhTBQV9SgHbpAABwPkEuvIItOYQncgefpwpZnkrYnP/4GI3R0zGQ0PyNzfULS1AKiosFBOFDQ3kpgDJiwCmfQB6QwAAxf7w8fGjqa6goqX96pVLbXv/5XhaaW5zcGD/X19iW1PiUlK1nUfTtT26MDAoJiU/IhzUFxeaCgpaTwddTwZCBgb5ugWPcAP/ywKvhAE7AgHurgANotAVl7xRh4BVa3P/V1f/2Ur81EnNODhgVTPlsC5GPy1wXilsJyf/1SSSJCRWSgdhVAaCaASdegO4eQBKJQBIJQAAWu9ZAAAAQ3RSTlMACiMuW1FGPP4SaRn89sNm7OTVz7mtpJKNdf316tXOv6v+/v79/Pn05uPe2NTQxayTgv759/f08fHr6raeTvzz7+zi9o8eIQAABftJREFUSMeVlmc8G2EcxwVBUWrTvffee+GSXJAdCSGaSVJFJLFaalObDlRRo61ZW/fee++9997tiz6X0NAmod8Xl+dzue/9nv//eZI7HXWg0Hbj+vYdZ2uup/M/mDj0H3r94MGDgvojfQcadN/TH7X/wFa2l7OXF9vTU1A0p5upKLtB1QUrnNthFQj6mnfLs91f7eXcETa7aFI3xIn7D0QKkleoPDDlgiKHruv7OOjzdUGyyluR7Mxy9pzSVYsMFg59s5XF8uoQKCgUeCWvGN1Dq2c+88oBlnNnWIKi+rrIQq1l6g+9tFVVncpMLUyJ1BapO1vpebFYbE8Au23G7OLmlJQUfS0NvVINPJbnrcj64ttHZEcKkz3ZbLYny7lOJpNFDtS8gmNfAqtAkLq8qirfqPI0J7fhXlNTU0pkXXFxc6rXaJTGmc6sZtelNB/m+Du2ERi2OSxIQm0qjryX6jlFT6M4KDm1VkIMdPwL/3iSLFVWUGSowTO0I9VWrnZUxzLy4ce3CtHq4waSgwKBpoFASW2zudodMyvMUSuniB5z1Hg9Frc3ZLX/MoTANT6AsM2blraba5gSu3/FeeFtfVjjiu0Mc7P/amWdWKaRA0rPEI3W6ywu9QcpGOwSDMAP84clWKyrz7LVjkt9sBjmgn4Sjh/GyFa1+0xmbQoClyAa0dUVc2YJOCogKl1mWBDylZtyqcIGqPaCLQekIBaRY8SlbqDCMMyn4WmSynZ3CXLM36SsyMdW1VXTIKAxOXlcqXTVBgC0CkF6w8mIA9IVdw0yygtr61W4amnsjE5jOHnSG3wnNzc8Hg+OABqFx5dK6abxWDBrZrhQGKwU/V0HqPoz7u3lD0LYzcnJCb+nQrSehgzWiXa70aiHpVLq+1wy93H9bYlCXBpEVIkoy9dn30XhweWUPScZjLV4MEjYxmBU4PkQgSssO3489JBMFq8I3IThOKi2XK+9Z1c2IIG8tQwGY3sivm2wj0KA6KTsja1p8eGH8hWJgURT3T+i3vDze4dBiEgJ2Jmwa9s6ChgEiNaCARXyppbjcNnTmESJD7L7goj9VCtpuPJ8UjkoEbBrPY+3GyQ6VezjUUTraDBEhUMzxekDw5l+fms2+xCxzH6oDuLe+zl0IAJooC/I53rlgA4R4IxocSl6whmmHxbjR2RiJ+h0EJOeZPARUQXwAECE6FFxG0sNegwIx/pVxnPi++l2FB8+yeAC8S9UYrqBDkp/4oRJ5g76SIWq5sgHh9KdAGD9VRIe79Yulqn96wDLIb+f481FKhMl8iiIS8NTeImiRBqM1JglHqanVkRZhoScIMCKDbCjImEfjUdZn7j72Q4RnkaFqN45LuKRJjpqMYuRl5Fg2MkN7JgAxvaAgIAdJxkBCRQ3PgTB0Amci5WOeuYefXhMyIe8+Vw8j5awa+fTnWtF67iH+DABgvjCdHG0jQZR/5g8JhT2hgAEAqkNSAGVHhUtXmms3gPdCXEva+CCgL8gwNyGEzgc6I0GrGNaM8uFN2GAN5WggOoNA24Kc6JjM600Pxx/THaJTfuVESUkQUABUAkQSRiV8TMtNlZcaqxRRFkPEeMe3ImOK81uKc8JBeSUt2SXlmR9/YbDRfdHaXmujolr/f4lC4cQ65KZ6RKrGGbefdAaN0ZP65uYTXbJ3eMbXTohfnTnUZm1blcvHTYjGkuyQFQ7LlkljSOs0Tpdo4u2tzGzshzZkpbWMtLSysraHg3SugtK15hEp5OMdcHv5z8sQ/v+/UctB4waO3Yu2qRbkrHZeLMxyy+TPZTk5uXXzjYbP94e1YWnN/+VPKakyohMJgeTyRERHqZ5+PTBIfJjxl2I9jXuviErqzyAdjGY/OJCBJmcn+3r7u5uqT3SpJfc19c3Pdcj+OK1mquiLb3PRXjkNsaAm8UZaK9wSIive0yaKTniWlJN0tTeW3pfiDAdcdQdnLTRKpohszraGBw8PanmatKn51u2nIsIXp4V4u4r72WirTXDe/bsOTh6kYXF9D6AqTN6z7CwsJiWPhmcHqLmFfA3SB6jfadFPZcAAAAASUVORK5CYII='
EMOJI_BASE64_SCREAM = b'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'
EMOJI_BASE64_SEARCH = b'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'
EMOJI_BASE64_SKEPTIC = b'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'
EMOJI_BASE64_SLEEPING = b'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'
EMOJI_BASE64_SAD = b'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'
EMOJI_BASE64_HAPPY_CONTENT = b'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'
EMOJI_BASE64_SMIRKING = b'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'
EMOJI_BASE64_HAPPY_STARE = b'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'
EMOJI_BASE64_TEAR = b'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'
EMOJI_BASE64_THINK = b'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'
EMOJI_BASE64_HAPPY_THUMBS_UP = b'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'
EMOJI_BASE64_UPSIDE_DOWN = b'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'
EMOJI_BASE64_WARNING2 = b'iVBORw0KGgoAAAANSUhEUgAAADgAAAA4CAMAAACfWMssAAAC/VBMVEUAAAAWBgQOAgAwCQEPAQAyDAIrCQEPAQA8EwQuBwAwCQEuCAEgBQATAgBdJwBwOgBEGAg6EQAuCAAmBgBMGAFPHgg9FABMKRdkLQBnLwBSPC90PQtKGxFbQjhWJAmsGhVBFQd+RQCeGxFVHRHGZGNuZmAAw/88PDz/vgA3IB3SngDMmAA8Ojk+NTJmZmb/xAA8MS47CwL/xgAAx/88EQg+NzU3JCEAyv/QmwBnamthY2Y4LCr/wAA7QEFADwE5MC9AMS0Azf8HtOhSwaw3KCeRWgA2SE7+1C08Ih04HBizfgCeaADqHSE7FxDUlAHOmgAAgrk3Qkb/2ik9KCPiGhx5RABpZWQxT1k7NjU+LihPLSDZogDFkgCVYABXIgAJrt//6aM9HRW7fQC0bACkaAALqdodf58heJV0wYskb4cwV2TcX2HvUVjFJCNhMgX1uAPlqAHfoADBjQCKUwBeKQABgrXai4tcW1y+x0ngNTb9zyztrADamgCETACS6//9+fkUhKtjwZz/5HwsXW3yW2H/3Fz+1EZGRETIxz/cuDfyxzLLHRxIPQe9hwPIjACpcwADv/YEue8OpNIRnMYWjrP/55r/6Yk/eohXaXL/4Wmex2ivyFnIT1DBQkPYKCnXGRpnVQX5vAO4cwB+SQBqNABOGgBIFAABw/vz2Njtx8fioqMpaHuSwWzOaWt7dV5aUVLwTFDBp0PtP0NWQ0DsxDvvLTDNlRxZOAZ8ZASecQHglgDPhgCtfQDCewD57e0VlLrot7jjqar/7ZqFw33ScnJdaGzxaGpMS04wNDliQTBuNi6waiD/ywhXTAezhAEt0P+/6eDY6soRmMNEp8DmsLHiq6wMd6ndmJnyc3nmb3Bua2JSVFbfTE61n0jEx0SxMjGvcy6UKyV9KiP/zx5yShe5GRVQJRSyexJpPQnvtAD4rgCA3t2z3cGc1rg4krjo6qQ4kKJlgXvJX2CZllJiVVCikk/Dl0x2jEfOQkOvR0LNsT+YWyf4wCHkqhKNcAS6UpZjAAAAJnRSTlMAMgl8FZtPH6lzaFs/KtL927GNRs/Fnv7r4v3mZPTr+/Ty54PtOA4ISEkAAAd2SURBVEjHrZZ3VFJRHMdBFHGlaXtvfA+QJSNQQAJEEAyJwBCEQs1Sc5Wp2VYrU9t777333nvvvffeu073PcHQbJ3T5w+Ol/s+fn/35+9cH+a/4YoN8PTwd0Pxx3nise4/9ty98Y0aNfLCe7tWkVwC/Gs3zLy/bp1a3Sc9vY9arS7tLG1Yww3viu62bNX9yqqcnGnFKS08nTV3XA3lujUTB04svH2EisBAofboU1bfDYvBYLsPXpGcPHjwilVrI1u4/kjD1bu/ZuCusQW5gVUIoTJ6lPi6uWK7R3boELkqpwP4bOrj8Hxq2wrH7RpYGPJDcHYZj2y1WiJizsUr04F4F+vw/F4/P3nyadeuXQcMGNDOmQEDwJe7l0xa8v4gEFOmnN9zPWXaqpTW9lb6ne7bt+/xNr8j7PSFwVOmLt3Ra8rSPckp9kS3F3/wAJxn+y4uWrRzwcKzZ3rlFHujHrbB4xMnniAFTZo8eXLv3r2vDUG51hswefKkSUt2dx3Q7mVyTq+F2/r1W9BrSkpxQHlgybixY3OpjzZtUm/evHXrrFld7MyatXXr5s3qTZvyqNT0w8nTp+zs16/fwqVTU4rx6AnrDbOMHTjTZBbQUYKdoKMI5ubnpR1OnrYHJG5bsOjVtGIvRMRLCyyWwny6nEahxIjIZBGFbIclohApMTE0mpY+x3h48OBFZ88s2HF+Z68V0xohon/pQMuudfSY0FAiefFosXh7NxYRhRyaGC+OSxBCfCKFLr1xYV93pKtTp3ZPzkFnrvbXcZaJ+cFEQP/54lHx4hFJLNSTxY+IGxU/Iv5ABJtozfqcvDZy+ode3VOmR64txiFHrP9lrGWYWQ7y9Il6skikGZSoISPi4iQZKFa2eFAExBfNq3vobofItftWREZOb3rIDYhYXbhlHElACwXPikSybnqWyFEqRaTppieKJBDEZgnuZS8/dOvmx+s3bx3MzkYSvaWFlgJbMJJB0W8f2Wbk6G4UxxkTxPNHxCfRIAgyWLPuLOft5QXxeG2D3hBcgOhlK7Tk6lQgkKUXhzHbMDkjBlHKvdFg2YbDSYyAIKE8K0N552CDxo0b1ybgMQieXQrGzUxFjkgcFVY+XWINmp9QvmQy9RGQJGZeidFYVtPHp+JK8Og8sSDNrA0lUgYxHXOZRAGBGrF9HTbGCrFpgjIYVhAwP8B1npibPo8GxASOQ9wORFa3NnaYcZIIICqBWLOSWHBELUDE/hXiaCBSBnEcovgAEINNziJaai5DTUeeTKwQx1RNhCBasLRKqZ6zGECs9CRnMXrGOMcZ+6vs4hY3J9HLxqD2EdCQ/p+ydzU+FO1qEqc8cL4sAiovtczfSQyQMqjpc2OEIFIWH8ZkMsPEehaRzCITyWM4HCaTMz9JDiFd3QjDSg8nETubEZJn1vINwNQkxI2MGyMDnqabjEUmJ40Si0cPorAhSEITbIFhqZfzRVw/MCRwToRQgk5nqExDAZ5sFDMO5FKIMhmLZQAjx9fOLeHCOm/ni79GXggjU2WAhOickR1DE4a0logs+UAUWrNIUdx67hgnavahMjrTQT18AyIhhIKGMkfKyEA0GBAPMgTPhrkZNVwwlSaAQU2bqxWCbTZbwgdoNSOZoJt6uYTNZiMacsQy9O/vjHcmI5CqU5HZ0A9OhXHCwLxUrA1yc2wUbHJqKnoF9AicWUrXkvkVaoQwqX+ipsKTGET0TJjE9cViKkFQB3KNOro1hiLkS9jlpkqlQj1Qu5AistJTM7jckloulUV8JpVLIinNAoFKDu5CoVDI50uQwwqFNFqM1hosmCuN5ZJgE67qf+Ja6WkkknHDcJ2veZ4gWKWyyuVarVxuVamCBfPMc3TDZ3C5JG5sE3dMFQJ888Av3DD8mDFDsVE62zc1K8tszspKnaPLVCoy4NijM2KjouDZHpifwOVzYUSEo2AELikWQOKWL7gZR2eA7zMJmGrAzVEYtwzfCJPsRAEcP8PHhn8zZujquGCqI6BWvmLGjCguqSogd8PRLdImnphf4OJVO3W9KYMEVyEqduP61Foerpjf4ONJqFHPNz/TpFQqbTbwYZLm+9arUdMD64L5I+5Yb7yXp58cDGkzHHiJwroD6S9x9cH6gTmgNcP7/IOFxdVq0slB3bp+BPxvT4c2x79OHYLfvdXZQW3tBF0uKirq5FezTh1/nPsvRdyNoWnqEulq8LydjkFB2UVFoamK0vT00vq/CnZtODAcvPCVNUA8HqBjx71A5e0nPkgLoVKPdPb4hejx7jZ4Z5sJEoH3dujKSxMS+ydMAKH71xtDwE4P51uj0o3VA9l+OHt52yDe1ejo6KHj27dv339Cx7bZdUuRN0OGDV+t6K1kBAIx7UE24oXnhiNmz/YJIF6rCARQ0wjVinX6UBGRtJ7Hu7QmetiyT9HRK8+179lzQkeeyASKAWZz92pbE4gwU9GgLW/ZsPDclWvCEbE9EIOKdHlorZ2rG/MAG1rpQ9NqVAyPtpc6vmNQ2/2pMFprXu1qRAKoFGDULUdFAOL1TNwL2nq5rsJeq4+T8R1masAYcJ7mxAAAAABJRU5ErkJggg=='
EMOJI_BASE64_WARNING = b'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'

EMOJI_BASE64_WAVE = b'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'
EMOJI_BASE64_WEARY = b'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'
EMOJI_BASE64_HAPPY_WINK = b'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'
EMOJI_BASE64_WIZARD = b'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'
EMOJI_BASE64_ZIPPED_SHUT = b'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'


EMOJI_BASE64_MIKE = b''

EMOJI_BASE64_SUPERHERO = b'iVBORw0KGgoAAAANSUhEUgAAAEYAAABFCAYAAAD3upAqAAAUpUlEQVR4nO1baXRUVbb+9rm3hiRVqYQMBDIxSJQgM4KGoaIIGIyIQjH4oKNAg2g7YNtvtSgWaem2tfX5FG1bxaEdaE1Jt/ZTBCeSgAYEJCCGkJAwZYCEhAyVVKrq3rPfj6oIokICAXz9+luLhHVzhn2+u88+ezgX+Df+jX/jXxVOp1NcbBn+5RAklS62HKcDAejsmycAGD9+/BVZ9ixz14vUcZxPlWUAsrN9srKyzEbVOC3t0jS9Mx2dTqdgZpo6dWrGlClThrY/6+T85xUCACZOnDh4+PDhI09+1hE4nU6xdu1a01nMSzk5OcoNk2+41W63R7c/O4txzhsIAK677rqECeMnPLRhwwYVXaeZP6uFnjWEEGDms1nM9/o4AIUIEERwOByK3W5XnfjxbeJwOJRT+18oiODkZ8L5EO47MojO7wnU2UEJAaPaITidTlFUVEQul6tThvTk/itWrJAjR4z47dABfeaaTIpSXVVfWnqg+vPtO3d8AKCUCOAOS9TFaN8OixYtih8zZswfJk2aNCX47CeJdQAna1Wn1btdK3vEJE58+9mHmZu+Yj6Sy96yj3nXZ6/wk9l3ezIn2D9MvnRwLwQ06eKdQMxM119/ffy0adMGnaaZIogAAkJDk+Os3eJHgQgUoKXD5OQEibnhGvu6puKPdK7K9fGRL3Su2KDxsS/97N6mHyl8j0ePGrYaOEHkzxWCAgyo1lDr3LuyZpQ/94ffcK+EBCcQ2/1MWnYSSAgCgOSVK+73PrV0sSz+/GXe/M/nWB78lPnQZ+wr+0Sye5v/yYfu9BktcalEXUvO2agf/YTjJEAko7r3zJh/y43bclYtf/3p39/Z+447Z8mcl5cvnz/zil2WuLgYDhiE087rcDgEMyO5T//UvskJxmPHGzWTORRvuNaBhYq6ugY4//QK0OLBnGlXG9IG9XnoZ3mSt7+pgakDZ7/w2G+Yj+YzN2zR+PAG3Vv2MbO/0Lt3w2ucHB+/nPAD+/NjEACQmjok9Y5fTOesm65jrtuiz58+kbX9nzJ7duoP35PFpfmvS/YU6n94YLHfGt07hX/6pXUaXTJITk6OBKCMGtLnoYWLpgOa9OvHGxWwFAaDAu+BakPKwMt4zvSMpeaEfvEuQD/DAiQAKi7eWZTzP7mTD9Y2rX7k0VdEQ5NHfvRZgf7J2jzxzZ4DzQ0NboLUeM6N6WpqguUuAXBRUdHPQ3UcDodCRDCE2oa/sXKp5IYC3V/+MfOhT1nf/wlzxQbmmo06H9ss7799biWioqydsTWBnwJCNd3+8L238e1zbubY6LiHAHPi7+6df0zWbmKuK9Czl9zWApiTg2P/gPTO2p9z1piamhpiZgxL6T0zfcQQgleXDGap61JEhukNjY3YvXOvXvrNPvrg8y0voK6uOT09XcGZ/SECALvdrjpYKpD+v7zxfu7g7Xur7TXHjqwA2g7Xt7QeIoUAyVrWzIzQKwanLCEittvtP1iXy+XSiQgLFy40dGRdHSHmtG1yc3N1AKL/pUkTEpJ7AAKqwRZOIsIm9u7Zr/z5lff1llbN8NTL/yguLil5wul0iry8vFMdPgIg7Ha7arfbVafTKYiIiYjz8/O1HGbJzNhf39ocHxO26J7Fc7fPnTlly549pX0PlFYBXq+a3C+J068cdEtkZB9bfn6+hhMaScxMkydNnj1u3LinTWTqhw7YIrUDxLSnDn7M6xVCCAmTrVdqSvLliLDhxade9tS1+KRf58bVrnVlN2eOH7tu486KVX8vmE1ErUGiGQA5HA5RU1ND+fn5GgGcl5cnASAvLw8IGGgFgEJE/qSkvoNnZIzMXfbAAkt4uAWQEl9vLsTG/AIk/8cUQcRyzMiBMa/9M/dKZl7vcDhE0ONmAKQqarnX612/8oWV9QCQnZ19Wo09LTFEhEmTJg2yWq3FLpfLdyo5drtd5OXlyaQe3ceMGHiJCpLY+s2B6lVv544HGuuFUJpyCyuHFuSvOyiI6pmZsrOz2W63q/n5+drJoQID/eLj4kel9E+5Kr5H3KXRMdFJiqKaBIHa2vzeHVu/DH/0twssaphZ0xubhKIIHjZqoBh2RSrJVi/IaJQDUxIpITJ8SG011tfU1NBJ62AAW0631s4QI6SUPHFiRkpdXd2tt9xyyyOrV69uOJUcAOibFGu/vF8CoHvRMy7SbEdjxSZFaLqui4L8dTsIgGRWHQ4Hr1mzRs/Ly9MAqEk9k9J7JvaclJraf2JKSkr/4cOGG1JS+iIqqhtMRiOICKzrUEMseP6Zp/DxhgKefPNEtX3FsqUNIICEAvj8FBcbSclJPQftKCpCbGzs92R0Op0iqCUdiqxOR4wMerHvzps3b31zc7P31EFzc3N1IhIpSbEjY7rHAD7JVmt45BZzZA/Nc3fliBEfKAAUi8XCGzdu1FwuFwAkDRwwYO6Y0aNvGT16dOqVI69AYlIijGYDIKXu92ns93upze0jAGAwFJ8XM2fNokecD9C4scMQFhICSImgdxwQyq/BaFY5LFQJBwCHAwhMF0B2dnansolntDFOOEX2K9nNP/InUhTBgDkhpU9iCkwGgEERlhCjlC1Wg/qI1CVLgNuj3wFXjRq15NoJE6dPvXGKbeCAy2AIMUm9rU16PK3C0+onAilCKCAAJAInOoHg83nRLTYGQ0aMxueff4UpsyZDr2+EoghIKSEURSLcIhVVKEKhXgFicuS5eMNnJCYb2RI/sn0cgHiXoVtDzEOH9k82AdABRkKcTbHZoiJra6uNgClNMYUZr75qyMxrrr1mzuxZM429+vQGNJ/mbm4SrS3NQgghiAiKcuIUPTFRYGpVVeFtasI111yNV597ApktrZBSglmyGm6V8PqVD97/XOz8tryh+qj7IyLC8uXLO5Ui6TQxP5A1iBq7nTgvD0l9egzqndwd0HUGQcTHxcJkFHcvzro5NWPimMtrq46gsOw4HnjwQWitTXpjXa0QgtQAGSd8rkAM9V0UHpySviPH6/UhMTkRxvAYVJZXIHFEfwmPX5TsKVceX/l2yer38pZ6PI2bABwFOr91TkVHiflJREVYkyJt4YAOgDXRMy4GN40fMeOZx+4DjKqENQx/X/Uuv/jcs2LhogUKWltA9H0XgpkRalAhJaNV0yCECiIjiDWwMIPZC5AHUtdw1VVjsPTxP8mpjuvE/tJK7/sfffHSpq1bHySipmDSSqDz1Ykf4KyJSU8H8vIA0plDzEaAGezXEdXNiscfWqjD6yHdw0I2NuPmm8bjwUdeQ8WhSkTHRMLv94NOStCYTAYUVzbDahJI6m6Fu9UPU93TUL27oIcMg2adAs2QhLZWtxw6bIioaqaCJf/50m8PV9cfBY6VCkGYJllxBQg5Z1KArggihfi+jWOGOTREAZFQFCUwgcmMCWn98fG6dTBbrZAyILtkwGwyYeWHu+H408eY8V+f4o38I7B4P4eheRXItw9qw5swVy2C0f0ZfLqJwsPDcNWo4X0PV5d8IURdqcPhUKRkcgV19pzX076ss+2Ymxv4TcTk9foAccLWsd5urwFFEWC3G1ddeTn2l+6SDXX1UFUFumRYQ41YvakMT3/wLUwGFa1tEs63NuGuHKDWPAdQABY2QLbAeOwxqG1FBINF9rukT1x0RMSYZcsebpe/y7O+56wxR+qO768+ehxQFehBTaATFhTMDH+bF6bEOD2ph01s216IkFALTCqh/Egzst/ejhCjCp/OAAS6WQ34x/Ym3Pv+WPhMVwDCDzb1AIwKjG3rIHXISy+7DN2iogZlZ2fLkz3crsRZE5OelycFEQ5W1X22ecdeDSoJNcSsgUjXdZ11XWcwSzKbNGNstKzeW62sfu/T8qJvi1qEaoBRFcjJK8astF64pGckesSEISrSjFafhsgQwsEaD3yUBDKGAEIBSAUbU+D3+pGclIS47j0GnsO6z0jmWROTDTAJgqepvrSxsakZBpM4sK9ChaoqSmQEKRE2gtkkjh49pq5a9Xcx/87fv5tbsGN0Wfn+Q15PGwSRbNEJIRYLEmLCYU9NRKtPRVhYGDQRgXl2AyyG3ZBsA5EGPXQyvJZp0L1NFBUZhcSEhIHAd9F9h5CZmRk6b948Kzqw9c7puJZSonv3Qb49+48YHl76361r1n750tiRl4+Mi4vuI8B8pLa+enfxwY0FRYdcmvvYJiEI3+4t2Xy0prZ/QlyUvCtzgHC+U4homw1byxvhJwVeXWDC4BjcOuITSLcHQjGCDb3BhnCYPe/AY8gQoeEW9Izv0RtAmKIoLThDvas9TgoNDe1XXl4+Z8yYMSUbN258ORhcdol9OjWPQUSEIUNGZQC47KTnYcF/wUaAIzXVCID69euX9dn6dcz+Vn9z3RHWW5p40cpP+fK7c3jk/Wv42uUfcXXxC8ylU1mW3MJcNo+1ipWsH/oj6xVPsbt6HbPO/ORjj2oA+gXtWac0f/jw4aFnatPZrcSneJTMzCgs3PIRERXb7VCZmYQQLUKIFkEEu92uTp/uUFIdDo2IuLq6+qtd3+zSQaQaVMKrG8uxudyN2G4WtMEMx3AT4sILoEkrSDWAjfEQXAkoJki1OwgMMGTPnj2V+O7xCQDgcDg6aoAJALZv3956poYd3UoEgGfNmtVTCHHJW2+9tYmIviPI4XAoLpeL8/KgBd9gu6AcTDEACBT53W53Wdm+sgpd05MFCfnN4QZhUAMlaIUkGj0qYIyBYjwGKOEgNAJQQbIMQu5Hm/kegH0cHR0Nd5s7kjtXn+1w445qDAGAzWK7WtO0njgRyAAI5FPxfY/zR/fusmXLBABfRWVVcZPbA4Nq4nGXxUBjHToJ2CwGrN8rsX5vJnRzXzB8CLw7CbAGnzEDuogA2Mc2mw19e/dOBAJ5544uuKPoKDESAF5Y9cJbOTk5b5+t0crNzRUAUFFVtbu+rg4+Jr5+UCx+NTEFOqvQ2Qi/ZCz9UGJb3SwgLA2SNQACfuNk+A2jQOyFlEBYaCjcbvd5K5V06lQ619sL7aiqrv6moqICffv0QmNrM25Ni0NqfBg+2FGHsloPrkyx4PL4CLTyZFDoYAAGsIgDsQ9EAswMo9GIXsm9epTs23cuovwkOkXMuYbysbGxTERoPt6898CBg7DbxwkAaPH6cUVSGEYkWeDxSYSYFGh+HZJ16CIBgATBGzjeGMFcDCMiIjLqXOQ5Hc457dAZuFwuJiJo0A5XVlZ6ATYBzIKIWn0SBIYiBNq8WiAvQwIEH5gZumQwwEIINoRatZCwMKWyouLo+ZL1ghIDgIkIHo/nWH19fbXU9V7tNlwEDzPJAfMlJUNKCUVRpNFoYpPZDBApnpYWKtu7x/zhR+tRc+zYXgA/SHx3BS44MbquExF5Gxsaa7xeXy9FUZiZiZkDWTwCjAYjzGYzyGhgvc0namuPoaioAF9t3e4vKd27+8DBQxsqDlW8V1JeXkBEHbF5dFKdqUO40MRgxowZAoDe2NRY3dzchHBrmEYEYTIaFagGgiZRU1uLgi3buHDnTtq3r6ysrLzsq5LisvUHDh8oAFDSPtbJUfwZwEFSOpwHvuDEBH0OOt7QcEhVDGy2WI011Uewd+/X2LGjENu270DVoQo9zBqqbCvc9XpVddUCAH7gBBHjxo1TY2NjuSOaAoDvu+++aHeDe8yLr7z4HjpIzgUnJj09XW7cmM9E5Hv+xZeotqam9Nuioq0VlVUTUvv3jynavVN/59lltHbjNzW26L73vfXW8/6hQ4caLBYLp6eny+zsbHmyN30GMABhtVrdJcUlw4YMGdJSWFj4CdA1eeHTwuFwKA6Hw9aJLiEAsGTRovhIqzUNgBFA6Dt/XnF89fMr+N5fzvIf2Pw37tcrMYsZlBoIPrsEY8eO7RH873m9Q0M5OTnK+PTx92VmZo4BTn93n5mJiHDPwqxPHrznl1sAdCciCCGQnJAwtTj3TZ514zXevDXP8q8X/uKL8yHveRjzpydzOBwhHWmYkxO4uHP3/NmvcuUX/OtFc7YCsDqdTjF/juPJtX99jG+7eZL/g9cf8wDWFCOsKRmTJi1IS0sbEhyiK25/XfDbVh2ZUBARTCbTJa7nspu9FV/whLFpTwDAU7+7f9vSxbP5yaWL9Yyrx/1tztQb/vLhO8+0vf7MMu7Tr9/1hJ//ddVzQvvihl2Wcufhr9/jPNfKtoSE5NlPPHxPzYJZmTx90jj/w7+6rZEbv2ZfZR7fNnvK6yf3+5eG3W5XAWB25qRV7uJ1/MBdv2hxZF7rmzB6mPb2M8s05hIu+dLFczInvg/A/H/hi7WuAuXk5CgAaP7MG978Ys1zPD3jGv7kzSe4Yvsa/svjD9SNHjbsfiDwtQkuEikX600Q5+QImjFDvzYtbbGu6BkT7WkNm7/es/X9tXlrAE9V+ymG81BM6wguuIPXDpoxQ3cuWdKt5Ejt8dDQEFv+jjK5bt3HK4kY48bZVSLqqBN3XnDBv9ho93Xmzpo7dM/hygUhIcaqqKjIP1pCTXdzMM/SCc/2vOGCa0zw5rZsaGmwM3P9oYpDRESDBwwYMNMx3WGpPlK9dNOmTaU4cTnmouCCa4zL5dKdTqfIzMx8jiUPV0gZF2mL1KKjoxsUUjYoilITbHqxPs8CcBGN78KFC9X9+/YvGTR00Gt9+/b133HHHRqAH7vrd1FwUYgJ1qH0adOmpTc1Nj0ebg3PN4eaSxcsWPDX9PR0b7AKcVFxMYghp9NJRUVFEZpP+21CUsKKlStXNl0EOU6LC0pMsLguAGgATNNumnavzWYLNZqNitvtftTr9bYBgMvlOrV49/8D+3fsj2Bmo6qqYGaryWTqTJryguBCSUPMTBkZGWPr6upu1/za1Prj9U1gOmqzhUd0i+yW62nz9Ojbp29ZfFz8qlZ/6/7ExEStsVE3Pvrog7Xo5GfNXYELcVwLIQTPu3XeYk3TftnS0hJ5vOH4Nk3Tj3vaWkVbW1tRk7sptbm5uX/1kerpX+/6Oq+5ufnx3bt2/6emNaQCgNPp/HmpU1fi1VdfNQOBhLbRaERYWBhMJhMMBgOMxkC5xLlkSTeHw9E7Kysr4iKLi/8Fxj0zonO+ywwAAAAASUVORK5CYII='




EMOJI_BASE64_HEAD_EXPLODE = b'iVBORw0KGgoAAAANSUhEUgAAADgAAAA4CAYAAACohjseAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTQ1IDc5LjE2MzQ5OSwgMjAxOC8wOC8xMy0xNjo0MDoyMiAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTkgKFdpbmRvd3MpIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjlCMDEyRDc5MzQwQzExRUQ4QjhGREE4RURBODNBOEY0IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjlCMDEyRDdBMzQwQzExRUQ4QjhGREE4RURBODNBOEY0Ij4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6OUIwMTJENzczNDBDMTFFRDhCOEZEQThFREE4M0E4RjQiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6OUIwMTJENzgzNDBDMTFFRDhCOEZEQThFREE4M0E4RjQiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7feGyYAAAQ70lEQVR42sxa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'



EMOJI_BASE64_HAPPY_LIST = [EMOJI_BASE64_HAPPY_STARE, EMOJI_BASE64_BLANK_STARE, EMOJI_BASE64_HAPPY_LAUGH, EMOJI_BASE64_HAPPY_JOY, EMOJI_BASE64_HAPPY_IDEA, EMOJI_BASE64_HAPPY_GASP,
                           EMOJI_BASE64_HAPPY_RELIEF, EMOJI_BASE64_HAPPY_WINK, EMOJI_BASE64_HAPPY_THUMBS_UP, EMOJI_BASE64_HAPPY_HEARTS, EMOJI_BASE64_HAPPY_CONTENT,
                           EMOJI_BASE64_HAPPY_BIG_SMILE, EMOJI_BASE64_PRAY, EMOJI_BASE64_GUESS, EMOJI_BASE64_FINGERS_CROSSED, EMOJI_BASE64_CLAP, EMOJI_BASE64_COOL,
                           EMOJI_BASE64_UPSIDE_DOWN, EMOJI_BASE64_OK, EMOJI_BASE64_COOL, EMOJI_BASE64_GLASSES, EMOJI_BASE64_HEAD_EXPLODE, EMOJI_BASE64_GLASSES, EMOJI_BASE64_LAPTOP,
                           EMOJI_BASE64_PARTY, EMOJI_BASE64_READING, EMOJI_BASE64_SANTA, EMOJI_BASE64_SEARCH, EMOJI_BASE64_WAVE, EMOJI_BASE64_KEY, EMOJI_BASE64_SALUTE,
                           EMOJI_BASE64_HONEST, EMOJI_BASE64_WIZARD, EMOJI_BASE64_JEDI, EMOJI_BASE64_GOLD_STAR, EMOJI_BASE64_SMIRKING]

EMOJI_BASE64_SAD_LIST = [EMOJI_BASE64_YIKES, EMOJI_BASE64_WEARY, EMOJI_BASE64_DREAMING, EMOJI_BASE64_SLEEPING, EMOJI_BASE64_THINK, EMOJI_BASE64_SKEPTIC, EMOJI_BASE64_SKEPTICAL,
                         EMOJI_BASE64_FACEPALM, EMOJI_BASE64_FRUSTRATED, EMOJI_BASE64_PONDER, EMOJI_BASE64_NOTUNDERSTANDING, EMOJI_BASE64_QUESTION, EMOJI_BASE64_CRY,
                         EMOJI_BASE64_TEAR, EMOJI_BASE64_DEAD, EMOJI_BASE64_ZIPPED_SHUT, EMOJI_BASE64_NO_HEAR, EMOJI_BASE64_NO_SEE, EMOJI_BASE64_NO_SPEAK, EMOJI_BASE64_EYE_ROLL,
                         EMOJI_BASE64_CRAZY, EMOJI_BASE64_RAINEDON, EMOJI_BASE64_DEPRESSED, EMOJI_BASE64_ILL, EMOJI_BASE64_ILL2, EMOJI_BASE64_MASK, EMOJI_BASE64_WARNING,
                         EMOJI_BASE64_WARNING2, EMOJI_BASE64_SCREAM]
EMOJI_BASE64_LIST = EMOJI_BASE64_HAPPY_LIST + EMOJI_BASE64_SAD_LIST

EMOJI_BASE64_JASON = EMOJI_BASE64_WIZARD
EMOJI_BASE64_TANAY = EMOJI_BASE64_JEDI


def _random_error_emoji():
    c = random.choice(EMOJI_BASE64_SAD_LIST)
    return c


def _random_happy_emoji():
    c = random.choice(EMOJI_BASE64_HAPPY_LIST)
    return c


'''

M#"""""""'M                             .d8888P dP   dP
##  mmmm. `M                            88'     88   88
#'        .M .d8888b. .d8888b. .d8888b. 88baaa. 88aaa88
M#  MMMb.'YM 88'  `88 Y8ooooo. 88ooood8 88` `88      88
M#  MMMM'  M 88.  .88       88 88.  ... 8b. .d8      88
M#       .;M `88888P8 `88888P' `88888P' `Y888P'      dP
M#########M

M""M
M  M
M  M 88d8b.d8b. .d8888b. .d8888b. .d8888b. .d8888b.
M  M 88'`88'`88 88'  `88 88'  `88 88ooood8 Y8ooooo.
M  M 88  88  88 88.  .88 88.  .88 88.  ...       88
M  M dP  dP  dP `88888P8 `8888P88 `88888P' `88888P'
MMMM                          .88
                          d8888P
'''

'''

90 x 90 pixel images

These images are intentionally a little large so that you can use the image_subsample to reduce their size.

This offers more flexibility for use in a main window (larger) or perhaps a titlebar (smaller)

'''

HEART_FLAT_BASE64 = b'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'

HEART_3D_BASE64 = b'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'

PYTHON_COLORED_HEARTS_BASE64 = b'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'

RED_X_BASE64 = b'iVBORw0KGgoAAAANSUhEUgAAAFoAAABaCAYAAAA4qEECAAAQ5ElEQVR4nO1ca3SV1Zl+3nefSwJ4IQaMXBJU1HIZqwSt1ULAG/VSuXm0hVTrtMvOz+n8mBln1pqU+TNrOqur7ZrlrMrMWJ22dGoUQscbFKtAaylNtK0IbRHIDYlKQTEhOef79vvMj5yPppRLzvlOElzrPGt9a0GSs/ezn+/93r33s9/zAWWUUUYZZZRRRhlllFFGGWWUUXIQEDY16VjzKBRsalICMtY8hoWhAn9UiJ8cGCMRJCMiwtHGz1yaloqa/QNom9vcnCMgAnAk+oqLiNuuTCZ1WQXqRXOHKp/c2F7qfkpy56KoZSZT2bdq5dfP08pWgb14eQXbjjeuvFEAnouphE1NKgCPN6688fIKtgnsxSTTbX2rVn6dmUwl8MexxUXsRqKI4OpPnz8g4x6tSCQbA/MQCARAYP4InNxX+eQzL51LkR1x6X9w5S3wfCqprooASCLpHLI+/K80j/21fO/HfaXgHSvKCKgAPLx69flZGfdohXON/UFgoTcG3jPnPR2kCgGf/rBx+c0C8FzI2ZFwHzYuvxkBn3aQqpz3DLxnaMb+ILC0ui9led43DjU2jheATTG1KnrQEdnDqz99/nirfLQimWjsCwJTET3p76iAGPiBQZeft279y3EIlwofrlqxWGEbFHKBAZSTtDDSxqeS2h8EayuPhV+RZ589HieyixL6jyKvPr/Seh8dl0g09gbhn4k85O+pgJD4QB2XVX5/4ytjkUZOpIvVSxeZlxYRnFLkCGZmE9Ip7c/ZY5W9ub+JI3ZRj4MAPLp06YUVYe9/jHOusS8IvAIKEqe6hBRPUgQXmOeGD1fds3i0J8ho4ju66p7F9Fgvggs8SSHldLxVRPtyOV+ZkC/3TtBvvJPJTBitiBYCQCYzvg8D3x6fTK7u86EHxA3nwySpIgLgSC7EyonPbHyFmYyT5mZfKPFCEPVxLHN3g1O3HkCVkZRBLsNpwY9PJF1vGH57QsX7X8GTW7OFCl5QRDU15ScRDKypcInVfWHgYXAwYjiXEOLNKGRVSm3dkfvvWiDNzb714YeThfAoBK0PP5yU5mZ/7HN3f8pBfiBk1SAHyHB5w+COB0E4TuSvjvWe/4/5Sb0g7YYd0WxqUqxZw6Mr7qxNiLyRcm5c4M0Vk+YJMqUqAe3tQLCqqvnZrXz44aSsXRsU3NiZ+sm3eWTFPQtTjusSkKk5MwqGG8l/yjrp1Oe8HQ8Sbk7V/27sBggRGVZkF3pXqE6qYUIahYPzHAq/IDnvLQmZkvTy/aMr7lwsa9cGzGRShfA5E5jJpGTt2uDoijsXJ4XrEsTUnPeWH0bBnAmQRgFB5cAkERBf/eqwb1hBd5ZNTYrdu9PHwt5XK5y7ZsCbSbz1pU+puiyt27x+YeLGZ19iJpOS5uZcjDYRtXF06d23qLMn0qLTcmYewLDmklO2CViFU816e/288/tuxIxFOVmzxob7+cKEzi9tepcvmedN1yed1g0+irE2IT6t6gJjt1C+PGHjc8/HSSPRZ3uX3nUnhY8lVaZl44vMlKqExnYvfuXEDZteK3SZV7BAUQfv3f3p69IOzU60LmB8sSucc/2hf9fAv6z60abnWuvrk/Pb2goSO/rMkXuW3KWQxysTbvKA97FFToqKp3UY5d4Lf/RCazFr6YIf+2j9O+nZF39p4laG9J0JQIwkSRR5ueNh6FMqk5V4/INlt90xv60tYENDYtiCNDQk5re1BR8su+0OJR5PqUw+HoaepCuWl5FMABLSdw5oYsWFP3qhNVqPF6FbcWgCdA1g7y27vT7pZYMTTA/JWJFNwNKqmjX/nph+/sLnNm1iU5OeLRdGf/P+XUuWUO27aXWTshZv/iDAhIh4oitwXD6pZXNbNOZi2otl8ORNJTt695J5gLU41emhNxOJNUBLqWjg7bCAn7vwuZe2sAkqa049wOh37991y62E/CDptDpnjCcyYQmn6s26AF028dlNr0VjLbbNktmk799x63wKnkk4rQ28NzmN7zHMNi0pooHxiEDvnfj85pdPlRejnx2947abTdicUqkKGFdkWtI5Dbx1KrHywhe2FJWTT0ZJLMvobh++/ebr1aE56bQ25xk3sulExJsdEdqKqhdf2Tp0wCcm5SUNi1Tceud0oo+bukhLOac5bx30vK968092xo3kCCUxdQQwNjVp9eaf7LSE3p8NrSOtojD60xk2Z7uEFG9GB1QZdcO7dy5eOMQXFgE4+DO33gkm5rf2pzWIznoZfVpVs6HvYEI+W735JzvzE19skfMalQ6RefOHOxbdROJ7aXUzSrBRGPSziaMKv7Rq07btAHDkzgULzSdaVDDxTFbnMOHTqm7AfLsIGi964ZWfldrsKvlpBxsaErJ1a3hkycIFZvhupUvUDXjvKeKK7cwAOogQfNepu9szSND0ORVM9PkbURRXAEIOruF92KGKz1dt2rY9GkORdE+JETlWijYO79y24Hah/Gelam2W5onixSZJpyKePAgACplqBEViiAz6tKjrN+s0xZdqNm/7cTEbpeFgxM7vWF+flLa24Mitn2rwxHcqnLs06y1eZJN0eQ+5MD/5JG4YjOS0Uzfg/QEneKhqy0+3RpyLpHdGjOhBKTOzU9K8O/furTc0wBJPpFVnZM08ZHgHBaduND85xVjRgPRpVZc1OwANH5q8ZcfWiGvRbZ4FI3qUJM27c7sys1OTt+zYCtgDAyE7UqKORivKXeUJzlrs52m0lKgbCNlB5QOTt+zYumuERQZG6eg/eiTfWbDgRnW2zqnWBfktcqxdQAEQ5DdCqurNOszrqou3b391JNPFyf2PCqKZ/PCCBdeb881OtDZnVvSKoVBY3ur0tE71LlO9ffvOkVhdnA6jWswSrU0PLbjhelV52kGmBzF3c8PqF2BSRDzYZcZ7L9m+Y+doHAoPxajWw0lzs38qk3GXbN+x0weywhu7Xd5iLXpHd5bLSDpAvLHbB7Liku07dj41yiIDY1SeFdmNHTdeNz+l0uJEp8a1WE+FyOo0stuAZVN++otYVmccjFkdXGTWvL3wmusQJjc4kakeiHsGObR9c4Aa2E2Gy6e8+nprqQyiYjCmBYeRA/fugvp5YSgbVWRaKcQ+ITLZTXLp1B1tBZ/xlRrDPioaSRwPgBRgYMl1sBFftw0TY1Yc3pQv+e26ad4NSePzQtZ60kBqjLNHcHASVE+akLVJ4/NdN827oRSlt3EwJqkjeoy7r7v2k4C0OMFkH9/qPFU/HFzV4F0nWFqz87UdY5VCRl3oaELqvu7aT4LcoCIXj4TIQ/qLxH4HEiyf9stdPx+LSXFUHyVm4ASwg/Ufv0nM1qvg4rOVzsa9opJhFVws5ta313/8JgGMmeIPI4rBqAndWl+flGb4juvnLSDQLCI1oTeClLg5eRg5W0LvKSI1CaC54/p5C6QZvrW+fsSqWE/GqJpK++fPbUiZrnMiUwKzWCflRfEgLamqIfl2oLbqstZdI+pBD8WIC71r9uzU3N27c+3zZt+sXr6bVJ2SY7wT8jggYSkRDWkH4fD56W1vvhxxHMl+R1ToaADd1/zFrd7sibTq1Gzcuov8JBa3jbSI5mjdKvrQtF+9sWWkxR4xoSPiHR//2O2E++80dFqW8Utnoy8kkTTELBlOi7osrFvgv1j3699uHkmxR/RwtmvOnEVe7X/SqtOzxhJUdYqExoMAxCmmhCxFmYG4rFmnM31w+ptvvvKROZyNzPT2WbNuocN3UiLTcyyNyAG5Lwm3IlTvxNiiIrWlEDsl4nJkl3g8NGPPnpfO+XKDpwB3H+APzLlqMSnfS4tMiZuT8UeDqJNiSy/dvfdXAHBg1sxrAdfiRGr9YN6OnbOz5NsibLz0zd+9HI0lBu8/QcmEjnZb7bOuvMWAHyREJ8UuOAQsAagnO0Vs2aV73nqd+fYEsAOzZl5LaosTqQ3ju34+KeJytEOe9rkrf/vW1lLuIEtV5CgCsGvOVYtyoT2dVL0o7hEVAUsCGpAdDG3lzH372ob6FNG/37r88npJ6DNJkbogvtiWGKxi7QmV9121Z+/2UnkjsdeyEZH9H5vZkA3sGQUuylm8HZ+RliQ1MGsHJTNz3762yO2L+o3cuJn79rWBkgnM2pOEGmkxdpE6eGDMGufRsv9jMxtkcDMfOyBLEtH7Z12x0EK2uHwtXEkmJ7MDSdhna/ceOGPpbPS7/VfM+IRH4ocVKnWlmHwdIJ44qglZdtmevduKHk0ecfKnAMD+K2Ys9KG1CDgxHAyLON6FTwFuwPsDZlidF9mdKU8KYE8B7rK97b+AcdWA9wdSgCPpY3kjJAWc6ENr2X/FjIVDx1wMihI6eoz3Xl63yJu0KDkxjguXH6ClATcQ+v1qeOCKfft+/nIDEjKMmf8+wL/cgMQV+/a9ap4PDnh/ID0otjGu60dO9CYtv58xoyHO4UHBdyjKyXvr6haL02YILopdn0z6lKjL0vbTwoeuau/eFufrb7+fMa0Bmng8LXpZjvFq/YjoFRj8Q8Lz3ks7Oop6BUZB4kQd/L6u7gZR/J8TqQ544o0FRYGkT4u4LNkBJw9e+Vb71ji7sxNiz5zRAM8n0yJ1WdJLDLGNHCzAId8zymeuam//RaFiFyRQE6BfnDYt3Z/QnyVFrg1JQxyrk/SpQZG7neILM/d3vrQLSM0FYvkNURtvXVZ7izc8kRKZFpAxq1g5uPQjXksRNz3R0ZErpD5k2CJFhSc51dkgLydpKOhVDH960cwSgBswO6hOHiiVyAAwF8jtAlIz93e+pE4eCMwOJgBHMyuWLwgBaaDN7CdnrwGskHxdSEQrAb5WU1M7IZV4IylSGYBFlSuQg19v88TBQINVc9p7trUCyflASc2cqM3fzahZqJZcp4KpQQwvPAkJA2N/EPq5cw4d6srPS8OK6kI6NACo7+npEMq3EkRCPEMaUchlRiYIDb31GML7R0pkAJgPBK1A8qr2nm2e4WdDbz0JQs3IQnmLZ5gkEwQfm3voUOdXCxAZKG6lIAfq6tLHffBPE0Qf6S/gW1cEmADEgE4PuX/2wYM78uvkkX3VT76P3VOn3uDAHypQGxa2UvLjRFyv8d8tCP5h7nvv9WEkVx1D0VqP5PhDU9aMV32k18wr4M7UcySyJ7uCBFdc3dUzqrVwUV+/mV4zPxnKeicy/Wxi50PWj1d1/WbfGqf6SG13d38x/ReVqwjI/DYEfZdc0tQXhv8yXsQZT//lTZJ0g7ut7gBYfnVXT2vTKNdWSH7yurqrpzUAlnuyOzG4iz1tybCRfryIOx6G39Rx4/6utru7v9jdYRx3TfKGS+K3NTX/PE7kkd5T26L5qk50BcCKq3tGN5JPwXswsmtq5ieADQ6Ydio/m4BNENHj5DddT8/fXwlk4zh5Ra+Bow4FCPt6epqOkf86DlCSln93B400R6o36xwisoyVyHm+RkCu7ulpFWB5aNblyMj1Y567VQLaS36zJ51+5Eogi5h2aUls0vlAkJ4woamP/FYloI4UR0oqL3JO5L6re06ki9jeblxEnsWsnp7WQCTjzTpT5AnelYAeB/5t9tSpf7u4o2OAJ75rNMaI8lYnUPmb6uqv7amuPrxr0qT335g06bVdVVXXA4MbnrFl+eeIOL1ZVfWJN6qrX39j0qT391RXH/5NdfXXXgVK+lrjEcGvq6qm7brggmui/5/LZIdwkzerq6/9dVXVtDElNFxwSORycDd5zoocgYCczHss+QwbBORcTBVnQ9NHJDDKKKOMMsooo4wyyiijjDLK+Cji/wF6UgmmVAL7cgAAAABJRU5ErkJggg=='

GREEN_CHECK_BASE64 = b'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'

LICENSE_GRAPHIC_BASE64 = b'iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAC8VBMVEVHcEz931z/5Vzgx1s7fK9ZWVT/4FwFAApxdXjq9cn421z/6Vy2uXhKgqXmzFvt0ls/SVbx1VuFn4z83lv/31zmy1tKbIdSU1g6fbJbUVNZWls6eq/ozlv22Vr421vy1lv/4lxMTlJZU1E8eqtAdqFYVVH53VxZV1VNTFA8e61ER1U0OVU3eK7u01zz11tQUlXz1ltQU1NRUlhFSVj43Fw7e694cltaVlJva1tTVVplY1pbi57lylr/4Vvrz1riyVvBrVtDc5pbWldUYm5UYGnr0Vv/5FzdxVtMT1n111k9d6VjYVlWVVVbWVfQulw6eayOiWLQx25AbJPnzVtaWlvcxFpbV1X/5VtTVVdRU1lsaVs8c6JTVFn/5Fy1pFw6PlRhYFuGflz/4lxNT1adkFqYjV1HcJBoZl1TUVRUWmDh0Gf83lxdU0xQUllZWVpcXFpZWFdTVFhlY1tZW11cWFVLTllLTlhCaYzz2FuQhl5GSVuYkGFCdJ1uk5XjyFrXvlqqnl5ZWFg9eahdWFakmV5+gWhVXWRcV1NSY3BNUFlkc3NcXFpZW11bW1s+d6NiYFpVXmRxbVm7qFpPZXRaVlZpZVtLTllZWlpWX2X/51xPZHKfrYJaWFhGaYVcV1L53ltacHlWX2dZWlyutXldXFpiYFmJoYpGf6ZEbI3fx1nNxW6CeltESFaDe1tCRla/vnNoZlrNtFdybFpwbFrFwXHRuFY8b5xhamhNVWGjlVo5Z5JQVmBRaHjk0WZ+m47VyGtskpb/5LH+fF3/4F3+310+fK3/4V3/4l3/313/5F0+fKz+4F3+4a7/41r+3l3/4ls9fa49fK7+4Fw3eK/z11zx2WD83l09frD/5V2BeV39313/41xFcZOVil04ea9Pa4FLboqkll2pm12OhFzOuFzJtF1jYmJBfKpPan/Wvlz/41/EsFuLgVuJdl7/5liJgmEzdrD/4F5QZndUZ3a7qF1ObIXw2GFSZHFHc5XRvF7Ru14wNIP7AAAA8XRSTlMA/v3+/Af+AQIB/vv+/f/5EP38/v71+2H7A8L+/vz7+/4eJ/n7Ff5bLf4ZFf7++g73CoJG+fr+Uf6q4/37/fr6/P5n/Pv+/vlz9/rURLb+/vj+/vrm/KH7PJPt+aT8/jHq/vsl/f/95Bj6/vpArr7eq8Xx0X9kWv39/Wj5+Pzx8PaI+qf1+uNv8bn5y+Cs9trI9PvYdu566+336fuS/Db0+ffY+8TF/Pz2/f7ySvBQ/cj42tn8+PDy+/z95/L++/38+f/////////////////////////+///////////////////////////////////+qPzBYAAABwRJREFUeJy1V3dUU1cYvyEh7yWpDMPwISPIlj3CEpGlQAHFah1V3DhatdaJ1tbWttph9957773HOffm3pf3TghBGkIelOmsR7uHf/U+UhA4SUB7+p3zkjve9/vG+8a9APzPxDD/jX3456KJZTlWZg0IkBHohL0E0RqQnlVTkxVABxdLDKh9pCqbS9/ScexYx5YALrvqkdqLMUUDErb3d91fcEdHsE4X3HFHwf1d/dtDJ6oIw3Hc2prfns2Z1dcb7IOQT3Bv36ycZ3+rWUs3JqDF4Cu7zkQ4SMMahRrxPFIr1jQQR2T/vuFt77Rx9659L/+4BiGEMc8Tiaf/dLLmx5f37do9fTwEBiSG5e491+XnaIYQIR76+0NeRHRs9ms8tzc3LNE7AgN8Cxr9mwIDtRgGYa3SiW+8EYtKLQ5SY21gYJN/Y4GvVwQGJBfO1RFJgjhtgaSP4KFez/MRemlBFIaSRHRzC70bwWqSN5z3cTZjoo7yIxBDiOUHEr9UNcHNzjl/b0jWeI/JlasGHE4yu1iNCQ+HiSdYXTybOB0Dq1Z60Z8BS5Z/uO5KySn5FxvgGDIUF9ONK9d9sHyJpxTVgNCHe0/F23kDDgoayw9hUBAx8Pb4U70PhzJuY5IBG69d8bgPxGhBGh7LLdIHRy0QMWx4fMW17h3JgsSrKuc4oSiGR43lR9hitcI0PyRC55zKq1YCd45kwPTCuT4IYsk80n+D/NY/nnzyDys2Sxg2+8zdEO0BgFvaeA2G2lT9WPnW7yenzHvxLNKnaiG+Zt1SD8HEgux8pRmnVlIUashI+ZPnHZ30keXn+MpUbFbmZwPOvRPjClanEV4yywZgLI6QPy9l0mWtNBzMEk/SzmyJc6cBTYPlHcENvEJrp1zW+HgruiD/h0mXWeWJXavgG4I7lruzgQWhubR+kMgD/hKyfj35m6stziH5Mn8rgkjyPxBJUENwbqgbL3JgaV8DQlCfEYmdZ19M+em7qy3IxX9U5h+0KydDT5N8cd9SNwAsqFqdYaBqmwlElm9n/JBCEexD+re67CFmqpMhY3WVGwDqw7CuDDWCEZEY8tb5M1IowtnvR/HjyAiI1NVdYR68uPa6rhwysyhcQrDVIiPcMP8V2f8u/alsKbxoJslpvG6t+zjg5Dhw0GiVX0eWN2YcTXpVOPoq5R/OaigihzL/LQ9xwHBZ/TlEdGUOdFKEFNMI/V0pJZKc/izObT7TcnbvMR2CRFmsHlSYWvHTKH51sZI6WHfs3mTP2Wim3z5C63rfaZn/yrutcJgfQm0EXTV7ykYWRK8q0Rl4GsWSKx2R1WK9wE1bBC2QvEFXssp9NgKGzcotCacvKYr8CHLZPCKliF+RAmKDX0lulocOR7Mh9K43VyiJIrANS2NrioTbAhWScsXbd4V6aw0B72wfcCCJYthHlzV7oIJIyDFQmB3gkVk2AgQUnveRM4J2IzIMQYfxSr1IO/X5mnTAeuksDDN9w/k5ToogwZlFbUQUaeyIpK1IDWmbwUh36r1kr8euodZ2mgad2r/JET5rpnpWuKOpmH4Eu90uNvU+NV5vlJtrW1ubXo6bIBKVgXFaFG2ttDvP7lv3+d6Xpo1zTtGAxJdyz6w+V+nTzCPa1gc7Ix3wyDDw6Wdbd7uPwdE6TK/6cs8X1+tP/0ybNKanhGYsSQbxtLb+k9/rNO4jaBRxIO8rwfjc+4vV1SUPZEjNzVLGAyXV6sUfP2eMfT5hAgBMZt3vRtuyO2+96baQp+urHY7q+qdDbrvp1juX2Yzd23zHPalxoPax/SrBtuyKK5ZNnbqn/vXX6/dMnSrPbIKq9LHN46lAi8JTJ2NaTKaW9vZ2wZT0Wn7+a0kmgc7omi2m+2b3peACsWDaoVKVYDKZBPojtO/ftGl/u+CamUyq0kPTxlGBYR46ebDF9C8JSevDwtYnCUPTlsvLH/KuAQvidvylGsHwZ0Len5e3DC8Ye3bEeVWBHpKfj7UJNpuLwdj5wsa4HZ1G18xGN2IrEryFIu3wdT1TklRGo0qWZ4v5daeG2flrjE1WQV61Temp47wEIwtqHw05caI05GTIQZsgqDoXPgPAM0c6VYJgOxjSHVJ64kTIo7WebWAY37uPb3riwfvqblm4nnrC2L2I02jYRd1Gk6Bav/CWuvsefGLT8bt9vfgxPaEsb3NidCY4XB6blBR7ex69+oC82+Vx+WGQGZ24Oa8sIX2chJJ9xGZu+yVmSk9Ypnwk9N3aMyXml22ZE7pvsBy9XjG0tE070nlPeZksiwFl5fd0HqERRNfl/YngyMeNigp6HmRljTa+UFFRNoE8HEkM67vo+M2D5ZPK3Xl8UabmIq+P1IitS1xSWbBk63gp4E4HEB0wNE6PvpTrK+NxcgkI/+0G7p3+AR7W83QCoHFGAAAAAElFTkSuQmCC'

TRIAL_GRAPHIC_BASE64 = b'iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAC91BMVEVHcExEP0D42lz111s8e6xHSEg+eqo0NDT/4Fz93lw+d6VSUVFOZ3pMaoFSZXTexVtVVFWCe11UVFjJtFr73VtWV1paW1taWln+4Fvv0ltVVFT/41xVVVZHa4dbWlpaWlrnzFvQultBdZ9VVFVaWllZWVqKgVtXVldZWVo7e65XVlZXV1hualpCc5o9eqpaWls/d6NZWVlVVVdZWFhYWFhGb49IbYtVVVhGcpTawVpEcZTpzltZWluWi1tWVlhnkJhXVlevn1rjyVuklltWXmSckFs5bZhnZFvhx1tYV1dBdZ1ZWFlqZ1pWXmUCAgNIgKWZqoQoAABRYm9kYVpRUlm8qVpPa3/WvltPhaO8vHQEBAS3pVt7dVpmdXKqm1rItFvRulvHw3KunlyIoIq6BAH3AQEAAABQUlmak2EAAABRUllibWx2fmz/AAD9AABabnaGhmXHAgJTYGtQUlnCr1sAAAABAQEAAAACAgIAAABRYm14cln7DANWXWIAAABqZ1q3OTX6AAC3a1DHUT1MTVQoMS/pAADvAAD0AwR9AQGrAAAoTGXcCwuZdXzBKCkrFRYAAABHWVwAAACgkEP3AwPNAADAi0OlAABPAACLEhV+Uk6mWzeYAABmAAAwMDNEAAAGBgbjBgYSEhIzMzP/AK7/fF3/4F3/AAA+fK3/313/5F0AAAD/4l08fK//4Vv/5l373Fzv01rs0Fz011o8fbA6eq7FsFpXYmpgYF2hk1u/qEZzcF7RAADOtUudAQBrAAB8d14PDQYuKRFZX2PixlIkIA7/mDz+XSK3pVrl0mbYwFteVCU/OBeRh1oGBgWbiTmwm0D1AQI2MBbqzVWEczD9vE2PfjV2aCtZWFf1iDbqAACkkDz6NRHZvU7eBAJWSh/zUB/+di1LQRv8IggYFQr/zVSOAQFCAQAJERcgP1dpXCd9BAOpBAHncTEmAABYAQL7sEcpV30ZMEGVHgxvKBIRHCTom0LZNSN4Z4+uLA89PzeIUCFLFhoRXZguAAAA9nRSTlMAEPz4/gr9A/7+/Bn8/P79MP5A/fy3/N749SL8OPz1zPb++yql1f5K7vtUm/769sL0rl2DjPz0av718vzm/nH8ZP7+/fr8//7xefCV8vIt/f0c+Oa/+vPy/f5n9vn7+/D1/vf8/nyak/WAzfz7RLz6+v7mgfNO7z3R39Lp+t/Byfne/f6i+S1hpuHx/p7+zryp/bb9xz/86cSZ4fvjzt7xsM6jS/7///////////////////////////////////////////////////////////////////////////////////////////////////////////6X+Y3eAAAF1ElEQVR4nO2X7U9TVxzHW9rS3lJaKZXR0kdpi1QpCFSBWnUYccyqQ53BiAbnNhlxkWH2ZGLcXixZTLbEd4t/wDm9pWW3pYUqgqAys2KZbj5Gnbq5JXtIzBaXvdib/c5podhH8N2S/V70ntue7+ee83u6pzze/5bbNGa326x5Lmn9ocZ6vsYQi0Zjlkp+feOhevGi9Ef1LldXb69VLZGoY729XZtc+obF6LU7u1Uqwd79aglCEvWLewUqVfdO7SIA7TGORcjnQ/DJkitiudjRBYr5WqXtxDCDqFEANab0hE2p5S9Ab3aXTMSCVO1jkVpAL2AB10SJ25yfsKVEEXQGOaqP+nwvNftQlBJUwWBQUbIlLyBS6qVLVhkRK2FZn4+FCzIW0C+9pZH8gGEv3XZBK5pnrQXUId7hCE/8Mc6lrywDAHIGmTnvJXzJBIEIgMoPcA6Acpd7owmCphYwKMUYgRMCa9rofi8HYM3mM+AzNk1MjbuHGciJ5qkcgMirFcThQVUG/S2McZCE5kJ2gGjU6Jvz2DPGoqEBAFwi4ysYi7IAxKMK3zPZF7fLCA1yJeP4GsZsHJC1MFdsgmdzgfk+uPsbyAa/Xv8XxrCGryDBHpzDb2cD2CbA0wWK+S745jzGoBfOYDz1OsZDCE1nB4gtruTumXvwwDiAWy9se4LxXVjCTwj9Op4VsMIqgPonNcw9xNQQugqqg8LwLxjf4SbpN9fH8ed0+qep+iq3AIKo6jbeiKvPYfwInQVAobBzikj/gS9V6Pp5/JGN9wZOj+a62JckZdXfEvXTP2SPf8eXWQIId+6Bzx8Ti4JNJYapgA1d5QiWHoDJN/d0hoWnxvGjwTGygj1nx6niZwp4QsfX3kxrDfzT9BcGJIg50Bn+E/zPHYa7VwanyQ8PxqZJNpE14S/eT80FKFJi79xSOQkAQn8b478PrG+juEkaQDQ0QwCTn6S3pW3xTeHNkAdokkhoGIR2IQXcf0J8CAk6PXBtzDlRnx5AqHF8EqaSTGQnEzT8WdgTriGA6xjfI3rfd2c5pDpjzgA4+VbHNpgahTxAj2cBeHt4O/E/ggIkTRIZFfAhia5MB3SQbcBUUo3sFHHFzRni8oMHOAIYSOyAUZFqMo5mbs0dMK27AtKQJA2Lxma+B8IgFQ885WYrlEUVzSszVyMBlJjUXtIxyGuBpD6+A4CHaIhqA07wgldtsq7KqKeABre1VHEhHjNEo45u3p8tr6EA8ilKre6GoswA/gBJTujKV0gYyRpuPRhLdpYg8a93eHn204KIAuC98MM5jCSK1K6moIDSnVn1PN4sADrGDfCWpDVAnw/lHWiV0CHrNVlyAGbmAFdpRxEUoFYjw0DwC0ifgLe8T+BqzAGIvzFWWccucVy8LbLAQCpB3BGB/Wc2Wi3ZGjKYOA7QWLpiMZcz/c2kGD21a00OPY/3ISYJydO0r9XpXmNSTyhMT4suQxHMt3c74ldtf7V9n9HrrWg2lZNnl5uay71e9T67fe2Cjkkis8zvlx7p6Tms0/WRU1qfTne4p+eI1BOSmRdy1luytcbj8Uvb2qTVQkdfNNrnEFbDnd3v8dT0L8mvFzfIpB4wvx8UwpaV7hZh4sbjKZS151+CaGuT0DNr/pay2y3+uVthzfGcYaC2QS71JM1RW+uYd7tsJEM7S9nBC02hpKBOXqUcqUveVxdb8u3BdvHl5JKrHcdFIoujOrmlZRer8gAMxTA9FIpDpPJ1cO5J7MkfCpElGPJ4oGy1VFqzW1ZcSD1ggeovMlAvFBbLdtdIC1eXbcilFxki+v5jS81bljtgDSF5o5jEVQ6P9juWrzAvPdavjxhynXb5SqW2UlMkEreP1Pk99n6autp+u8dfN9IuFhVpKrVK5QIO3PDY2hF7qGkpdbl4VVPILq9d3D8WHl/vsMtt8bFNbnfoF/Tc+WYb2aGfHet35E+gdDNHzBmGizCNYS5nqgzP9ddPNFc4okU74D9l/wK32773g6nxAgAAAABJRU5ErkJggg=='

"""
    MM"""""""`YM                   dP
    MM  mmmmm  M                   88
    M'        .M .d8888b. .d8888b. 88  .dP  .d8888b. .d8888b. .d8888b.
    MM  MMMMMMMM 88'  `88 88'  `"" 88888"   88'  `88 88'  `88 88ooood8
    MM  MMMMMMMM 88.  .88 88.  ... 88  `8b. 88.  .88 88.  .88 88.  ...
    MM  MMMMMMMM `88888P8 `88888P' dP   `YP `88888P8 `8888P88 `88888P'
    MMMMMMMMMMMM                                          .88
                                                      d8888P
    M""M                     dP            dP dP
    M  M                     88            88 88
    M  M 88d888b. .d8888b. d8888P .d8888b. 88 88 .d8888b. 88d888b.
    M  M 88'  `88 Y8ooooo.   88   88'  `88 88 88 88ooood8 88'  `88
    M  M 88    88       88   88   88.  .88 88 88 88.  ... 88
    M  M dP    dP `88888P'   dP   `88888P8 dP dP `88888P' dP
    MMMM
"""


def __pip_install_thread(window, sp):
    window.write_event_value('-THREAD-', (sp, 'Install thread started'))
    for line in sp.stdout:
        oline = line.decode().rstrip()
        window.write_event_value('-THREAD-', (sp, oline))



def execute_pip_check_package_is_installed(package):
    """
    Checks to see if a package is installed.  Note that currently the interpreter cannot chosen.
    The check will happen using the currently running version of Python

    :param package:     The name used on the import statement, NOT the name used to pip install
    :type package:      str
    :returns:           True is the pacakge is able to be imported
    :rtype:             bool
    """
    try:
        __import__(package)
        # print(f'{module} passed')
        return True
    except Exception as e:
        return False

    return False        # shouldn't get here


def execute_pip_install_package(package, interpreter=None, force_reinstall=False, upgrade_pip=False):
    """
    Pip installs a package using the currently running interpreter

    :param package:         The name of the package to install
    :type package:          str
    :param interpreter:     The interpreter to use for the install. If none specified, then the currently running interpreter is used
    :type interpreter:      str
    :param force_reinstall: If True package will be uninstalled before installing
    :type force_reinstall:  bool
    :param upgrade_pip:     If True pip will first be upgraded
    :type upgrade_pip:      bool
    """


    if interpreter is None:
        python_command = sys.executable  # always use the currently running interpreter to perform the pip!
        if 'pythonw' in python_command:
            python_command = python_command.replace('pythonw', 'python')
    else:
        python_command = interpreter

    if '#egg=' in package:          # if this is a long pip string with a security token, get the pacakge name from the string
        package_name = package[package.index('#egg=')+5:]
        for i, char in enumerate(package_name):
            if not char.isalnum():
                package_name = package_name[:i]
                break
        # package_name = package[package.index('#egg=')+5:-1]
    elif '.whl' in package:
        if '/' in package:
            file_name = package.split("/")[-1]
        else:
            file_name = package
        package_name = file_name.split("-")[0]
    else:
        package_name = package

    # If need to upgrade pip, do that first by calling our own function recursively
    if upgrade_pip:
        execute_pip_install_package('pip')



    layout = [[Text(f'Installing {package_name}', font='_ 14')],
              [Multiline(s=(90, 15), k='-MLINE-', write_only=True, expand_x=True, expand_y=True)],
              [Push(), Button('Downloading...', k='-EXIT-'), Sizegrip()]]

    window = Window('Pip Install PySimpleGUI Utilities', layout, finalize=True, keep_on_top=True, modal=True, disable_close=True, resizable=True, font='courier 10')

    window.disable_debugger()
    mline = window['-MLINE-']           # type: Multiline



    mline.print(f'Installing {package_name} with the Python interpreter =', python_command, c='white on purple')
    pip_command = f'-m pip install --upgrade --no-cache-dir {package} {"--force-reinstall" if force_reinstall else ""}'
    sp = execute_command_subprocess(python_command, pip_command, pipe_output=True, wait=False)
    window.start_thread(lambda: __pip_install_thread(window, sp), end_key='-THREAD DONE-')

    while True:
        event, values = window.read()
        if event == WIN_CLOSED or (event == '-EXIT-' and window['-EXIT-'].ButtonText == 'Done'):
            break
        elif event == '-THREAD DONE-':
            mline.print('\n')
            __show_package_version(package_name, mline, python_command)
            mline.print()
            mline.print(f'Done Installing {package_name}.', c='white on red', font='default 12 italic')
            window['-EXIT-'].update(text='Done', button_color='white on red')

        elif event == '-THREAD-':
            mline.print(values['-THREAD-'][1])

    window.close()

def execute_pip_get_pypi_package_version(package):
    """
    Returns the newest version number of a package located on PyPI
    :param package:     Name of the package
    :type package:      str
    """
    try:
        url = f'https://pypi.org/pypi/{package}/json'
        response = urllib.request.urlopen(url)
        data = json.load(response)
        return data['info']['version']
    except Exception as e:
        return 'error'


def __code_that_prints_version_pre_38(package):
    return f"""
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)
import pkg_resources
try:
    ver=pkg_resources.get_distribution("{package}").version.rstrip()
except:
    ver=' '
print(ver, end='')
"""

def __code_that_prints_version(package):
    return f"""
import importlib.metadata

try:
    ver = importlib.metadata.version("{package}")
except importlib.metadata.PackageNotFoundError:
    ver = ' '
print(ver, end='')
"""


def __show_package_version(package, mline, interpreter):
    """
    Prints the version of a package to the Multiline element provided

    :param package:     Package to get version of
    :type package:      str
    :param mline:       Multiline element that will be output to
    :type mline:        Multiline
    :param interpreter: The interpreter to use
    :type interpreter:  str

    """
    # interpreter = execute_py_get_interpreter()
    mline.print(f'{package} upgraded to ', end='', c='red')

    if sys.version_info.major == 3 and sys.version_info.minor in (6,7):  # if running Python version 3.6 or 3.7
        pstr = __code_that_prints_version_pre_38(package)
    else:
        pstr = __code_that_prints_version(package)
    temp_file = os.path.join(os.path.dirname(__file__), 'temp_py.py')
    with open(temp_file, 'w') as file:
        file.write(pstr)
    sp = execute_py_file(temp_file, interpreter_command=interpreter, pipe_output=True, wait=False)
    for line in sp.stdout:
        oline = line.decode().rstrip()
        mline.print(oline, font='_ 10 bold')
    os.remove(temp_file)






# MM'"""""`MM oo   dP   M""MMMMM""MM          dP          M""M
# M' .mmm. `M      88   M  MMMMM  MM          88          M  M
# M  MMMMMMMM dP d8888P M         `M dP    dP 88d888b.    M  M .d8888b. .d8888b. dP    dP .d8888b.
# M  MMM   `M 88   88   M  MMMMM  MM 88    88 88'  `88    M  M Y8ooooo. Y8ooooo. 88    88 88ooood8
# M. `MMM' .M 88   88   M  MMMMM  MM 88.  .88 88.  .88    M  M       88       88 88.  .88 88.  ...
# MM.     .MM dP   dP   M  MMMMM  MM `88888P' 88Y8888'    M  M `88888P' `88888P' `88888P' `88888P'
# MMMMMMMMMMM           MMMMMMMMMMMM                      MMMM

def _github_issue_post_make_markdown(issue_type, operating_system, os_ver, psg_port, psg_ver, gui_ver, python_ver,
                                     python_exp, prog_exp, used_gui, gui_notes,
                                     cb_docs, cb_demos, cb_demo_port, cb_readme_other, cb_command_line, cb_issues, cb_latest_pypi, cb_github,
                                     detailed_desc, code, project_details, where_found, priority_support_code):
    body = \
"""
## Type of Issue (Enhancement, Error, Bug, Question)

{}

----------------------------------------

## Environment

#### Operating System

{}  version {}

#### PySimpleGUI Port (tkinter, Qt, Wx, Web)

{}

----------------------------------------



## Versions


#### Python version (`sg.sys.version`)

{}

#### PySimpleGUI Version (`sg.__version__`)

{}

#### GUI Version  (tkinter (`sg.tclversion_detailed`), PySide2, WxPython, Remi)

{}
""".format(issue_type, operating_system, os_ver, psg_port, python_ver, psg_ver, gui_ver, project_details)

    if priority_support_code:
        body += \
f"""

## Support Code

Priority Support Code {priority_support_code}
"""


    body2 = \
"""


---------------------

## Your Experience In Months or Years (optional)

{} Years Python programming experience
{} Years Programming experience overall
{} Have used another Python GUI Framework? (tkinter, Qt, etc) (yes/no is fine)
{}

---------------------

## Troubleshooting

These items may solve your problem. Please check those you've done by changing - [ ] to - [X]

- [{}] Searched main docs for your problem  www.PySimpleGUI.org
- [{}] Looked for Demo Programs that are similar to your goal. It is recommend you use the Demo Browser! Demos.PySimpleGUI.org
- [{}] If not tkinter - looked for Demo Programs for specific port
- [{}] For non tkinter - Looked at readme for your specific port if not PySimpleGUI (Qt, WX, Remi)
- [{}] Run your program outside of your debugger (from a command line)
- [{}] Searched through Issues (open and closed) to see if already reported Issues.PySimpleGUI.org
- [{}] Upgraded to the latest official release of PySimpleGUI on PyPI
- [{}] Tried using the PySimpleGUI.py file on GitHub. Your problem may have already been fixed but not released

## Detailed Description

{}

#### Code To Duplicate


```python
{}


```

#### Screenshot, Sketch, or Drawing



""".format(python_exp, prog_exp, used_gui, gui_notes,
           cb_docs, cb_demos, cb_demo_port, cb_readme_other, cb_command_line, cb_issues, cb_latest_pypi, cb_github,
           detailed_desc, code if len(code) > 10 else '# Paste your code here')

    if project_details or where_found:
        body2 += '------------------------'

    if project_details:
        body2 += \
            """
            ## Watcha Makin?
            {}
            """.format(str(project_details))

    if where_found:
        body2 += \
            """
            ## How did you find PySimpleGUI?
            {}
            """.format(str(where_found))
    return body + body2


def _github_issue_post_make_github_link(title, body):
    pysimplegui_url = "https://github.com/PySimpleGUI/PySimpleGUI"
    pysimplegui_issues = "{}/issues/new?".format(pysimplegui_url)

    # Fix body cuz urllib can't do it smfh
    getVars = {'title': str(title), 'body': str(body)}
    return (pysimplegui_issues + urllib.parse.urlencode(getVars).replace("%5Cn", "%0D"))


#########################################################################################################

def _github_issue_post_validate(values, checklist, issue_types):
    issue_type = None
    for itype in issue_types:
        if values[itype]:
            issue_type = itype
            break
    if issue_type is None:
        popup_error('Must choose issue type', keep_on_top=True)
        return False
    if values['-OS WIN-']:
        os_ver = values['-OS WIN VER-']
    elif values['-OS LINUX-']:
        os_ver = values['-OS LINUX VER-']
    elif values['-OS MAC-']:
        os_ver = values['-OS MAC VER-']
    elif values['-OS OTHER-']:
        os_ver = values['-OS OTHER VER-']
    else:
        popup_error('Must choose Operating System', keep_on_top=True)
        return False

    if os_ver == '':
        popup_error('Must fill in an OS Version', keep_on_top=True)
        return False

    checkboxes = any([values[('-CB-', i)] for i in range(len(checklist))])
    if not checkboxes:
        popup_error('None of the checkboxes were checked.... you need to have tried something...anything...', keep_on_top=True)
        return False

    title = values['-TITLE-'].strip()
    if len(title) == 0:
        popup_error("Title can't be blank", keep_on_top=True)
        return False
    elif title[1:len(title) - 1] == issue_type:
        popup_error("Title can't be blank (only the type of issue isn't enough)", keep_on_top=True)
        return False

    if len(values['-ML DETAILS-']) < 4:
        popup_error("A little more details would be awesome", keep_on_top=True)
        return False

    return True


def _github_issue_help():
    heading_font = '_ 12 bold underline'
    text_font = '_ 10'

    def HelpText(text):
        return Text(text, size=(80, None), font=text_font)

    help_why = \
        """ Let's start with a review of the Goals of the PySimpleGUI project
        1. To have fun
        2. For you to be successful

        This form is as important as the documentation and the demo programs to meeting those goals.

        The GitHub Issue GUI is here to help you more easily log issues on the PySimpleGUI GitHub Repo. """

    help_goals = \
        """ The goals of using GitHub Issues for PySimpleGUI question, problems and suggestions are:
        * Give you direct access to engineers with the most knowledge of PySimpleGUI
        * Answer your questions in the most precise and correct way possible
        * Provide the highest quality solutions possible
        * Give you a checklist of things to try that may solve the problem
        * A single, searchable database of known problems and their workarounds
        * Provide a place for the PySimpleGUI project to directly provide support to users
        * A list of requested enhancements
        * An easy to use interface to post code and images
        * A way to track the status and have converstaions about issues
        * Enable multiple people to help users """

    help_explain = \
        """ GitHub does not provide a "form" that normal bug-tracking-databases provide. As a result, a form was created specifically for the PySimpleGUI project.

        The most obvious questions about this form are
        * Why is there a form? Other projects don't have one?
        * My question is an easy one, why does it still need a form?

        The answer is:
        I want you to get your question answered with the highest quality answer possible as quickly as possible.

        The longer answer - For quite a while there was no form. It resulted the same back and forth, multiple questions comversation.  "What version are you running?"  "What OS are you using?"  These waste precious time.

        If asking nicely helps... PLEASE ... please fill out the form.

        I can assure you that this form is not here to punish you. It doesn't exist to make you angry and frustrated.  It's not here for any purpose than to try and get you support and make PySimpleGUI better. """

    help_experience = \
        """ Not many Bug-tracking systems ask about you as a user. Your experience in programming, programming in Python and programming a GUI are asked to provide you with the best possible answer.  Here's why it's helpful.  You're a human being, with a past, and a some amount of experience.  Being able to taylor the reply to your issue in a way that fits you and your experience will result in a reply that's efficient and clear.  It's not something normally done but perhaps it should be. It's meant to provide you with a personal response.

        If you've been programming for a month, the person answering your question can answer your question in a way that's understandable to you.  Similarly, if you've been programming for 20 years and have used multiple Python GUI frameworks, then you are unlikely to need as much explanation.  You'll also have a richer GUI vocabularly. It's meant to try and give you a peronally crafted response that's on your wavelength. Fun & success... Remember those are our shared goals"""

    help_steps = \
        """ The steps to log an issue are:
        1. Fill in the form
        2. Click Post Issue """


    t_goals = Tab('Goals', [[HelpText(help_goals)]])
    t_why = Tab('Why', [[HelpText(help_why)]])
    t_faq = Tab('FAQ', [[HelpText(help_explain)]])
    t_exp = Tab('Experience', [[HelpText(help_experience)]])
    t_steps = Tab('Steps', [[HelpText(help_steps)]])

    layout = [[TabGroup([[t_goals, t_why, t_faq, t_exp, t_steps]])],
              [B('Close')]]

    Window('GitHub Issue GUI Help', layout, keep_on_top=True).read(close=True)

    return


def main_open_github_issue():
    font_frame = '_ 14'
    issue_types = ('Question', 'Bug', 'Enhancement', 'Error Message')
    frame_type = [[Radio(t, 1, size=(10, 1), enable_events=True, k=t)] for t in issue_types]

    v_size = (15, 1)
    frame_versions = [[T('Python', size=v_size), In(sys.version, size=(20, 1), k='-VER PYTHON-')],
                      [T('PySimpleGUI', size=v_size), In(ver, size=(20, 1), k='-VER PSG-')],
                      [T('tkinter', size=v_size), In(tclversion_detailed, size=(20, 1), k='-VER TK-')]]

    frame_priority_support = [[T('Priority Support Key'), In(size=(20,1),k='-SUPPORT CODE-')]]

    frame_platforms = [[T('OS                 '), T('Details')],
                       [Radio('Windows', 2, running_windows(), size=(8, 1), k='-OS WIN-'), In(size=(8, 1), k='-OS WIN VER-')],
                       [Radio('Linux', 2, running_linux(), size=(8, 1), k='-OS LINUX-'), In(size=(8, 1), k='-OS LINUX VER-')],
                       [Radio('Mac', 2, running_mac(), size=(8, 1), k='-OS MAC-'), In(size=(8, 1), k='-OS MAC VER-')],
                       [Radio('Other', 2, size=(8, 1), k='-OS OTHER-'), In(size=(8, 1), k='-OS OTHER VER-')]]

    col_experience = [[T('Optional Experience Info')],
                      [In(size=(4, 1), k='-EXP PROG-'), T('Years Programming')],
                      [In(size=(4, 1), k='-EXP PYTHON-'), T('Years Writing Python')],
                      [CB('Previously programmed a GUI', k='-CB PRIOR GUI-')],
                      [T('Share more if you want....')],
                      [In(size=(25, 1), k='-EXP NOTES-', expand_x=True)]]

    checklist = (('Searched main docs for your problem', 'www.PySimpleGUI.org'),
                 ('Looked for Demo Programs that are similar to your goal.\nIt is recommend you use the Demo Browser!', 'https://Demos.PySimpleGUI.org'),
                 ('If not tkinter - looked for Demo Programs for specific port', ''),
                 ('For non tkinter - Looked at readme for your specific port if not PySimpleGUI (Qt, WX, Remi)', ''),
                 ('Run your program outside of your debugger (from a command line)', ''),
                 ('Searched through Issues (open and closed) to see if already reported', 'https://Issues.PySimpleGUI.org'),
                 ('Upgraded to the latest official release of PySimpleGUI on PyPI', 'https://Upgrading.PySimpleGUI.org'),
                 ('Tried using the PySimpleGUI.py file on GitHub. Your problem may have already been fixed but not released.', ''))

    checklist_col1 = Col([[CB(c, k=('-CB-', i)), T(t, k='-T{}-'.format(i), enable_events=True)] for i, (c, t) in enumerate(checklist[:4])], k='-C FRAME CBs1-')
    checklist_col2 = Col([[CB(c, k=('-CB-', i + 4)), T(t, k='-T{}-'.format(i + 4), enable_events=True)] for i, (c, t) in enumerate(checklist[4:])], pad=(0, 0),
                         k='-C FRAME CBs2-')
    checklist_tabgropup = TabGroup(
        [[Tab('Checklist 1 *', [[checklist_col1]], expand_x=True, expand_y=True), Tab('Checklist 2  *', [[checklist_col2]]),
          Tab('Experience', col_experience, k='-Tab Exp-', pad=(0, 0))]], expand_x=True, expand_y=True)

    frame_details = [[Multiline(size=(65, 10), font='Courier 10', k='-ML DETAILS-', expand_x=True, expand_y=True)]]

    tooltip_project_details = 'If you care to share a little about your project,\nthen by all means tell us what you are making!'
    frame_project_details = [[Multiline(size=(65, 10), font='Courier 10', k='-ML PROJECT DETAILS-', expand_x=True, expand_y=True, tooltip=tooltip_project_details)]]

    tooltip_where_find_psg = 'Where did you learn about PySimpleGUI?'
    frame_where_you_found_psg = [[Multiline(size=(65, 10), font='Courier 10', k='-ML FOUND PSG-', expand_x=True, expand_y=True, tooltip=tooltip_where_find_psg)]]

    tooltip_code = 'A short program that can be immediately run will considerably speed up getting you quality help.'
    frame_code = [[Multiline(size=(80, 10), font='Courier 8', k='-ML CODE-', expand_x=True, expand_y=True, tooltip=tooltip_code)]]

    frame_markdown = [[Multiline(size=(80, 10), font='Courier 8', k='-ML MARKDOWN-', expand_x=True, expand_y=True)]]

    top_layout = [[Col([[Text('Open A GitHub Issue (* = Required Info)', font='_ 15')]], expand_x=True),
                   Col([[B('Help')]])
                   ],
                  [Frame('Title *', [[Input(k='-TITLE-', size=(50, 1), font='_ 14', focus=True)]], font=font_frame)],
                  # Image(data=EMOJI_BASE64_WEARY)],
                  vtop([
                      Frame('Platform *', frame_platforms, font=font_frame),
                      Frame('Type of Issue *', frame_type, font=font_frame),
                      Column([[Frame('Versions *', frame_versions, font=font_frame)], [Frame('Priority Support', frame_priority_support, font=font_frame)]]),
                  ])]

    middle_layout = [
        [Frame('Checklist * (note that you can click the links)', [[checklist_tabgropup]], font=font_frame, k='-CLIST FRAME-', expand_x=True, expand_y=True)],
        [HorizontalSeparator()],
        [T(SYMBOL_DOWN + ' If you need more room for details grab the dot and drag to expand', background_color='red', text_color='white')]]

    bottom_layout = [[TabGroup([[Tab('Details *\n', frame_details, pad=(0, 0)),
                                 Tab('SHORT Program\nto duplicate problem *', frame_code, pad=(0, 0)),
                                 Tab('Your Project Details\n(optional)', frame_project_details, pad=(0, 0)),
                                 Tab('Where you found us?\n(optional)', frame_where_you_found_psg, pad=(0, 0)),
                                 Tab('Markdown Output\n', frame_markdown, pad=(0, 0)),
                                 ]], k='-TABGROUP-', expand_x=True, expand_y=True),
                      ]]

    layout_pane = Pane([Col(middle_layout), Col(bottom_layout)], key='-PANE-', expand_x=True, expand_y=True)

    layout = [
        [pin(B(SYMBOL_DOWN, pad=(0, 0), k='-HIDE CLIST-', tooltip='Hide/show upper sections of window')), pin(Col(top_layout, k='-TOP COL-'))],
        [layout_pane],
        [Col([[B('Post Issue'), B('Create Markdown Only'), B('Quit')]])]]

    window = Window('Open A GitHub Issue', layout, finalize=True, resizable=True, enable_close_attempted_event=True, margins=(0, 0))

    # for i in range(len(checklist)):
    [window['-T{}-'.format(i)].set_cursor('hand1') for i in range(len(checklist))]

    if running_mac():
        window['-OS MAC VER-'].update(platform.mac_ver())
    elif running_windows():
        window['-OS WIN VER-'].update(platform.win32_ver())
    elif running_linux():
        window['-OS LINUX VER-'].update(platform.libc_ver())

    window.bring_to_front()
    while True:  # Event Loop
        event, values = window.read()
        # print(event, values)
        if event in (WINDOW_CLOSE_ATTEMPTED_EVENT, 'Quit'):
            if popup_yes_no('Do you really want to exit?',
                            'If you have not clicked Post Issue button and then clicked "Submit New Issue" button '
                            'then your issue will not have been submitted to GitHub.\n'
                            'If you are having trouble with PySimpleGUI opening your browser, consider generating '
                            'the markdown, copying it to a text file, and then using it later to manually paste into a new issue '
                            '\n'
                            'Are you sure you want to quit?',
                            image=EMOJI_BASE64_PONDER, keep_on_top=True
                            ) == 'Yes':
                break
        if event == WIN_CLOSED:
            break
        if event in ['-T{}-'.format(i) for i in range(len(checklist))]:
            webbrowser.open_new_tab(window[event].get())
        if event in issue_types:
            title = str(values['-TITLE-'])
            if len(title) != 0:
                if title[0] == '[' and title.find(']'):
                    title = title[title.find(']') + 1:]
                    title = title.strip()
            window['-TITLE-'].update('[{}] {}'.format(event, title))
        if event == '-HIDE CLIST-':
            window['-TOP COL-'].update(visible=not window['-TOP COL-'].visible)
            window['-HIDE CLIST-'].update(text=SYMBOL_UP if window['-HIDE CLIST-'].get_text() == SYMBOL_DOWN else SYMBOL_DOWN)
        if event == 'Help':
            _github_issue_help()
        elif event in ('Post Issue', 'Create Markdown Only'):
            issue_type = None
            for itype in issue_types:
                if values[itype]:
                    issue_type = itype
                    break
            if issue_type is None:
                popup_error('Must choose issue type', keep_on_top=True)
                continue
            if values['-OS WIN-']:
                operating_system = 'Windows'
                os_ver = values['-OS WIN VER-']
            elif values['-OS LINUX-']:
                operating_system = 'Linux'
                os_ver = values['-OS LINUX VER-']
            elif values['-OS MAC-']:
                operating_system = 'Mac'
                os_ver = values['-OS MAC VER-']
            elif values['-OS OTHER-']:
                operating_system = 'Other'
                os_ver = values['-OS OTHER VER-']
            else:
                popup_error('Must choose Operating System', keep_on_top=True)
                continue
            checkboxes = ['X' if values[('-CB-', i)] else ' ' for i in range(len(checklist))]
            if not _github_issue_post_validate(values, checklist, issue_types):
                continue

            cb_dict = {'cb_docs': checkboxes[0], 'cb_demos': checkboxes[1], 'cb_demo_port': checkboxes[2], 'cb_readme_other': checkboxes[3],
                       'cb_command_line': checkboxes[4], 'cb_issues': checkboxes[5], 'cb_latest_pypi': checkboxes[6], 'cb_github': checkboxes[7],
                       'detailed_desc': values['-ML DETAILS-'],
                       'code': values['-ML CODE-'],
                       'project_details': values['-ML PROJECT DETAILS-'].rstrip(),
                       'where_found': values['-ML FOUND PSG-'],
                       'priority_support_code' : values['-SUPPORT CODE-']}

            markdown = _github_issue_post_make_markdown(issue_type, operating_system, os_ver, 'tkinter', values['-VER PSG-'], values['-VER TK-'],
                                                        values['-VER PYTHON-'],
                                                        values['-EXP PYTHON-'], values['-EXP PROG-'], 'Yes' if values['-CB PRIOR GUI-'] else 'No',
                                                        values['-EXP NOTES-'],
                                                        **cb_dict)
            window['-ML MARKDOWN-'].update(markdown)
            link = _github_issue_post_make_github_link(values['-TITLE-'], window['-ML MARKDOWN-'].get())
            if event == 'Post Issue':
                webbrowser.open_new_tab(link)
            else:
                popup('Your markdown code is in the Markdown tab', keep_on_top=True)

    window.close()


'''
MM'"""""`MM oo   dP   M""MMMMM""MM          dP
M' .mmm. `M      88   M  MMMMM  MM          88
M  MMMMMMMM dP d8888P M         `M dP    dP 88d888b.
M  MMM   `M 88   88   M  MMMMM  MM 88    88 88'  `88
M. `MMM' .M 88   88   M  MMMMM  MM 88.  .88 88.  .88
MM.     .MM dP   dP   M  MMMMM  MM `88888P' 88Y8888'
MMMMMMMMMMM           MMMMMMMMMMMM

M""MMMMM""M                                           dP
M  MMMMM  M                                           88
M  MMMMM  M 88d888b. .d8888b. 88d888b. .d8888b. .d888b88 .d8888b.
M  MMMMM  M 88'  `88 88'  `88 88'  `88 88'  `88 88'  `88 88ooood8
M  `MMM'  M 88.  .88 88.  .88 88       88.  .88 88.  .88 88.  ...
Mb       dM 88Y888P' `8888P88 dP       `88888P8 `88888P8 `88888P'
MMMMMMMMMMM 88            .88
            dP        d8888P

M""""""""M dP                                        dP
Mmmm  mmmM 88                                        88
MMMM  MMMM 88d888b. 88d888b. .d8888b. .d8888b. .d888b88
MMMM  MMMM 88'  `88 88'  `88 88ooood8 88'  `88 88'  `88
MMMM  MMMM 88    88 88       88.  ... 88.  .88 88.  .88
MMMM  MMMM dP    dP dP       `88888P' `88888P8 `88888P8
MMMMMMMMMM
'''





def _upgrade_entry_point():
    """
    This function is entered via the psgupgrade.exe file.

    It is needed so that the exe file will exit and thus allow itself to be overwritten which
        is what the upgrade will do.
    It simply runs the PySimpleGUI.py file with a command line argument "upgrade" which will
        actually do the upgrade.
    """
    interpreter = sys.executable
    if 'pythonw' in interpreter:
        interpreter = interpreter.replace('pythonw', 'python')
    execute_py_file(__file__, 'upgrade', interpreter_command=interpreter)


def _main_entry_point():
    # print('Restarting main as a new process...(needed in case you want to GitHub Upgrade)')
    # Relaunch using the same python interpreter that was used to run this function
    interpreter = sys.executable
    if 'pythonw' in interpreter:
        interpreter = interpreter.replace('pythonw', 'python')
    execute_py_file(__file__, interpreter_command=interpreter)



main_upgrade_from_github = _upgrade_entry_point


####################################################################################################


# M""""""'YMM          dP
# M  mmmm. `M          88
# M  MMMMM  M .d8888b. 88d888b. dP    dP .d8888b.
# M  MMMMM  M 88ooood8 88'  `88 88    88 88'  `88
# M  MMMM' .M 88.  ... 88.  .88 88.  .88 88.  .88
# M       .MM `88888P' 88Y8888' `88888P' `8888P88
# MMMMMMMMMMM                                 .88
#                                         d8888P
# M""""""'YMM            dP
# M  mmmm. `M            88
# M  MMMMM  M .d8888b. d8888P .d8888b.
# M  MMMMM  M 88'  `88   88   88'  `88
# M  MMMM' .M 88.  .88   88   88.  .88
# M       .MM `88888P8   dP   `88888P8
# MMMMMMMMMMM


def main_get_debug_data(suppress_popup=False):
    """
    Collect up and display the data needed to file GitHub issues.
    This function will place the information on the clipboard.
    You MUST paste the information from the clipboard prior to existing your application (except on Windows).
    :param suppress_popup: If True no popup window will be shown. The string will be only returned, not displayed
    :type suppress_popup:  (bool)
    :returns:              String containing the information to place into the GitHub Issue
    :rtype:                (str)
    """
    message = get_versions()
    clipboard_set(message)

    if not suppress_popup:
        popup_scrolled('*** Version information copied to your clipboard. Paste into your GitHub Issue. ***\n',
                       message, title='Select and copy this info to your GitHub Issue', keep_on_top=True, size=(100, 10))

    return message


# ..######...##........#######..########.....###....##.........
# .##....##..##.......##.....##.##.....##...##.##...##.........
# .##........##.......##.....##.##.....##..##...##..##.........
# .##...####.##.......##.....##.########..##.....##.##.........
# .##....##..##.......##.....##.##.....##.#########.##.........
# .##....##..##.......##.....##.##.....##.##.....##.##.........
# ..######...########..#######..########..##.....##.########...
# ..######..########.########.########.########.####.##....##..######....######.
# .##....##.##..........##.......##.......##.....##..###...##.##....##..##....##
# .##.......##..........##.......##.......##.....##..####..##.##........##......
# ..######..######......##.......##.......##.....##..##.##.##.##...####..######.
# .......##.##..........##.......##.......##.....##..##..####.##....##........##
# .##....##.##..........##.......##.......##.....##..##...###.##....##..##....##
# ..######..########....##.......##.......##....####.##....##..######....######.


def _global_settings_get_ttk_scrollbar_info():
    """
    This function reads the ttk scrollbar settings from the global PySimpleGUI settings file.
    Each scrollbar setting is stored with a key that's a TUPLE, not a normal string key.
    The settings are for pieces of the scrollbar and their associated piece of the PySimpleGUI theme.

    The whole ttk scrollbar feature is based on mapping parts of the scrollbar to parts of the PySimpleGUI theme.
    That is what the ttk_part_mapping_dict does, maps between the two lists of items.
    For example, the scrollbar arrow color may map to the theme input text color.

    """
    global ttk_part_mapping_dict, DEFAULT_TTK_THEME
    for ttk_part in TTK_SCROLLBAR_PART_LIST:
        value = pysimplegui_user_settings.get(json.dumps(('-ttk scroll-', ttk_part)), ttk_part_mapping_dict[ttk_part])
        ttk_part_mapping_dict[ttk_part] = value

    DEFAULT_TTK_THEME = pysimplegui_user_settings.get('-ttk theme-', DEFAULT_TTK_THEME)




def main_global_get_screen_snapshot_symcode():
    pysimplegui_user_settings = UserSettings(filename=DEFAULT_USER_SETTINGS_PYSIMPLEGUI_FILENAME, path=DEFAULT_USER_SETTINGS_PYSIMPLEGUI_PATH)

    settings = pysimplegui_user_settings.read()

    screenshot_keysym = ''
    for i in range(4):
        keysym = settings.get(json.dumps(('-snapshot keysym-', i)), '')
        if keysym:
            screenshot_keysym += "<{}>".format(keysym)

    screenshot_keysym_manual = settings.get('-snapshot keysym manual-', '')

    # print('BINDING INFO!', screenshot_keysym, screenshot_keysym_manual)
    if screenshot_keysym_manual:
        return screenshot_keysym_manual
    elif screenshot_keysym:
        return screenshot_keysym
    return ''


def main_global_pysimplegui_settings_erase():
    """
    *** WARNING ***
    Deletes the PySimpleGUI settings file without asking for verification


    """
    print('********** WARNING - you are deleting your PySimpleGUI settings file **********')
    print('The file being deleted is:', pysimplegui_user_settings.full_filename)


def main_watermark_on():
    pysimplegui_user_settings.set('-watermark5-', False)
    pysimplegui_user_settings.save()
    __LkMIpYNR()


def main_watermark_off():
    pysimplegui_user_settings.set('-watermark5-', True)
    pysimplegui_user_settings.save()
    __LkMIpYNR()

# ..######..########..##....##....##.....##.########.##.......########.
# .##....##.##.....##.##...##.....##.....##.##.......##.......##.....##
# .##.......##.....##.##..##......##.....##.##.......##.......##.....##
# ..######..##.....##.#####.......#########.######...##.......########.
# .......##.##.....##.##..##......##.....##.##.......##.......##.......
# .##....##.##.....##.##...##.....##.....##.##.......##.......##.......
# ..######..########..##....##....##.....##.########.########.##.......


def main_sdk_help():
    """
    Display a window that will display the docstrings for each PySimpleGUI Element and the Window object

    """
    online_help_links = {
        'Button': r'https://PySimpleGUI.org/en/latest/call%20reference/#button-element',
        'ButtonMenu': r'https://PySimpleGUI.org/en/latest/call%20reference/#buttonmenu-element',
        'Canvas': r'https://PySimpleGUI.org/en/latest/call%20reference/#canvas-element',
        'Checkbox': r'https://PySimpleGUI.org/en/latest/call%20reference/#checkbox-element',
        'Column': r'https://PySimpleGUI.org/en/latest/call%20reference/#column-element',
        'Combo': r'https://PySimpleGUI.org/en/latest/call%20reference/#combo-element',
        'Frame': r'https://PySimpleGUI.org/en/latest/call%20reference/#frame-element',
        'Graph': r'https://PySimpleGUI.org/en/latest/call%20reference/#graph-element',
        'HorizontalSeparator': r'https://PySimpleGUI.org/en/latest/call%20reference/#horizontalseparator-element',
        'Image': r'https://PySimpleGUI.org/en/latest/call%20reference/#image-element',
        'Input': r'https://PySimpleGUI.org/en/latest/call%20reference/#input-element',
        'Listbox': r'https://PySimpleGUI.org/en/latest/call%20reference/#listbox-element',
        'Menu': r'https://PySimpleGUI.org/en/latest/call%20reference/#menu-element',
        'MenubarCustom': r'https://PySimpleGUI.org/en/latest/call%20reference/#menubarcustom-element',
        'Multiline': r'https://PySimpleGUI.org/en/latest/call%20reference/#multiline-element',
        'OptionMenu': r'https://PySimpleGUI.org/en/latest/call%20reference/#optionmenu-element',
        'Output': r'https://PySimpleGUI.org/en/latest/call%20reference/#output-element',
        'Pane': r'https://PySimpleGUI.org/en/latest/call%20reference/#pane-element',
        'ProgressBar': r'https://PySimpleGUI.org/en/latest/call%20reference/#progressbar-element',
        'Radio': r'https://PySimpleGUI.org/en/latest/call%20reference/#radio-element',
        'Slider': r'https://PySimpleGUI.org/en/latest/call%20reference/#slider-element',
        'Spin': r'https://PySimpleGUI.org/en/latest/call%20reference/#spin-element',
        'StatusBar': r'https://PySimpleGUI.org/en/latest/call%20reference/#statusbar-element',
        'Tab': r'https://PySimpleGUI.org/en/latest/call%20reference/#tab-element',
        'TabGroup': r'https://PySimpleGUI.org/en/latest/call%20reference/#tabgroup-element',
        'Table': r'https://PySimpleGUI.org/en/latest/call%20reference/#table-element',
        'Text': r'https://PySimpleGUI.org/en/latest/call%20reference/#text-element',
        'Titlebar': r'https://PySimpleGUI.org/en/latest/call%20reference/#titlebar-element',
        'Tree': r'https://PySimpleGUI.org/en/latest/call%20reference/#tree-element',
        'VerticalSeparator': r'https://PySimpleGUI.org/en/latest/call%20reference/#verticalseparator-element',
        'Window': r'https://PySimpleGUI.org/en/latest/call%20reference/#window',
    }

    NOT_AN_ELEMENT = 'Not An Element'
    element_classes = Element.__subclasses__()
    element_names = {element.__name__: element for element in element_classes}
    element_names['Window'] = Window
    element_classes.append(Window)
    element_arg_default_dict, element_arg_default_dict_update = {}, {}
    vars3 = [m for m in inspect.getmembers(sys.modules[__name__])]

    functions = [m for m in inspect.getmembers(sys.modules[__name__], inspect.isfunction)]
    functions_names_lower = [f for f in functions if f[0][0].islower()]
    functions_names_upper = [f for f in functions if f[0][0].isupper()]
    functions_names = sorted(functions_names_lower) + sorted(functions_names_upper)

    for element in element_classes:
        # Build info about init method
        args = inspect.getfullargspec(element.__init__).args[1:]
        defaults = inspect.getfullargspec(element.__init__).defaults
        # print('------------- {element}----------')
        # print(args)
        # print(defaults)
        if len(args) != len(defaults):
            diff = len(args) - len(defaults)
            defaults = ('NO DEFAULT',) * diff + defaults
        args_defaults = []
        for i, a in enumerate(args):
            args_defaults.append((a, defaults[i]))
        element_arg_default_dict[element.__name__] = args_defaults

        # Build info about update method
        try:
            args = inspect.getfullargspec(element.update).args[1:]
            defaults = inspect.getfullargspec(element.update).defaults
            if args is None or defaults is None:
                element_arg_default_dict_update[element.__name__] = (('', ''),)
                continue
            if len(args) != len(defaults):
                diff = len(args) - len(defaults)
                defaults = ('NO DEFAULT',) * diff + defaults
            args_defaults = []
            for i, a in enumerate(args):
                args_defaults.append((a, defaults[i]))
            element_arg_default_dict_update[element.__name__] = args_defaults if len(args_defaults) else (('', ''),)
        except Exception as e:
            pass

    # Add on the pseudo-elements
    element_names['MenubarCustom'] = MenubarCustom
    element_names['Titlebar'] = Titlebar

    buttons = [[B(e, pad=(0, 0), size=(22, 1), font='Courier 10')] for e in sorted(element_names.keys())]
    buttons += [[B('Func Search', pad=(0, 0), size=(22, 1), font='Courier 10')]]
    button_col = Col(buttons, vertical_alignment='t')
    mline_col = Column([[Multiline(size=(100, 46), key='-ML-', write_only=True, reroute_stdout=True, font='Courier 10', expand_x=True, expand_y=True)],
                        [T(size=(80, 1), font='Courier 10 underline', k='-DOC LINK-', enable_events=True)]], pad=(0, 0), expand_x=True, expand_y=True, vertical_alignment='t')
    layout = [[button_col, mline_col]]
    layout += [[CBox('Summary Only', enable_events=True, k='-SUMMARY-'), CBox('Display Only PEP8 Functions', default=True, k='-PEP8-')]]
    # layout = [[Column(layout, scrollable=True, p=0, expand_x=True, expand_y=True, vertical_alignment='t'), Sizegrip()]]
    layout += [[Button('Exit', size=(15, 1)), Sizegrip()]]

    window = Window('SDK API Call Reference', layout, resizable=True, use_default_focus=False, keep_on_top=True, icon=EMOJI_BASE64_THINK, finalize=True,
                    right_click_menu=MENU_RIGHT_CLICK_EDITME_EXIT)
    window['-DOC LINK-'].set_cursor('hand1')
    online_help_link = ''
    ml = window['-ML-']
    current_element = ''
    try:
        while True:  # Event Loop
            event, values = window.read()
            if event in (WIN_CLOSED, 'Exit'):
                break
            if event == '-DOC LINK-':
                if webbrowser_available and online_help_link:
                    webbrowser.open_new_tab(online_help_link)
            if event == '-SUMMARY-':
                event = current_element

            if event in element_names.keys():
                current_element = event
                window['-ML-'].update('')
                online_help_link = online_help_links.get(event, '')
                window['-DOC LINK-'].update(online_help_link)
                if not values['-SUMMARY-']:
                    elem = element_names[event]
                    ml.print(pydoc.help(elem))
                    # print the aliases for the class
                    ml.print('\n--- Shortcut Aliases for Class ---')
                    for v in vars3:
                        if elem == v[1] and elem.__name__ != v[0]:
                            print(v[0])
                    ml.print('\n--- Init Parms ---')
                else:
                    elem = element_names[event]
                    if inspect.isfunction(elem):
                        ml.print('Not a class...It is a function', background_color='red', text_color='white')
                    else:
                        element_methods = [m[0] for m in inspect.getmembers(Element, inspect.isfunction) if not m[0].startswith('_') and not m[0][0].isupper()]
                        methods = inspect.getmembers(elem, inspect.isfunction)
                        methods = [m[0] for m in methods if not m[0].startswith('_') and not m[0][0].isupper()]

                        unique_methods = [m for m in methods if m not in element_methods and not m[0][0].isupper()]

                        properties = inspect.getmembers(elem, lambda o: isinstance(o, property))
                        properties = [p[0] for p in properties if not p[0].startswith('_')]
                        ml.print('--- Methods ---', background_color='red', text_color='white')
                        ml.print('\n'.join(methods))
                        ml.print('--- Properties ---', background_color='red', text_color='white')
                        ml.print('\n'.join(properties))
                        if elem != NOT_AN_ELEMENT:
                            if issubclass(elem, Element):
                                ml.print('Methods Unique to This Element', background_color='red', text_color='white')
                                ml.print('\n'.join(unique_methods))
                        ml.print('========== Init Parms ==========', background_color='#FFFF00', text_color='black')
                        elem_text_name = event
                        for parm, default in element_arg_default_dict[elem_text_name]:
                            ml.print('{:18}'.format(parm), end=' = ')
                            ml.print(default, end=',\n')
                        if elem_text_name in element_arg_default_dict_update:
                            ml.print('========== Update Parms ==========', background_color='#FFFF00', text_color='black')
                            for parm, default in element_arg_default_dict_update[elem_text_name]:
                                ml.print('{:18}'.format(parm), end=' = ')
                                ml.print(default, end=',\n')
                ml.set_vscroll_position(0)  # scroll to top of multoline
            elif event == 'Func Search':
                search_string = popup_get_text('Search for this in function list:', keep_on_top=True)
                if search_string is not None:
                    online_help_link = ''
                    window['-DOC LINK-'].update('')
                    ml.update('')
                    for f_entry in functions_names:
                        f = f_entry[0]
                        if search_string in f.lower() and not f.startswith('_'):
                            if (values['-PEP8-'] and not f[0].isupper()) or not values['-PEP8-']:
                                if values['-SUMMARY-']:
                                    ml.print(f)
                                else:
                                    ml.print('=========== ' + f + '===========', background_color='#FFFF00', text_color='black')
                                    ml.print(pydoc.help(f_entry[1]))
                ml.set_vscroll_position(0)  # scroll to top of multoline
    except Exception as e:
        _error_popup_with_traceback('Exception in SDK reference', e)
    window.close()


#                     oo
#
# 88d8b.d8b. .d8888b. dP 88d888b.
# 88'`88'`88 88'  `88 88 88'  `88
# 88  88  88 88.  .88 88 88    88
# dP  dP  dP `88888P8 dP dP    dP
#
#
# M""MMM""MMM""M oo                dP
# M  MMM  MMM  M                   88
# M  MMP  MMP  M dP 88d888b. .d888b88 .d8888b. dP  dP  dP
# M  MM'  MM' .M 88 88'  `88 88'  `88 88'  `88 88  88  88
# M  `' . '' .MM 88 88    88 88.  .88 88.  .88 88.88b.88'
# M    .d  .dMMM dP dP    dP `88888P8 `88888P' 8888P Y8P
# MMMMMMMMMMMMMM
#
# MP""""""`MM   dP                       dP               dP
# M  mmmmm..M   88                       88               88
# M.      `YM d8888P .d8888b. 88d888b. d8888P .d8888b.    88d888b. .d8888b. 88d888b. .d8888b.
# MMMMMMM.  M   88   88'  `88 88'  `88   88   Y8ooooo.    88'  `88 88ooood8 88'  `88 88ooood8
# M. .MMM'  M   88   88.  .88 88         88         88    88    88 88.  ... 88       88.  ...
# Mb.     .dM   dP   `88888P8 dP         dP   `88888P'    dP    dP `88888P' dP       `88888P'
# MMMMMMMMMMM



def _main_switch_theme():
    layout = [
        [Text('Click a look and feel color to see demo window')],
        [Listbox(values=theme_list(),
                 size=(20, 20), key='-LIST-')],
        [Button('Choose'), Button('Cancel')]]

    window = Window('Change Themes', layout)

    event, values = window.read(close=True)

    if event == 'Choose':
        theme_name = values['-LIST-'][0]
        theme(theme_name)



def _create_main_window():
    """
    Creates the Home Window

    :return: The Home window
    :rtype:  Window
    """
    # global version
    # version = __version()
    ver = version.split(' ')[0]

    # ------ Menu Definition ------ #
    menu_def = [['&File', ['!&Open', '&Save::savekey', '---', '&Properties', 'E&xit']],
                ['&Edit', ['&Paste', ['Special', 'Normal', '!Disabled'], 'Undo'], ],
                ['&Debugger', ['Popout', 'Launch Debugger']],
                ['!&Disabled', ['Popout', 'Launch Debugger']],
                ['&Toolbar', ['Command &1', 'Command &2', 'Command &3', 'Command &4']],
                ['&Help', '&About...'], ]

    button_menu_def = ['unused', ['&Paste', ['Special', 'Normal', '!Disabled'], 'Undo', 'Exit'], ]

    right_click_keys_menu = [[], ['!&Click', '&Menu', 'E&xit']]

    treedata = TreeData()

    treedata.Insert("", '_A_', 'Tree Item 1', [1, 2, 3], )
    treedata.Insert("", '_B_', 'B', [4, 5, 6], )
    treedata.Insert("_A_", '_A1_', 'Sub Item 1', ['can', 'be', 'anything'], )
    treedata.Insert("", '_C_', 'C', [], )
    treedata.Insert("_C_", '_C1_', 'C1', ['or'], )
    treedata.Insert("_A_", '_A2_', 'Sub Item 2', [None, None])
    treedata.Insert("_A1_", '_A3_', 'A30', ['getting deep'])
    treedata.Insert("_C_", '_C2_', 'C2', ['nothing', 'at', 'all'])

    for i in range(100):
        treedata.Insert('_C_', i, i, [])

    frame1 = [
        [Input('Input Text', size=(25, 1)), ],
        [Multiline(size=(30, 5), default_text='Multiline Input')],
    ]

    frame2 = [
        [Listbox(['Listbox 1', 'Listbox 2', 'Listbox 3'], select_mode=SELECT_MODE_EXTENDED, size=(20, 5), no_scrollbar=True),
         Spin([1, 2, 3, 'a', 'b', 'c'], initial_value='a', size=(4, 3), wrap=True)],
        [Combo(['Combo item %s' % i for i in range(5)], size=(20, 3), default_value='Combo item 2', key='-COMBO1-', )],
        [Combo(['Combo item %s' % i for i in range(5)], size=(20, 3), font='Courier 14', default_value='Combo item 2', key='-COMBO2-', )],
    ]

    frame3 = [
        [Checkbox('Checkbox1', True, k='-CB1-'), Checkbox('Checkbox2', k='-CB2-')],
        [Radio('Radio Button1', 1, key='-R1-'), Radio('Radio Button2', 1, default=True, key='-R2-', tooltip='Radio 2')]
    ]

    frame4 = [
        [Slider(range=(0, 100), orientation='v', size=(7, 15), default_value=40, key='-SLIDER1-'),
         Slider(range=(0, 100), orientation='h', size=(11, 15), default_value=40, key='-SLIDER2-'), ],
    ]
    matrix = [[str(x * y) for x in range(1, 5)] for y in range(1, 8)]

    frame5 = [vtop([
        Table(values=matrix, headings=matrix[0],
              auto_size_columns=False, display_row_numbers=True, change_submits=False, justification='right', header_border_width=4,
              # header_relief=RELIEF_GROOVE,
              num_rows=10, alternating_row_color='lightblue', key='-TABLE-',
              col_widths=[5, 5, 5, 5]),
        Tree(data=treedata, headings=['col1', 'col2', 'col3'], col_widths=[5, 5, 5, 5], change_submits=True, auto_size_columns=False, header_border_width=4,
             # header_relief=RELIEF_GROOVE,
             num_rows=8, col0_width=8, key='-TREE-', show_expanded=True)])]

    pop_test_tab_layout = [
        [Image(EMOJI_BASE64_HAPPY_IDEA), T('Popup tests? Good idea!')],
        [B('Popup', k='P '), B('No Titlebar', k='P NoTitle'), B('Not Modal', k='P NoModal'), B('Non Blocking', k='P NoBlock'), B('Auto Close', k='P AutoClose')],
        [T('"Get" popups too!')],
        [B('Get File'), B('Get Folder'), B('Get Date'), B('Get Text')]]

    GRAPH_SIZE = (500, 200)
    graph_elem = Graph(GRAPH_SIZE, (0, 0), GRAPH_SIZE, key='+GRAPH+')

    frame6 = [[VPush()], [graph_elem]]

    # global_settings_tab_layout = [[T('Settings Filename:'), T(pysimplegui_user_settings.full_filename, s=(50, 2))],
    #                               [T('Settings Dictionary:'), MLine(pysimplegui_user_settings, size=(50, 8), write_only=True)],]

    themes_tab_layout = [[T('You can see a preview of the themes, the color swatches, or switch themes for this window')],
                         [T('If you want to change the default theme for PySimpleGUI, use the Global Settings')],
                         [B('Themes'), B('Theme Swatches'), B('Switch Themes')],
                         [T('Test of see-through mode for windows:'),  B('See-through Mode', tooltip='Make the background transparent', pad=(1, 0)),]]

    tab_help_layout = [[B('SDK Reference Window')],
                       [B('Online 5.0 Docs')],
                       [B(image_data=UDEMY_ICON, key='-UDEMY-')]]


    # ------------------------- Elements Tab -------------------------


    tab_elem_graph = Tab('Graph\n', frame6, tooltip='Graph is in here', title_color='red')
    tab_elem_basic = Tab('CB, Radio\nList, Combo',
                         [[Frame('Multiple Choice Group', frame2, title_color='#FFFFFF', tooltip='Checkboxes, radio buttons, etc', vertical_alignment='t', ),
                 Column([[Frame('Binary Choice Group', frame3, title_color='#FFFFFF', tooltip='Binary Choice', vertical_alignment='t', ), ],
                         [ButtonMenu('ButtonMenu', button_menu_def, pad=(1, 0), key='-BMENU-', tearoff=True, disabled_text_color='yellow'),
                          B('ttk Button', use_ttk_buttons=True, tooltip='This is a TTK Button', pad=(1, 0)),]])]])
    # tab3 = Tab('Table and Tree', [[Frame('Structured Data Group', frame5, title_color='red', element_justification='l')]], tooltip='tab 3', title_color='red', )
    tab_elem_table_tree = Tab('Table,\nTree', [[Column(frame5, element_justification='l', vertical_alignment='t')]], tooltip='tab 3', title_color='red', k='-TAB TABLE-')
    tab_elem_mline_sliders = Tab('Multiline,\nSliders', [[Frame('TextInput', frame1, title_color='blue'), Frame('Variable Choice Group', frame4, title_color='blue')]], tooltip='tab 5', title_color='red', k='-TAB TEXT-')
    # tab6 = Tab('Udemy,\nSponsor', frame7, k='-TAB SPONSOR-')
    tab_elem_popups = Tab('Popups\n', pop_test_tab_layout, k='-TAB POPUP-')
    tab_themes = Tab('Themes\n', themes_tab_layout, k='-TAB THEMES-')
    # tab9 = Tab('Global\nSettings', global_settings_tab_layout, k='-TAB GlOBAL SETTINGS-')
    tab_help = Tab('HELP\nDocs', tab_help_layout, k='-TAB HELP-')

    tab_elem_layout = [[Push(), Text('These sample controls show what\'s possible with PySimpleGUI'), Push()],
                        [TabGroup([[tab_elem_graph, tab_elem_basic, tab_elem_table_tree, tab_elem_mline_sliders, tab_elem_popups]], key='-TAB_GROUP-', expand_x=True, expand_y=True)]]

    tab_elem = Tab('Elements\n', tab_elem_layout, key='-TAB ELEMENTS-', expand_x=True, expand_y=True)

    # ------------------------- Settings Tab -------------------------

    tab_settings_layout = [[Text('Open the Global PySimpleGUI Settings Window')],
                           [B('Global\nSettings', size=(8,2), k='-GLOBAL SETTINGS-', tooltip='Settings across all PySimpleGUI programs'),]]

    tab_settings = Tab('Settings\n', tab_settings_layout, key='-TAB SETTINGS-', expand_x=True, expand_y=True)

    # ------------------------- GitHub Tab -------------------------

    tab_github_layout = [[B('Open\nGitHub Issue', size=(10, 2), k='-OPEN GITHUB-'),
                            B('Versions\nfor GitHub', s=(10, 2), k='-VERSIONS-'), ]]

    tab_github = Tab('Report a\nProblem', tab_github_layout, key='-TAB GITHUB-', expand_x=True, expand_y=True)

    # ------------------------- Upgrade Service Tab -------------------------

    upgrade_recommendation_tab_layout = [[T('Upgrade Service Message', font='_ 14')],
                                         [T('Recommended Version:', font='_ 14'), T(pysimplegui_user_settings.get('-upgrade recommendation-',''))],
                                         [T('Importance:', font='_ 13'), T(pysimplegui_user_settings.get('-severity level-',''))],
                                         [T(pysimplegui_user_settings.get('-upgrade message 1-',''), k='-UPGRADE MESSAGE1-', enable_events=True)],
                                         [T(pysimplegui_user_settings.get('-upgrade message 2-',''), k='-UPGRADE MESSAGE2-', enable_events=True)],
                                         [Checkbox('Show Only Critical Messages at Startup', default=pysimplegui_user_settings.get('-upgrade show only critical-', False), key='-UPGRADE SHOW ONLY CRITICAL-', enable_events=True)],
                                         [Button('Show Notification Again')],
                                         ]
    tab_upgrade = Tab('Service\nMessages',upgrade_recommendation_tab_layout,  expand_x=True)

    # ------------------------- License Tab -------------------------


    # -----------------------------------------------------------------------------

    """
        _|        _|                _|_|_|_|_|          _|
        _|              _|_|_|          _|      _|_|_|  _|_|_|      _|_|_|
        _|        _|  _|                _|    _|    _|  _|    _|  _|_|
        _|        _|  _|                _|    _|    _|  _|    _|      _|_|
        _|_|_|_|  _|    _|_|_|          _|      _|_|_|  _|_|_|    _|_|_|
    """



    # -------------------------  Developer Key Tab -------------------------

    """
        _|_|_|                                    _|
        _|    _|    _|_|    _|      _|    _|_|    _|    _|_|    _|_|_|      _|_|    _|  _|_|
        _|    _|  _|_|_|_|  _|      _|  _|_|_|_|  _|  _|    _|  _|    _|  _|_|_|_|  _|_|
        _|    _|  _|          _|  _|    _|        _|  _|    _|  _|    _|  _|        _|
        _|_|_|      _|_|_|      _|        _|_|_|  _|    _|_|    _|_|_|      _|_|_|  _|
                                                                _|
                                                                _|
    """
    if  not __kghY2() and __SpXrVD9z(__gPwEtwj_from_settings()):
        licensee_name = __5wKNXTB(__gPwEtwj_from_settings())
    else:
        licensee_name = 'No Developer License Found'

    if not __kghY2():
        license_image = LICENSE_GRAPHIC_BASE64
    else:
        licensee_name = 'In Trial Period'
        license_image = TRIAL_GRAPHIC_BASE64

    if __i4IFrY(__gPwEtwj()) != var_gWTHN:
        dist_key_in_use = False
    else:
        dist_key_in_use = True



    top_text_column_layout = [[ T('Licensed To:', s=18,  font='_ 12'), T(licensee_name, font='_ 12')],
                          [T('License Type:', s=18,  font='_ 12'), T(f'Developer {__5AU2M()}', font='_ 12')]]
    # if running a distribution key add a blank line so that switching between tabs looks the same
    if dist_key_in_use:
        top_text_column_layout += [[T(font='_ 12')]]

    dev_license_layout =  [[Image(license_image), Column(top_text_column_layout)]]
    if __kghY2():
        dev_license_layout += [[T('You are'), T(__s6AJz()), T('days into your Trial Period with'),
                                Text(__k0H0I8zk_public(), k='-TRIAL PERIOD REMAINING-'), T('days remaining')]]
    key_value = __gPwEtwj_from_settings()
    if __SpXrVD9z(key_value) and not dist_key_in_use:
        if __YSrKyj():
            dev_license_layout += [[T('Expiration: Commercial Developer Keys Do Not Expire')]]
        else:
            license_expires_in = __EhxMSB0(key_value)
            if license_expires_in > 0:
                dev_license_layout += [[T('Expiration: License expires in'), T(license_expires_in), T('Days')]]
            else:
                dev_license_layout += [[T('Expiration: License expired'), T(0 - license_expires_in), T('Days Ago'), ]]
    else:
        if dist_key_in_use:
            dev_license_layout += [[T()]]
        key_value = ''

    if __kghY2() or not __SpXrVD9z(__gPwEtwj_from_settings()):
        license_button = [B('Register', key='-REGISTER1-', button_color='white on purple')]
    else:
        license_button = []


    dev_license_layout += [[T('Enter your Developer Key here')],
                           [Multiline(key_value, size=(None, 8), font='Courier 8', key='-LICENSE KEY-', expand_x=True, expand_y=True)],
                           [Push(), Button('Paste', key='-PASTE KEY-'), Button('Clear', key='-CLEAR KEY-'), Button('Install', key='-INSTALL DEV LICENSE-')] + license_button]

    tab_license_dev = Tab('License\nKey', dev_license_layout, expand_x=True)

    # -------------------------  Distribution Key Tab -------------------------

    """
        _|_|_|    _|              _|                _|  _|                    _|      _|
        _|    _|        _|_|_|  _|_|_|_|  _|  _|_|      _|_|_|    _|    _|  _|_|_|_|        _|_|    _|_|_|
        _|    _|  _|  _|_|        _|      _|_|      _|  _|    _|  _|    _|    _|      _|  _|    _|  _|    _|
        _|    _|  _|      _|_|    _|      _|        _|  _|    _|  _|    _|    _|      _|  _|    _|  _|    _|
        _|_|_|    _|  _|_|_|        _|_|  _|        _|  _|_|_|      _|_|_|      _|_|  _|    _|_|    _|    _|
    """

    key_value = 'Distribution license is not in use.'
    if __i4IFrY(__gPwEtwj()) != var_gWTHN:
        dist_key_in_use = False
    else:
        dist_key_in_use = True
        license_dist_version = __7nAK97()
        key_value = __gPwEtwj()

    if not __kghY2():
        licensee_name = __5wKNXTB()
        license_image = LICENSE_GRAPHIC_BASE64

    if not dist_key_in_use:
        licensee_name = 'Distribution key not in use'

    # if dist_key_in_use:
    top_text_column_layout = [[ T('Licensed To:', s=18, font='_ 12'), T(licensee_name, font='_ 12')],
                                  [T('License Type:', s=18, font='_ 12'), T('Distribution', font='_ 12')]
                                  ]
    # else:
    #     top_text_column_layout = [[T('No Distribution Key is in use', font='_ 12')]]

    license_dist_version = __7nAK97()

    if license_dist_version:
        version_matches = __NVUAu()
        valid = 'Valid' if version_matches else 'INVALID VERSION!'
        top_text_column_layout += [[T('Distribution Version:', s=18, font=' 12'), T(license_dist_version, font='_ 12')]]


    dist_license_layout =  [[Image(license_image), Column(top_text_column_layout)],
                            [Text('Expiration: Distribution Licenses do not expire')],
                            [Multiline(key_value, size=(None, 8), font='Courier 8', key='-DIST LICENSE KEY-', expand_x=True, expand_y=True, disabled=True)],
                            # [Text(key_value, size=(90, 8), font='Courier 8', key='-LICENSE KEY-', expand_x=True, expand_y=True, )],
                           ]


    tab_license_dist = Tab('Distribution\nKey', dist_license_layout, expand_x=True)

    # ------------------------- VERSIONS Tab -------------------------

    """
        _|      _|                                _|
        _|      _|    _|_|    _|  _|_|    _|_|_|        _|_|    _|_|_|      _|_|_|
        _|      _|  _|_|_|_|  _|_|      _|_|      _|  _|    _|  _|    _|  _|_|
          _|  _|    _|        _|            _|_|  _|  _|    _|  _|    _|      _|_|
            _|        _|_|_|  _|        _|_|_|    _|    _|_|    _|    _|  _|_|_|
    """


    def VerLine(version, description, justification='r', size=(40, 1)):
        return [T(version, justification=justification, font='Any 10', text_color='yellow', size=size, pad=(0, 0)), T(description, font='Any 10', pad=(0, 0))]

    if __YeulS():
        security_emoji = EMOJI_BASE64_HAPPY_BIG_SMILE
        header_text = Text('PySimpleGUI Home', font='ANY 14', tooltip='My tooltip', key='-TEXT1-')
    else:
        security_emoji = EMOJI_BASE64_SCREAM
        header_text = Text('PySimpleGUI Home - SUSPICIOUS CODE', font='ANY 14', background_color='red', text_color='white', key='-TEXT1-')

    if __kghY2():
        license_button = B('Register', key='-REGISTER2-', button_color='white on purple')
    else:
        license_button = T("")

    license_licensee = __5wKNXTB()
    if license_licensee:
        licensee_row = [Text(license_licensee, s=40, font='_ 10', justification='r', p=0, text_color='yellow'), Text('Licensee', font='_ 10', p=0)]
    else:
        licensee_row = []

    license_licensee_company = __j8w21()
    if license_licensee_company:
        licensee_company_row = [Text(license_licensee_company, s=40, font='_ 10', justification='r', p=0, text_color='yellow'), Text('Company', font='_ 10', p=0)]
    else:
        licensee_company_row = []



    license_type = __i4IFrY(__gPwEtwj())
    if license_type is None:
        license_type = 'Trial Period'
    license_type_row = [Text(license_type, s=40, font='_ 10', justification='r', p=0, text_color='yellow'), Text('License Type', font='_ 10', p=0)]



    button_row = license_button


    if running_mac():
        platform_name = 'Mac'
    elif running_windows():
        platform_name = 'Windows'
    elif running_linux():
        platform_name = 'Linux'
    else:
        platform_name= 'Unknown platorm'

    platform_ver = platform.platform()

    versions_left_col_layout = [
        [Push(), Text(f'{__5AU2M()} License', p=0, text_color='yellow', font='_ 16'), Push()],
        licensee_row ,
        licensee_company_row,
        license_type_row + [Push(), license_button],
        VerLine(version, 'PySimpleGUI Version') + [B('Get Latest Maintanence Release', button_color='white on red', key='-INSTALL-')],
        VerLine(__fSseM(), 'Latest Maintanence Release Available'),
        VerLine(execute_pip_get_pypi_package_version('pysimplegui'), 'Latest Official Release Version on PyPI'),
        VerLine('{}.{}.{}'.format(sys.version_info.major, sys.version_info.minor, sys.version_info.micro,sys.version), 'Python Version', size=(40, 1)) + [Image(PYTHON_COLORED_HEARTS_BASE64, subsample=3, k='-PYTHON HEARTS-', enable_events=True, tooltip="Love Python? So do we!\nClick to be taken to the Python.org's download page.")],
        VerLine(tclversion_detailed, 'detailed tkinter version'),
        VerLine(os.path.dirname(os.path.abspath(__file__)), 'PySimpleGUI Location', size=(40, None)),
        VerLine(sys.executable, 'Python Executable'),
        VerLine(platform_name, 'Platform '),
        VerLine(platform_ver, 'Platform Version')]
    versions_right_col_layout = [
        # [license_button],

        [],
        [],
    ]

    # versions_tab_layout = [vtop([Column(versions_left_col_layout), Column(versions_right_col_layout)])]
    versions_tab_layout = versions_left_col_layout

    tab_versions = Tab('Versions\n', versions_tab_layout, expand_x=True, expand_y=True)

    layout_top = [[Column([[Image(PSG5_LOGO), Image(security_emoji, enable_events=True, key='-LOGO-', tooltip='This is PySimpleGUI logo'),
     Image(data=DEFAULT_BASE64_LOADING_GIF, enable_events=True, key='-IMAGE-'),
     Push(), header_text, Push()
     ]], pad=0)]]

    # layout_top = Column([
    #     [Image(security_emoji, enable_events=True, key='-LOGO-', tooltip='This is PySimpleGUI logo'),
    #      Image(data=DEFAULT_BASE64_LOADING_GIF, enable_events=True, key='-IMAGE-'),
    #      Push(), header_text, Push()
    #      ],
    #     license_line,
    #     VerLine(ver, 'PySimpleGUI Version') + [ Image(HEART_3D_BASE64, subsample=4) if __YeulS()  else Image(EMOJI_BASE64_SCREAM, subsample=2)],
    #     VerLine('{}.{}.{}'.format(sys.version_info.major, sys.version_info.minor, sys.version_info.micro,sys.version), 'Python Version', size=(40, 1)) + [Image(PYTHON_COLORED_HEARTS_BASE64, subsample=3, k='-PYTHON HEARTS-', enable_events=True)],
    #     VerLine(tclversion_detailed, 'detailed tkinter version'),
    #     VerLine(os.path.dirname(os.path.abspath(__file__)), 'PySimpleGUI Location', size=(40, None)),
    #     VerLine(sys.executable, 'Python Executable'),
    # ], pad=0)

    # ------------------------- Bottom portion of Window (Tabs and Buttons) -------------------------



    layout_bottom = [[Column([
        [B(SYMBOL_DOWN, pad=(0, 0), k='-HIDE TABS-'),
         pin(Col([[TabGroup([[tab_versions, tab_elem, tab_settings, tab_github, tab_themes, tab_help, tab_upgrade, tab_license_dev, tab_license_dist]], key='-TAB GROUP TOP LEVEL-', expand_x=True, expand_y=True)]], k='-TAB GROUP COL-', expand_x=True, expand_y=True), expand_x=True, expand_y=True)]], pad=0, expand_x=True, expand_y=True)]]

    layout = [[]]

    if not theme_use_custom_titlebar():
        layout += [[Menu(menu_def, key='-MENU-', font='Courier 15', background_color='red', text_color='white', disabled_text_color='yellow', tearoff=True)]]
    else:
        layout += [[MenubarCustom(menu_def, key='-MENU-', font='Courier 15', bar_background_color=theme_background_color(), bar_text_color=theme_text_color(),
                                  background_color='red', text_color='white', disabled_text_color='yellow')]]

    # layout += [[layout_top] + [ProgressBar(max_value=800, size=(20, 25), orientation='v', key='+PROGRESS+')]]
    layout = layout_top + layout_bottom

    # ------------------------- Create the Window -------------------------


    window = Window('PySimpleGUI Home', layout,
                    right_click_menu=right_click_keys_menu,
                    resizable=True,
                    keep_on_top=False,
                    element_justification='left',  # justify contents to the left
                    metadata='My window metadata',
                    finalize=True,
                    # grab_anywhere=True,
                    enable_close_attempted_event=True,
                    modal=False,)

    if 'http' in window['-UPGRADE MESSAGE1-'].get():
        window['-UPGRADE MESSAGE1-'].set_cursor('hand1')
    if 'http' in window['-UPGRADE MESSAGE2-'].get():
        window['-UPGRADE MESSAGE2-'].set_cursor('hand1')

    window.timer_start(50, repeating=True)      # Start a 50ms timer to drive the animated GIF

    window._see_through = False
    return window


# M"""""`'"""`YM          oo
# M  mm.  mm.  M
# M  MMM  MMM  M .d8888b. dP 88d888b.
# M  MMM  MMM  M 88'  `88 88 88'  `88
# M  MMM  MMM  M 88.  .88 88 88    88
# M  MMM  MMM  M `88888P8 dP dP    dP
# MMMMMMMMMMMMMM

def main():
    """
    The PySimpleGUI "Home"
    """
    forced_modal = DEFAULT_MODAL_WINDOWS_FORCED
    # set_options(force_modal_windows=True)
    window = _create_main_window()
    set_options(keep_on_top=True)
    graph_elem = window['+GRAPH+']
    i = 0
    graph_figures = []
    # Don't use the debug window
    # Print('', location=(0, 0), font='Courier 10', size=(100, 20), grab_anywhere=True)
    # print(window.element_list())
    while True:  # Event Loop
        event, values = window.read(timeout=None)
        if event != TIMEOUT_KEY and event != TIMER_KEY:
            print(event, values)
            # Print(event, text_color='white', background_color='red', end='')
            # Print(values)
        if event == WIN_CLOSED or event == WIN_CLOSE_ATTEMPTED_EVENT or event == 'Exit' or (event == '-BMENU-' and values['-BMENU-'] == 'Exit'):
            break

        # --------------------------------- Animations update ---------------------------------
        # window['+PROGRESS+'].UpdateBar(i % 800)
        window['-IMAGE-'].update_animation_no_buffering(DEFAULT_BASE64_LOADING_GIF, time_between_frames=50)


        if event == 'Button':
            window.Element('-TEXT1-').SetTooltip('NEW TEXT')
            window.Element('-MENU-').Update(visible=True)
        elif event == 'Popout':
            show_debugger_popout_window()
        elif event == 'Launch Debugger':
            show_debugger_window()
        elif event == 'About...':
            popup('About this program...', 'You are looking at the Home Window for the PySimpleGUI module', version, keep_on_top=True, image=DEFAULT_BASE64_ICON)
        elif event.startswith('See'):
            window._see_through = not window._see_through
            window.set_transparent_color(theme_background_color() if window._see_through else '')
        elif event == '-INSTALL-':
            __9ggLru()
        elif event == '-PASTE KEY-':
            window['-LICENSE KEY-'].update(clipboard_get())
        elif event == '-CLEAR KEY-':
            window['-LICENSE KEY-'].update('')
        elif event == 'Popup':
            popup('This is your basic popup', keep_on_top=True)
        elif event == 'Get File':
            popup_scrolled('Returned:', popup_get_file('Get File', keep_on_top=True))
        elif event == 'Get Folder':
            popup_scrolled('Returned:', popup_get_folder('Get Folder', keep_on_top=True))
        elif event == 'Get Date':
            popup_scrolled('Returned:', popup_get_date(keep_on_top=True))
        elif event == 'Get Text':
            popup_scrolled('Returned:', popup_get_text('Enter some text', keep_on_top=True))
        elif event.startswith('-UDEMY-'):
            webbrowser.open_new_tab(r'https://www.udemy.com/course/pysimplegui/')
        elif event == 'Online 5.0 Docs':
            if webbrowser_available:
                webbrowser.open_new_tab(URL_DOCS)
        elif event in ('-EMOJI-HEARTS-', '-HEART-', '-PYTHON HEARTS-'):
            webbrowser.open_new_tab(r'https://www.python.org/downloads/')
        elif event == 'Themes':
            search_string = popup_get_text('Enter a search term or leave blank for all themes', 'Show Available Themes', keep_on_top=True)
            if search_string is not None:
                theme_previewer(search_string=search_string)
        elif event == 'Theme Swatches':
            theme_previewer_swatches()
        elif event == 'Switch Themes':
            window.close()
            _main_switch_theme()
            window = _create_main_window()
            graph_elem = window['+GRAPH+']
        elif event == '-HIDE TABS-':
            window['-TAB GROUP COL-'].update(visible=window['-TAB GROUP COL-'].metadata == True)
            window['-TAB GROUP COL-'].metadata = not window['-TAB GROUP COL-'].metadata
            window['-HIDE TABS-'].update(text=SYMBOL_UP if window['-TAB GROUP COL-'].metadata else SYMBOL_DOWN)
        elif event == 'SDK Reference Window':
            main_sdk_help()
        elif event == '-GLOBAL SETTINGS-':
            if main_global_pysimplegui_settings():
                theme(pysimplegui_user_settings.get('-theme-', OFFICIAL_PYSIMPLEGUI_THEME))
                window.close()
                window = _create_main_window()
                graph_elem = window['+GRAPH+']
            else:
                Window('', layout=[[Multiline()]], alpha_channel=0).read(timeout=1, close=True)
        elif event.startswith('P '):
            if event == 'P ':
                popup('Normal Popup - Modal', keep_on_top=True)
            elif event == 'P NoTitle':
                popup_no_titlebar('No titlebar', keep_on_top=True)
            elif event == 'P NoModal':
                set_options(force_modal_windows=False)
                popup('Normal Popup - Not Modal', 'You can interact with main window menubar ',
                      'but will have no effect immediately', 'button clicks will happen after you close this popup', modal=False, keep_on_top=True)
                set_options(force_modal_windows=forced_modal)
            elif event == 'P NoBlock':
                popup_non_blocking('Non-blocking', 'The background window should still be running', keep_on_top=True)
            elif event == 'P AutoClose':
                popup_auto_close('Will autoclose in 3 seconds', auto_close_duration=3, keep_on_top=True)
        elif event == '-VERSIONS-':
            main_get_debug_data()
        elif event == '-OPEN GITHUB-':
            window.minimize()
            main_open_github_issue()
            window.normal()
        elif event == 'Show Notification Again':
            if not running_trinket():
                pysimplegui_user_settings.set('-upgrade info seen-', False)
                __A1WxL()
        elif event == '-UPGRADE SHOW ONLY CRITICAL-':
            if not running_trinket():
                pysimplegui_user_settings.set('-upgrade show only critical-', values['-UPGRADE SHOW ONLY CRITICAL-'])
        elif event == '-INSTALL DEV LICENSE-':
            if values['-LICENSE KEY-']:
                input_key = __AxsJwXo(values['-LICENSE KEY-'])
                if not __SpXrVD9z(input_key):
                    popup_quick_message('Bad License Key entered.', font='_ 30', background_color='red', text_color='white', auto_close_duration=2, auto_close=True, non_blocking=False)
                    window['-LICENSE KEY-'].update('')
                elif __PzxlV(input_key):
                    popup_quick_message('The license key provided has expired.  Please enter a key that has not expired.', font='_ 30', background_color='red', text_color='white', auto_close_duration=2, auto_close=True, non_blocking=False)
                elif __MW3vr(input_key):
                    popup_quick_message('Bad License - Cannot be a DISTRIBUTION License.', font='_ 30', background_color='red', text_color='white', auto_close_duration=2, auto_close=True, non_blocking=False)
                    window['-LICENSE KEY-'].update('')
                elif not __6aN1Y1(input_key):
                    popup_quick_message('Bad License Key - Must be a DEVELOPER License.', font='_ 30', background_color='red', text_color='white', auto_close_duration=2, auto_close=True, non_blocking=False)
                    window['-LICENSE KEY-'].update('')
                else:
                    pysimplegui_user_settings['-LICENSE KEY-'] = input_key
                    __fgT2bY(exit_after_close=True)
            else:
                popup_quick_message('Blank key is not allowed.', font='_ 30', background_color='red', text_color='white', auto_close_duration=2,
                                    auto_close=True, non_blocking=False)
        elif event == '-UPGRADE MESSAGE1-' and 'http' in window['-UPGRADE MESSAGE1-'].get() and webbrowser_available:
            webbrowser.open_new_tab(window['-UPGRADE MESSAGE2-'].get())
        elif event == '-UPGRADE MESSAGE2' and 'http' in window['-UPGRADE MESSAGE2-'].get() and webbrowser_available:
            webbrowser.open_new_tab(window['-UPGRADE MESSAGE2-'].get())
        elif event == '-RUN TOOL-':
            util_to_run = values[event]
            scripts_folder = os.path.join(os.path.dirname(sys.executable), 'Scripts')
            util_full_path = os.path.join(scripts_folder, util_to_run)
            execute_command_subprocess(util_full_path, cwd=scripts_folder, wait=False)
        elif event in ('-REGISTER1-', '-REGISTER2-'):
            webbrowser.open_new_tab(var_QQZIsaU6)

        i += 1
        # _refresh_debugger()
    print('event = ', event)
    window.close()
    set_options(force_modal_windows=forced_modal)

# Make home be an alias for main
home = main

# ------------------------ PEP8-ify The SDK ------------------------#

ChangeLookAndFeel = change_look_and_feel
ConvertArgsToSingleString = convert_args_to_single_string
EasyPrint = easy_print
Print = easy_print
eprint = easy_print
sgprint = easy_print
PrintClose = easy_print_close
sgprint_close = easy_print_close
EasyPrintClose = easy_print_close
FillFormWithValues = fill_form_with_values
GetComplimentaryHex = get_complimentary_hex
ListOfLookAndFeelValues = list_of_look_and_feel_values
ObjToString = obj_to_string
ObjToStringSingleObj = obj_to_string_single_obj
OneLineProgressMeter = one_line_progress_meter
OneLineProgressMeterCancel = one_line_progress_meter_cancel
Popup = popup
PopupNoFrame = popup_no_titlebar
popup_no_frame = popup_no_titlebar
PopupNoBorder = popup_no_titlebar
popup_no_border = popup_no_titlebar
PopupAnnoying = popup_no_titlebar
popup_annoying = popup_no_titlebar
PopupAnimated = popup_animated
PopupAutoClose = popup_auto_close
PopupCancel = popup_cancel
PopupError = popup_error
PopupGetFile = popup_get_file
PopupGetFolder = popup_get_folder
PopupGetText = popup_get_text
PopupNoButtons = popup_no_buttons
PopupNoTitlebar = popup_no_titlebar
PopupNoWait = popup_non_blocking
popup_no_wait = popup_non_blocking
PopupNonBlocking = popup_non_blocking
PopupOK = popup_ok
PopupOKCancel = popup_ok_cancel
PopupQuick = popup_quick
PopupQuickMessage = popup_quick_message
PopupScrolled = popup_scrolled
PopupTimed = popup_auto_close
popup_timed = popup_auto_close
PopupYesNo = popup_yes_no

RGB = rgb
SetGlobalIcon = set_global_icon
SetOptions = set_options
sprint = popup_scrolled
ScrolledTextBox = popup_scrolled
TimerStart = timer_start
TimerStop = timer_stop
test = main
sdk_help = main_sdk_help

pysimplegui_user_settings = UserSettings(filename=DEFAULT_USER_SETTINGS_PYSIMPLEGUI_FILENAME, path=DEFAULT_USER_SETTINGS_PYSIMPLEGUI_PATH)

# ------------------------ Set the "Official PySimpleGUI Theme Colors" ------------------------


theme(theme_global())


#-----------------------------------------------------------------------------------------
"""
    888888P     a8888a     MP""""""`MM                            oo .8888b oo
    88'        d8' ..8b    M  mmmmm..M                               88   "
    88baaa.    88 .P 88    M.      `YM 88d888b. .d8888b. .d8888b. dP 88aaa  dP .d8888b.
        `88    88 d' 88    MMMMMMM.  M 88'  `88 88ooood8 88'  `"" 88 88     88 88'  `""
         88 dP Y8'' .8P    M. .MMM'  M 88.  .88 88.  ... 88.  ... 88 88     88 88.  ...
    d88888P 88  Y8888P     Mb.     .dM 88Y888P' `88888P' `88888P' dP dP     dP `88888P'
                           MMMMMMMMMMM 88
                                       dP

"""


def main_global_pysimplegui_settings():
    """
    Window to set settings that will be used across all PySimpleGUI programs that choose to use them.
    Use set_options to set the path to the folder for all PySimpleGUI settings.

    :return: True if settings were changed
    :rtype:  (bool)
    """
    global DEFAULT_WINDOW_SNAPSHOT_KEY_CODE, ttk_part_mapping_dict, DEFAULT_TTK_THEME

    key_choices = tuple(sorted(tkinter_keysyms))

    settings = pysimplegui_user_settings.read()

    editor_format_dict = {
        'pycharm': '<editor> --line <line> <file>',
        'notepad++': '<editor> -n<line> <file>',
        'sublime': '<editor> <file>:<line>',
        'vim': '<editor> +<line> <file>',
        'wing': '<editor> <file>:<line>',
        'visual studio': '<editor> <file> /command "edit.goto <line>"',
        'atom': '<editor> <file>:<line>',
        'spyder': '<editor> <file>',
        'thonny': '<editor> <file>',
        'pydev': '<editor> <file>:<line>',
        'idle': '<editor> <file>'}

    tooltip = 'Format strings for some popular editors/IDEs:\n' + \
              'PyCharm - <editor> --line <line> <file>\n' + \
              'Notepad++ - <editor> -n<line> <file>\n' + \
              'Sublime - <editor> <file>:<line>\n' + \
              'vim -  <editor> +<line> <file>\n' + \
              'wing - <editor> <file>:<line>\n' + \
              'Visual Studio - <editor> <file> /command "edit.goto <line>"\n' + \
              'Atom - <editor> <file>:<line>\n' + \
              'Spyder - <editor> <file>\n' + \
              'Thonny - <editor> <file>\n' + \
              'PyDev - <editor> <file>:<line>\n' + \
              'IDLE - <editor> <file>\n'

    tooltip_file_explorer = 'This is the program you normally use to "Browse" for files\n' + \
                            'For Windows this is normally "explorer". On Linux "nemo" is sometimes used.'

    tooltip_theme = 'The normal default theme for PySimpleGUI is "Dark Blue 13\n' + \
                    'If you do not call theme("theme name") by your program to change the theme, then the default is used.\n' + \
                    'This setting allows you to set the theme that PySimpleGUI will use for ALL of your programs that\n' + \
                    'do not set a theme specifically.'

    # ------------------------- TTK Tab -------------------------
    ttk_scrollbar_tab_layout = [[T('Default TTK Theme', font='_ 16'), Combo([], DEFAULT_TTK_THEME, readonly=True, size=(20, 10), key='-TTK THEME-', font='_ 16')],
                                [HorizontalSeparator()],
                                [T('TTK Scrollbar Settings', font='_ 16')]]

    t_len = max([len(l) for l in TTK_SCROLLBAR_PART_LIST])
    ttk_layout = [[]]
    for key, item in ttk_part_mapping_dict.items():
        if key in TTK_SCROLLBAR_PART_THEME_BASED_LIST:
            ttk_layout += [[T(key, s=t_len, justification='r'), Combo(PSG_THEME_PART_LIST, default_value=settings.get(('-ttk scroll-', key), item), key=('-TTK SCROLL-', key))]]
        elif key in (TTK_SCROLLBAR_PART_ARROW_WIDTH, TTK_SCROLLBAR_PART_SCROLL_WIDTH):
            ttk_layout += [[T(key, s=t_len, justification='r'), Combo(list(range(100)), default_value=settings.get(('-ttk scroll-', key), item), key=('-TTK SCROLL-', key))]]
        elif key == TTK_SCROLLBAR_PART_RELIEF:
            ttk_layout += [[T(key, s=t_len, justification='r'), Combo(RELIEF_LIST, default_value=settings.get(('-ttk scroll-', key), item), readonly=True, key=('-TTK SCROLL-', key))]]

    ttk_scrollbar_tab_layout += ttk_layout
    ttk_scrollbar_tab_layout += [[Button('Reset Scrollbar Settings'), Button('Test Scrollbar Settings')]]
    ttk_tab = Tab('TTK', ttk_scrollbar_tab_layout)

    layout = [[T('Global PySimpleGUI Settings', text_color=theme_button_color()[0], background_color=theme_button_color()[1],font='_ 18', expand_x=True, justification='c')]]

    # ------------------------- Interpreter Tab -------------------------


    interpreter_tab = Tab('Python Interpreter',
              [[T('Normally leave this blank')],
                [T('Command to run a python program:'), In(settings.get('-python command-', ''), k='-PYTHON COMMAND-', enable_events=True), FileBrowse()]], font='_ 16', expand_x=True)

    # ------------------------- Editor Tab -------------------------

    editor_tab = Tab('Editor Settings',
              [[T('Command to invoke your editor:'), In(settings.get('-editor program-', ''), k='-EDITOR PROGRAM-', enable_events=True), FileBrowse()],
              [T('String to launch your editor to edit at a particular line #.')],
              [T('Use tags <editor> <file> <line> to specify the string')],
              [T('that will be executed to edit python files using your editor')],
              [T('Edit Format String (hover for tooltip)', tooltip=tooltip),
               In(settings.get('-editor format string-', '<editor> <file>'), k='-EDITOR FORMAT-', tooltip=tooltip)]], font='_ 16', expand_x=True)

    # ------------------------- Explorer Tab -------------------------

    explorer_tab = Tab('Explorer Program',
              [[In(settings.get('-explorer program-', ''), k='-EXPLORER PROGRAM-', tooltip=tooltip_file_explorer)]], font='_ 16', expand_x=True,  tooltip=tooltip_file_explorer)

    # ------------------------- Debugging Tab -------------------------

    debugging_tab = Tab('Debugging',
              [
               [Checkbox('Print event & values after every window.read call', settings.get('-print event values-', False), k='-DEBUG PRINT-'),
                Checkbox('Do not print timeout events', settings.get('-do not print timeouts-', True), k='-DO NOT PRINT TIMEOUTS-')],
               [Checkbox('Enable Built-in Debugger', settings.get('-enable debugger-', False), k='-ENABLE DEBUGGER-' )]], font='_ 16', expand_x=True)



    # ------------------------- Snapshots Tab -------------------------

    snapshots_tab = Tab('Window Snapshots',
              [[Combo(('',)+key_choices, default_value=settings.get(json.dumps(('-snapshot keysym-', i)), ''), readonly=True, k=('-SNAPSHOT KEYSYM-', i), s=(None, 30)) for i in range(4)],
              [T('Manually Entered Bind String:'), Input(settings.get('-snapshot keysym manual-', ''),k='-SNAPSHOT KEYSYM MANUAL-')],
              [T('Folder to store screenshots:'), Push(), In(settings.get('-screenshots folder-', ''), k='-SCREENSHOTS FOLDER-'), FolderBrowse()],
              [T('Screenshots Filename or Prefix:'), Push(), In(settings.get('-screenshots filename-', ''), k='-SCREENSHOTS FILENAME-'), FileBrowse()],
              [Checkbox('Auto-number Images', k='-SCREENSHOTS AUTONUMBER-')]], font='_ 16', expand_x=True,)

    # ------------------------- Theme Tab -------------------------

    theme_tab = Tab('Theme',
              [[T('Leave blank for "official" PySimpleGUI default theme: {}'.format(OFFICIAL_PYSIMPLEGUI_THEME))],
              [T('Default Theme For All Programs:'),
               Combo([''] + theme_list(), settings.get('-theme-', None), readonly=True, k='-THEME-', tooltip=tooltip_theme), Checkbox('Always use custom Titlebar', default=pysimplegui_user_settings.get('-custom titlebar-',False), k='-CUSTOM TITLEBAR-')],
               [Frame('Window Watermarking',
                       [[Checkbox('Enable Window Watermarking', pysimplegui_user_settings.get('-watermark-', False), k='-WATERMARK-')],
                        [Checkbox('Disable PySimpleGUI 5 Watermarking', pysimplegui_user_settings.get('-watermark5-', True), k='-WATERMARK5-')],
                       [T('Prefix Text String:'), Input(pysimplegui_user_settings.get('-watermark text-', ''), k='-WATERMARK TEXT-')],
                       [Checkbox('PySimpleGUI Version', pysimplegui_user_settings.get('-watermark ver-', False), k='-WATERMARK VER-')],
                       [Checkbox('Framework Version',pysimplegui_user_settings.get('-watermark framework ver-', False), k='-WATERMARK FRAMEWORK VER-')],
                       [T('Font:'), Input(pysimplegui_user_settings.get('-watermark font-', '_ 9 bold'), k='-WATERMARK FONT-')],
                       # [T('Background Color:'), Input(pysimplegui_user_settings.get('-watermark bg color-', 'window.BackgroundColor'), k='-WATERMARK BG COLOR-')],
                        ],
                font='_ 16', expand_x=True)]])




    settings_tab_group = TabGroup([[theme_tab, ttk_tab, interpreter_tab, explorer_tab, editor_tab, debugging_tab, snapshots_tab,  ]])
    layout += [[settings_tab_group]]

    # [T('Buttons (Leave Unchecked To Use Default) NOT YET IMPLEMENTED!',  font='_ 16')],
    #      [Checkbox('Always use TTK buttons'), CBox('Always use TK Buttons')],
    layout += [[B('Ok', bind_return_key=True), B('Cancel'), B('Mac Patch Control')]]

    window = Window('Settings', layout, keep_on_top=True, modal=False, finalize=True)

    # fill in the theme list into the Combo element - must do this AFTER the window is created or a tkinter temp window is auto created by tkinter
    ttk_theme_list = ttk.Style().theme_names()

    window['-TTK THEME-'].update(value=DEFAULT_TTK_THEME, values=ttk_theme_list)

    while True:
        event, values = window.read()
        if event in ('Cancel', WIN_CLOSED):
            break

        if event == 'Clear Recommendation':
            pysimplegui_user_settings.set('-upgrade info available-', False)
        elif event == 'Reset Recommendation':
            pysimplegui_user_settings.set('-upgrade info available-', True)
        elif event == 'Ok':
            new_theme = OFFICIAL_PYSIMPLEGUI_THEME if values['-THEME-'] == '' else values['-THEME-']
            pysimplegui_user_settings.set('-editor program-', values['-EDITOR PROGRAM-'])
            pysimplegui_user_settings.set('-explorer program-', values['-EXPLORER PROGRAM-'])
            pysimplegui_user_settings.set('-editor format string-', values['-EDITOR FORMAT-'])
            pysimplegui_user_settings.set('-python command-', values['-PYTHON COMMAND-'])
            pysimplegui_user_settings.set('-custom titlebar-', values['-CUSTOM TITLEBAR-'])
            pysimplegui_user_settings.set('-theme-', new_theme)
            pysimplegui_user_settings.set('-watermark-', values['-WATERMARK-'])
            pysimplegui_user_settings.set('-watermark5-', values['-WATERMARK5-'])
            pysimplegui_user_settings.set('-watermark text-', values['-WATERMARK TEXT-'])
            pysimplegui_user_settings.set('-watermark ver-', values['-WATERMARK VER-'])
            pysimplegui_user_settings.set('-watermark framework ver-', values['-WATERMARK FRAMEWORK VER-'])
            pysimplegui_user_settings.set('-watermark font-', values['-WATERMARK FONT-'])
            pysimplegui_user_settings.set('-print event values-', values['-DEBUG PRINT-'])
            pysimplegui_user_settings.set('-do not print timeouts-', values['-DO NOT PRINT TIMEOUTS-'])
            pysimplegui_user_settings.set('-enable debugger-', values['-ENABLE DEBUGGER-'])

            # TTK SETTINGS
            pysimplegui_user_settings.set('-ttk theme-', values['-TTK THEME-'])
            DEFAULT_TTK_THEME = values['-TTK THEME-']

            # Snapshots portion
            screenshot_keysym_manual = values['-SNAPSHOT KEYSYM MANUAL-']
            pysimplegui_user_settings.set('-snapshot keysym manual-', values['-SNAPSHOT KEYSYM MANUAL-'])
            screenshot_keysym = ''
            for i in range(4):
                pysimplegui_user_settings.set(json.dumps(('-snapshot keysym-',i)), values[('-SNAPSHOT KEYSYM-', i)])
                if values[('-SNAPSHOT KEYSYM-', i)]:
                    screenshot_keysym += "<{}>".format(values[('-SNAPSHOT KEYSYM-', i)])
            if screenshot_keysym_manual:
                DEFAULT_WINDOW_SNAPSHOT_KEY_CODE = screenshot_keysym_manual
            elif screenshot_keysym:
                DEFAULT_WINDOW_SNAPSHOT_KEY_CODE = screenshot_keysym

            pysimplegui_user_settings.set('-screenshots folder-', values['-SCREENSHOTS FOLDER-'])
            pysimplegui_user_settings.set('-screenshots filename-', values['-SCREENSHOTS FILENAME-'])

            # TTK Scrollbar portion
            for key, value in values.items():
                if isinstance(key, tuple):
                    if key[0] == '-TTK SCROLL-':
                        pysimplegui_user_settings.set(json.dumps(('-ttk scroll-', key[1])), value)

            theme(new_theme)

            _global_settings_get_ttk_scrollbar_info()
            __LkMIpYNR()

            window.close()
            return True
        elif event == '-EDITOR PROGRAM-':
            for key in editor_format_dict.keys():
                if key in values['-EDITOR PROGRAM-'].lower():
                    window['-EDITOR FORMAT-'].update(value=editor_format_dict[key])
        elif event == 'Mac Patch Control':
            main_mac_feature_control()
            # re-read the settings in case they changed
            _read_mac_global_settings()
        elif event == 'Reset Scrollbar Settings':
            ttk_part_mapping_dict = copy.copy(DEFAULT_TTK_PART_MAPPING_DICT)
            for key, item in ttk_part_mapping_dict.items():
                window[('-TTK SCROLL-', key)].update(item)
        elif event == 'Test Scrollbar Settings':
            for ttk_part in TTK_SCROLLBAR_PART_LIST:
                value = values[('-TTK SCROLL-', ttk_part)]
                ttk_part_mapping_dict[ttk_part] = value
            DEFAULT_TTK_THEME = values['-TTK THEME-']
            for i in range(100):
                Print(i, keep_on_top=True)
            Print('Close this window to continue...', keep_on_top=True)

    window.close()
    # In case some of the settings were modified and tried out, reset the ttk info to be what's in the config file
    style = ttk.Style(Window.hidden_master_root)
    _change_ttk_theme(style, DEFAULT_TTK_THEME)
    _global_settings_get_ttk_scrollbar_info()

    return False


try:
    import rsa
except:
    print('The RSA module is required for PySimpleGUI 5.  It was not found... running an install for you now....')

    sp = execute_command_subprocess(sys.executable, r'-m pip install --upgrade rsa', pipe_output=True, wait=True)
    try:
        import rsa
    except:
        print('Unable to install and import rsa.  Please make sure RSA is able to be imported')
        exit()


var_IHWWRR3D = False
if sys.version_info[0] == 3 and sys.version_info[1] == 8 and platform.python_implementation() == "PyPy":
    exec(marshal.loads(base64.b64decode(zlib.decompress(base64.b85decode("c$}=gTbH7`)<67#`eFe}t@0A&BnnC(3FMB0C7OU#X%*_He`kW#-Rtm-|2y{HYmD8LB!pyU9)9x>b}?H2_Fo|XNz`A_)`mZrWpj&;7CpeVOPtoSON%BhJ%j?T-eL5FHIJ-vZ0_qWf&T1bd&&269z76l`H5Z0=X`nJyV&CFKidO(XrJw(T+$?9R@+<Ryk?f*OTS*y!xj4BC?9pc?BvztOG924+#=_MS+~-qiA`HIpBUy-x<<04E#i)TCd{@=ufsO8eFysIEb+K|j-Y=l`)9JhPi1>5+e_K*6|(&*+o^01eA&L2?Tu{rSF+ud?M$^Bvi)7QA5{As+K--WuVwp6z2A`SCuW;vsK)yte+$`vCC585*}s+jLpk1ZE!)qkU5zJXJD2TiIo^`W_7B+}%Jm#?Jk-xu`FpL#Q}Y{S|BaEn)055D`uWC|w=(LID?P=0BhDIIF3MQ0-&xA>4EcN{*MDl{^LP3DR?gSi%65}Eh{r`@(bK@=E}2Pw*c!>4Ih|{H=U3(od^?xzI^X%pf;lfPJoke+3!bdxeYjGzl+PtTa+sUKbA!!rD3XpW8ICz(qsv^z(H!`UBcA#wl>HG!Yvz8+{yxL3L<WkOYslX#=9)Z{@8yDHA0gR4?NG|Rt!&>g4{;*r&2OA^D3|RSMFsQZyoW9G22KrBx0Y9C25Ol1BJU^6Tkt~8TX?*n=qR7V9Xc@|aaI7|iI}qv_3}RP(V6*bJi`2emvTOW@ybV6)o!3q=KqlG1q*Cm%lQbw>kd6+JMECh0xH`p7BJqZ=WiVD&shNDlA&S2!1wCD$=`gmV1cCX@Wz4#KgfA@Hb2l*(YK(f!&ZvEN46roJ<Il(w??{>?XZSdwi5h!hIMoV#!EMBb(iCHY^C#)>fi8_ktVW#>8FT=YdPM)!k7#7zCk`mSXj#EK3H($!bl5A$I4F`3*Tk`D+{l@SN%=i({wM#tBmxGt(UTWWNVL~<@<WL8Y!3Ub(adZW_*~#{Q8&=G(EGmqJzfP1Amuv=n4PuQ$^pVOF!9K(Rao+Hor*v_AS43siN<mrW)HQ`o6FY<5%_km4EuFDcfNka9{D)V$x5yAG9~0`iYfxH|ei8efVQ)zgzTdgPf$VQcez1jy6)x-<ML3zCbS3bv|83kV`hk<w44K1o}w!kJiuY_IXX8SNgn`aIJlMM*OC~dn{`CU9RiQ_`S<Ea^9_xMJ$qX@V=7oc}RV5mii*w$$1^6zKErKzi(u_CguBllkKT&KhZ2>vE-BYEsF`)<vyGjTsN{pj?ev!u~_coJAw@rypZ~So7lnn1sdcy6^z4YK25vP<}*ssVO&;LsJVx6Wm}+N52Gcogry_1Ld&gxv|@jbEN-F4i%<T9{xII|EcL*$29=g9<@&F_WeY*^We3-{RRqQfuElgc&DE9LzOoCVIX{1U=Oye@W-a@Dsf?MuEk^fmrcO1eo5`r`-CX|NSoW(0`}CH0ub}^Iwa;hl>=Ijp-_AV=U#-%G`>;>Fwrs3jXb0o+oCKi_cJZ8e3u`tyc(eu^n}d3d&zExSg?g`}OS@_XL}N#7zD_F5mbd-eP|q?=wfUjh_~fxr58LmRAwCyYA^$!Wc`V{nrY%*!l@a?$6vl$Hx5SsjFrS<%1BrF=J(l>a;a!WQmd{_C9JNJv6ZN5<<|5brJqFkdYssx9jbz`iqJvS5n<%I$Ko2H+5)V~wUl?vkn&B~@#a~Sxo>*#*`?qAJ-rwEMje)*OKT&J0$Mcii2ivjS#6p%`A1-oyyub%}J#BFtRG#-z``(Rc#VySnT%7D6)fufg;SFg%D%b14ZXBskwuN!K7kYDHnK<wJp{(>a#)6NCdOI?!b(k+HW@NU_^!FWg2kQ+h60bkURFah9Y>0=~VI2EwQtId7X1#~mV%;o%923Ft(*2B<*XHZRjeis=I^!(=ES>SV@m8xUO6rFw(?$%h;e-G1XXE2;*~8Md&3+ljjivo~>C?A(o_y^NpC>SZId<tess^wMyEwR*O)OkS{KdiZb<+u&A4glCtzVjh>3@9L%Ug0qMV<aQ7q{b|3HofVz8-G2O%h$TcQ-{MG?%kt!{**DH;xT^Mc2-H*|@lV8|%Z~bU!Wh=eF3|`aU=>tH`Td$Ep(?uFq*3XWMb$qgEDY(_FW7yGixPZp$CuYvKQ?SMg?bc%6yeHkrj*(Iaku*iNF~78xD5Yr8yWb@Ai$*r%G;-<PYV{L$D#o3rxET@CijHva=ZzVer|^?5xE<IPNWXu}NF?BCAm_I_~d)Gn{H?K$wy+QHHK?T7Y?gIC^|nv)nqz5UdY>4_?Ny`AI34|{bxyDQ7qn>GHRV%{dVXc4;p@y)G+$2cCVAGUwOsgd~lXKw^29M+qe#p?WEz8Adq<M{eVr|tgO_-)FaV-iQ<#qzFuWUw|nUB1?@w)Z2o7h!PAj*n`&F9w$fe>mBA_>m#=Gnv_U);`YF>{6!IAGG>Y(`^*kxiRn;Y;E_V@qcJN3r_kAaSGh*qCXbhM%0o0r!gKs-P*I(3CqHxc6dSNJa_7I(2r#MKK}UQ&Te&l2#U;%mzU)HqFHUeL1q7#+15+3Gf|Fg5!#z}QQ5}Tt;W|soR6Y9oJ_JwE!S~wTHszT59jmf*oQaJeNx}p)^_6a+3on&tXVO5`QSTZKKNf_3>Y*ya4SpWhZw6bd%#w7YNf>8eq^ujem?w}7@Hrf;T2{%+wJ@2nmT{1<74}}NTM&ldyOf&y@wBPcE=|#+?t<p_Tzn%yv7Bkm(W~YJNlKnxA89W+ZcD=<sIMtSh~fZ*5NFo+vUfD>lr=4?mPRJ==Hiuu=U2?+Cg`2pLXmm+Q(;U9V6rHA6~NE82+KruQFfIn&W%CGCO8i&8|nwKQW58hu1y`LgoSUYJ5=!pTo=Qgb#q$WA50icr*iXTYNbO5`ix88X8BH`1r!_{L~UdqZjmY?X#|a*G|Rw_%pg((oenHZiIHRXY&hrHD4podSt6>F?7xn*@v&Uo3ks<==`U?j^g#1q<yq&uJ-!J&Ht0klcRk!=f!)m?QXA!=F7A-%r2|kEMB#ac#k%x)<>DUbJO9g(=Ioi{J42vir3droOuI!IJp)1G77uwaE_y>@JrI0?hAStc9}<?;jTKK&*AB8Zf4<m*R+T2DSpJL*`AMAl-dKSG5b+8i`}Pw6)_Q(7`d}wX^T~IFf;RV7!G(`b@sZl@viuRNPYVAEBGwNa``pSmMlDZ4YEq!mHIx}j=<O1+6+$oht}Tq(Sqy}uhREl_0GJr{hPt>L2mp}8T?ADZJv*))zilzujlo(3tvFa9{&BFhI@1lg6qXHqhRjnm)#$WTZZ*^TQ}@Y_%B;?W##UW*=uVKuFPliVf}H_(3k(mZ5`@|G0o5l=7z0)<pZDl^<lE5p1dy2u{N5wCJ2Xu-rj1T+)KLPn{Iei#-F;hoR-&aBf41P6Iqiyxo31V8h1FAZvEK1-X$R+iZG)HpEc^P9wnX|m3!k%YeUT0xb;I^fexg>AgFV=HyyI;2Rg=1cuD*4Ty-IMMz8Z~hGzw_KM9|kO{X7G*KBtgUNn@y$!V069Uhcz-VtRpssDP5PGUpgzpT6B$|1{!pk)Hy871JoazYDjIHrAr%ghdN7WO4!+sHTljNlP-5J^5bneb5Lv2`j?wDsCBqN{nC>E0q$7zj7G)+$%Lr{4KNjFnD<^PR%8ksf}=IXX3NtrJ`?=$A6g7Uqi}a@iR9;1lVjB%P}fKmJ6zxZqqQ;8PZ<rrmb*O;g~*3-3s4X?$9llzVyFx0eRcO0Cs5(hIYEOQvzVTM!wyaL;v)wKhq6d)#{BQgtm&ANH)kULHAuG<l#Yl;)uact#gOha>o5dGjD4=%teB<cz!UQqh<pO`oR$3t8^v+sx}Kzd160e#czo5%{gtN9$%bfMm&)ibs>>&p9V%MTC!gWP%Swh(4sXHvon*MaKD9{(%+y5I4M1%=*TG_X>R9JMFokF^RM*VvhD$AcbX6b_&4=Hd<@|oq$?ZPp+W-QF_w1J37-N_0CvC{6@<Y;VB`0ssXPE@K5!2lXlm4Mh1?J#j@6IPO`>~aCk;1`w08ZDApG79~0kTJ-H*DUE{0?8D~S*4Ms^(KpnD9=`aIdIBR$~BMuUbv_8P4G1kupnc=ab%|J5u9_h@C{Fq0$nN=RsGw-ZNS`%k5--WBzl<l3+B&S3#HE}~iZ0mqA=6eP3WLNU0OhsfSeAr<>eC)xu2M@w6a*<cu41wQ{fXAY&6Bncj4dtX{J&RaCa)}|!S+A`XO@JT0_#Drg6BSJnX@gh$f)#pu#=SR|M!1Ru*7um`lwJ$ug=6Kf28)}60-C#NpRgu^CKF?cJyuaOsXVZ9UEIojiZgxwlm!%@!tE9>w2ZDm78*)sVg>$v4sts$o%Wb;uifRzB6)kt!YRxf5}FYmSab^CQCE*?=Us_*Hpz^*l<GOn8xv$fS5Ae;lGGJzl-uB5p*#+n;|}Ngv{qK8ut)pezEV2m*{pFu&!m{NpQRtpGU^S~@zx+C7Yg>je1N{Bfwr1tYy*6CVY7iSuLbXZaO8ea-~1x{FyhY3$>U%G-^B}C?H?tip2Z~osKqc6U6eGpUka{Yv0(F3-{?vX+}n)$EUhWv{ccgjnz!21Fv7$;?XqY=yUw!0P(1lO0@c03BEFz5e5X!hZ-ds&0)g;J|J>oPr)(YWd#u~hto2|`8FNDq^wtsNA=vxj2k4o-(uo1mYUlj50jyQ#tSx5z69*zIsSbNg0)qJ`_$Su|lFo{KZUQuJkFQ_gBi$>oi2vSq{+GU$FHVe_5Aap~>c^xe$ofq8l^@h<O#oQ>zBpHgE;hn8u_3Ote-lV2;iikfsyAHyWzOL16tn+p4%%PlP#dC$eHs6K++;2>8*y)Wc@iS-y%yx)x)0h%BSe9X`5bt{&Vu$GVGl6Sb%QlLMj)`6$L~?6U#fr@%)JF=#^?LaY%>>S^&{@F9zCRAL>~5r_I94k8jn3}Ohm1ret0LE=nyGPup93wUihgGzLkz*Bv6p>uuHIhA+ASJ$BtRIFo|)U1Exn6Y2&01XLT2TBBQ00v=6WedFc+z%q49_4tI=WgMlq1K8mRmCz(IImt2pc69VRn-O|+~q{k`hNs6%v8gt>WpqViP9V6asE2p_<-Voqfye!=o(-X^U&HSo)d<2`)mImod-E*T8c>e)63UR&{5ARmFag^rg2O`LfG@T@mTBAYpmARgzAK2G0j@@{ZbYRzY0c%2KMnR{~*tO`c*XG2)eMFZGM~_0g#bwvT_z~_FxzZmk!|ew18t`rW0`!W>iG9G{m|4bWjWLK=Z?mk6$JAIE)Qy+hAl^}K=72B;(6ued&OOFg9gBfbhoL5C4s((_^IOoFw~~5*OC0h7b^`v#E@e+Pw9|vsV`l8ID5K^ai<P#e$V|Xy7Z0#OM9F4bYVCk|F~a+2sl#II6eiHnOdcY}n2APbdDb;!L&Fty&@#&7D;0!9U^|E)8S&yYCY~PagF*cpB0-@upWkD@{i<BOj778EyX*yNH{R&cB0lNsMLE42yRCswpc`onIu6CfsW37Jndl)5oO^<J%*{9%v9TIy5H8a`1`NUo*yjj5{cP{Ww>bCo(i@iY-JlN`3%I09QU$2Qq%q{XDZlxVKxx$7T(Ct~7}u_KaYT=pC4HkYG3<zz=*`K3_gHtV4Y0li$Q01kUwi<se!#Qax?7|)1DSXbz3NC=lE&Nz%!tIG?=wrsnGL9Ou_C&A-%)n5{{ElJqo~-7qv9R9irJW(Ah8aky|9ABezTU2m1}VIG^<PO!{{=&zhst-{au#zamXz{aqwuvb$+xhTeFPIy5@7+3bZBQ-51-dtvIo{{QY(a3(MnHC9i(sPO+vxpE_4!C3M05z^E8<?2ya83(MLg$I5NI=xef*1@-dmMEr;&)`;c^G#yJZ_z86vX{K}H7K6P@LfJRh7d;LduL+v>g{AcBTW&N-qY({w{f&WcZGzQiig9t-?(O|p)BzeQV?J1aB#Jg5tL6eJ`MH!d7F8dM+_;K8S#bEREmSzp7VE?stN<%oS4P<7T6|&D`vlo}`<tHCBX9AjX5?NN__GdrO<@6V@rDesNqsU9`8$Y`X|r6QWnnKZ7hB2Mb}csrf8tL?kALLD+@JqE<Ad+=?>z#g?w{>@5^6H<)mUk3^_oRS`_q-(rT^{2p3BgoKVMQAPxK;dorK%TXMw$Xn_^?tY&XUJ0=sSe_OAZkCBc*CTAACM{ad0SL(_S8p!vr(k9~IJz*tJ&x)SVl1vrGI9NuB;D`m$PM<x~y(5MBT=DGe?dlP5&TWu`#x{Jl8x6S9Cz2!4Ri@d#Mj#4DQ#qL(NXSu$lS<TfR{ZkH-?|+_ha6c<K@IVgALl9cMjGY3l)~=+D<nu()3TVb)!+!E}Fj|tI0oUEtxJ&NUCuR5VyW|&rfamUN-ERp~?+e7^$rpV?#aojD|B1ze<wz^3+1Gz03VJhxXt}`#==WJr9eB;VC)0cWWBS!6B@_MsNwcZ_pEOfc{!MonN;WiW6<I(dGwKt&JZwU1Hd<$xXWS<)=#)F?7T`ak*-Dpqua;dyyK7tOe)B46Y$d;R$<ha1BF<8m*niU{_S?bxU6(v*|EE4-O%YI6PeBJJg#lQkyRnj>FxKJ?=+dvfD~cp57TD3<bt3MGifgZ4)mlyx`#73{pgx(Gd91-6>{MG%KC4cAGJP?Fz2ViYc|7CWk3IBbRKG7rwbx3e)g8H3GbZX&t>nk*m0E&#oTuOadCdA-);vb+YeLmNJ)W5Y+dfErG0JOdC3Dah-aS?E2JU3s+!kZ>w+)qYWT`n%I%9W~fA6b7>J00i_$|=fX{<?ifP#p@F1U@%C4h)D7J0WXJZP+~Bloc8wg&&K8cT5N9NFsr&%GXHj{Rd9gxfbOeqVO;<(p+M?0mGJ_Ydm6A@6$&yC0X&`*(TY@#Xz+Vb7BI%_6VR9vsH_)ee&F4s@0s@!eU<XYiMH&7Imc8+f$-Xn)Ob{<rx7k5$K&3(uo+9PTrab8!D*yt7M2OP9R%mb5>X-a)2WJ}q&O>&bw&ZU*|TR-|;k`A~pMl-4KfUTE!g>)-s64q>LnUPRaz__^~WFBVazub%!LE4_Ba;14BT>{oPgi8}$9<mwbTLY1)yk>-(I#usSG)2A-w&?XvRNS&hOvFaAHg);CqsSR?+pgW-blg;8MuZO|Jhrj8kAe?xXt1-X%*i+-t#b@J#U`#oe7WhxG+8)42{q>U<gOWz`^lj2tO7H89-+1C)oY?W16M7Um$OBhAe~(ASli?y!d6h@wd-uj$Tr0!W%BKylXQ-`v1h(1(eSiMFp9!}04p>9c+f!>mcL1Q5d}fQf6JH=lzx3!VRO+%8$`0I>cO0x<<h}pOZp(4NZiA0BD+t-*8Bun*zFR-_>GI%4(tbM!u-|B9yHYNZCG9zYt-|)@H4jUrRsX%d#rY+hk&?~Evfp8|mOo{#4Y@_6T}PUYxK+2N`pv8`Q*tkmzfRa)DY9UtQhHC_HPn+``R0vDr;FsLj{48-vx*r4=4!<@5BW*aJX%jna<^8JNE*1X_Ig_T-}TbrZ+a>Iq4*BBuM(?tBT~6eb?uU6H>Qm>(;Q~S++Km4TCqFjL=l%c&Q|INN%9f&3QhdG%#G#==o9K#@6x`rSKu6JOQifeQvUZ!{%a}!siG}S0%^PKd9+lv%E40pK_ATnz)auRiQ7VAr*^xT#9@rOOjq*bSQ_&q`)><XxJuphlx#ed;DN5Zk9OmLy;J$!BC>fB-fV@-U~iuC4*adHlZ~#(wVaPnSv!>=C;vHb3tjQHbGt|zDB}XP^D<!;#iPy?dzdimY3uUOoqzi(4DV7u=JM|WWcO4V`nc=<-|O{%Tdx~DeGbsc@Iq>Z?y^ph<YT)`p0@LMJ!8C@mDYe>O~${{L5=;{Q0+grwK-P&`j_<#lOD1rSyGpU@=okcO2xI(%p1ZYM6=|Ub?v4g?j7V~$qfCpcj6Rx#H>5dAUgP`of)MWbD9V6g>Hw87bfWbN8}9&(QUt)oo}>fS%X7ok40JN?IjVh5p^-IdV-p+Suzg=v}-T5hfZ}bcp?PsajaD*vPM0-7kWI@+{<fhZVD>G>Ty`4NAA}L$tTWJuj_5SoA?RVd7m(gGv(p~`!0EG%70tKa)&2719ssr`gDhtF9o_<V`TA=d5x-j)2Ez20$+i=sd4_myKjC3ynB-N3-)2Cdh}Qz_j`}@+KA;d9QH%2CGML2xB6P#v0Q67VK#U2Yi#S_Qi+p5KPOU8gFkcttd>nW>F@Oyf7eMn#Q=a|9!t<k;0v33U;4;fSMoD@`q0b*r9789$$RRgP=SR;@;P9f!?<ptA7HHb)iPwgPU%@Km%2)mbs5ZJ+@522g&Z$&-lUF$er>X1PaOvsO7lTSNzCKDNo+QYe=t}aU^m}Z7)x`dzqbSZ0GRD#*{@$ghb?Sa<GwXDyO(v09gHtAldOLM<0YRvNX$bPzv1uT?a&mz`98kFT7IGGN0uCXXF~xY>siM#s2~3;y_bh?6CeDN^}2H>z3{)3^Y`MHobRUisf;P49XCiif35t*si3#V?kN8jfJ@@9Dz|?8lV=o*sGE4Q;l;!=&IYzWQ8hbx0!#(8wF~RlTD@U8;dZ<3qG^3!SkY{AvhOUh{wx2lnRMx2<~~gGQ?s7@e%L$Z3n>Tsxu1@vn%wIL$l6zwdtOS!Dx=A*a%KFtb<z|1Aet~z$KJ+{T@;3SO}kNVGFGCQxFsaiA{Trwoh=jH^NOwsYEqb`W1s3%s1e-uw2Lnl4rv`UZPAU7Js<KYU}3}C7tEV4(ET6OWpU&;1Lcb%<HKf8+GFX&vove_*u9=g(tMS<w1dw$MG#K@Za3lFe8Rb_=iUmOlNIrY37dlcn&|LT@1bv<^PArKspp*UJ?O~;?4Ty~(No_kEc?`plb)L}ufp!X^joOBfJvu1`cp4|RsDaDQ|+g%X4){sf+`GI-@bkR#I{w8>8S%V>u1dq{N95uG^h8YJDzBWrg^TcpT2SsiY6fUs*9YzF~9n)`nZ#fEA9$7ZY(DRS(pBwtW9$!-(Tubg}-cxzt)FmYzlOZ!m{2^f9r{9!+SQxSCssc&bu^}cy%9s)kp5sLcRTtCv2PkcXSkYg?%>DI+nle$9BT^-qh~@9mh`f>A%xJQC`KEfCi<+m>~O>)U&RuVx>u}S>4&WCxAJNNX1c5kbr&%tO_(bC4garBzOZ%y0n#@r~&&*yRxv1c?rI)x?c;>>$4<mtb?)>xfL(K&dBjWkB@+}La;XlU|sgucM=POF6zPF9O4hV4}Ub)kjZ%hRt6m<_X?hS9UZU-ukgI*OZ(7|etEdcerpxeb>~t?Tfg)L(EH!~uO*Lau5wNHZ1Tr`i^14;I?13C+nT?sd;4i0@pLaz{HJ`?fVH()tP?H1HwM~0F)+xNc&w9V8vk!T<%D1A>0Pp6hgI11@AViUpTOG)WV`{nonkFdAM|(M+nZ#ZTpHi~U&MAEG56N{j|pq~PhOjR$+?tIY#k2Lm#jg4mw;JTk_YRvl*#`q&Z*jdk8`S+U40myzN7EJ9(0Y2?+2R1G%}uV)kp9xh4dx8>?xmvrI|iia`&f?r<rH`U}G(&n8IPw39pm91yj9?j2+~$(utM6kUFoeyv4|J(4WSCRm1sBvkzvpEV?NE`8^)yO4`76C23__;k`}%RZb^-@|&El50jkA_~o)w_)Y^n0yJTobyo4t*U4A3?<<fWXn*?M-lU^A!%}Y^CSF#4?sJds3dDeIU!dYAujYpMZ2ZMPYJ&c&7=>Ib=>A6Yj-?i6b$t1M)92sy*z)i6aevY0nKQBqYx3Wezm^^O@^9;1{{LC;Q_iM7vrtsj8&vG|{@=tS&J(X1ml1GDxDAF6WmtpApOz=%-UpDO^S{f`;cqf@Tm6)wHx)}5C58k2I!-czK@axpsh+r3PP4>sO4Z1CR;?>6@RiU07Ps2r?QebVjOs1O46MKYZ)600%ShzPy0rGC)E6?BdMWAdQ_XQKrgf@ZlXpM;yNvvz#ghlZ-(<w=Wo%!bF}T>@dZRkrG?_;M)$vP4bct`#_URvBbmVS*o^<hX(jEW9IMiX<_eZTY!o%s?6pM6z@&EdnUvsT|t!V$xIGhq)l|_I0eToJu2NXzuZLRz~<<F^@H`s4Kag_h&%lwDO?Lu3!F$8~3`FGOKg6lrEy865SO7^$?Bm`RVB`ucV&+#Srf$R|S<y_Y7tA3Fj&!N(;LpxIK^0~DPivg`++!yI5!u5w^(Ihz~q=)++v(@<k@00)z&Jz#(D|N2y=Qx(=tS-sE+yAY<2RH)W|Lb@0>-RtV%XL2couB>szulkzy8mzQ^Z)ifzxdmH`^06|nOS}Te)nfQjSv0gITlNo^s1iwAkVe&WiI=3)&F<;28HIy{jq6+Kz}{=%ai!YV)m1swxVaumdn^O<h~K^s@w&A?&A?`r`#8tuL|{k4m^K40iIjR=a=%FOmbvP)!$(^z-xW7mi^^<xHp+&@ss|!zvmP9_0s>B?Q0khSSnn~`7GZZd7i_P_DB8xbYzI(o?PYgm&53{Rsy)v+J(*<*jnaH0?m_n(V-WRrtlF2qbtYVz_{fI7N%cuwlo*u@h$5L$(#y|`$OgWq5pl`CGlGV65IQl90%Sr!aP5ubk-u&oD1JI_VW2&)qeZg-VM)o|M&L$v)!)0+E-iBN1oS%b;$Si!L;spHLct2l27L3k$k>t(X?)-oYsv(NiY3j0Zl>}@2!2cUU@d<f<|BJ<5&ZI+$kVwWnam&hE>*~c$@vH*GhTABQ$lrOGQvzU_GxMUfO8vSn@_AoUCfXY(m+`)^B*$4H*T0xAD9%(#Sx2GLkOND-mzAlYL9`!6!QSA+CN*Nj;K`^_i?`daU$)Foeu$f<0!NS`Uwn+fc-dF_vdRbZ!zD>sbd^B)zZ`g65dd?|9Y#EyWW2;d|7#r&8xK7OG4+>lUBQE>*4t$-Gt3-PXj{+emL%L>DtkLmL^465bL5uh{xm&Ss)5v}TLC_NCxrjr5pjIolN{`$}|@vPW}@wRW9$3xjDlB5Qj|K7@r}W+_j2x=ow9%?xpOL|kYojM*5sbBddwz-C(p@e%OxCJ|yr{kW*|#H=2nQ4j>kIZP^7gfY-I!USd(zf|-_Vxu-_?_IIZywVSOg<FI0*kt-3OAO<EAKd^`Y6{Z^J6%PZJON|36lK<o`HNsrigAydFx6U-_3T20&>};pRWITqYl@nLx0s-a;+Q0y3``7^25p+0>?P%4QDD)shke>-aYlqa%V@kq`oY}8^UOm|jmeH_I!&}@w{^q5py3zNuCzAVZ83|lRfbM%)*NfEL0fz^6Eb*MCo}9faiOj5K)<B&T9}__@9?-F-FLj~8OH)Zp{&j>dG2Sps{QdU_p_AyiN$OSv_UiAM)v^x(vrr%%o{u~>V(cVk2NGR?O7waC7n(wiFD%F&Yp)RCWNre_6x1m;vGIuvf!B&_p*IJ;?fscBF?wQ57!kA)2)9?3q6)~ecRd_j>OPG4qg{cDt!Qjw`D!Y5p41s%b8Fyjw${=78Ko;Q4Q8pd}FGC*QT0cbV5MK(y_brba*71J^)?II$J#m=VR=OUFxxIbh2kOYm1r>N#um(o-}7n$$6i0yB;K-b#zte;;{tH&hv)WW}%s%8DTFCZNfcgW5O>w(+Q7wbBShXUKl7SXYE(z#c7s#K%?6lVX;LnBB+nIDe+cmcl&5~%b6a}lO8|P&Wj2B9p!PD(l}@Y8={_-STxXJjgf(FWCn6Si#LU6SD0Qkc=p&B`UQCSvM0km(S~J}*{4F*ZoA?8K5t7#nx6S$%>2lV9w=?-?WNG-f#C2na>$YNO}7JjSAQrM)slNrdCV<^T@tUMm3zKN`Y>S4TgKf%OL6OEv%{@+Z!C4f55fn%G-5pxG0D0{!v^#x473&SwcpHlnYGyNrurE?13%&+Xo;^Z>dbrPn`7h0J;)ELyC!6=S5R!;D$hP4-~7n(xZhLB^D#|2b5mecG<a^v`uo&tqm;D$UgpA`5P=WPiNijcM=Q@)p)#{)+kC(<7m?@(tvKn$LLp=uAtwx=O)I<bLG+f^x%i;@`A%V<O20iK9QTQEZ#9iSqpqR*Ks*YAn23ju#vm*atzYUx&pdv|y1h&T0y^<>r;cmZJ~}dApQBDZqz+278$u^C%k(g-9_X>lKc4*5Bt!#cnR)XRFM?PzucfRFH-wXb9BsYfix^j)_JGH=`jL>(ul(>-cYKy`T?bz+jUMb&bj__eC6APg3o{m{#)&&DymKt+#&uK~jR`c(z!sT%j^Yx>A5m_5HSto?p^pOEF*h%%J76S48hNpqh=If&Ih96pNipnkfSmM{fS$Aw@#h*j)nmoQJJN@8o7*47gM6mk6p@c2jJ<G|trlcQ6u<_$1=Xw#fEEmB?Pff@AeYb6AOziiOPJeUv46`er{!fYhNL5B&_7xw&j@s&uW_8GnmLxdEhExi5@`=y@s)bO%iY4H{D$_KKI~}rJWGIVq_^P14mVjF3s&*G@8U8R@g?cdvewTg@Y@=7qkJ|`GVil;Z^tb)JFIwh(pj0S(=91xU>9-5;~^0wj!85ldAyA^_DS5uC3ejOo!Th&K-bdwB7S@7I~SP|b{~8H7N?yciAbcr^QsK!tK^SetDrS%7acRI?+89GD$sZJl>hsyPJ8MgRT%EYFW3l|k>8G#j`z$pQ;?xkt+lZ{1A{;xg3deF^fpf^Ta}*VnZ*fr`Y8e%xOc^f9?hkkktOil3XAYm=}noD7<3qlGsDw~-fSt%8+6F0tk137CZw2LP}h9I7%|u%TKc12a6Je8i5e_;3J83cpBK&ZY)IyYq~`3NdLD_4>xp!Y-{6~%>1u&9eI;Y7&owG&v{1)jY`k?syVh2V%;(Cytdq@Dzv!c(Hk1wE-}N44K8S@q$urn61FWK+>LQGKLYrB9k#%hEQ|?fmV<xx(op}S*Yqv3Jiik9`Jq-h7#I$tVk(_Lj`PVHo+6;S59+UPZp~(yxCTOUbflqA5Cr#UB&htD&yV(<B?}LMu<#wM+9?Y=x%hkU9sz)^2$`>!-Q9o&OrPO1+<g3_?{p5sDrjs@bhEtIz`m-LiEpYunCr_`$utsj<RS)g9NT;&~Ot6B8FspU6Nu*wO^#L0<!nipgZsNGRwHd$p2;Vjs<3)MWU%to9a0BBCop@&xImp{OI{Ky~Jpmniq+^fkQQy!EY!&*#3eOVfaF6rozWc7Lb#HUPlC<&wp*jR?|4PT$BuQp(!G>t*PdP#~^H_>Cfm1iOlM{&x5w8gWY^bp>urVM<^BEE>LY_N=#}@T(e3WojrtX#0^tvRS=f~RZjPqo{9-8re_M#@Bp@di=LGI-vrnOd#SpW(Gcx{(u`cwmpX3>c~fEH`T8!EQ{Tw74w!7i`COby=8x?LFxw!?~gJ$uGD5Y~5~XWtUQGAJvwTyJc`^QmUlLt-CfnkRjD7kP+#pxV(J?17hIvL)UkNicF#YzEJ|Ui`#28O8cC({68|W1`F@_{lp?=}R3Pe(iS?c*9^l%V!N>(#zVb#rHY*e5xCKo9c#w7*GS)f;@awv(2-nHWUTTo^?e{n2Cjxxr+?p=RH6iMHk*>?IFuInu=lgi;+?Dt?I}upP{yR`Zk1wQLeSX?)mRA@?-6@gt+bYIVZhVx%vEg?moU$vskQ?XWl-L^g^<}31nl+k%C{*R^9b&@;9b+RuVhTi1r+F_Px$&Oo{Ey?>3{LH=X6XNj_!Xu}4GI6Cq=PGB#iN<9~ggKi3!U@gsh(bd^7{YTcUtn`(|qncK=_01K(}{gJGfbYxvMT1~&P`c38iwY4fNRM_4jQvGciCrai&uS=ExIm=wx7WyrH8H>+13aI@vj-*l-ig%|t($<&rYb+I4wpER#q3UDhbt&Tj*8CYa>JvwOzd^<oWLzSUzp1JRQ1K-79irniE+O+o_4jz;Vf1A`zp-MzoZ>Jt-w)4yI@5cZ>=!-X8>{%kS-uxN`~8^SV=t%o*nSNDw;Ip=j_Y)_FXN#0O!nKV_|{<zRXp^b99zp9mnuIs8<&kGKCFJ{zfJSQDh|+Zw%}baZ0Wz}!>d}aT~22WK0|KLG?!c6ZQsl1V-+`2af^I)d6RK5BPrAw1^Il-UZ?qX&$!6IJ(`q1;{$p7Z2$b(ZX3_`!0(>(s(;2OIMbG|JZdaM#V@K;_?(~djE{KtB1ks(<fb|ADlYTs2h%)*^Y=W%d1HNrPLS-TT3Gp>AavJ~N9|XY^GA#A^ZOEMN*XuL$;Tew9z=i_(+>~Yhk(6B!Da;4xWRzI-%B!FiFVQJez0kevP4^%2^VFP#hbJbFR?xZWLDphe_Iz_{7HnzcX|IjchS!Fxo2<l_9g4|48yY}X^+ea+1?Q!rL1WkRGwE?Nn?*Nq_a6-a7J^lD7mRs{xwY9R!;@F5F%Ux8b78@$pY}Ny2HHkM2K)b+XvprJh6^?L9>8ti${I0J(4pmWK1+2bC6kyvq``<$Y&{!^Xfr9B5w#A+}K+j>kSQGkWMb3V|`f{MYPZ;PYuJQ^->`&F&Vz94xn@&Jqm8FO8@Hb0L(mbS%4q$vM|~Ya2@Y3_f6%HQ_8{I(rXVm8*H6<20S>VS-dLsa9+6s;3D0Ri1z}1zzjX$-7`{3-w@hSrL`sak8UF3m>J%hXyz7ZGb>K<XU)yN@}<8-QosnG%!qeY#%S!{P;qK=OxU%d9tWST-QmN6KF@+?j!k0B&Z&DN3B7>F%KXy3oiHvWE<<F=m-T6?Ur=QXJESl?5#(CZTd?mIZKAh6CUFlK{SnP#TFpe7=HUwbQ@sihLv()2dNigK?a;#`DIh=Q#zFOHS4?kCtkYMdi_gGYZSrWB^~1gufWsmJ_?l<W^PnV^=RvEPy_5a{;_O_WY*FiRne;ZoU1&%AI%k2MQ*w9!ZVPw#^gIvBY%~Kt$VF6~>|*cgnv9pEr?8~d>;a4T;4f~s^fvpJ2jn%|SbkH5iw*c~@a$mHPA^g{MmA%(=FPlv(0e0>Pof{BJb02vFb_r2i?Yn(K0S#G_=KP2QQW|<DWyDAy2m8`*iLw9N%D41wBZE!WsG!2vj=$RCwoqE(Ies!k~N%qv5uu%s56xHVM+<U$225}-*yuB6qz1N{G!I(sbrRgbL);zB5z2;6Wr`7U)Py|7?G!3y9Q(3%j1kh;Q#SVYX~}_N8E*1^bmfL*#m&dyvfA8$@;0j+#NNNgB<DBNP^~4d0`9w9R?mS$jS4OdqX(q@>~@A4a=*Vmc>++0hqQ4(=IkD17wYR2>i?u>#;nmp6x}$YppirJQ`y)qFL-$4?8F_l4qF!S={LgM8kWD29)xzw=}o?j4)T8-Kt2NrG)g6T#3#uln#Qz`a$Nt_8pS`Oppk%EI<~c2U^GeD9^IzY372?2#;IeBp62vv{RN6=qK_L4+HGQDWj$bIJO5ekHom>$!rLjXM@gQyIRwa%xz9cBxBWioaieP1CmG2?*n8Gk{J902LmR+1F(<lN+1Ecl*01@@GMH6=iZ+fdLUTHSXoRm^brddBTga!i<cd^I?2~J4hBAP*(wbhviGk?X!7^&&Bgg)k({*Iv&KIvJz@jyPf8u$>B#e=!xwR2|8(|(coQYW>vvhbDDI$p-?{bkJb`<=kzC4veI+is5HDnDALG=&g@g;g;<pgPbM;C8dio$_kJ~5}?N}S=y`snmf7@m`%NPcgOzdNkg+AcBF%trT*ZcwVye+1xJWAbWP1N@V!k+qzxb~Y%!K3?Lh=Dy2P4)Jeb>XFXn|wD#*S>Ajjv#ch4DdU4kpQ2`zY%y=#~>ffNDT0e(@YRX<atc8niInH%p+aqH7I-N^IgsdH(#qd`h^0JHemC`Iwgx`LSipIp*PHlja;!sv$d*ae}0?kK2Ehjs&+H=7kBVKCBAGyM~m7A8=a%Cy5CH>#fuvIep9%5Go6XJO!W(@d_UNzdXeWjGo#4Ew=Ef7nyi{|x5Cq}^E&h9rDtzYzS&G;NPoc^?0hrTyj-W67j1fvn%mRQJE^k{)YPZCuvi0ZeEDDG`s3WYC0aaI%U4_a;qe4MZC}=pAeHOCTWPX%6sAp{Sa$r0X#vX?R;$h|eAk-*#vPY3FZ`-%IsU!I$&v4W=7q0^)o--{-{*d!vXM1LD}{AGtl4V+%%M8!Jdw)rvFEuVrq1U8=9RfJz*6e$n5S~7T@pNVgaM4NErY~oGWV9tYbP=48rq-tKcDySKkwV}9FxSh>b~(4Q!fFtHr62DvsD<_khxRz*Z0^HmS*<)ukVqVmx5-uu4;YtB?QblUovYU$CKaW1k5VWO||lOp?>?*I&5EJXHRp~II0F$t$)g4!un_0^3B?WPC4cB;I}I=uhS{)DRX&_>i-K9bA_duwXDlQ=E`8)`_Ek7Qsw>_4^&Q3)^H`eH<go>HN@9f8{R81?W@AtOkr4+g9}Fg`^?_dKUq%iTX&7^{e14!C#iZ)?caj0R`NVBaAzKTN^A}5ZxvRLcmng}tIKGs_TKdyTeY7KBVgm%^F8X@b>HLI8qiIiN0zxgHNWsXM+o<y=gg-2#n1aYw%n-PA*}!Q{@s55XS>QBN_s8#Kj{@g`&&XZ?@70{dLQ^g-{W=WT<!<Vd-#<T{cWD=c`9?K@0Iu-|NZCqWuK5cVw(3d`3}2&+Ryd(e)jA0lWv!9x;6IEd7hbkwJw~={xX;Q?00?kE6>TYm1W>+T^C+GbE2NiiEh5ntL~oP3+ZAR=MBJjV1=m1#<=y34to3%rf?syv#^_!&UWPE+kXi6^k&z6d(BR5R^f0BhW$vhu#o4~_rLrHO_p_9o;RcZ5GP$dr&*jeZfMrCh83g@GwzNJ=eN{DTfiBd3Rc9fhih#JD;KZ?N0+@g&!XPDB>9jq_bR_DaNgq~jCfPVnQhQ6dF-)RMvlEJP9FF{E2HXIx%B{VQ`DD4j943%d#ryHxXDY`JXh}Zh^RSc9l1oBC=u1Q+P}@gR%ZLW@nBatK82+8iTvKrF6!ex_M06eHuxvvE6U^bK3i#fHwK@Bk4U#KNiR=#BoE}RZlxa{!B@LC+O^M!7^)mmz~n)3svngfJsK*)1e0Cmv{#JznEKu&&KY7J_$6+*YG&+Iclw?1>$N7siMnQpXYm=Zm5i0TO^-NOML*%>y%5|W+N)O4W>*;V2jD0Mc;i(0<_qAA9)qpL+RZL!!#Sg&12npq#+8-gFqgTKLJvK_LhH)E`SirH$X#iKE~GyIc-5587>NcmqD>;d9Yap!tJF}4c*_9iUm9(Aj{qxIIbdyyR;hLdEH@mtUc)O_m*43z6QfzC88M3P@@NPinP&3LZ9<txt&KRUa6?Pq9E%JUrDk3te^F+7dj`<Zm;P#oX3PhlVNUzFz#8ylUJO<z6uebuFyGG#Gfn)7=YT^2`Is*3cd>Qnk0?;sv`y)GQU8p8GLlim!B3;57CQ+y<3a~SgoiEB*o(wlFwZOM^r-Q?Y?lGXm$^sfhkc*-48uyWHTc<-iZ-J>{3L{(z(?7Fy*{T#7$<<w<TsTT*%T9vJeFo$C#CRAa$@T}A)2fkU?hZnVp-#XS`bYPK8}X?by;#25@LU3{!L)dPHP^EC~)Psl@!*%g5~82KOz_KHTXc_$M(b^37KIt%DleN!U1GLM|oTBMH^GTxYTrYLl4&kAL0u5yg*n4OpmkZ6n+tr=mi!tqz`9o+}vW;UJF6^j&3F&(7jRMk9o|8D<-S4fc0mOmQ)$|ODaDXe?~4K7c#KS9}qj~vmI{mI*F&af3Q;6amuND$Lz@xe0(1;{h4`9KnY29wED)t3E^m&X<-cPe=9}!j(T}+iu6qY7??CGtc~L~)4T6{1wDoLdR8o|Zpv5u<_A#FE%FOuY4)&pAS)R5>xyVgBNDUBLlTePcc3t=*;=IoCp>O{`*jn|aeYrXGaK5n>J+XB4<Gf{GnXpDJU)?I6vQR+T9T5XPjqwyU+PjALk@Gxvj=hapuZT2-Gu8#LgTLz-<C+AI}5x3;lkMC1^A3{o1747Xne28a7q1kTb!8FXsZ$DUP-{mPCGOrKfFerF2C>fou??`Uijcw%qiAOW@wTJ?VtGsC&WMl9qA&AWOgcu)9)Mx(0;ZLnl&TtJOX-Q?NujuHNt(62b7hW4c1$fv36TxS}(w%JpIgncqG|_4^av49Qjuo@kL1R1^i3$$#jx|jz)yD63bjcc3A8)UHg6(d!*m{<{Am_BXR_-w8e~oKc0cJz+j%q$p+pG%aq?tOx*=J>A|9TemBZ(f-)eNSmyE{@jRZv8Z&&~dh8+3ZB$O^6FT%2^>z`zQUd;Hnv)gyL}Z_dW0l1o<+l-N+{*95RsQvw=CBV&o0mTLvNLf{`sPx0<eED6av#{Y;z6$9_v+;=j4*|E*yoI3L&nN#<Mu^!RAk(|$XqjW8v)#^R~<^gv!*l`Unvd)tPzvVyta6RFN6b^Xd(jpmd12Z$Zv;5o~tp#Ya`rj&`G=`T-=bBfR<ukEEt>whwqh-M26cUImIKD^)xx5)W4px!0y>YH+S+|xo?T`Q%Zw~+FN{8Vxd*D-+at|SVtPWVquM7^Lyg7wBRHM%4ZF}A-T_cM?d|_&nTD1BEotgK19vQJA$6%g(g6shlPySAz3RWegBip^McPU;!SdjMr4o&%x{?(qY1hyzyK{83exO04(W7rPlgYo52)^mpSi<OWuT?xH`B#I&v-pXTp*;ebwfujrDhPhAh>#*797vu`5Y0@!I;b`0Y1g1SLzJohaFa&Y$bm+GWQ8OjA@IJ-~#MBF&l!yOpC^Z--5Uczal-REXOl?Y8}K^H;@BCy!M)O-i5k+mU^DnI9&hcT_Q-j_v|(CJQTS)jojCf<cATSI>Y{D^7}lbBV~et4rH~UCvE(W4Pa4>Y47<+5Az7@X)I6)eZ2_K1lGc6?|Gn)R*UM7rw#*KQ{f>-+)FFRx>f#w8?Shv+@_fxpEFm;SVp%aoA3P<<m9dQZee0R9|61N#3dAAJO`f4Qtfuf#FhHt_?s;5_P)NZg*%JfmJ)4oBjC-XI@wBDWK!1)Rx($v2QR8j-+kLRkclGe8G(5t(zokOU_B+sPsD154Lt)Lp##sviN<fJ50{n8z6jOjH;xMIpcHHIEpm%r`F<xRpyO_!7ij6mpUFwY8HpXRLEFY<3}pFIa??N^i)zpvGEbR3zlA4roDmP@`B_3U*T5&?16I7EEY@nbm=o=m)hFBA(LcX!8z$77r`kZIZL9U-o*9Aw&Ri18dgjHC$Y-EZhb;3K2;?i@k=^&RE+OF@?8^rx#mEGUvsp_>X5VBSF@+tCK&~n=n3>z6^r6jn`DzG)l|IEBo;Aw`*HX;x^!M-S0Hy-l@wpGaV<d`q{t+WdHNxtT=`78Z|JzKp=$GfY8Re_%G9Els^7|0KpQ)ZP7j%0Ybt~g%-Mk*lZ(mX5h?jqho&5YBkLJmB1I}OEACsN@KA(~7`}RV<rn54&zZjeR`&%pQ3ovfm{5*^IIs*1vHp2T`EJnp=R4fJ)uT1l}B{ClK%w3kbeXI=c&b&p>@=SA84zszJ@|>M9<so5hZ50sltWSe}=>C|_QU=fSEI+^VR9_Ws@9Kk|!Dg!UxJJLQ%D?6>ZxcTFU(~GY&AG_qq7<%*<Iv|hAX|P*B1x9MJg<k;HzZUXXDiPIwT0tYZt*<VC*w9U=ebt7O<C)X;5lnm%CipcuQ-n@bE3A&WvU#f|1<6b;|B6<NWSW1t`hXV|Iah7s(w-J-LpRaGUYYFNB;g+Qm)Ph$a?4H+f*+v&pXR+ve?hq&Qj$iJ5@K&?bVd`oMJTe8N*R|PFKZ#XuW((kU8sBZ07#aOW$0L6FkRR{Tj!6jx)tpnDwse#HG*vJU<8R(&y&toE#hDXaCQC_MgsW%Y3I3!+LDroHw$c%qt$5teaLbEN3;vu$<y&4C{NHTlM{;?^u+2?{q#7+GT7YRIvqGJJ0^RfA$}r^L)}r=4FeY&##})!@8516-?*8BX#au|5(a=rjXyX(LDKGCHZX}IZs#B@lW5td7kt3-VWsVbKaJW?KHtpI;SeHOlz2jtKOsP%jNgQY+JTx&lnd``vvP)^a>Ir-{+}%cO?7e&wX;#H#jalJtuZ;^;+<jw6FFo$)*_7E`76_@7URtmwhi~OevLl;h`V>J4##0Z*P{2HEqs~orm7L%CB<uJu@V>>m;1cRl9$Ff7f&kSkK3Od@XW2C&HV{?@UIxHY$g`Gkw^A|D=;(;DBKO$m#Yj|NahdJM1%L*FhU(eVAqLYAkbdEKXs&_irCn`YV5Wp5BF!5dsD}$o%9L<+06lB&gTCZ0RV!8&M*Sl>30Cg|-+P41EbJp<OWlI_|qTma&+ve+vp7Y?pCcHGuuMxoE*>MTvp$V2ig~zz#(p78MSc^}{Qf2Y$A!6V+oA>$TR<dY0nGPr94YoB(f;)=qKTC)6_{(a3N7&cNReO7Qvie31FwHI@HQ6@K`FH184_S3L__Sx<G|(ctN~9qxM?%G`RK<*2V69q#~`KffJpBE2xnPV6Z4J^=%gI*3n62J?ZwTY@&|;a!k1+^C4<cMaox5A!CjDeI%7-Bg!FJ=@&6Ua<GcHWhJ{aBpBVe2I8G$Noio*39FG*Jc&O@2P&)iMG=5?5t71u;5R>#~cq<zE*`8-?@&m(|4#dAFBQy{DsnQ-kD4CA|taX7}^xp-WX@&XD%vR-5K}_jmM6N)DOT^W~R$}EOH@68x%ZrY8*Z?x@c?Coc=%J-mOnnUHJn2K>J|=>fF;uQ37Iv5=a7hL$IagBHh}p^65`iK)dH<?X&-Tt@AtUVfFOJB_ydDRij2lr95S|+ilCqIu}>t&h2M$)degcXKeBgzAs>?>Ln?UH{U64seYehfawegW8Qwp{21%_a#t!2G~?0CNQe9rW63Q$R3yiEkCs!~w7RVMl3VRZa?lr3yUz*vR^IX2pJW33Z_O8geGihzIM?JM)3_U!{QGXfFN$Y+Ac8fRV}xUaUz=%DH)8vXw5FE;P(3yBCK35Ksq+~8@J(g`ei9Q4*3!wh-Sw99btJBK7!^y#0Y5}$DXn}B&!&?fJ#JtJl5Fe30xX}VRdETx2i^&Cz`UK`aE4qguUdAQRRDHFpO17*uUuFYC&jzPn5FQEG-S0S`DM+HS1J5S%E;V9P9THl$R=~}b6z5QVn!7?1*|&KQE>`leiId7w?#GCvHS(*_#3UVOInjxZtU^=G$I6f)qtN|PPN<uU-krRZzXJh&F$+e=GB?j67XFQ%*t+SQB87#%Al*}0(su70331AcQtnb=OdqYLT%sLM#033D{U%z4enj!R>=M2RaJYHulcdLNdRN+Y)=Q=z=F;^WqQ#7s(kaR_5|z4OzO!ZgSiIxRtYO#ZmrWLD@!A^01t@iO*B=MS<6vs%LA<M5v=zv6BhWo{yL}&CW-5K_SMVl$xCWiW8coE^3Jy-Fvmx}z2RnS-gPL3*jk_WmBE%xY=7j#95}~Y9mZ%>uu#kS*21;dx?KCA`%N3-b$Hft99gJCUR=_yY8ZFVd=%(_p$kzVuLZ`C&=l5pyAj$n{7_Z<VEN^QYsB0+#1D*|Y~mSmSo>>)@s46Y-M}O#BUf$b*+FpvZ@%(P?>@5Po_QhjNmThH*77jm<`P~%c!EFq%A0@>KI?Pbag#@`5B^;j8wJcacY>NoUwzR~I~Se>{#~{C%C&pSMV^S5fM0ofe0NtK^%Ud4--7th=K!Bl=oR>aZ6dlaxyI>S5I0Cg*@dI!NZo7Q$D=O2AO0Wmn!T>!tk=<+WZ#CGp}1&s)L`o|M76UkEjCDv8r5(eiVHXm)HyWxF8I!VyQ^be-J^YN6NA5J27gu>scLKds*y_DWJGT&8#-vM{V5mvPw1w~I%i(($`{m&7<wZ0^}In}*G!M#BQNKuw?_6>ISZHQ6N_0GU`}+8zOl1k+UOfQv!$3_E~et~?ZFq`lN&{U_xGHq8bfsrL(cOJ|7{1R;`0ggXDzG`?{(VZ0Q@F0Xbz&k<K629u?`WxZ!7*?uQB#nf9RkntIBPfLvHg?ABj0hv%&W<mlQn7*-af!UMS{N9X!uM<%HDrtcT++l;%uUE(bpg^&pVX=B5|7JF46m{7&Vb+}pEb@3Z)d-(MYjomi!}X;~9{x)`{<dU0cQJMj$EahEn=mSxEOWoEhU)}n{V(4DR08a`=*z-Z^|$Oque6Uy3S&WqG1`3K`%lLME4m+f-L+H1COWv*xA+$b8bYX()GOQ|O@jj^FoIx=0r$FEV1T%9Tsw!7lp>?*(>aZcP#yuE9>YshnhJ>Q8AdE}KYML#XaJe5_w@%g8prqo`D`_8+)?m4j6mu0s#&Yjd+v@gXvDzCfRGg1a?)@i+nn~QWo=BeRIR_(h~^P7mb5pu#kag9XXM!w}PJQ#<-&{tslj=AmfKy%3s>tPN7;8nibmN{x2AM>tg*23Rx#Z|!ixhCuydk21o<GNr=Mq8&fs7({r(fKaIJ)&|rmy0~|-OS3a+r<oQU|V~->4$dyE}hDe^>vcldCIvr3992IG~6QBgXs?W9z%>caw<27=s47LOKQhy)M>ZDHXU+9cfqfGmr8Tzx=y3n1ng!KSyd#BT!L?D`w@SOv<hp|PEo^+qzk&da*rwTUnI+y`KW6A8pdptOrnU;WYo56wlpFpi-f~Ie&DCASnAt)vId(p2_u*A5yd`)RZ#g?pCr@td9Vo%p8$doJ5u@JdxRTyn)18dvJ=24KG{US+pTqPw^pGgS7|fTg^;o5<Yx)D2mbzrm#7m@z-Js!M16h<V{U_Q)_BB~9w|szUM@T2D2^(cNBa6cc3x8jK}^SKsV`->pYlkL?)e9>>#IyVP5rQZx@%wdHsUAS^n3iqA^{`Sb68Fvah(5dpP#j+^Vi&ye?spvDruEy*CupcE{b1$9i*y*3&tcE#tiIXA0@~sX<UZi`<)N1;s%@kr?W?0z0wAXQAZ8&WiUSm?hSBcuN^Q#9P6t6bAwuou{KltYp**|&g|1N>n5;oUV5IhIH8YJnhol(<rsgk^Vtsf(<L5f4#&9#l{P;rogLIVcU7JEv5!B@mFD^TP_KU*aD0K^^O2)4kAv0zGB5t{`C9Ggcl>T6m&9-G=e6$pvcl1%w8q*(aZpCc{kY=$O!2=B#LtR@;^Xg#;>Ng&|NIPp?Ip%hzGL0F`n<1?cYE%Lsp{d?`;Lk)OnW^w!0{H0C*XP<&$;3;#~1kf-8YBhIK%OmDt^Kna|Gux)%6zYe(-nmI|s%GTz|1{)E;==9Cd+6Zn`~AH?COU4c}is_|kwr;d?veL>!-I9FJRm;ZFPjyEa$-Vrhw*yP7q+U_56E&tvn9_7J%(hXOen@V<>4lpndNj#Cfg)*Mj6&K`%V-n<Tu11Cbj?-h?5_44L@+-0akS9R}j-hnqxCH4<~9eCsOj9oRN?gQonOsf0uVcvY6PsK;v@@e3tkUAJRGsFAI<Nbx4zdbl9?fvuPpFSto(1G#9&mWu+_b6vD?i1wr6z`kib8q?JjLdWM*|nWOs`K09mtmYg>+)ZR`(3Q=_p8}z9Sl5qR-mTxoipMfSLMS&UVQ%={Qyt<w>EHRZ^CIq)>InW=cJTw*12w?73<(YQInEyBXUX|3HJF6_HcRgMpO#L-Ilr}*!y5Yw++^YNB3iz!tujoRIL-<#*rmQ*{F4QfCYp4d<t#<ZOhJp<K$5ss>N1wnWwcf(2JL_D)dBeeXdiQH&kHUM{P9Lz<IGtg%^hY6Jp2q*RYnCj8p;qW)vFv3umswbt!hjEkdHO-CLqnHWj+?7W9}H6UVo&n;kdPP~Ynja~mPZoEw(LMZT6o>->dT0d`DtmfdJ|)T!Z*a^pCaoxZ%s0n(-dJl&4DHMug4&vQ|EN#$XU|5J*(1@Ta?*6WN$vgAo>(4)$mRBpMpukRt}ju3^+8y9eVzTsF?Typ{b&?GvLH_S0+S~A{6aIM5QgOVdg{{Rek5rA$b&toaBJda3<eXoK8yK=zQ9y~h=9)>8fHq||`$geyuCsAcy0>kx%rO(0MMu72nU|=r}GXjkD-FIeFsp4NsXH<Xh`9H7BDCTKh-e4R7+g^<Af~TRVnxM`Nsrq8&oW;RdTHHzNtCQQ)bX)m;0OtcAUu;V~42<gvv4>Z-iN_1L-~EM^?M2$|+G{-U5_9bJ<m?Xno7ARdRAxHn<+rwL2gZ4xEtsA(#}53icc~Yp&$1EtaK{YCv~vNs^GR~Bx{%9a$FA<SEEp@RiEk5|>%Prm|09g}GSysj3)q?oJ=qe|Sd(@gXw$j0uU9FiOKQ1YX6J{{&>26N-@&GiX(vyf!^4n~rRUHQ_`+^(<qKBvBdys)5YvxFtP7)@<eGG0&6Hu8uX!manO2=bi-yve-V!boU(=~H^mNUOO}cPLp&+Fo`HI&?Ef<9Y<D}<h^&;%*H8)5T3hwhRz<TB`WH7cJnRt<pItLnKq}kf!3iH$U7j7vI6zf5d+v;X4f7?0!C9J9?)^C817bN=r7U(>ZdR|1G8*}idV2lVI(Nh$&NhoqBjH<~l<|+8?AE@CFl+`(ed*3#45ysV05J`|L9uiLr$|>9nXS|-SgOT~3G%|tld(TEP4J){Ns}hWO7pCvEbfLFXCCOv*MCdDcwi>Nk#<l&`Gb)Nb-Xd0|vLj_`Wjc(_(KF~O(9QX7VRi{z+m5rV)Z7=3=PfOZE39$Y%g8EfOd*L}X7xG5+Wqw4zKd9bPfjbb@Yh^i7l}dMQwC#?+$>TY_yLYD+!gJLQ-oT+tc?VNwH3QB>xKUc^QcLA*|AYO2jBI3(vV5MAWqukFVVrjMdk96YL!8CckDIhO)&4qbUDi7;;;t)k)xia0Lx$If<=5C5x0pt{b?hf?s4cP^6=8Qh$Bv0ICq`K?F)_Emz~4kcv#MRd}H2}B;rPGCo`tCv9DLA)JU}@IbX-tRalinyZji{dkyyF^A;;mMy>=r7Y8NjQUU%k?8o4vFTnSPahN=9?E*P?hum>bzTkp&as=zR2ERX+iz@P%bYWGF0DB!J_V<h1c{<9kB6gFlg?W2DrC8tG6qnqlUSLe;xiOu<987YpwYFq)ujf7NcmWuqSitke_;b1u3D)!Wnt%g_>vOP|3+MhgFWZPk%S)omFv1w#!hGZK+d%gw-hzvi9JR>iR4(+*1~t3xT%Vt6Y=(Y%;(W$AyDfPEc%Y1$@{*GFDr^7<onAe1<{U-<_KFC0eprLpTkeTrKPNVMqjiCt{c}`GI|CmYIs55CyMC$BQ0E`81z%e^p_Tj&=+~hJ;p+tew}CG}iG+2N&$qCTd5nZilWiCi!bUWpwI6%Lw>-k8{N<CY*3TE8V4op6YHL_mU>Bs5>GWmCh_#8VsrSg4!%m9)f`*4QGGDhAVXTrVWravM%v;QRM|!YfKXBaIuj4k<bq{g6;KoMY7+#_+>+i3x>k(T^)eKxXDR0~W`)=eFk6j1vZ6_v0MDlRW&TsI%1?4W-Gw>}m7x%XBJCUb5vY$kpH!0yyUR_S;NH$4RH2FclZsNzhG2pwVYzjAGu$C5mjrdS=eDe+_?6;r%qc!1TXOR`xEx<r92HNxq`A0C$x-{A-J(vbBuW3|X$H<5A4%*|lsm@P3o2;a6O+1^3temE>?_a>y*ivgF8O@NJ0%LeRGM@DOkAb_iX4y5hr>E4a##AR`7MpK^djL=5CXdZSws6N>xL_+u<sAwUbYLgAxs1x5yTlJZ6*al+csr(sE+YG!gdE1w-ghZ+4|!bb=!<1Ge+}))T#if~bq;W>(-HMx?<@i#8{~aa<2ugjizaxRFl{md9FAH&XI@g>Q#JQgu(;ZUtZ=x-FVdJ4EOHB8FZHCvew}7WjUP7=`ANV@ExV$~%iN%c9PD7ls6Nxzu`DD}ep|e?+$w{)5Wrjz=qoZ^@cR4|S=WXiV2*JQ=FW17IPyN$l(5Op(pMR=3~%8IR!(nRoM5ckM0PaV9n40Jb$LBwjeUaLlws}cDhYn4X?xr?y#+bJDoc1t2za6<)6U+Olkb~e^Wk2Hqbc}GlFl>o6^*5lH0@d1{#hC>YD9_cqImU5OSzHge%!u`ibN^+U7l4{yQ(OIdV1PwC9FFtf`&iIh3Rl2%N?U>$g>IKl@5Et_cRJ%Z0K6THSO4B?K!T?SWd#SIKfSh=%^s5rNSCcU~V|P%fm$H$!-C@YsJ@;!@Sc`qvlGYrij9Z(yW7huW~oJ&Na`Ta5#S##>E18s&G9o^5B>7IrcF7Ks%}YRwff^DSZkU+`X1t!9;!xTpY*eG%hCL!KG1W)?foSF!x_!Pvw!w4W@g@d-*O(>ZO%+-SF9?FJ)vELL&FF=3%}twe7-W9A+Z28<Wbnq6MMIG26rsUK$6#V6|h?!5(qUxV~{%Ti^#j@yd^2%-)#TPid#G9$YF8dtpt%Ut3;1t2nI*B``LG>hOD=z&a(>h99T-gIh#+Uc;VPwIb2{V^FrfBwokkVh#JM&awW9jc>GW;eIejF-8r9flKO&lr1~dWXU?~#>$DETd)_!MB7=?=A9df$fO%~xbuVFIr#g&)ut>?E-9CrNIUbOGe?Ra1pc#UR|4?MN!6ouy1R+J)`<sQ#23_3zsHe!&QMk`^&U|%@IJPbz4i4>AAOIbor=};`j$5v{c&e0)qAHtF4f1EkQ?$B@ulLV&f)aG&HL~DUNe=w%+&Xmm}YRERQXX>W|(DY=g++!c5d@=PNqsDBzr-<tA*a{1-Sit|G#l>22I-$e~aqt<btt(#~;Kou}46FycngKs$yF~FkdPj&K`3M0%Kpv{*gnl)b~{#)gHA1kcTt3lvcnVV`ZWGJM=^8`8Suo{z~N@EPEEa-~U7GOx^CFC9wReNvXItkG@LYPSsr{kGiWDiFHIGSUd+xlhWEhI5OeDwGkNGu~n|2={YT?iV2zJ{C7^xOlc2%a$Hs_Ms%;g5`j0wz8viB(br{R?R>D7v&o&~Qd&#R?(49Ask2hCsWoa2tW+JAdVjc1Q(dP}by(`PitRl;W9%?~3Zz-QV=PY9M<qkd?1*((6`psiuCop@Rfi?84$B|vuvAQJaj$=pv()eFuA)aB7WQ1gn998l>q*66`nso~4$FY^_c5B-e0Q7v^X2lP36R14V?V3S^Gtr$MZxENJrub-_v88Uh}j%eY|K`%w0msKdBnz^9<i~az}SwhG$&PThy0lL^+KpsyX<3=eJpO&1mW;IGdoGmQuRrqe?D`#?|mPmy4ODeO6lvSM3Bh&;Ss}na)L<JEh)~^q;!v}UTe6H*ZXypvtA=%c>n$J{-O?!k64?y4xiut^tqV@N;48ZHy(9VVH2<$<r*0@7?#6$KOG-2v(vyi`WRw?G{^a(#sxV;))Jqueb;2b=XRtT%$xo->efc)`Y&Tiaqq_oR=l83yCv0`YjVU5%)MZ2L^7~p#g^ws@O|F4m@g4nV@_G3=g7C&?ASRKJbz{E+yvT{z+N@yntn+lz;@*X`>emPdJ;wl^OR|&K_jAh_4O>-6>HsJ!B(XiFG5-$ue2tSu-etmzUrcCP4LylhTZ#~1LkD~_{88pH>hvp7HRCi><;dA=a9Gble?t#`U&y~=K(vM8wsyaBkmQjS;}=k3J#?%Yxm~qgoh%#VE!$Q_&nq7OVs&TJ9Jv}Rt9h{;=q?lwd_J&-gc}4zlJU%QH-|i`ocRBMs`6Yuc8z%u}8>32;IZ_8P8Z6fkx-F$>*XW*ze&bbKIA0x4eMgdCXrvV@*F)tO-0otsKibKcEhmx2Udp<d;&*i!CvA@LxG#3A`UyE@rp1zOFse7MbS12c@Lk224_3*W1x-l9W7=Y&pu1o5jInBc|AKf6hkL2>dV?^*BS;K6w_GT+b$3(&`?o4zvRwQ}JV@lZ$JTmL!#WUiobL9sI-t;Iuh+Ttn37BoL<w;BXlllMm!aM0%TSBX7b+{tbL0C+sT6)6IfcdFx01d#+VHbbRD_G^qPQOVXs`$`eDIfS>ao2<s;7$vTfrd>%>0s#O{jH?#8hu(Yn=iMOEz^Q4jAlhSPk_%HB#>?P~&tlaRx7uqoo<Cxd5E68pE$0zQKUr$be-J4w<7^u;(HLgjbo!@t*9?DUE$f~`@8-n_9E;WkNw$>Xd{AkBeOR|0OIv+49Z78q4v#y#aF}IS&o%jn&Pn+T;J@`RXk1sGcCe)B)KQ?{A*bQ(e$+<l27VeElFg^l&{?ZjY0DsW}j%lB6Ft*?m=77ohDb%WKXwiApRF|YqZkaZ|Z5Q$Y^Kli4s!0Gt35)u^oi9XP#cL+xU0qdK<%3UM!F+SgEtfPfP{U&i7)Kge1K5`X?&nym=EAx|ZW;D|B;bRBZ*9pU(DRAUeq00O`518NqvJTT;eI>4*~Cv;uU9H#uO>%PUz?<ywrk7fenjxz;oe|u1z|9EY_D@QQRWfXmJ>gQ&m+G^uG!kE&UD1bfZxu72RA`rmJ9#D4(=Q3%u<^KUO5rbf^`w`7oN84{D{5;o&Ut)-aS%TUPbKC;S}@qQgg4VlON#OP*&%s9pF_uYESH7rikx^C>C2sVjZBvxvz)!Jgl8h5{;~Pw(qa)oNwa&G*z*t-ghkf7(nk|+bw5t;f4oF0dF68lW#&D)-@@3A^`gs$t5E4A`Ye(5wb+=wYzJW62iQLH-Rx)Ck8!7;##0KOH@}cf!J#i_FH}ZNtZ8G`*F{su6B+Iz8`(w4SIcpCK=BRUFQ{f&u#J|7JQv8OeqdU;<M7&uty!hh%>+3l``Q6zTlQSju?-&SPIbOcE)M6waGdvlWSzVG(70uMl9P|Gt{=d{#4txqFQ0IQTtswrUUn%Y?yP$I680W9I!Cu%)5rVD``1(cP0PGZP(^J|6s=ck}mYkr?$wz{TsRQ?tnd${nEE`jaGR_h5Hml7HY;!9yM>aE+XqVg4r0R3zLJt%tD@YXoGy+mysiBcF?XHX8lDx=d<QbTFB><GC3?qyr!M_J<sl-K1?2)C(N_wO%90p%=0p@FwY*^$hEX4vOZlxHYL6;m%d#baxK%hq?o||7owIBLru_op53XUfEVK((>KyMVx3BIuVeGDj;+b{w5m?XTl5|O`iPTpX@#YWb(M~1!=8j#zp4nl|G_#{SEFy@WEy<C&sCjAPGN_20p|y7dXSq8wM-VU=h`q=N5_j$wVj2>36UEXOz9mL1GeT(0n1=Q*}_D=-)2X6>sdbcj7(>`bpZ^jferIAP7>A6^Z8zf+H%?yT3B+r#n`|h-vF-nzz%X);Txv?xNu#*h>Ck5C;o<e4?W8Wa5r}V>sKvZFU*D?%nc`i^^qN7!+E>eB_qj2R23dCKrKlBTinMr%c&#mVgl!M(=uP~EPnB-D#3h9*6=v#f}79z8tc!}gL~wMnZC8ERk$eTx$0lP@6zgM!1_tSz7(+kzeQ!`QC-3wSBw)K`IT<8wI-DWq!Ap*C4wik6-0RTnW_D|B)-%r&&vFLXI)PrsV2xZ+1A$@wRU$LtP7JRv+{&D{$z_>=?<QuonI2Myutk0_~PsaS|M2Ff3T`r2*;#ho!bdJJ06phT`gU1<#Rvg##+!c=;R#MfF@(U+*)puEjaFRuqT*rL3ypDQBL_m8{vAJqffE<tQ}3Y7JMu{3?sAJE(im!Af{|0*4(cmhvGgEZzAkhHfZihwT@y+^3yt=fo-Z(3@#PLIWbOMPTUgwoHSv+5!BVux2h`@laR$T7{6l|>F#A0%VN#5TUdG5)Sxldrl%~HWm2DEek~`_!cDjO9&5UF7=)*wBXh2k0AqaVqB6bGhu`NdjL%83Dxe)9JCS$nP&lcc=%{5JRr%A-IvdjPCUitZ>QrthbdrxK>Wo%kH@r=>pC<SDzR0;~iYJT%C8+yyC^kXGCLVD)6*<_y;IggcyC{hlf`7P)vuX6GU-Ly!w(qpAFuq)14X$6w2-c-o6BtL^r`t%6Hu0nW*W$IlVpcL@r3ZHXD!6?W)Z!M{#R%q&(hOQhx_yrkW;%b7*4bWjse}ESXO{lK;5vLZ320R?)Le<`vrV<@ipAD6kMzZT-+(o)1@#&HSZ;Wt4TU8~Va$nes7Wgx)5^Pe3vbHq`v&YNum&w$gZaW7gKxRn62A6OBU9uRGrUVk<Pz6!#L0TYt*JLJ(>rICsCdazsJO~ouW3V6{NZPvoBu6#qqJadwmP0_Vg>JA`gl$sr%^+koqA5`vOh=BAFt;hDITQi+50Oel;7NbeW=>5r0L)5xt~vczp!(ke^Noz4I6ZavA1ybo(t6*68kEhwnI($Kfw!y@$TT6ef+DB;q*zbpJO*>Uqdy+*iAMQv&9#kM|;qD41S5>goExQn-zQPz4Rr9GsJF!d+cWQJk(4LIPte0h|0xKLA`-P8etig9hj&G1Ann5YC5YiPUEY7wS7-W?ClW_JwASl(<~IH$R0SP#|MX0^~9Jf&S_PuUK9goRP_c?+K{HIS;8J)iv)X(?2uE`zppq)rs9N3bME&XDpPTo;COhxP{mOU>>Z*sBWHbl276Z;7#AYQNrmfJ-g|}&Js^}W&RhgB_PQ`dkf<7<taN{=0b2F=-Me575d2OKnvo^O9X#ja+<Sf?XZ71%i?Q#Kas6n9&p+cbFZpcpV~#y8%s#%LYM(If5Y2;`7<<Ec^3NU>?(qHZL)@j(7Nd)+;x2IzJYyUT<0t29-^&7fh1}yV{dH(oqrR_MMjv-+oq#=lcWjYcG?R0svFXaWt>P}*V(5)AUp?X=wjCT)9K;S>7_WD~3ApMZGCbd9GQ?ff@5JMG?mh0J-rqgmhw&edH)e_>WIwo4R2}cfrPrky#(DMGGsGJ-EyX9tNR8X;BVP3~8P4~J^Jru|aEu)LU(d7nGv0#VFAL39_kZ&-t~B)fJ7X`YG*YqV_2AbhJJdCZ=yxIRTpqP=Gs$vm>lCj(KXzEVmB+0oN{YH?O=K0R;Kd>x$%b+HzU9QuVqZ@H|K+;tr=%?-mW=>k7}R!8X-wyo<+cz!PVMUx>KkHD4b0uKkD)GUVNOyD`KWXqfc*!X)`I`-d9^-Xi_-<y|A2*hU5Gfj(Wvr0#Iv@32D^HqwlCpargRWr<_-Amw+)Z(xop(>8*jC?Wl?fTxI9H8&fy7aoaIfZ`)kY>_<FmJEP`6=qYbavz%QcP!*aalfGLD`*$R3J>x-5c75EG!@$G$U#(&6pJ22mZ&zyRXUwlH19DG7gOElk<oqkcd-}vX8_0GyYT2|k;23=C{>EL?aKW%C<3d-}`BfNtb;g-p9D8RvOf)TCVc+36LTd?Um{4Hnw#7Bu9#qC;J6#Y3n)2bI<l6SPD@{x;?sOzz!r5~;_w`ApPP2>oD5x?^N$eK|9pc@;({xinm$t`7x0dq&L7w!qp(|LnlJ_ozwi|Z||Ta48SU&!y<s_j?@zNK|BL}eyh19i$<0X||wYtk{p>bOorDheAp*`c@?c{zPa>gqM9a%W9SjT?ZyV}BwVKL%g{81(I)zaH&4G1pF^f#2Lj3*7}1`p_}YURA#|`;LW>vjXSTcU85)7>PgfCd0FdsFkO@p1}3^=K$t#80qZ(Y>?{)ez?7@Q1gnM;Cgjl<|NeRnQ0aHQe=U7Jo>=&%J-|`H<U$Y3Aks&biPD?hl*^(y5It1e-kxe4xI?Z9MMB_hwyE@ABP8@@(8d>NjJI9G|xVB@aYp~j1eapqMUl7A{TgGQ}5wt<($Wb6V_K6L}mx~gZNB(R?Z_k8#8@*5kyiLM^EbH`-U&k=Nx|Pa=$6uuqvoLm>RGBjnw(Ow@|$?E<@fD&Rd|5R-&)VHUmy-T8AM{vaYUxbL|!te7Ab>>Zy<oe??8(ROf{>riF~$kXM;b%kmOBavqE-BdL=v;jPS^Dviqg#+&LbDXW-b&m6#|iH?0BT!EZ-$qEhmFtqkp3MU!oLuC1F%1A7`il;2=cJ}$it5OqIyAF+O5XQNagP)6W&aIZe^FuX(;~%NU$yVfgBK9}HQDdLGZmJbetjRyNq*}qfP%d&miKK&l6L$641)OyQAK754md%_e;&PFUE<NVH0?s>7>;ZFd-#qL3Bu9$#-u{M@tX70tJEj#45nFDZiit{|5GOJ0MPhN7s~W6D?RT71<zmgOE7t14*vzS2)Cuz9^reQJL8^H$KIE9O@=9Yfl(D%;ItzPn9Ci^eGCe<p&G8z*3PhZ=jpaG1aQv1A+5lfKn$*a3Ppi(s$c6ogl*x#k*NgJ%l~s}R{5z}N)7q+RY7|7+xe4RtP@asv`kKNV1iYaGF7U2^qeSFXCH7s(MwDzVUWJvVV}6-E|CBFhVLhc8#=j1*HVNP)TjIPUtg`^0%d@C;FQ`bh5zDC@4gKZsIc*|gTWsx&yC+y<Cr_u}c~y{<050yp-c)3~VI|hb4dZ_ndD$*;FH8<*v|UIRRLO+$O3=!Gk4S~NWp5KV_gL2(7hwN1IR-qn0L+fH8j)YITT~WyT2Z=n$T}}!A6`^6T4<9Ei|^PBars=9uE)jr8dR=E57K3f>$zRPjLsc40_@-E=Ldg-bA4x5E59NKrNdHA4dic7!rx>Ecy2Mf@q?LW?E1lABM1-L80T2f<B;@@hu-@<c--Tr9;^H{MtV|PYIag}7q@G#jqwHhEC&3*!-!0+Nb{qgvC|!6^?C1~FxyXfYPnbMy(sO5USq;>ogNRoJ^CgmvH!9C_&p~+Rjr@Qm#t0SQ+-;aR_HWPIPpd4@&BYRy3p@+hg-WUV}rlvjyw4YbNvIj>fT4%BQ31G<2$-xzi8`Qv*Ku4sIeag=4$UHvwg7Wwe*8QYkzF^{c4rI#1gghtwBTI+AkSkvjI~jbMl!F7ehXLHH+c-{V^Y|rhMOb;a*EJ`&vr^{;aCyfH|?U=Bj6>akOp$*G%w>vl~@?DRa~qXoBT{ua=+qYQ0%BSYzV2bJerijb{rsV}TiBUuw)Nn^)DRx|}W99CbAT4=ry&i}_{j^+;w#i8UsGgUYh^n=cFXI>sK$I&$sTN9CVi;CuemRJc#Z;8)is;JSrzT4irX)NXK4yJ6n@|LQs<_F^859Wet4V2|hU_lH?wpUw8(XR}ppS;)|9!}ecgH^ca_G57{$&I`(_>bxzdb`Z~yFQs9xwf_739q@VyIK4@qzrlag9@AP$Yi)v_m(uvfpaT>1y+!>e84q<seGThtio7RddQ(rwS@v;_GWoLZu%5FzNj`lZ`pA4_aPEGs54ts~PX>kKPpWLRRO@*-@5>G>M-scYBp&9gEpJ;xKg#$ptT~B&R_on!-@8JJ$pQS-Dmy4bG4^@y>xdl=Yp*)Q#<|)(dhEe<Ju}5;QJOh@KjY`G@59<`wl&f6*sWrtsCGj?R~Wl<f<0_uo%O%n4EN%<$eqLf>GIBvsj&~PoW#cTEjuXl@lW(emNMoiW+ZcrGdTUCF$p%X#W;vsb2D6v^I=Uc`?v_X8NnaxU;F=5FO@!ap@KiEuesx5ECS|sXQ`girs@T|3j8&P`C|Uk>znrb@>9Pz{v-Fw0H+<i(O%uFIq2pn-cJ0K{)heJ3!i4QduZ4o-(cEmkD4@v|NGw0`-}ND8+j+y`&DV!3_U2O?PS>mu)m1nQJZ$fUK0|(XQ>{YLiNR+&Z=y-eK}&^dk6d8?@+@e@L-)EJyq+5@seS`!F4_xjTc|m`B0<Q>+#CIwrxJt49`FHkm;lLY(DO5#CnYychIQ$KJ*SL%7v;4oA<vrRSn+yUb`ku_s6U~VYx8gM>N#9v7u*3U&Cf&JfhytT#O_AT(hQX(^Q<|)i>=&t(+W=lMa8kKOGNi!7xq}-)q(I@Au)a>dCqv?(YeYzZ`1dmdM+guQ6Vw-dFLF`J+Y*|EgZAtEFbii`&c{<OQkPJJj+0VcLMq;CCx^oOi$Pp&Gjj5ma*Cc{7f+ZW8w0i+!){>f=jK>%Jy2Fz+>88{Cgo&0HTB8s^JI)ri|;crKIDOOW?tmM-=XpL2|R+@g=*;Xkh9{Vixr%oR@<>a|o@cg*bw{QEE}2>8jEcjoEAe3DwB@o!Z5HIY3LSvgtrx&WVB9>8yo1a}!f&@~`>EsP7Bvxx(kohAoj0OpHQSU=#;g%NL8A?LQJsR_U1zI_H<;I2GE>vY5qK}^5*_GRExTh}TO-qc48xxSa5NUQt+*L>Xa>arDboYa6-M77*;_bor<m~*;G@MonB=jhydcrg8>Dm$(bUv}mT;5xXb{SEvMk83T~W~~xHfa1X2Ehkt*VFCu#GQD~c#0}-htdnYa!}@`Zh==|k{1h&#Q_5+GwPbljPPsu|QkHkTA<G?+FgWrJj(tet*6}PE>>BRwSaxAG;4G}V)+@p6HkAwN1YDY_F5N`SUuo<%S?z!K4!H=7wv@z7(y|S*MP6oB!BUMkoVWItO>OF!A}Q$-e*1kVDy(~0P^L}qJ!t_0p25!->1aFf9O;W!`Cz}yPA<5^Dz0zX=pGknc0!s_QysuhH>rvXl<n+WAHzs$g8cz+;KRMc-U)W@`jLGMT5`Rw*}r%1hvxOzYfJL;nvF4DG)~!hj$GBGNxCg_HD63!uH|gait~<DFSIG(dGQaJt=OCKEq4GLTKRhC<foi3#~#atV8=<w&Q4Mn73vWS)V-->%duBS2Y7eHFCk#hP@CNHa`M9UViMHt#JAnXtAcA3&#uWRyG2C4z<hTTmcP+D*K^YPf#J^chI&He$yS_8sZFu|?Yd_9_cduPrk&@q-j71jF1>Q{eM<_-I`4+{RG~p$1-2kNa4Td!>bMx04eR6J(#$AyKIqY@o~~75q}ucSnYbQ?s2kIemUKkLuYF&+r-SnO-+Ml*t!yJ7V|G2atB>uAc}!w&pVYj9f4^YgKe(Ur>Hh4E_Use6NVSjQJb~_2?s4asOj@nu6E3h<iKF~*`jO2|PxV`!n?Y7jVGfe>(gNS2p5C^CXsMXKulH|*|K{7<C>L3MUflh?G;*8NrWfB1CKP+qE%c|Ux)jq`KJGm~XS&>^opZmY&TH}`b4*7%1#%dkHthL6A49OurW_R>496%s=;MuObTt`?JEEi6*t4@vvTGb3D&{fQjkMw@NpTG8rM^92KgoQ8x->j0d^zGWS}eP@kh-jc5o$!`Bi_JR#9P>tp7g{0-sn~o0`{ihes6xX)KmL>@nJ<$z2(~u?(M1XC6lqdSX<L3ua~1OTTTFDp2CPOWjTTG!E-tI^F$*}CTK^y>bM=5aWX0<JIh_<q)I)#h@x8m?&(zt^S6}s^#%4{2j;(z`k|uSPgs?I?D)}O#&sUrx|H@c@rWCEqQH8=7CB6TK`y+LGPCnel;c}U62r4$eObjjJGdXdVNH;u1ati?YCp-0y^%Vm^dq0J7`2yt?$x?2Vk!l|@rb!&7zg-wzT6Vp!Ja)93)rh+jSn&NLs07puZp*P;P6QM$89HyB6B2iM<^G|DgDNjcND>V+p_T`vWke3<PyL&Gvbe7t!otHY^8qMlH|&TE20W}>J+wTT@1#oDLd#j>O7D8d}FEVHu|1=Z_|0d&v*oOp^|?O8TMeUj<9w;Zd+H65FPcFyvTf~wRCpGePVh+(vj&5nq8$_xK8TO3)l>Y>MrL-{+86sTY8|O)cIjo>x9F8l)RMYpw;t&Dpi1^pTQSDVb8sx7wP*pw#Kl3bg=)}ku@HH)ekdqzHykNNhQlbZ|7lU5*~Bx=`F$5Fw9r`4!K147`;tBuP%-(HUsRX1UAzLob%!x+&AB88?a}SEi1;6fqg;CTR!py>V*#4X_(tLsZ*p;)6(pqzi%Q7_i^P?!+JjCv48ufVj9C<-RC;6$4j)eDFa*PapT7o_T6=I$YD(6Jj8zHoPSS8ZIf2q_Ucw7q7CGNB%*A+j1=(93oSMLCal~l?R;C7t;Q{Cr(7Ob2VOWQ`bJpO;Q78EaO};!O1phK`w0Ag4pm(Ocn>h!0roWPO?bHHJ-faqOW()Z$m3j3j9oo(Df2(lMYR!}&ON5nP-J7&;DvqpJMDPLD__#MxUg?`{|A;#Q&>SMdD;<^MZDSSWSwF?Hpbf+?3`jh#?RN$tdknm=<_g-twKcjY#lT5xfB7@8#uns`BIDO{0U6viE}yOVj{ry8ex64cjYx;Q8~>bolmVkUX}A?5|vV9758YV&)3{v!#WpWR~FnNF13<zbf9)#SvN1PgirjIX<*C24vMmZeL<dJZ=0u_f277y_gGtV$9&6$KgsQLD?dixzTL`Ab}m)SsK+7qUY82rb_rn0#5g~v_F=$}^alGtrELATUc>di{{uGC;Ip@(PiB|d*EV+s?Wi||V2d6jBPMPDR~i4-)HY%H^I@&df94Xn^ZvOW^j>rIT4W>o4CgKZ>lT?Yygyu147fVCNxOA6x{?aAvF>7e!<@g=r*$f>RgZ7Yzvc@36FRD$JBsY<ipFDw2L~jJ@hWdt?9JJr5!J`7RG%C%qZf0z?_YcSWil&fj~<UI&J{01JpAuksC_gP|JOf1Pe}?rV;o9pIXyH@hTe!un@MS&&R#JtrL>vg^S*uqH5N?k--B=6u5%rh{zCsg^idz)uNcPQ;jxTX!De`-ZUy5~BnH20n)SN7BYI2Y*@K@ra5)ZYOsnaejLZKWf5*!$&W|IGf#dbT>simQn9tlke)@YHq31-XdDq7gR1oC1-a$*2<JdXc3~NwSU&t4wQ;M$<E6t;(KPC1gb_T5)shcAj(@|PYYw(fIv5}v)hFfgO6!q9zwQoH?wAdQv<Ro|U*Vs^TBbZOv!xiT1$ZKcMOg-1FeXe%l|2{8!zR&!q;-{A(5D_FeAMIX$m)v}{zWyTS@}<v`{W(@Qz{wbE(Pl?)mK9X%<Czr4#*AJ{k`)*aS$x%~I|sU(vPN#QqMU!m*VJc#IDL_P1Vc;;wWlfZ%IWBD#%O}y#`^yG)>7+p{;6}UxH=}x9S8eK{e=db`6ULW%Es(qrsBJ>-qO9&sKGf@&Ju?47HdXyZ&+uG9KrZeX}H{;94py{Eo$rnZch=vtG-WI?4mS(1;%aoD{g|%L)-@WB@*K|dyM@n9)q00am38L+Aw#sf148rwbk}59*3y-kb{~<XMAld4c)++p+>K}M{T3)+q_x5&+z!LUUvIJ&2fI2>HU5A|C;H0xD@k!R_*U|--+txn~KWzxgwsGdt+<s3@{ELM(>)A@;Iq-C#<9$S~>V@{F3U{bo()Au0{DWGp=Lqv<2XG8|>F8GhDF6zTnn=%qzlo;(7ruk<l_ITSub4>XmDn?m2A$z9yvy9ejmK<?$Xpz45rP_kw*a@+#kWQ87w|d!WWy(6XSsF*&ubMAklHaloGL>y{ix$lLImmWh(kHF6=u2>dJ<U+Z*BBlCkb0Q5(G8<lP-ESCzv?_pJJJnnZqUh2Foo<eReX#GRaqWmeUD{ZS&@EP1!)cyo)pofe*(Sj4~p(8Ax1qXWe1!?h~5^?s!SlYhkx^TywcFPN3M=db?K-DGGSCf_H6?Hhmnj|^+qq_yYFkX(mN{U^~#)<LcmT?})&X;Rmgc0_zAxFb2={R+yEf_ruCRMGju!<K^PmX@=kG7&c1!6yf&(7Q_nyp1W^eMqFZMQXj6V{o6|9wNf4JocSDhk)LawZP^;@57ujeM%O`C^iU@Z6-POU}Xf<Zi=wwd97U?L=<yMRMITok+b+DbICZTyDNr)gfRUz!5y@^7F2~exyXoz|b#ne<$!`BooJ}*J<4<&~LNeFED%mUe!*Xx7cUY=G~wjkGwwAWE-V1JwD?2!~U%DO(R!}^>0JGe%PO#&7ci`{YVUQ%D(k|{eI3-RnL)K9i*6m&)LV6hij;|jcj4Rf4^&F`n@j!j;!)$PD-<~?@4{X-rGvqtzN70f6tRuHye-hbX0rUU<8pzm|)IphVgaqDdzk8UXSs1l@n81?)@HZ9)8>Nd*$Jo3S+~6nWn~8!|?rcU(+{JT)}(IXYAUTtLpnk+e4q|74}lYKFp~1XdzdQHt2(>e#gD;`pTMTr7TU1LC$2qw+!_I+?qOpxDw>Oq$EH3k^G*b?n*<#?7&BfrX%iIBd+N&KkNxwaSDx=h`PZ3rs=N9Q}B!Hprl;dd=2<?9*L_4Ymwv!zRWAL6wL2}k~^$kUOj_jd}t$@++>~px`{ReABZGgHADUA?}?E+xK=RdLM!rpBeH2Y_yQ{55Dzudhd$@K?DM#Nzs4d_b;+~Q;1BijgD*O!VCy;Ny?pIAjnfgGWH$RJ`jtyIa-VkM%~L+X^={|UCs;1Arg%Q^P_u*e=lK!b|2NDJmDq-P;gu=|t$G~J=Eba0{!(Z6Hu8tkMGxHdr*;YNc33mWiH$vfd^WuTPQrd4tu%PFRXPHBx@OlJaXtr^A94PGRr>gsTH~{S&R^<%lce{Tdgnm(E9m`j`DZ^|4ak>#u)lodbDZT$&PX)yY)jNY9em3L@?U56$wdu1<lXv@o&~7k>IN#$yU1p04b=frpVxt{{0YbP;PVK4R`kPuV14g!yk+)!)n;Q{t3L8%XX&N7RnBED!6S$Bq6X{_)P{xc;c=HgA9uC>a$MD0T+T}MJ6NN*=4aV!@dI;g&v;)B@@{btcw(w203LTr@wls>kNXt-biL}jYUIbJ`An+cAy3s-eIWB8Z&Z{ECveqx&^_{IV;D!DTxLIA5B`q8@6>TQ`k}9V9<5XP@bxV?Yl|hmZ(#lH{HN=}@0IlPe&*#Ss_4B}p-R*~g{H0I+H<qn!hA}^Wsg2;D#**$W_#S<=O0Y`^4(I!OYP|e?8WdMt|pF{n+sU8@7qzZ&qn+Lb8)h?tv$7|Z^#vM(6^<9^Vn>+FJ`f{XsfW4aPP6*C%{g7<h0AWYG92Q>ivCdPpR@-&r3^w<YH1T9bW^RSHbll-dasVwQiFo`RV<A8hiU~J=Okr9l@JUR2+D}kLn-$haC+2>yY(S-@@~r(xgAO<$q+2t7lH|>vvZ}Kj=8o{Fk6Ez<D5RJ}TB+T(qR3?>QTfz~6HdhW!OB<jkeis7`rY8KObWDMF=jz59JC90uc4?BMzXk$-#{V+*yjv%11qT)Q>K>KQB_@rUt#H`4afo>tk-RL=tA7>Tjp|6+6Zm?O^&HSYg@4vy`jS@xP2cZ{QK#Pr#($=c)P^^R}u9F~Y@UETmDReBlA>~r5TZ>hSE9{0fBOj4)tnYO$<v>~*K;Ed>5F*biXmoYKJt{gqS*YRu0rMn8EzDEsUa?JAs&c1;!(QS=?>k9nZ`3LwQw~yW~{Y{=ub=%`T`hBc}{)DB1p{`+%_GCHy#ooWLDgOMv>K(IJe?5$S+`mU=*1oTY=<O0>Rdv3<!1d~XzwiTYz0RtsVjevg=Qlf)5?<^az7iE7s_zt=zH{bb?>P_r)d+RtIrhgYFC!*A<grx$U)!NaFC?S-4%mYGnm3ta$j$Kv<71(wgVNzx1!Vmfv7z~=P4d)KQ}GP65&Ov>{W**Q%}|@Hx%Y<}dM%CQHL1tChg{$f_SE0wu(mnIavEJN?JrvG5<buWMog{up=N9JM<2GhuXn*7K?c73om=rKl|J0J+LwD<j99qu37r+-rzpSE#XWxkd%lgjXkqV{r}vn$sx|ssal!j@B(1L>yR7ryN&g)0F{?)$rmx5Ot#0SPncF{bZa;d@e3{!J0UvAOV{gQ<XBQ$ZrxuUdB`2KAkr}bbw0PyGd3h}v_8RSU{V})iTq}cXkNF)h%LjMnf7~-1oU7(#f%h^S_Kbn|c$fvh-2Jauq*M2$VXW?F46-~)#2^BBC~FJ-j9aiOaG5CnON@Q3(f>ef5-$2@ui_a5Fozo6dHvhi_tr{r+4`|pu|7EW?PBJnLQV!;1K^q(c}L(Y)#$!V0M`V4ENt3`$@iO3#jzHB&U5zeIZu->c`D;?jHj;f?c#budxzYwY%wnTHKT4pzsDy%;p>>o+A{BbbH}>f82^p_#bFD$doyrAm@$pLh|j%-NT25o_6v!~@fwVZ`4)VNgz0gpfe+)jFVvpAMhE|t-Ae0@d(=P<abWC;wvGKhHVk8M*I@eNez9Q+72Wd+n6-<I`*;2p{!zX{tpB(sBVKxCehzN4#n%{MkAL<m1}Of#7S+Quzr>H9_x)OY#{DJ!q6=P7wZH5l@Ui1S^*%@6KHWdLvk^{`dn^!ptoQGmitC9w$(MzV97};c$@!~U>}RT0t;(<;!Y|yd47pn?j>}*LUSE$j;Qjnx=9k!=?0wrsq+%2gU4m7@^AE6jMqailH*^|}Bo9j;^V{tv4%)fX@3Yxqtnx%rpJVGe%;1w|*war8aev2EoVKj#xpqSwWcmN{yp=7HadAl%kCB2e8xOou{5OAw_3%36l{D~Oz}H)uU(d7dwfFybJ5wrq@v7F$_1Hh@hrgowcZA4ORK4v0CtDa_iQU<M$jN-QKWf19nc3T&{k7~dN^gf01`*iXp5B&s{vvAs1awV@XT|5`JUjfDt2`YZA72k+s?vovj*0&a{=Sxq>+^jq<=+_-#V?;t`hDc`7!&j1vyon#?Jw-r*Br}o*fWRR%KBGZtaQSf<!+d}bLE3*6GmTPulPf~@;_mhVLs1Qs7&48=QB4|?JdSW#`8bgqu~CG2YYl=|3=Myz_Z0|(cE)MxORJ9BgVd*`gd;XZ1h!6@27l7!*#k;J;v2@{u?=vc=-*VMcDfstNteN872cqwg3FToyVX4<9!~RU+1wJgXJ$gTv~z87`txot3Lf7din%^=f0H>$7brj2f%=up257w9q^2c;~#yFdCzG3e8%7QKR;vDm&Tm<Uwkk-Q2h$#FnuxZh1zxK7tB>IXgqNANBG)*aQ01tT--hG=L_7=Q?;M7U-olz*w6XDO#Zo_??S1WUP+#3A^J8p)*hJ6WpN8~<iz%z-}qub&*1M!b3SuEKIVK3%=wr>pYt(e{QREt`T0D^0iHV-C;On2M=U1RmOmfw>Gt(_u(p?fb-d?Ufp*Bg+o4p^-OYBk>ArpYHt>W<0q%ucY}wSy2(@GvOfy(7aGqsf4^x_7@pY<Cao+Uy#(7%z-|6dUG{s|iqMsP;6GNvCUHi@Qx(b@Vn3KwPzYO&SU*D^?wg24n?|Iq#c=+B%Q=4DUv+wPa^Q3BphTOLyW4Dz}1vc$NSM$tnJLC!dZLCyc%)#8M{p>dEX9`m<=RJ1DzOA#~cI}s#6Uchb{Ze7|*}ngr>;VG>fAoDmec@qWSDVRS`91{WX^yIg$#KpngRi6Fbg-Y5{~luNa>9+J?lrEF9QZjuR4Z@fzX&_8HnBHN=ipQJ_twYKH(z=OcgvA4rr?j3w+BA?_J6>pgJv{7*S{TKkCz;u^KSO*KD+OA9fr?;$E)f;^UFS~ZsZ<2&Q**Rx&B}SVV}U9ySc=i`$RL<{)@Te<uRY-_`T&Fzt7{<&@1_~cbxLo;&u}m#qH47AAjcCNBMV{hfjUXfAO`BW*JtqD~*fW=Cb_xH(GU-BYFOMj;-BtpH1uhV732<HtNu?Zr|IlyROE)-`bF~SFh(;ll{?Vo4@YoKgM77^Xev4jnu=AAxFl<emjWk@|h<QOXjm+sO54WHBzQHt+ERHuxN{+Mr!^aY9~~Txqn{n`@KIK=EF>-QJ|jl5}tFn>-!H)Rt@$CQhjV;Ern{0-TS%SFeebJnhyMH4R&Y#xi9m#e!u*Z+gG3eRc_zCW8r=ej`m%2FxOHms=V{pp0%H*&QK#tdabkV!MDAI;`3eTsIbL?^TenozU7*%^D)m`d$By`*r!B4>ZxN+l6rauba9Z{8TEmfZ%><`lIM{4tGqFFA@n$FayW0xQ!9^9e<`Vn!*zzdwL71<3L-!B7G{&yyzsi@!VmiUDrkpZjQ4z7k6AW-eWoh$>T9peThaH$>g%tLea)ud_vR*dEr37o8GU`$wkBs854{Heu8;P7kN^JAbM3qqgw7BBd@n!u5rspBJsalz9&yN0&HLGq-*xVJT_sEN->ieLzH4>kP5JVZKc{f(e2cjjm>=EB8ETT^uk#G;zZ?9Y=9z>3iFuRic<V*)M+#UM{=16DIpwimCs-q6{xJXIdMfq%@DJCs`td)^`##b%qK-IJuPM)EXivsl$GmXizj}H>eUTre&9RS!*xIg}mRws4x=Aa#pbgfSXtz68uIJjyG<5P6a_U9Q<Fv_)O&s6*6rZVXO~Sgegs9#<`=Z1CeBhlwXOY{4b#M_jUnj=Z4|z^_R~nJQnXu$rs(ILF!MVp;g4vfG^Uw3Uf6fX+%`i7T@bLcRYe#y|iSR#Qo)+7t8vK{P8}Iw9<xLO8$UE3o@1uNTO2vr;e0}#(?(=*8%lw|J{r-YJjF`o6Z~MQrr(bc4vKhTS4U}fj;!jwtaYriW+hEP&>~Gnw?10+ki&>8?2RUzbf8@6QGcU3K?+a$OhPV=P!W92-Klx+4I!BxAxLS{`{w7X@=X~w=9edb!Ry`ITVza;gcll*MQA~^nPvn7@ta{)ICg8VRd)&ASuBu<D!bKc$Q1ZY*(H?OS+STJyX^itnpZNJR_J{xM6W`}6%0U}>{uzH9e3icbNck$)*WA`uY14C(SHb4b`@6I3c@clN7B+V0c$}{H2iY*5cOH)Yv(HU#!Jj#Y=3|_H@ww4Yn12~p73)^~)P>t?tYe?RW%-Ag3VFnm`Y}?^8e_UyU0uMI^`GrkoCzL|Ixpas<=+_#6UV{`zGCry4CeQEOKJUgHcL<XIcBT82kOetm9BhNBF?}$HB&Yv@#e?Can1Ydc+fEu0qIbWeso#D(C2o8I_vHa(>=i+5hI2MoMNkb(w>iD8H0_mqYt4bg@|P=u(xteQjcMulHx2#Yk4(2h9grXtU7yfpk=!IvLpG#j|wBS{c~vRcIZ@kVt8GkyRTmCmpglMmiAFgYTk&2dy%Evuvot3+N7e)5A%wjL^)k%#G6o&pE7ouFwMH8aq$|JEnACowT^sBD_-$~zv4PI_`$VP4BH!LvF*rfx{#?L**I+^iQ-a^BJ!P8WbFyQ_UyJv^gvs)Y00r?`9fd+WW#J)36h7*(8dwiF)s4uCVuX*o9!>QaW1?je@!aWNiBIzt0IjE0XtVt^AP8cdR|r5xF1>LwdQEBQ+r$zL(I!w8vao85A&>l&ihP#K4@2<rtZgfsH0De;sb5hD&RM@(GNH-s|nT~0uFi7`u+~G1wZXH4F;ZG?SFv%E{B}U;h)g`^Q_4x=zMGP^W0YPC0B9%_h#05f1caw|6h4_f68qkrUvIe@TNVdf1_}T>K|&TIM1Tz6h*EXU-~((cz9yq;iWj|o%@`}ePC`)dVL1FocCk>)ARO)U4*RGCXt=9MC2uEwhW)?0$i4?*5Mf!jM@1+^6!SZu-UR!Y@J+7%B!>0l2O`V|38v$B5x`&mU%oW+X{1FIB)NF_c4>N^8()MeGi3UR{_00XZ3m;b4_vS<NovE`Ib`j&-b6`JDcm~TPSorC2!|nW5kOY_MN@Jb1i#cfz!i~$Nc<H*+%d4*(wW#SZx{fIw2RO&oQgVRv#-w-q&jJ$W!(_`o*A2@e2OM`;Y@EbGZI&w2FG0zv=UTb_LhZwV!=C?D78f^{~do--xR|u*x*bI(M9sBAEUhTUOi+l_x+=O68+1e;FKQ4!`o{dOQ8V9*AvSdlyX9z7FGpG0w#=m}915jx*)s14dYypFTeQ7Z}wqKE98<v-v$XVmd3u<ICD(&(rDai#`%TySp}rIp|}gVsgo2`i!}*VV<>_e&=ZZJnyD~;`G2+QT3a_pZMDxUy1R!%~<6shba9cH?`RJm=AqR`RBNux{t3p%NNCQxXjYMIn)JV&*0;{*GWWO&-tS7Sqt{k@m^tmzG5yCeYv&jIWM2h5ymR8NBdX|pU?60sK)0bpXUPOe(HO6y03bkV_p21dF3jfZQZ$=|Mt)u_xuBWIdxv}kMVf$JrDmb#1P}KkG{khjE(kN^}dDcpOj{OT4ZmkXZ$8N&3oUNSMc%gzgzdeLye!gIv>U*tzK6Le-|G6*!(OldOjxh_i&v4wL1R$1dkJ`J}iz#woRcC8}93}#<<=*H!13eTF(K0m&iMyqCg%Bo`<|zDt8O#iSaz9$^q;F!(MFl*W9a|FY5Q$7r?seFBnaw|G<Bk*9_<Hn~6L{<cW?hj>-+k7uYwF80U3*36Tp_D?g?fj%ObeIg@X*3F>`LFsBUnQz%^!U&WLz1jos?F?OW*l<=B9?%!%IMCI#Le-~GSFDX4y8_qlYCGfYN6$$o*QRDyUb!=7&v#Y<z1>VCrlOO5*ef50FkL~^Q;dS;GzsuD)roC?G*YkXN|DAprcl<qkZ+8q-{!QZdobQ&hsb-A+9{mAc8tg0Pv)$l0_Sb{s4dXV8uh<U;?teIcKJWJ>)K$gUD~?Zr=L=O`k2v<%1<x1e*Z!d+x<ZWhlOEE%oDci?1@@Zpmw!)?vvZHVg$I(PY;yB0cSU(oM9iC};{U1b&AMCF(Qe@%R2Lhtor*8cg)w~sHUdeYJ3x-H5tuAH!S=8J)H%u8&G_E)R-HXY70ZNH64KMmXHK<NYu?3IK4;8PA59cqq8(zG&)4iFdsX(52VR?g`AIeYg8Iy;{X)%i9vCV2TbH)9fug!+1~(4Rf(H!t=uYv~;A@MH9m|}>tSkWIYku4Gmz#u(Z&Qh>DrQvV=LJsVR+&qK@Hwoo$fxjw$@YP_SjLrMMvccdQ1e0jcHSR~M~AmTSInYM`bR1we9-rfl_9QWM)d$b!N6@mTxfeS`K)^~l9}K!Qs?LVT104b={n}Z6ui)duGy!owoE2@%5)CMmAO_?<3c|9`gUvtPr^V)5`fdvmT|EepZojTT;5B8lf{b@!EC64+|b-30zV^p50<uE2V4M&jo=j)CXMnAY!QF=+(>NXvTgpUYSCz6ccMKDiwO>Pqb!nN{F$ZgLoLat@W!_t^^b-$93IbTwXDMQ#QRjzS@FI)^XrVXM{#W>@;Mr&>TG2LJle=y^5YV27yNi$W&h6gcA>djRqc$bmlf~c)ie6m_<|!2$a-B>>-lK2<DY)>2~gQiAH2;Behy#XB9TA1lLDB{R`pYjc^?T*xvYycpPa6}F-3hZYd)dk3%8OR!RUjJ71bxH#CkmX;;r&UjX-NO=auwVC%HyyPAlGy-{+kkeff2cUZ*ehj4)BR+z76$+kcX)&=^U>yCGwF1m0c(R2u8M-cs_<wJU{P6tN%?)7pzVU_PO=)0+Fi2aP$2#orwndpWHi7+G1fBe=jN_xE04X!&+7FtVlQ(28YjOkaP!S6HU?USn^?cE7hhK6l;Izl}A>wo|!pWha!<PWTgs_T61KS0efBn#1+G=0osxi(K>&S}K+sTSWLW=Cd#7!|&^OkJ_IHFP_Y~=<C>0|7_PPpXR}*C-|kfy=^TzZZEIZeUkYbw|U-zG^qFdyqV#AAK$Cv7txR7H;p*{UB-;xCEuRM?MePT0bei0bG?e3&$>uos{Q5N3H0{y``vZ;`u_EtKl!Xq=}V+|v7Ve&+4*$!FX@9-EnjDc6znIV_Z7a&<25gptIrp_=7$tVtFUvZ(4Uj_2$JtA<Gx)ac?4|{&*+@GZ6EwsVvF<^i{tFFTOHEGaObhChbZKEnxD%)i1Yb<qK~zo27F16_;11A6><B_Q_uHuAT~3+=)58}f7DrusLg#x{+!-qYo08(;LjPniBVE)`TChW+qSSzpxE!$2g$2#H@_moD<)q)mp>PEAI~dk$E3nu@w{m*;xa|m9wT40Z~HFn`+(Z?-H$s$?GN!gd|T1ywSNx8`~3UC%T;zNS0MP)_lsw>eG2ST6Y%xA3vkK@Pb<e=-7O4mN67Vh8;ClQ=)Mgb{<-<V>eM*xlm&L#`0ca{)_xfgd)Wmi!CRKR+5LPk-*ZSB{&@zgvRSv&Ca}ZCYp1s7cG{lUPcH9wr<jPs-DckA!Jo?gq6_iO(+-0P%ot9K&MNywk-6l&LtdND*c5x|61laZIZbakXggrFrr?}z5E*uOaX^SpfQ^e??;5)yLRkQw&^A?^t6o&beY&U|(q#ti5TA=`Kbnw{_;_FiUmu<_54F@8RL;Sj=GafV9d2Xd(x5`b*&+MTm=u7cx7cCto&Rs0J9dv5D;vBwV@GHdyECDYlsq_M6{kv^n&Mf_6S9B_?ky$-gXPgKuuD#Y7k3x1b2^ka{`}n48Kb-aSFOby^CoyDZhPAJfB_3(I<T=Ek^*$Z+(B;h42-4y^@6O#t&#2L1DG&Br0!FLvgBC%=9AF0rWo961aLjDFn569BPUz<s@G_C2Q13!AiC*(i7+H_+LyD^A_=^^CcM)d=@xnJz-wZ*Jr-IScoKT6iq9ipCG0_5`Cdn1GeiA#5%<wMvLat_VR4^%0lLVq^XNeHC`p9=vZz<X-7*n+%L->%)<rj^IW$wFy90y0)B$PBj`socx-H&5bn@V?811rXf8_-lcQA6Q+&+}|aJKW=FRW`LGYtIN9IxCaLS=us)Pc~f5!}`U$1XB5c(tJ;G{Bq(U(7XT^wbn9OK3qs4-LdZhx#5liARSTja_VvFB!gCm_-G+r?)Nsx7Jod>-fkp?8h^4S&86j-Z<Po5nL{Y&<{%uU{YMq#)$Z>)40()H2{G^v;0V(__gocss#9GR(jlYWgfvQKvUI&6R<9bSoBbK&25*1l33%hHd+TUwy66g0tT2j*7c~*jcOP5Ns**Gj|8a&))}L7h!Fo;+I7~0jJmub7(fI?ca$ffw3?gd@rkHQ%De|SH<1%#x<+uEL42CZelnpS38uXlK5Pg0roJ!YyW9q8H;qfX+Gy^mhz5uwKkoNNZqcE<qYFmmy}H+rwmQYViTOJ$1TP!zM$mX(7k6z@S(hRALB+om42IL4_*VzJ(XYB7Bu3N|97+{8Pmr|$Np4>CGrwj%dr6O82pPD?vKE^T$ZZkKSqgHNVU~QPxp&R}csw(_QLD8Yf6<i&B?vEu#0vSCHH=K~a+~9&GD%QbpNc=l16c;WIP`1}c5DmQj>09aMZ6T;Lv9a-y1qUuKmd{8@nVdBzn2^$GlQ%LNA7y~SBU%Rw!?zYX3<q0Z?7W}oZuNSIx`7KLA-Vm-$B1cM?;TG91rLO2YXKV7>*e_5aV*#Inl4gVFRD5u9*jLIk2F-^A%%gWB%R$113|Z%4OYlb9>~W_V!_AYdnX<b*!ZgGZV21g`*%VoY+>QxKFx&e{+200B6=^_Tczx@^DrKe5Jr*zFMH>ZVqUxbH@4Vmd)BZUl|B-qIF|}0ri3_%AG?owz=(y89_B8ZS1vP-lr4qhY#%7QNpkDk`krapt-A>52d-Rv=Ma9R^efc+FG8ujXsGQ4Xw4TIeVl{D=|2@0I$4FugR^mm5sd;H9IQC76=}a>l^noKIr!MeUhi|f1Tq|G5D>2<$hYkzwyOf+Q5$*1o?d|-*R7Y9oQsi;h$>|9_Rf-|DL}4ccybdLCX7g7uv%Emms#1gM-_GiRM1#{ahM>;PzC<XW?4Lj)2gt;m7&mYQ7H-t95AOG?3h$r~SHN+=eLk>%;00^6Q0?lN57Xa#|HDzmYKu+fO5@g@c>*Z@-b^LVoa|W!MZPfBgen<IisyZd1X7h9KP_IA6vn*SG-h5clnT6Rb>(!dqP=9rtrPJ_nJFn+z3B@*4AR!dh&~!V{Y9BcJm{Jbs=*W7%Y#uXHr*+d^R<Rejp{Q?u~(UB!;0$GFoRT8Y*UdE{9HcUg3AK29pm{m_8;4At*1?yW-ka4z>b19Yi}-!-J3RGv}#t?5smNO8Qsya_zFq2eQvy0&9Fil5<=k2}Gc!2M-)EMJ!u516&=3d<C6S2b?8P+q?YqEG(&DC=R_QtC$OIE(zZdKX8<%mYzV>zzf+q8{?!_i<lz7vzddD)=qVA^Fk&x4t4()AV!gdzZ2Y?RGecVyL?u=l_7ES4)BN$$-WMh;eI&dtb(`xNmk8noZ^2IjnGKp9F6AMR4Bo@f+O|IqqM?em>uAB=;`&nFemDugIigzuZTXn%Z(6l=XkQujO1MI1AL6d5o>+y{<#}{kQ$&cv;)^;K*OD^xyS-WY1nDpT{y4F$;U(ef(DAWhZ&vBv0s8^M3sp1CKtDaR-}^A;8L+h)pci7zkeH@}9bn|KIoB^xb#su4y`z&-#t?L35h@673VHxLWgT_05eWa!rr=VzzwKak;*c_%iz0^q23y5256VZaP=upH+P5QO~@1lkqAY|KjiaE_er3Zo?ewetFaRql>^w*N>Q!z(xqZg#Z=Mc~!9^Z}~Ik_eP6^HTqk6@WolGmRZ(8>zHJYp}EeD>s#h75$tH3q9kwRB4*zXYAySXi#t_wja-BHwRvAY@_G+`?m^YJ{N9IMRU~cMUl}*_6|Xvfx6=B`zf4V!`l@Ij^FpZJ6Wt!;N7c-bTZv6Zt);l8z-9kw9$`l1FF%SI`FeMa;WiuV`&xP|E~wv%{u}E7yfwaORF9l=kPOAl=Fh($|6k2-&8OsXxjpT}ubTM(-*sMd#Z$}U*N86MZuq6<LGZuBJiSXy$wsdE51oc=QW#wz<6f!IX?R_^JIyiTY96vu$Gu(zKc1|$+V35iKLm4e-bNm`4^yq<@FL@1S{pB1N$tDOzsG_}?A4Dv<K`g#y(<KM<fOQ0W~r-f2d@(R9Op^JrR3j<sH?R#e^+oy9TDeoC7z@b`y;`t<;wco{_Jy`;dyoLB2n9C%easy@<PsA3O)osg{<w1_1_f_nACB2OA~=9J_}6ox<9`(<0LS}p1>44gSg+p5f~_Lz8(Z-P3kWcbMH57v8)+mkN5-LvDVBxZYx>|t8jQtVFa<@sYc{NG3|EH8wA(pMq)IiZF%BOddJ7Y{fpPu+|S?;U66Yf+OtD?G|Z*^XzgufjhA{BFUhAG=iKdnr~dP8o7WF+?hY35vOJnIRpX(3Q7<}RH+ca8>&x!>4qbL8rVZnJ^qF^;chZ9m_Sj1~>lV1X6p87*2#w?QAIc`-_U5_v*+D<^jTD|qip0>rv+v*1-jVh&alM3C-uQ_9>v>c1&h7kbh&;L`Iu9YQKNFlzukwBhhhpE>5@+|oj@9Ps!F%`yRerx098{X`iQCIMH~hipa5;Z#J(d0^Zuq}}sU$496KF|8p}9V=hM~|{h*uy~ScQEmFqP>FOzY-wcK!~_r*sQ`;H(yM@1hvKH5O#es^q&zqZo`5Q=&B(>_OuhWIlP<uHr6~$Is<B7x)HOVRc2mlH71Gt#2vQJavAn`0bOW?F&3aq-&!lfeCyOn83sSt2S!$_<nSa)LLRWMgDS+eqsY%Y0DV@R+>Q`;lmwmus=<ubs4$A9Hw1TRmV`Q9A?&oj})Gl^-*v;csE~QQ?zy{30O(Z=vG4%Qv`e>xa|JW<KANL8D3W0r`6+rNveT-#@yx6HTYS^+F#iK78pmz*tDa(=f1JKztzUVsJdmBvi5@?v#8NHA(H}nH>;QQatkGPFl;6M<REZS!nTONZHq%H_eBza@qa&Fo5S7_-=)HaEEtvR;H#;zQy*e|{4Z#NJo11U%vnz$+2*HbX*YR#=&huV>7;TPK-TA}v3i7mJ65G#xH7)S>Q$_%_97jmT`Vv(s|ODiw~v3>L-?+7k!#IMW{X_Dz}nO;pW`K-{8j&5&FvC15Ex>NeIycd0tDt{{)H=VTf>(ACYIWx`zf?no|>a=RUg<%j;DR{V@!6Ku1F`ePH!pggceXMWPbv~758x^r{hXsFnqpN{LtK()}F}O7ilDOB>bC_9Fh9B&|3ZNclrJMZI#t4KYbZe;TH=H4EDStXTFAfP*Hy_H7{@)>*JCk-RR@q1zuWeSvWE$v+UeZ<YX?wuLe>x!%9=`?;2~V;qjt#4dVP13O|_pAHiEn3`gc7WIOr9CY?7IYa)HNpSwhBuZC|adzLvATWX1H$Ugcda|tJ4@cR&{<)O7be5nmfy1-BAQOpS<2as0js_^*SA#)_VFD=z~V7MZeFOHuJtx^%wcm0|z)cvFes?bP{ZYwc<Y&m{j-d68IbCi#ZU(w1+eKCje_spoB7+x^F?k9=Wim8pB*L~W)trTXI-{;wpTB{%Yy5;(z4I;PVxz}03Z5olIxq@H{ZlIEw1&tYC`PX_1-XUHhfv?l^%4@~OPvDrTUW4Pz^L`1<z}oMm1-_KbvUY~q{#LoycZ^OJcDyw?+ChnFvCCP^zso3hTb6b4HMOGm8pS4<*-?44FQiXwV$cpCp$7;)aG$)^1@Vb>5j^jCWke=Df-3IWHtiyi^oXH8+K|8oWk*VGW4tuRwW=5jh<m}@{y*|5bBT|JwNzy@FWNqNg*|iA9+f5XK2X1S$>4H;vj`;)GBTG&$W83}9xwCHT<KuWK(RZrQ(Pob-ZduR^Ce*81<u+v5j^yGyrek;ao%<aCPmskPbGggJ~yp%$1C`pAMkY*><}XrqDR<8=fq`U<|XGkAgPGg5`%TbG7*67rgkXgzR?<4%{42iU3QnCG6~Ck6W0tHmE{efPeNcNKJ3S-%-tJsiB%u%Dr3oOdSo-=$MYI4ae9wH3C99E493NH%$(5Jxt&Q}c9A**0g6jwe~(#oti1M+8I<h!bLD6>Q<JXYG5RQTuK+H(5yLx{T{EjadzN#<NUl%r7}QQ1ky+AFqq$c;IYY=|FavYw?`I^4f}KbFUDtLQOwyEb8w)Y+ZJ~2jK!Z4KfIN~=-j2YdZi1qBXr8X3ZEG_&G4qOiXtUZO1ep6<-kImdU<)vF7maTY{F*+7QJmxyVJCuh&~o1?iGc;?i6vwe_tyrIG3!8_SriC;P5K5Uhgaycdl-Nd$z*NpUEmYKfPK=;=DsJ~bD!|W*QyUHIMRa1tosG`W#81AzP88aX7hW&pB!C_dd7cS>|FD|*Ms0Czn=A4Y>R8|@X`!}#Qgp@ZR;W3bNh8KFaga#Z-TQ#K1UJmmEX78^XCxu*`4HnX#8(8Ll$4wi_xwWyhCV9N^qn8Mq%8Wn@!Ly;UCfiS)n4m0e^p|$F_^P4V(^1PP~yIV>#dWSDRm}tlY)D_E-cBwB~JU)mAzOvjkVen1AIL5plEb>L(^BQ_EYY@cE8{=9-{z0Xl?|8C%5OX<6UCv~3Nj?4SS#Y~A<^zclD&*AcI>%&J0(&A(}ca5U|>AHRW%S5dQs{cA^I)FFdrXlTufu?iW_X6}z?+%IzMMk6$7m2t0l=h<h9Is^M`llj*x67in>-u~ha_kdADW1czYiCY75{pL2rk?{T@n74mn3tf?pq~oTZfs@dG3w`OE&zhbIE|`x;Otr>lj{3{5<YA+E@CI=^Z-TMgK<=T#=OvN)Uq5wHY^@opYKUv@8y6P0_pRiYxR<_mu|ags=cK1Z>Nz|syM4y(86>#W*he!1ZSCJ5T9gOWEnWa5a}*>F?YJLfj4*S&GaRU2B9!iMH<8?!FH>1}n(_A)T8u1o7s8jnhYzjhe1F>=yG4x0;|`l!{=J<yIB_b7>~d(wya0R^H9rJDvCdO0$UR)5ySWiq_;(p&3RR8#yNdVfc&_aFauEFD;+;p6zr#p+b}SV)-soxE75DW8hWL|O3*Ih*YoCmQul6^)bAOichD32hRdS!doOu7e@xHq8wh|a7qw<yp@6V&a0rC0w=B&bRP9VJKgihWM&I<xMl5YwfJ3gzpq9fnwZ*(-bilg^&-=;vL&?=}gw`=*_%q`Sfjtd=E;(a$&{5XDJfpa?7-f|Lp1$<p(KYhjAY$5C~AG+@4QWouv{NTc><rtLxIB`GGY&?k%`>g#dBf)E;>}~V*vWma)>OGptIMOH78XJpNaOTMRI(>|o=kzhECe>%t7dC13Q-9OG87gL<t9eGn(jH@~u+*5+xTg;hBW(mfLh*%H7Vq>X-s8Vf|FFSy$oafHOsV2MmH!DYvi<MAXFBITso)|gmA2-7?<kGVNoyUf?9D39R+IDtDtW%dG?ii-su&PIE}O5LKK)z2K>hcFm-eQ4iyyHbOXL9sFGkqQdWp(i>HX`+ej>2qeyV&&_-|eJ5KZ77ovRt2|Gl=%dKzz0t?M3QBl9o3-4<uQ1{Uz{u{wx^7W93Kg~*Jk(<8Sub-#I&{A){niEX?^if>Nm@Z|Wui}{EYxrz__l!@3P|6Zj(_8;=$KRAHh*forrn`tUXr{e}$C~@SK@O}TGM)4;PU8HjnI(}wX!e$@B16?KWf}4a2?i0;-ANG>FptB`E9eTv6P-R_S`TPk|ldp??xyU`+L47w>cLab?r}OE0%WX)Yxk1W)3?RPt6fZmEwNHW@gj=w(jTHx#jxiq;XM}9`AR3epo&LwQo!?kLcFZ7qjqx9EzqO%=S@Jfl(|>NmpPCA?<9Qo4Q!6n<iW@l0G-gilKHP&rYCnoLTs`<7zPbLqjmW?Kh-pQcM+?ZpJJ9j@ra#FzfqbSwX^H%ov@a7n0}%cTN`KyY@PDqpco|e}U;q5~-|IKlP<^le);!XJ-(o-hXpflt%`c)|D%~!kJycCW*D5}Y!$KbqI^l#LMa(Hkz3*BEB4be!!#(H6KefhMoVNf5_m>4f+OKu+5=+0=SG5jpATWXUjSgw7YaL?AAuKTF0_(@O^`02^N%qHwJqV2jd0a+U|I*iCw~_CcaRvSyb!!{0;3BrUe_FiECFbwj|8sN2mE?*(s))+Fy0gFSN5vhbxeKl`*Q+#hnv;qFNp~=KMe2Jf6@QzYZ<IE4!<3DHl-ARmI#=xbsoU`^G|#t*7n;p*Qn|h2<&XcgCj3!nRp;EtKy;gM&sTm&_s7`y8b52rU!Q(qStWK>Vq9fC?b=q@*7bT7D$MNOyEUSXwn+O&q|Cd>s=LdP_@)aw?-yk!VHNmzpkoQWoE*^r@yMV@7CDQi+=}Md^Vab!S>u7B7=urAq&fE&tptwmjUNT^F`eq8+3I-thBEMyqtg|;=A9bhGT|oT!(NX)@eIHhmHf5Cs>CHHgvJrO;Wg_Ml*8DHop`zX)Ee&YRp@AjpuZqsT_HZ&ev05!A-2v;FF-+f-N4a7$c}5|p>0tv>xcfk@1e$B_^4+{=+wh*nPw*VKoH>)B}0an9<i?6W@T|L<LhvlKhE{|Io<q@I);ejUE$GADM}{<38rSuePQA?{WSx56xYmiw`jE_+6K=98<CtHPyk|Ny3>~1;Cv*M>X{Y@-5EjLx8FdL;=%SSgbo!x3+|3W<DKFSA|PdLMNATLKl}uceLzk!HeIwucbZYNyk>b~q(8Mv(bz$g0F2Nv#uwhk<u!I8_kZFET4>P--92lWWhS{~$Tqkyrk*MAaBPG#<hL1}F+1(YV&g>sb^PAkE?(x+wmQ)OOwIlD`8uOBdJ|X|JvZ_esj>xM$D2=r=iCMqxwOQ1y(M3Mr|>IY3wzP%HHFN$ojUz_U63_rKk`&t*&1^FlzP0$0tYEy%zRPf?Y?o_MR1Kh>b2yY6HM++)cwdg&zG?$^>?wK&r#1^DC_7NAtw2#gUX|IFSL{S#PQ@xzIeWF$0rek^uB8H6A^!JzvJ)xI%v5vziRUT6nF17boCZFgVq~ozhCF`o8v63L_HMyr|V4qZ+cWdn#HqnqK^5CJo0=tSXGkzVl_ICy5e5Ov^9TG!l>e><ZG9<r!-%s)GI5ZN8adITMIsKaeG_WP-q@6fq}dADtBK?Y{5n4-qqhD?pu(Xs)JCr|AT+yr0@=b*0>xS%^M>%$+oJ-LDmOyA4$}haQm^-Hv5h6u_bgMxNp`rqrwkpUm;TGc}A&qBK|8mB;*l<Cnn<ls!o;vH)&pu{YlKPnTX3fUwj2$IwFFHBNDdNUvsZAW|I6E(;Lx#iiabPwVjhb?3`Pgh+NQjjlmHZtFzWj`l>C6jXxd#RZGzH_Sf;>H3T|$iq8)JyS5KxoZr=2)q&(B`@Y_byxx=4M*F(ndj7K};c@=$`~2A?k8`9Zb8<WT+D<EkJ>VI(JYH%@^R3j7P9;ukNCR=6D|2dmE1uh4Ctv#|KUDk7+e7}{3-#aoMrb66=an@8e2c|%tN1*9md_`!|3B^{c^gH0i1<2AiPqQ-Bxjr4|Ne8o%u&lY`%31x8*%-h{L;vFr6#s~ZuuN<vJSma&mD&9eM0?SU)tC+_4i2UD^z{}i2Q*|)-pdJ1kL#bWyo3!e%(Rl*8Q_DY5=am<cafN`1yY7M2^VCuX~xVk#?P*zRTmWI{xW#{QT$fx5x3_Yhn0WWBY@w|IixSRPr5)^J4iPi(cgRMeV>eOg>)|f6079drMbCuon3Se({^uVqZ7iXgIP4Bf4jO>QdEyccr~8aHsOOA%E-pBo8g`A)3qIC!M$A7J4(Zh8yW^(`9cfHFwvC>$4nJ&h9IJF^czdRIN-k@tJXW>8QQd+aPi!Z-87AWV>ui)h_OA^7VfHe(s#l#iISL|K`WtK=v~~@sw)~uiOD8V#KAUUGeoe%8t<qqtO9(gaD>R2`@!*N1rup4_U!x=>VQeG!DobaZ?DbT?+EM`LfL!Tq<R?xJ0doj`plHM;05=3&d@Rk6uu7^M;s7o0~LFV0)=>wBF%lUG;550{g;ksfpWThXm3a=-8N85d@Zp;u(mz)uwC{Cn~W=LTY*yI3`ZkFHR{Ne+fNTDs;H-=?(WS{}=6=fnB&QU|}33HD1i~BRXZU4L0uLvcqGGSnI=%P8DN)+!4MqC8yj;K$Dx-Eedq4#q|lh-iGwoknr<>NAA0#Z8Njo!eeLdI>!CWaZdefOq}+To8;UW+|2a6U<>!lrqHz(s(t|Mj`1w(l8IX216cHo{4v4EE3z3q3!UbTy5~FgTU-`&i;vAcHcs=(y;PM;XQ-e9#ZiW49wx!KDXs2CU9zpas7g$3Pr=2!Hm()S;WEulbD8h8-P*n)7R_QbzQ_0I1>kmuI~vp`x1MK01D*EVE`G}T_!bY5U-yd$cV3>j?zDrKm@=>53hkaZX(V&IHY#gG5^AC<z9;vLkrN*m8(>^fZPBE>+n1UzN7X<N`7vC?2pC9cv0H{&T9*VD9v^oRX@caC-ots~M@I9dy?QBQW6{=bEAluw>gj@7-W5A`mgfiw9Bvcr7koT*1e+Lj?H##S0`Yl?9W#5hb($x$tY1zQ1~IrNXFg^b#;iyS`XMylmEIH?vA<X+{vt0;?@~e%RlNNOORi~$VB-nf-g}9U(VW}dMFZ!H+D{_n!YM{AU!#*Ep0Q2dw*_YItu&Fnh4n+*`a@{+HbuM6kBmROiMH4kewWhYReghE-@Kq9d9VBE5_jnp&47)&wjenwD{HKfM?ILc0rT&)#utnO)(UO&1YdpHT@HCa!rBU#NXJ&N6D=~=<0}W*K<N2f*er96b0F~fPL8&>EnXkBD&;Om_Ac1p@?sRVD)R~wZmaWeGq8U(x>f~Rq@X$Xw`TN^IZ2lt!zpDf6*&ant`Y7%i2S9$#rfmi&0S9Hq-Z<dXESs(=G)@e<DMC}y=@Y-uQ_BR?xI(2UmvnOy6^bB%zc<gT@-@+H|SgLb9h$Xwd;~a=h$6{x#<@_H^;es+@h1fxmMCH`;?rrkC^@y!PAv+{}AQjmAZ=qpTDx|ZX=XOL)n>ag}4<jG|UTy@kk-X8xIYYAB8mz7g=tbe7uGHyE+J+Z+J{z%R3oj3zXmvPPkazOQT%~trzN`ikj^vKSoa!u>zU2!~ON1;WmJV;IJ_XWYnrXAaaK9;Lgrvfu1tN!qnv7+{~^ZN^shl7vh5$`z+h#UM92vu!nj+89e4BgMT|445tasM!a*qf*4-Tzr|VNq5-1_*ItAvLi{+yeWQ~JdNby8Cf?@Z63hDa2j>N8Wv#ewH`RBp5qET+&B&#+=C>4~L};jG>U*ic44j(4=FfFmq+JxpGujHB$OMyL)Qb51$dUH+j1ehoM#9+j4mqD=xbOXr`iOyhx*)UD9QUZKp=pXW0SR`>pj!fsx6E<-M4)Gh?^N~WH1WsSpw8faUUx;^!sM1z#AmN}*hNJ6jj7>I`O!Q*^uEhu<Wxa4<rs8geSkfMWpCWd9Gv-_cf>y5*<XI8hi<LjU*n&*%GWJtryD?}S@ra=aiSq9l3%%>06K$9ayQE*Qr~Z5v@d+Ff*Z`gfjjqEXEZGb8Z;i+WPXBo9-37q83>E{w{kWU#}05e79eP|#$;kWeC0mGIkh6QW+R9#df;nvnZW2=cjggT=0@-mW@uzkz+-dsBCt)rlrN#;sgRFX#OGO$982iUMC}{>Lw`pOLQU?Kpuh5Q@0I!Btt%EqvFD-Mr&gZRJigoJ78N>9&ev80`Dj2_+$~%RQMk>&{`Qgim#ofhSQ^xBj>dHh^T+r0j!=4yMg2U6SK2Mc^cZF7(H;;4Lv5I51^K+ehp~>ev>VtgxTRzQHjcmpUgntd3dp?7_#|SA>n~iR!F?dc{T@S~3wWPoJFm5{pO`UY2;Pk^jH3QdV$@wWw7cG+F=9TCJA5w4DMLx(CPU65p<yih2Qh|;F$yd~Op%vv@o8Co>b1^EN-Av*Ql<AK$%gSn8ULmXlh57FwS?C~#GUHgJ2W$9rAKxG7C6?Z<(BX2T6Qh(Z*s3NpH~gO=JPw{x)v)ByfQZV+-h7ZdQ7fae-Z1b0jw6K7X2u5Q~(F@_NE6?Fe4pWQH#f~!@uzWeR6vU0Pag~@vlc8@V1YyDI{lv_SYR;lxerj@}qr0g*{}@w4l{YrNDsdKB(RO9S-Tl*D{pm<q`<}avkqN9vVgNqw?S^h8Mn`L^kY0zV^X6vBspb*prBN<&SZQk`S<{jNQv|<9hE~lrF2Uao8e0o<4F2VB>gE&TXz8WC$>iPl4=$df;S^edldIdPSsk9C|~>O8=_SWZyniK2HW+05rE*$KFzIvw*xb3Zu25XOqGNA%f-_no9(Omp|khq4{K;ROW1?Kl`OwF7ucggLhWkWeOYqz%0-=fxoW%3!^$8OD%LLhv<{eB)-0-y*Jjr(3C?r>4pcdk-DCYiz|Kmbr)%D!G&-OTjVd}H#PTt<v#OQ)75xCu?Fz{AA+Aq<`<Rrx~`2#n7~a`1y~f;Rs8$hNKs>3)#Gd*TntFWM>>&5<nzAq-_uNgXq>s+c4_0Ss80wIY09p2>^Bs-giP|7r<%W9k{{YDSP6W2C}R_$h)F!JTFHlmMQlRynzt*#iR)_K1et3LMGPa8{O6hAscO#d{|pcN$W8dVme7~AgktMR9-Nu6+7%1qi)WDgR>x_f@vxGcQE||E?h5X05#JIqht8Hb^5l8N8@zy{;N=l<JaJuL<s^l+YA#|9{JJ}hP27`}&abT%&Rk#vr7x?FdzZ&a4!K|wyrMFm2PgXqWIQf>=tqnDyz2Le^)`9D&!2RkH~FV3fI<Euh<#Cez3g_V{Y6YLG%Ol`u{`I)_{n{;u!7@__Bu!El@qciGaI6+?7T~SWCdS04slQYE%!GzTcobbeYwVIOJbOZ7*e<PTfWARbL@Kw@hO8nw`Y#b;gbvhMob%GzP9?_3o=}T^v%TWzD0f)wbgCcxXnC=R}1qwJU*6-x)@RJcx7#z?sdS#d^#aM-`0JyjgJ&1j$wV(wI3rN^~MAdOLqBwkp$$aw9G~Ac*(Ay6=uzS=U&g1$qH^$Z+KgL{0ZNNnvNJ51AfWpe!xw5?i+8h&*#b`G}0sG<~7<NJYU8d?+1fO)UJ2i!c$y9+MdbqI8?cL=1!x=0Wv>D<&x&+pzRgN-zBaCz~>pj@4@@RqMwla%^AL4cZ1yl*hX3BS>R2@y<xX3OWaP?kW>`4AL$TIJM3{kw&CrBHV>N?n4+dy_)y_2w#=x)v@7rIvJtk852_qeleeV_(U|VAF((B9<&1`~8xwj2WRph~_fMWGD>=mjIB&Q$iy2#RJ7b{zCEn%H6YA#^VB8;uaE^m=Du?FI*BX<0^ay*?L_N7T=yXTM!cT$`;+}x)E^LSNn@jRM$$9zu;Qrn}a=rG=+kazDXn>~Lhoh}A7Pa8IK}&;*SpJ*j@LrKm)sZsB`lf5C#BoLPz;ygP_s-|G@juaR_{t|+D5+uMlf1pkIP61*2$UiYyAgAo%74wpoR;aDnr1b;Lb2ZIH6f{7Zy~rED!nG;&;;DJJqUYPjUU4z#(CKs%||UqvMCxv)Pm3lrhNc*b~KYMPX014O6qrolhPOq!ArMJS2MxCDm4o#$!#z57JPm=2`*soqf$BBTP!&&Uo=Kr<a7<YW|7L_cCDCn95ruoLp7~h`S;_fa<*(C{_g6(ucgioo_AElc!S82HQoBYw#;+LzsGX_N$wXsF&f(}vCPjaxj!)+$u(|@d300luY$K_djq!N7HPH?T)IP=NeuQ(>)rDIYmWBw>bXnB_1ChNyl*9zd9{sP`JOVS8i^S3x|kesJ^uSu*P_RAejfzZcr;u~#PFn!?c=!Q5sMc4U4bc1FCTW0BC+*?>4n-vVVn=#i<=p*^&S|0V7!tQAAtV+ncBVLlVLzyZzI}mJ){*szgrhZB#v7Lg4e|s$Cu(g1V7DNI{y57sgI9$@cO)72!0s*c}?^-Qd^tvA5yw>inO@_(+Gws5!Z7i7G36@-X6cjdgTn$=9bC#%)Vpp3sDDk5_M1^KEH_fp38jEv*v>4*Z<BJZQu6GANiv6p!JpxZwimXx0T*z5}zWm>GC($+b4-tANX~7`yS~U7*R2$`zcwv#RPOeps(ix(X-pA{`S6kit;xRTNVASV(v00!29QMe))YqlGuiBmE3t_^^$jI7V~lVhd%!+C-Kb3gCk<dS3M5-{_5*GHW0ji>*kpljvjyhSB_%JBroBx^}nzCm8*F6u()n=TlFcWtEIT^PRF8i{rgS-hWhtj|IYO9R{uu&_d))a`NCA>`PyoF=kFDsM6HA)IrzbsCWbScZ-3OSY2KV<qhoKF`#g-VIozk<J}gX(%D>);zqGk;@wtVAwkP1CvIx!vcHBcwmZMYFA<XAKK4(3PT((^2xX*v9t!qGYyQ&Pj-r)3}_lZSk?lQg$ZWgtE;*P%8-e@LPI$_5f634u2EGSI)N(7GJ9ce!WInAB>e|>#VstmRFtbohx!Hc8Tei1+P(XoAsd+-4aV?hUS#r;^uaAesLWtr<$+ag@1SZnbq{xw*3w5=WTzVk*OnW?!OP8PR!P}W}|z<=mErgQ;Ja<1|C!T(ke2j#n7@QRQM_GdHclNj6?qK>&)LiK(S(vR8)@0mGXklC2^z}L~i%Xcu^A{;Sd?&oR0JeQDl0Cy$~h(}!N#75+R89gLU^2*n7{zPMz7UdE-Cisd==h0<@1;1c&1;*6}GdK~L0OFYD77dE$!;1|xbB!1`2I`_PH^!;)0HLf|P;(qM9y;>15ht_G<UVYHau!#Hj-z|vP{aA0Vw#nM7o`0aRQ<9_5M3n2_|(YUKUycg$^GT?y<+4@b5z9!9}5UB$sbDF^Yy{K;6`P}qJY~uF-Blbtn(7-wGw&>?>qBVtd$De2V7tvBb(Ww(55CRs%p<Z0*g9ZZba=4BEKtrge??tXR*dgY}YbJ4?Oy(s^^8ep7_W97k$s*&&MjRLo};r(XU+83%;pm|GEFiITDKnXY8K&-o4VCB&Z1QjY($pkyYRrg=ip8Ne^<szZ=}2?`WVR=kU3M<XAhA(7CV@9OcApmb;^w>;C0-DqW!N`jlGnEbgy<;x9tnd2r{V%@*GE_XxOs?_n~GUTLmwSx3@(Al1eLFB$jaxm|J6&vZ)>xyB4s#A^dSt|#b&W9Bc;m0`|t*OmyK7PWglVCdcjZ!~_yI~-IdCb`oYt#T)sXFWMpB5z=gi2D(J*|!Biq}mPOnC9UE4Cn))5kO;U)1ftUmx_4DAmWiaSF*+~!A(GYd@S!d9C78FRRfzz#GE#MbQHOgtQg1A;`4|>teO!~+i^+}TExb6glM&_?&ji=zapqD5F2OQUcJTK4<S~2$IJ_WCn7iW$j9gj_2xVAqisB#u6O{vFOs5iP*)ijLe2I7`^6OdlGn>fXW+QZ)wQ{u9^^xE-eJIP^n^b*3(F!Ykr!T*Jc-hdzV4j%%;y}ZhF4q#$vXEVz~{2l7Mfo<wubHR;u#4$&Ei?~g8Vkdj0O~;cXB5!F!^)h=(6*ph~I17_$?*@yJWDu@qZskM-9-KV~wLvU{JIPK>ElP@p;5VM{ibn<2g3L%MQ06c!+{VzJGGSsJSABo*F)i;$!O*Jm-DB%z^81e`*<5o_iH>pY)Mq3~0GQ1XF`mC{KRzadk@BiO(|x<(Q@=Lk0ARw;Q}8xJMD_qK_Jl2;Oa*KQqof04m4iw(U`dGkBk8*kL#uD8TG=&$`j79Iv8~`h2Vmv6YlHUSQCVs2toI%souqsM<05#OIn{73u^gEaR)$yyR<3d<T5=<PUB&f&1Fz{<S2odD$Vd-r-AIqx~Enp;<w;0Y*D-@D-6Dy6}1Gy}8?Q$-LJsa+k@W8y@&Rg;UXXy~3K`C|-OBEKxCwnDjXWhELevedBy<N7AuA#u`VSDm)7R4(eWVdI~I(x!Wq<hadYdCEhA5h;O!~;zCebNDu8-Zm5W7SV`PrWGfDeA6yqdHNh-;-yL};{@^33Fp9EZZ#G)L^XK2vBYWlFZAw3X@KIQaiwhvGb1PSW)*J&v(tEEzG5b~SUN;2_6z=gSc5&G?)@6<h8#X5uv$B<bt-M~z+lt`DQSdK(anY-IAyOJ33d>W8g9C+g`KfhQLV`)3ywjlmS;tUTmIs<yBzfasK&|U*m-oU_YlPxE<-cV-PV+k{TjYl(&xP&KZ#?4@_v>{nxx}UYg(KvlSGX&{NphlyeL%kVeODxcpZ87hr%L`=!J8u1E2a4(>OnpwF3MsL9MX?x5&Qn686@@c3RCguCX2>gp7?xpl3LB?(%2O?(`$&h_gf{_CQo3R1SdWFp#Jhr@lo8BU;5)3`d<2a56*h<z(6VezelamR~!8mJGBI=PX#}FEph-o5ZLCgI<x;t9QB{#r2mcD336ZEsX>i{jC*e6Fk5}|VuXL%zWn94(sxuCSbd(m4_|bg6lz{rUur4IZL0Za_Zp*}D$VOOef)M-qV@vJZEqE3D^NNLYg^intsn&bio>cc7BLD>#$6}-QPbgy^Na8xjIV#tXp*rNt<fZ-3Nn5mvDJaVH;OocE8?qUmB#{$C2@%oTP12U7XMKHA!}q*ZP287!uTUUxc?u|^q*-Z{h90R-=mD#Xs$CqRsD-GLG<_+t@Q`b8GK1KUv~i7rl%q=p!jTjkJWs93f+rI;+XaP=eIY((V=S9<h#L2#Q1TpczyzfY5Xr?`w3ylivQJk;v3e)RD2wGw--_C_&=y^kmpD(V5!jrAJ6q4=L;;aPmXQzZ~5KCYdxH9FZ;iJuD|F}t6GUi-HP#uZ?E%Dg%{5|l+z=4p(cyteso~r4G<w*!wdIOl0@*5a9f1!hPI-J0?2KL6q*CH=2r|Or?eI!GT4mwSAzP{PqDd3;UZ4CKT<p9S>#~XDtBV5we>&JnUXqa&#7z+Ee|2IH`M;6WDT-k)1H;J;avf|kc!(TNk<|yYdvUPeQsOjjfwgMFT=QFuc_I7qQP@AWBI{t&MlcSoNybd;&wWAS)RE`1*~ZybhC1IF*Xi4a3A86don|1CHL4^WOQIeV8C`cD(hnu)ox?Jq2)I87~p^=NzcE|j$DA#&AGiBk*=A=xqTuQXu%9^@_zZA6-ltc*C$#e5rS<5JM_8n#t7b{bvYZIvVXoe+$P@@BT1ZSCipptl^9t-&*{+?wT(fZcXP@ec5bWYn6WAG!x=C}fq^>bJ{gJOE{MS(_vJIx(I?P@b!v_4%rehq(Uw(D&B`e>H{2tCHs5bENAZ)b=lf>%bN^~&Ln!CAN4~M%%X*DL_J{mX?SJmmLTem9IKJe4(XAFbWrxKV-%WE^Io~*Bg=xM?POhl?nU_4vdXJY6xo_Y6z(z}3<w#(2jSKI#RXNdby)?^fDPJ?;Po6MKkj!>QUf8!cdEaPKxmLB#J}E6ab+4n!m3r!#_Hy4z#pHj}<Lp-QIA8IVH1fFCSpP{6eN*1iYg2?oo+CB-xJ|5V!ykIU>{`xHmzvDsc9lG)QO{(`wpX!sWxL%yK#k}ojoBddWbFx4ZDz~<di|7rDF5HS-IPtPYBPVScMH{fbgH&2mbN>R=SD>CJF5Oql`Z`*d2Xld6fFB7k~!#xsrK8+<09F#noH;)_&%FK{e3UbdGXZWzwJ<HT&LXN{vN#kN!L`>h8|VDsHy|{RCaKr`bF0PsoLn>{zo0qS?#lA{oJe6Qg2$-roQ60Q}svfT<ueJj91lvs`hTLa?qg~52|)o)gOiG9!&9;r7PX{QlC{_Z>z?Gy06xM_EasO)@d~KJwnApC(l)y-%`6SP?~dEd+XNAoW0T`YI?X<`E<GOQ{{^!FB12AV)YG8f3CNRKIOha=8JVrfUYZ)H3uTdD#ub{uYUJ&b}XD{1$!^wetcghSR~l&z}pYs#*7B)*r(>y$?Hvu*GKw+{M&Wa*p&AO<#^po?#SCZmHVV!(;PavPp*Z5S_9M?^YDx8&n7?<|CVn}zq~bFXn)}(<l6kd)+thUymJ+Nc4qCvf5{;n#D>@kyVagjS<A~i#(wA;2>VkcxU_w_{<cfiR`S5@e;)sL+jRZc{mQPD+v&@`mD}I%Kk?_<2kVvb;!gWe{B}VatnE1D{mHLug!X>#i~X<D{;+nsmuSDw*UmnSr_+2bgs1j=|B9cR?j!M=H@d$*oI^W3@#{9?{a)6qXMXKdxZXG6dfL<Vs^iC<%5^J_llK?r@niV0=_y{jX&CSKTizhyM&7^V=kD3}bH`%4=JV@`+x6bsZo(wpr@yts)V{4(P+Xr6T9<!crR(pxUoi1@-p9f(5ZnLr{{j0^=J)".encode())).decode())))
elif sys.version_info[0] == 3 and sys.version_info[1] == 6 and platform.python_implementation() == "CPython":
    exec(marshal.loads(base64.b64decode(zlib.decompress(base64.b85decode("c$}<!S(l?W7wr$~hXA%K<wr1x!38z~NuW0dm$4B;m0bnq*WV*>cRI<JyY9p7wGzrm2n}c0`y7e&p#S4v0sk4xUt@^i?^?G*BiD@#t~;(DEFE<Q*Kwvd1g^}~88Od;@oB8w4-WN>X0Yh5=V)fIQ0F?j!E?GS*V$mRGk=zs+0I_dceL}kUe-Ii*s*h8?^x*a!OM19Xz*}+H(9u!uTA(iU*SHhjM_vUhUYVD?vG~bw2QgE$&ei$Sw(9Lb&Q9owo)JJmqKS@bRJM<+fd&)$ogECBUhI9vYgK4nk>&`c`=u-Ww|QLQ(5lF_Zf{Wf0yNU2jv$-mglnEWwQJs%P+Frk?+3*wMM&o{w>?PP+9*h>wB`joh|FPvfQ29t7Q3AmhWYIyGWLQ$Z~IP?=H(5S^j2+ExXM9>*n8cdvpK3`L54=JN#r<RKKC_!FOurYvC8W;`&YPRN0;{$A9JW`B6R}$nl$d`TTk=m;JqpI<P~v0(m$zp~lUVl!rgLS=EO$)Y)~c;r^ep{K(>rn`3=UVV$m<`q+ej%=a~{bIXS3dboOZxQ6FyB*KR7IPpZNVXM_~jTyEpkTYy!hg%m}A8||6Q77wjfkhAZ?{)0T-&Gwme30!&3?Dh#$@+VaP)+9g_nK&!$nx06l!LfHdB9Owv-$Z=t!bEZ^kM0=hv)BgBJT^MP8dGP=Lo~^+@9Nwcrex}!<P!=4%)qPJCgSaw`tAg`vhDy+{x!?gL`g&$nu2S_d1{3t?HcNFImnQ{^riyZpIx{7xVM?y3nv9%M&{;xkKx+gLxEcU21qe-*4g*cSL=f?{DjqhF|6V)W%!xyvX({?riI`d|%_$XBO?|axF5sJNLKd!M3hgWXo}I7N5CW))yDrYj}NO(O%Z)TJ*-<hpgXmSFNwIe~qZGS`^Citcfe`p}Lm+Xzum8iDK?WavpEoqqUgptF_RgRMyX%h;whAk8keX>sI!!HR_f{^E?+UdguFjJ|6rK)E$fFc`mfL=KG-TW&c`S_bh5;{gOp3-_P=)@x7=&<onvP{?MYEEI--No$u%Q*zo<fzRmCJ>l=$6bGa5x{B53(SN=xp`~1AR*e7R`y*G<}GDK%D_G|ouwcDlKHL|m`BX1|rlMh4c$(Pil&I3J)HlRoH`trQ~3D;IvKTKKg8|uy1^m*-`*Y$E8p5=oqA9z;T@s4%09<<n!{jQoAabL>uhr|7{e#mik(q6=#)ZdG=7ygIr*Iu^skowz6dlCDx{3`qHOMCedaDP)zQV+XLt=KV^?O(MR<XqbOkB|qrR;7OTNYo9((%$PE-6}qNQA;}!fSqJ<!udYe?KtHe?3j1c+Ys#4+0r?Ot1hopyulQj`Ytq_w=bSR|MWqxb^Q3Vp)fzXuY1t$*9PnX@v<}6FF6m9lIk|2JQ`kgo4!Il1FqZU%8tu5v=;wBwV%J)*{gNx>-$sE&rZ$ST=npmv$OP{-p=ynU(-SU?S%TfzBBbiG2V3q>n+!RkMv2=OZi*tcJDfjkA>EG@U}2WGdtr~9o8>9)7pUkzK6l9uEKjmdUy%tYs_9h!zJkS)0wKJo!$?-+SbnamL-9ro$2M2U{P#4D{HoWe(&tGK@*QtC=-_e>@;V=H@B0_Xs}4NZOx<Fg6I0YHPkZboIIgQ%Dfv-+`Sxzb}paK(E1|;M<m~W?5?@yHHi}3I743?Y#MPyoH2FCZR$``t3KLJ`HDVLjeHeO3;r2>q$~V@cG`Iij=z6SpR0$1Vd++=OJfQDsMEXYs&u(Fij%0SoED=`#455qAFnXWw2j6cp5)E2=3oP3dY<CexP@A9%T0H4YWskJXA6b*@J(LHnF<L0Dp?Sgn!C+ob=rqcrbqqF0=d$WuwLTqeP8(ApTxdr`y$+5$RAM~es{IUs9wEY_0J^#QJL?JRcFXj|7^~$?q!U2_GCH!hSe?4-gm|3SlwU!*R!65=kUabYn+6^@vB$b>14f4>$eVE8C4DRVcIV^qw$3QJR~v4HpSnmf$yhqT)lVavV45C=>dQIIfOUzMwnxLf7pKdrC52J<9ifMEivE9ePzKCp2EAf(@sXLZo8JfTRA@;E+cZBSI2d}@Y~rsO^tajlj=opCWDRo;8<uEeOO&grrVzTf!*v6r>LXXi*k?klzmt4w(+%PQ}l3;!6u&SU@C1-;d(ZNN>IEL^@AHa_K=p?$L@7i-wpnHzBuf=4S9L6+2^?1ho`IfL-qeue|+d~pD9f6iCmRPE1M)~U##n`GaT#8KFjID7_-3Dx8C%zJtE@|&pDO45_}})=bfA|XUfsf%=CDU{LI+tdYMFGul6UG`0+8qM%Rvx@%rk!%^zpnso>F#d){xWwYp1o+rduI`j9oAV_f6>eRDVec#IwC^>uB=JHVxRQkP9i)_=Y|zIFUwpWh?=O4c`RXq!Fuj6VkD)jihADX)W}Xwu@v-u`LV=cC&E*ajiN1Kob`gV4>kPw@BM1NXW;0SZA*JRSewmrY{or|r%CtQ;c*oh6U-?jGvX2@R{gv3W)D$L;w2+7yYI8k+SZ4nM8^;jX*%p|JjSJA{YE{6VM^@+gef?`$YPvHf~H4lkO$c7M=FIUD-$S{mcqn?L*s;4O6q3*->wJ2VzK4_?!D6*X*+=?gw@PJ8_MYSPSAT(FkPwb&H)pF>7<(_PaQwf*<{k9{RxPD*h3<FbGEUQs!%`c+QOe>|>f_kIKs9Q$vR)<t$H#`0CTV-$boSMtZlMLC)biO<~$9KZNfD!=f1`dWZK=6m7450!lw+`Sk3`SG?1h}y07t-kuY9^WDb>5i7Hvod_m&oO>a3s5)r8hjYtp`KoM?_2b#i9cxTA^#d3cvGI8c%y`0sujoG(HqAHz^yIYdVt;k{5V}))pgE;$@L*Jiv!*i@A<Gsv8h%@La(vC$^KOLJ&d}%qfhJf$(2pJzq^|6|Crw1tj{~YUN+^MUjBGP?}vBO2z}-8#`gR?)M5IzdJQLSZ)JyVbTy+7MEc2G<ze)F!(Zyja?k14$=)|+e|vYG{6|<KJKv!n>=<|g7i+4X_nH_Fhj6oVC-q0Dt}id={{6V)ndg+>-0~S3t~*|@_hxL`MkDwSe5i}<nThG`5^L*^{VshuMB7JZuF}-(reY#V{Na8Qa?WUi?DxibkN>>qJf=MK3Qu2Mf@5U42l69#_bKvs-Z^RpYHG)tChm_v$3Gk2K7anOh9*kKgoJkQHTR@8Z^22B#}{62j(4|6u16Xx2HPf|EAvOuB<;5MD|P#=ZTmMGnnHcG(vsZPXmxPj_~it8R*bh>eM#!f82`-mLu~xex4HSp9|ci^G;ST1Z1C6hE7H-pCqr~TxHtaRX2bEdwDR%$HM*3kZ`Dc!eWSYfFhI6(>&|}oRHfi=f;ItPlQDElR)#1V0o-NtQE1z*Q)8s%72U#XtwsoBybW%Cf)A-C9I%gej>@Qrkx#GQz7!SpmEb_w_~3}U9Q;XP(o5N>h@14K5a-bc%n5BwY3n~ubsuGp0g#C+2kWj<%^LHzJd`W$row2`SQ(B<+dGmkA8JST_a!6}GrUBoy7)BRaFrfu;(Zc(n8GV1*b3C}%5hA+JFtO$QTLQOWH?YXaxmriYACoKsgJw^Z8rPNTCWM&GNSY(c4!)y$UT^6!1CRhBF~B0h%!-S1uZ`UDqaH7yR_a$r<h*SNjMx)^~lB-7kNjlls2@#2OLka$}fRwT%)>Fa=YJzYPVr12>eO4Sye?oDG3$fBSZa;s(hWdyh*jn@l}2}k!|K8SH+6BVF&nxt-93elfnvkscll)kiplGMW<pDB=pW|gJ1&hLG<H9`<iNsnzcOzUP&|6Gjm74%#`$G1FNv<gDTb-Yr~W_^eYe^ry9>9TD4J4U!n%xscOk~eds3%HI?C}S5BhSD5DwRo;sb-*TLGTzU{r(2=8)g*nm|!)>Jfi&RS;OulyP`gpqCDb}1q2M-~fSqVk%O(gF^t0?*Y*Tx_#RwN6(fj$*H-*Rx6#VdEAZf+SVB>7^&DH?w+^<!S&j7=%8o_lewhk;1jK*?v(Z*paCq55SZg&Y~;rA|e34Yz`&xW{^qneBK8~{go){4vTQZS)XFEnS9I30P7?^;%y-)_krC|STpYQ4%SAaWSi_@23Z`3TLSA&wDp4uJ_NM)0*j;ginXA@6EpEXWc`k{C{An7izjqRTcL!F7hr}Os@xByJ*sKreMQ!$&k=&>Dac8naT^nuZ<T2G4ZDC`sOL>)@>NOuH)d7)I58$h)HD;GSvdX0kG*?94MasfGE_yl8I+gsJnMvwpf`%U@f#5{R(`Q&><jSV%nUwBeBRPkcP5Gch+|=vR&_bhG6Uwd2{e>aWjy#z<)<|^!b$ayAnPF09bHvX7Nd&6bA`fd-`-YSEyn|`)RNXJ1^<>!%KB6pEF=}cV?LaO7^$YNLV5pEF+wUkYJ(vcVhyqeh_rko!bo$w5~VU$k*LC`#<!gIVHoS%cv59dCj#BM<o5lAYS@e%V-L3Di&69ytEuXnWyMf=I1rE}+NJc0l5nC%HdPs><&o9>;4@F;RIrnM_fHj!jh;88t!}t+AI$EJbS3sNGH^PnGHBJG^<Bi1E{#o`ma4bQ?chRS=poszb6|jk6x(1@Q_zd_kccEqj5W2C4VmaJV`7tv?vb{Y0(kqyX)2|3^q05C7VwYIQWk99gs~x-xEJ;)uu8qRCiu>iuE-p$6lVARwgN8FsMCMcJN>GsjeV-ouL8KjKX}9!aFqM0x_706hr{LdJF~ZU9&N%C4f;GWZXE1D6m5Wys4uqmtB-ZA1^@Nl@~{2{J=ZpBvHPFx83#%25I{SSVLqj+l#K~qRgYq2fbIwC!3sxT8HY?@BiBkhQtqfUk)2s353U}DwN`TtbF95?(pCSGQqU47pnT=UF)FQql7Z9yi>|y?%t|onD9H)uS-tgQu!e`EB1K(4@U?77Q))5c<WzfzUvUr%T!BAmO0r&`NcnkU<u@2$umi4AD%(qGl^(5eN@x!jz1j!XprkQR2|~BBL5GN9J7(5I>hYFcg8=MR5K+$zST%rp#0SC~a>a)LVKdaks<g`_6}|KyS|LzYsDU5WcQ;eJ5%|o3w(dHu!7s4;3s*QUuHH*#Bd|?g<G0-i*g}iJzJg7@pW-0M6<-aUenqU&%dW!6S{lR*nHljusa<j|$`I^NN3~#|lj<{1xF0u|fX!pzEBr|7?KpNpKKmhM$jzw-J`i8yx>956YGFMdPPE&UtFqw<N_o9u1^8I-3zx9QQzrU~Dt*na$WK`xmlF-aMrEOT9>ITVT*HaqRvm6e#@Z_3?O8hs?8ktObBn87^bf36EWP5l*rs1p_4WZW>QjxTW9)AaPM?CjNX)=|rv&B=9F=xjQ4hl@_BSC#D^55Il}%mP^it3&4BKi-)$T#bwgw;iO+ZefiQ*FcC#GkGkURJ+tom25V_?tO)kttsiBnzqkyGA|NeJ)#00&jN7<r0si|fg%!k84=iHu(-mTth_gq$G22b-X<(FOQ*9|}4#(fgF}I;Z@TXjNRq^jgvY{8Z(T1ZjDLzkLBdk&PVYEFtZAknbf|??7tr7ByJQ$%Zk<*HS^IT=76=5IkS3gSZ$1wF>;U->0#)N@<ypRh4Edlw#96#@F(@5MrXMLgftFs8N!x&MUxaS+EjGz`}tu+D5jDPggZcf6q4zKZ7rZIp-TxSN^@(x1oL>jIHj3#&2;LMQ=jmJXjp=@3_7<b#~hom#UU=7CIPT?m5&;J^0+Uo)5ffE8|Y5Gf!m5W{%rA%I^K_rMkV|F`1`8OMFIR3&6Iw+(92$?GJSF)!YI3s<#yEPXjjm#kMVtt}Hb&y%l4dgs&=GSZYQT^m$CWZ3;TM594e{x9?mvRv4^JcJB^}x^0OAXu~N#5)Jn<jxvMYpz~n;uRJl7jBUU6;W5*-yEv6yn8Vt`Tuz*BKY1eFIs7hz&ftkVho_43TF%qM9Oiahc!!gbyUUp%OWx)=zoBaYzIJsS0`0a!9lN`tnkW7G+bYZ}unYf+f$irQPfbeQ_|RFmEA@j3bH2p7P@(6Qd}ijRHLQ)!LgPypXZ>9_VtrTd;wPTphe@V4+etg)Ax&^soMmpw%nWt=UfN=aR&BOxc~yvQn@wWEP1@^a=ki9}VEk3i=n}JXevbQfeqPRTiFkE#kRPyl2-EKT9Lw1vdYBr!GkUo4p6&lO)VW*UJT=1{$NHFg2gZtScSd&h6kY3JoU_c$GG)!<oMVZ`duZ^d?7Zr;?0ARbJcqq{BXP^QkJWk^Bdm4N$T1|Dofw<q>C5<v_Q{G)Jn`NOjRHy+Uwn1UOuG~%+BO**MGm+Zz>85_tYw}5H3!CH<{@_RpJQLje;>O$5BsmN2lG><)GtTTPce)g);c=}uQJ|RT)ASnzFu5Lc^{QJul3XiJ=7Cf4r?#(JF|X<)^GY(N&U-a{R{u4f5!V6{nEdmb9lNKJg3!>T=jw5;L91l1r2b#7@5U{?tr&FaDM7BId8K|?G+bynS*eim(vpK<l<zDsdQj2SDu<TfNh)dz0_cS?d_`Ac6PCXa+}_ZN?+Ef1x&`kUnFk2$gB5omp1di>De;>$K^fcd!kT5Y}Lq@Sm-mFY}r!ZOnJp{J<l=GS-#TYuXUL9?01{@W3hQ(VDqvw=v(UR?_r?Gm@?Qvm~)u35HD*{8^G2(J3E((zV^XJqDSb2C_7imj)gn;J>N&evL^3y4)*32_2w1idY_-YS6Bly$F$}B#*p{l=KG0azw6#|zxCvOf4<);PN}P}MlwM8$<$YaRqAVKXRxyKk2$9Q_wq1Y%B8(99$$a;&-`cqe#wl1KxW<wDKlWF{wXu=`?>mu%;3X5M9;PA&Wz9$Q+Mqn<LWo6nVYE36)}dYJ7&%HJBmx=V5++#*#M6alsPm4Zna63@*XwgE~DHl>VT9cU`$Jhkoj9YDcT;tWjh;JATwa2RiT}OuYC2MnP}GEm?s$SZ`xwzUgovD6#tUT;*!qy=771g#K^TXz319S$%4-0fV03p0@gy0MYhU5ohnZ|k6H>gf+}2LiFXN_x6E*Ys%+@PTiSZcEZERhpg>(E(bVs}#hrGRa*iHgPwF(0HuhP*5(2J|H~C=D(bDmHz&Y=LVIJUv>SPrN!0J+OrsA^5{@ZLT++ne8xBsw5V3Wlb?3n<3Ko4X^|D4MnPoW3B*qy<-fNe6RjRO6!&Q_#jeep}@)UcNv!g|pc{U86_zx3rX|NWP}e(He**nkY6A0TgFsvpksyVix2m*7CHv^Uy+*yu(~v#&{huHUSj5C3oD`wttSRpO9%_4V)hkb@r1zSe@Vy!=b|^?&I8YWBq&+zue?c5XO>@w`fWlN+95f-R_ZEtL7bS6z{~2yG2JL|l(7se^dINAR0}NW4_)-m8)NySZLF*kk~OazZm3`bP<P=she9&>8UUU{hG=K)qLE?e9SMe%CqY{apTqljb?B4%*ot{3g!yNmsb-8-HJ)#krEjug*Ax57JL6{(A^|4`VwIHr89qf^}Kub5|RnQ+?isy?*a@Z&z3oJLsg0{tp>@*<HsuS0;I7VZQLWY?$9|!<h0J2QhygMeEnx-d;hrr{hKbE%ib2NBu`SSbueU_JH%6$8%fb9J^?tuX=*Pe<cIVC-^%%)X{nO?7QCUr+UBWo|Bo*j9<PFZ0kg1Yx#hGit8d@I`Gr{e_=Lf)?mF^WM>hJv+<ZG)cMdOP4q#t{VGW5WpychiaX#<FFv4p;8*)p8-N3O+9?Stipp!i`mcxx8fx7@SfNCTunXcfh1LVtD?hQIFTUu%fRpUfRuI<Gv{bx9S@+k2z4<0_*>W3S@#J;E${14xZE)?batB{e_9l&*jmGTYnlWS$2WgQCWQ%QIj!7YP%2{+GxTgt>8EjF}F188moQyYol~23353evM(nh)8^PJ2m6l{k!+t~MFj{9y}uwP)eut+rdEckP6d*LmeQVl6GUkP;-@aI_OG0P;l%DNnFCuz^Xc0KIjf9UUWZ$`#qnfK_avpXHncIhDPks<9+q{AA{*z5OP@gn5E;pAyvuK{GRs&~}aPsvyVM=@tzwH95KIpTTG6v+QmS3$SwFJ0BUMOVRZn(ulb_Y~Mw=yHj%fXjd%4sEWVkPb9w_Ma=63Mp&dB|AHmeiZt0HnxWJ>mgt^unF%veKk7YEY{%9!w_^Hob6H$vb=sZbcrKw`{D-H2y`8E|HXAeyOevcWbRt}ahbE1cFa*MsJ}G;AJEx6$y_-6UacLl4Nu&UXaCR7fyDoN!2iZ#`~Gjb7XGDc;Rw1WbMCgOb8A<GIR3eQ($62m*;YLD%6J_AbA1=R>i@1+FE;QEuJnB%$k)*xzd?>}#k7`x_aJjJUNjt=|EoPqf3s&H*t1vJUt8KrBh~BB8y7AKcx>sbQPguAz23S%=6=?`{$E&rQH}-6FY}b@3$HL9`jT&$`@%ZoEo+3DYkVw-a3V9PPxg3ANstzGuVz~5;rgt_wL6d|u=5z-a6(kp^c%p>R%!QMWCc;!2uvC;!kS>bsho6GKe(VCSJZ3Xs1v<btAp(&zE<r6)1XljxI}nuzVa$gt1f1!%|-uUHr}5cF{D?0iiuFUwtWkk0K8s~<*qi1^TJ>B1rHg^dR7l(Su1Oq7qYCWtg~=gK@#dxyMNfTetGj{!R&g!bG*0Zxo&<gn%nl=<=%q7{$DYR@k=h);{V5PS$^>0hO`UedcpB=C~<u#?F0Ni>8<yaP5gLU+Wnh7lf0sI=p%1@^Dmj2alqX7C-;;c1McZbECaGHvAOh-{>(L>e%p|K+dKc_pgZuLsno&Q4=EdhFQ6Bfo4#N$UgZuI82o3xa(jK{e$D;5EOIvY;D75)An)Cle*MHU^Y{&kX_BS<cU(5Fp+2wOf@Nm3GvhMgG4{+Uxzr)xeA0dZk1)aBeMo*?$~~i!W7dE{+7SJX=gj=#JlnrS54O@?0tWiB+t8cuJKhQGl(I`gcea0Y0E~p@_PMmX$*==E+UVL1_+DS@?O@DvtEGT}_~X3|_Yx;Aa}IjkN_%<;^p)gA#;bwBo`w9?Xu3C9ZzulAH-5@-@ITgG?@h=3T;_bnc7Nvr*LuF^F3;T;nO)Z5i8*Bj@SFD;`$u(P7HwI_+s=|ap?K8J(k`rZ@;l~t)usJ~YXnPN=m55@Dq6W`5&UKXxSl1M!LR_oUi~MoUHMu_`j@Z8hGtJ$*voxBro`|#+yTA?>^{J{!i<Dx!#JY{{ok>c-EZ<fbKxc4;O@DOVkzH}BYLgmt}@;?%<(%Yzi{1)7d<eR{ab+Hu?Tx3=p3*ShYa~z;Vc-t5X-p9)Ani=2mBzW89&(D_kZ%7|Hkz9HbeDen%C@iULVRhnmvzIcP-F={!e{aaKi6ArCant^7eB-kD-+Q&2gJj#x6lW-etLV16lEAo-)tLqWe;}ZMv(iLM%4zF!$AC%XsIx?LjZozv=Sd#v@=YOCxRWJF+sDc*d`|U@G<6o?}JQ$DhMpA?E)69v7U~ZuUn{ykpJn{~ntKN9D}1S?TwUSlXh$uLb-*&+=+ExB|TTUNrQcGVwL@=KtC69@gPDM5f^#oc?oOV8^%rT8pz$h=0W}|3CKCc(DJ%7eR+X_C9^<JVbHzlBwIFWZo@f$HmSL>96_S>FAM!|I~@U`ufy~<~N;SvwYan=7X(iW?TPdI^nL=eg2zHm{L9rYqR)OB;(Hb!4~-_=6?J?^VsS=nF^&8h(z!6Gt<*yNqOJ@l8?lj?bpBTzcI_^BJZzqTt*$N<Q_@T*-q|(1iYF&<5DY$8xN+$O~75{-br)~y;jD#WPL-{m)AAm<6reJvOeJFTH;QR1K$VkyN4-i0B66!^Urz@*<QePA<MnFyp_*&@Lal+?VFv%({Po0YmHrCumbMW+Das-Wr5xlP)@-w%x43Bwo~s|y5q*-XZioCPk`6L`+xnWzy1DKePiy&T#r5L?f!8;`R)GydSCjF_wj%B7r1@B1HJ(BRqtRvpY<}RSDSMFL9FI=Fy?vl=K6T9|NH!w*O1EfLEHd8`E$LJ(2?`#Jm*uMVc@!2yDs=&*$)<C8DBKgWgUS}fIJBK{%U?d3om>p{jGejQG0T4@6M~exqi@Et?X|v>&r6@;GdzNyVJ71yGsB(NAe_D-p{!pyL*%E?4dvK8~DsH%hMkE1>^YGN%`2pIMX?1z5W7!pPk`10-O+H;58C&sGnd>cg47QH5^%An{!LG?mb{qzW@(}GS(v7eS>zhVIKmnU&FY!hR`Mdk^LE<ze_v9P|T(~md4LG>|8$nDsQT1x&3?j<5_ML-#zdt=!XgV0_!6C(X`9B0(Tjg)r4Q%1i66c^9sMtdH`lt*3T+W&a-+AVLm))@4Zjtykym3j@Q2HT-v~O{8dX}sIzmGvP6V{-Cqi|?`SOCl8uyF_bL+Q!%wK>12tCV{)w|j>wpq=-}A{h6e0*hrYa{Q9+*~H)*6>|qF;rz8GPUyvBC{<6$7(9jVc}`TB#AWPtus)PxV-5r2N7)nlSSYa?jGqGyvBKVD;ir#x%20)t|`S2v^k<*JVs<4`ozbaO@pVw)cr68AHO2jHj}Xit@U0a@!-oQ7Wp`WA2nzDzFm^o<>&BfCCQM3b()kEv!&GclsovhI3;0Ue>`Sx77`eaho*(iR{h3NYXL3?q+Fu`;+i4z;~kXS`QIJdprr7#YP=b?4BC@$eq9=b@_<vd*?UaJtO_DaEf)R@q0XpFaPRQrCMxA+XH74HJ+^T<nYf_=7uOGeAQ=xrn<Dn9rP!SY|Mg0bW8+kSgTf{_%c6c6swPrCFMO8{Oa4Z&Xn?nw$&!C#UXOa18K&9k#xd{?@z3hob8R&L=CL*Gn~pDW#Y!_O&U<|&9}y^P%8p+&;~4c_$$P4TUM#sJ4GzmDKTnl1s+cNmI(fdm0_K0#VQrlf%mH!s;+YV14pzz^S-H)Zn8wYuv)~KQz%@yUvtyTXj9#|C0;_-ZLz7Ye{sWKaX>V%OGOJ(9dnD4(nc{=!qHz9Q`#WsMAIR11j__XGHt6yNC>~}Hf4)bin=rgY{V!}h{8!=`D$1PI6!pcTjI(bte!4a>N_G0Nwp4%8fHx0r7?O*g>gSnPt9$5Ju$UC+0_s=UXs&*o?>N`IbD;{uX$fR-HNiIb4*HK85MWjB?dWr@n`%Fbpv&%Q&JxI2=7@OI5Fv4U+pztAXZ+1v$D!9m5mF1<0lGpFN&d5dqP(pj_m4Fa*erR=cA)Fb+B1ET*cQ@vk_GCe?=s?33kCmIVCml%<)!Q)fIHfI3eTa3vck*hLv@1M=`YsqPUp2ms?c`*k7X!rbI1wcnbWKlu6`NUxg~Xk`x1NULTR%ccQFS(C;HR=Q(A?ieHFz-eelAbK_+>Q5kK9kzE5bti9Sdg9~4YU093FN%U6=+{<^2F;&wkpzbEO@7LG{-D%w+X0BQ)!<L%r?Nl4rR8vFRlplolj85e(pFBtIU(1QN&P?QGHC>%-F=VPZ_%&rjo=s4TM=0o(D`lL;-kM$uH6z<^uGQOOQa7i@h`CiB4wUzyD%Ls3A9D;Vor(!lv<F?Qv8ar=p|{Kq)_IG9*e<kGE$^k^x4iAE5>=mZGYlE(FJQmCpecO@n43}b%~eDK`)(g>m=9!4z8P*Jfm_;^W;o$Y?gLB_>iyQ=#0jp_W|L6Cl@m31boK5z5?#jJDOAxeyINDK)Q^;M^%SEkZ3PXl<%+_ZFuVU`cClt8h)d#qmK0yG>Fs>l4`Ao2oK`k<f+ixKd7$VsNYIgp;24<JwoE{NRGyTe$36|bpe|9|cpb>Mk`cNKT4-O0q||U&SoBI_|3Mn{RyMwxQM4;tYNbs#<+iVJm0rSYaEYkb7A!D*rHT%AwMw<>>wv6*Yj;khFChHoV5$2MY;Q^ECm|z?n)`-pUX<A*f_K|QcmdJ89Y-{z)cB0G@gr<25)yw3tg>YS@w~wdY^xj5z`?X13q-Fe+eGozABZxhVQk5D{yYie3eT)gW_gRKxHAhKd~H;~p1A?YKiK~o<m;N-_~tkGev0`nU{#W~_)dlO;FI7Hf_bTf4`1y@W^Z@?)!0RB<6_m@=NkAlgp?yYZ;1oCZL3b)j4Z1~=Bwo`pji4$PBcI%wRdN=JDuuY<Ytg%w6y#f-Ac_f^P1zxRIgx%`~%_`bT9^;jzg{76^fz|Euh@mXt=>7(8e)tO1mWE2Vu8u7OPC!FAjD!B;`6H>K)qNfvoJ)n%^Vgean1DW~<)GDTjc$>pZDwIw=py4bp|r{LNM^_N8AF)rfP&3o{Gz0DNjJWgpfb<^%^?X>iALBCWdQmhixK3ew2&_(RUZktO|0M6g5Ih{~k&d{Wt@<=+A75mCxrP^({Q%#)L~X~6DWd~JilH{Nn0Y*<s9+M89XiaSMoom=+{=-wV=U&S_VLt1S8SbdRuC9z6W+*WQRh?1=+%L%VzyTS*U&tqcA80&LvGxvMhA&mShpKz?AmvH7}GQZ?<TTHVZXR*ws_NRts7P2;AQ*7U%0ZaTxhB#P~PIBv3K6tuTG*Hf<0~^A?4^h<}i&Z(Mt>Ki2kJ2YmM5jyv%pd|mr&=XRe+9egFv7iJWn97<nMV?CdD4Z<;+xE}rjvz&9DMVU+_vchxaYhsX123=pTityNiUcjyGS4OO5;$)hfvw<h(KTg!53-)D$U@<ve7rzO6Wfsn5eA4qN`(qU-s6prUJ8E4L+p@DQl0%)QC$;$5;qErr5|$dI)N6#SX&JRb3xh1?^cXp0FJ!<iTpsN^9C5;{fIffnIQ%w=`qP`EjD0fX}c`=Zf&yBZYF?Mym9~CG!!Vh$;xFgD|{$m{EH3!9N`mJWBZw!8g)t6&FH|X}ilTWrX^)tk)VA61$CVTvzsijGQE7d%A*OhPfb=+W5*{D(E3o14e898JmWbgBk?)#kR%~u#J7HtC-UMvlQuo>(K{$Lgl``bk(`k0)LqV4*ZsDJkPouLpgb7p@!Qsl5v1JUV7N$UwgGs#MFvwNoElm#7gfaif0h1wP>5bco1Mv!jnqTs?vhL3`$0lDAdP9MX|u|1OyFR;()iEL4z)U@djbN^`RXaTO)#dZm3lv)$W&kb<GT9sD%dC+EYshf6McL^tqQsJNFY$@Ouh=u+X*-c=v-dRKxuwBAfS68IMGv7W`gu=3R<ryDBsa^~UeQreBG+5v96SQudbZ5RGEAbz?<EKjV%d+YLe3jp3ao;6IsP)6NuZ=yu{!?PzDA$gw6XsY6M&YrGrS=Fddq-+2qV)r{4NZRMFnyZqH>x?m@HPudXh^jc+H=Y0@tqXM?-bGc7}jko`dRcPJH*ZOZFW8u0nk>|cAL!Lv#ongt%A>knR63kaqUYETF^Y3{6oyz;2UY!kewwQjN_w1xH#;2c`{QYw6WW00#%mFaH>gJfv`Ct30=2Z7@as9(i#$`$w+e;-!mV3%%oD<2bjD^(t9OLljJw9_RWIo@E<lY5y{+>c2ukt)?=y3fK=$hpEaNjO|w&%?;fJEl(f_gV|UnFDc@Z6WVyqC**{`0-T%)LALUi_^0V|kC{sPa9AEjjtzp0%{s>P=z4hlXOTWIY+X8T5G%U~)YG$N!MrKGD57_Wln2+R6Qxuhr{3E+bm@XWlk7N)(I8*!+AyTkd}uwXypB{^`lN(PKYz_@K6DuDg@_LZW&9rzT?^Gw0ufhShebNKXHS9GRzw`ad~;BggYGbK@fW*`LR+_QN)O%g&=>E-``e!x?t+dHH>YncF8`QR?>((+LktOu_Enmw7+U9KGFl&+_BXaw>C!tPAIJ$IdYC6L6HxOC-<s0OJMxOJdYBPE)|gWp+YU26&}CAZ%b|dkdSsVl_=-lbWZRXOsr3P#C*dbQ^!g_kalw;D4YTeaN!_SlfIM^16+I`!G~)as}BZR31{{uK|zuS>rLkHGr$#){;-83!iXlOr4@VgTJkKfaKZR{&pZ@imYHC*<-}mm;jDUxmMPNQZ|5nz+cxYUeR@!7zQKZBS+~}5`4`j7r1iOVj(D9L45~!UxSlaq)O=+5+8jAtQ!D3)L0{%XeIGv?{IDON)}`X6ugA>{o{m0#!R%&wDFVG!546+x|o6swW>aw=Ka`fG6nKHi^xpD{mE0~t9Og-U;~^UGvE%~5e{J$$x-hy>#PxB+`u~XJoZQ0c51|W2W(4SGVW1QeUire2F`T@ZnMj4)lHKi$?DBZZsH38?i62zoEJc8r5$OTmsGjmiOSR5E-xoqZfK3cKI2^oYXCfETF!LPhxAWAqWeq%?p*U@Y;Q4%RWQgUk^2knC0{wmu9+}c-Y9Br@)yd`h5=8DSoxM-{Rz0h%Zc4RLaH6N=#5YTxIi3=#K0U0C!qAmm2DjXe>>Ql)|X>tDvQ~9V$H^k6c2oES)J<gjj~$H+OC7Oa!;fi3cIfZrZ%|Veo&i&7wdPxXPUGr9*3mz3kP!yd@j?hEkWH`a?l)j#EFy_Dylp1nKswF%x|_lXo@uj4j#y}L{2Z|{f%m`YRT>?U}zf)?wy3lh&=lg13MCU53+QVu_0EE35%(AYNafI+&1GbQhVg9#-3=BTjC^`tT9KxJ?+hr#PyaY-8#0xU9Nzq3y$-vL22V1DM+Ai8nkQ*m5?pPEL4d$Mu7_Gtfhxibrnj_Kw8NZn*tZ6`gSC*fB_cl$gUOkW6wJ<w4D2Z`2z-a;PxgVf+iera)C+`F#ZxS{E1hAT{r<w8|-j}dp<%HVCLXJ0>FRWIYx*A?j^*j2-e0Osr!9F@keeNEVI&0Y*v^|DhLSq4ZqI$hz#2Lpp&=HR{RK>^yO2O@QKGnlvO~=mxAE{xQU&uf?L{*4q!^vx4a5CeRyD_%G%x~ZIJjTQ8Q)ZaX=;%WV=ND$Q%!J4{)~WIes&!Srf=JN=87dmw<K;$zux3+p~I@c-^--LKzd~+6UasKxgt6;}hU5b~SK}iZyUqjW)qo-T<eu%amv|31b=nwyul1tZ)NZQ1cWFs6M?Kmy{X_F@+Df!aiLL{{WaSZmKW>ya8M-3Y2c7_VyMa-r{=W2P(3T@p*f409#rc0PI|e%#t#8Q>gIlQW;%B(=EBGRO(<riGu6E4G{GuMufQ`u?>Be=Qm^e;!2E|^oLm0HEM|);LTgq2Bgr&mNu0gSYuC!FTXS3&vBR;gTQ)%%mMy}^%Nv*h6%XtzEtr#HwEJsH)6-b^s1;w;=Sxa|087VbH@ld3hqUnuCrzfMl$#en>!9{Z|z^pb+9r_2Ant6?#_{*%tfh+6_Bt*jH&3;15q2Ui3`jzVD6xeDgS23H~^1+176}6f@UYH+Mf`LeCy64YrCO|JAfSld0FCL9C?8Gy$fZ4%au(^nw|zGnP|-Yk|KPJfoDBxTr~B}Kalk=d>dhcEWnjc(JXr@W=!mObKYC40ykfIfCIN*rH#Pm(g84JRodG}(JnE*V#!S@vy8XPevi{~Ph0LS=K^+#+)MYm0r^#fd*=gAd?Zsf`bpIh>yC<c$)BHwIc5mI7o7M$<E~}fLeVYnJpZrU*OJ5Y67^Lr5@d!e<Mt-^C^^2iU^y$3I1$NQZ|oYL4$m+6kUVjr{}(=7Lp_(x_;B9$IV{)n*(ka>kNA6ja^53n{<e4Qc6NWuPs;tD#^=uQvr_I!nD>5ppZdx@aUIG0CE%e*;<aTT{+xS(>zsRuWNv85AvJO@1*+cw|NP9=oaG({NA4k;b7^pGB;MQ0+}U#f>v{k2>%Ot}^%*D5_qAX6beG8dd@tW~nDL|r^e)7Ie~+=?Qf}=3{vL@RSx5jkE$0hvUX9p#$MvmjkIDAXTCqyKlE2gWx4n$Ruq6&fiaEE_n9IIQK7Vg(9{);_xNiN?4!i8EJ##z3)|heRX342M44EUb=iJv52YO9N-$NQMIU`;>?yuaAC37;+k8(M0qyR47zRo$ykSn{@U<3XJocQ)7aUs+@J#lIHE^&J(_r#;uC8y^t@BhGxmHd2ee<+Rlx%cNhp0A;6==PdC+pB)ICvmR(#JQ0ZMzWu-%t2LwqA%^qc|G#oE|7cnN(0x=T$jYX_WZrDIVWWN<39U!AKrhNb47o>zxnlkef#VE?Q@>Izj9z7P`(8@A<y~h=I564A)#(>G?}Y|`~9!nS6wM`gZ7M@?eI9yzr9JH^*;W}k$DPY9V;a-kU6gFW?8@8&-F7Nf6Ta@*Ka>_VvdxXpE)=0!<KR=b9u?LUb@r+xdFX%Wo}F_-ba}m+hx_)GdD(MZtVN#87A;i5oRjQEeuFP^mM9LU`t0z&Qn3%DF-YE*jqg^Wy_yfoDgesvVsFf!7*%cA2r^K-_kYLZqqL;ZaMRw5kkDwR}?4%Fr!Kggr-1<K*lk-X#`OMc#^Cq-@;j@R)>&O6SwLOV2%BWjSXvVkFpttli)Q~%9gglrU2}T6<0mA>Bud06V&eLTboPf)N0szUn%XsnN{MbDHE0eBOsm|Gr)?pbmEo*7jd<`?GL0Gw1}4I<lwK|ECp5lN2#c7pkWw~(VZNlVXS!MS}C}K1Uyd<Nj(Ni|K_)ReM<aQ#O{DI#t1OS^%MsoX>eC)?t~{}RoG>~<hK!2-W99<Ld@Vh1*8xt;(!U@*GAPMf?OEqTPeTarUq?T2dfhc{G3!QYE;3lB0X5OQcRV1ssaByy+&<(C)#!wH{F9J2yhUlT;<om4DRGAx_|{nUSk|LC1&g%mlj%|>TOV10rm<145{b<H+%vII*=BBF{}4-6G={HhN7gvzh2~dV{BJe+LmVCmPf7zuzvEqB>wbkp++dEBW;|bW_SQr{U|i<#a6Y6T5&6Fcck(g0xQ}vnJ-X0z?Jj@9Op~&smu-)toUovlwJy+kRch94JvtN9L6-{qJLpd<zbnxxC#gQ-1;WZWG*gBu$mvluf4N;_KjUiV?)mKJ#Xin!6B~KLrMD`LxIO*)su0#2+=$6C_7d;hraE6MNNr{Xk=|VEDVC}aT9|zPU{iKERpBWv3!U9JcmOX{&gb#kOQBC@qsL33Twr4N^dEvZmFO~8ms1!++PmXSkwA`$Psl2p!I<CUlh0*A$$a^9A`ARQox9zq8bqei$UB6ZZ`D5?!fVQ7*G#|iZzszs-1)ZVj^Sl`rxDf2s-G2Os+ZGB-vFkpY_+Q5n$Ck!~|eqgfj}Voz|5TT!mRqWfrN`N0iXkM*;O~pa~}RCFaRk1#2H%BTWq`E95sMI^c8^uPPeVphKo{rPttCBHH+NK(nUYk*OX+l|R_E^kM$oBh|NrhP}R8V#-Ce;Fu*Y--VPyKP+CIuAaoqh_Y~-tpIacCCe3e6$+2itEGVK+FTI?lRzmf-ceP=<z(0rbM6qvev2nx=2n{-W6k)Q3BHK{*T%w&eVgB6fd$}ZL<D~!li?Q>F&P_;FSS`T%U-hu^FDb|W#H0uH~5OwLKVnwO9nRPc4}bGMY#z`IB?M)m|1zLR;;LFI5`_uS%b5Z7BFeS3s<|5C}_ul`KQ{w&lK+q_(z>9CC1lklWEurSKbaRtedVt-r4ZTto}mlpbMKVj%c@rHQkqquBKQ00etA=Nbrk=&W{s#h^#$pF)2X@)Z|Dj8LNH)Zfa)^y|Gx<Pp3iwTyBkkdxLdG`a5CW0CV8P8t?|w;FOjv^fd(T&KT;{*fB6MmGMY>`5d81ur8E-0B#54<!`Z~((-B~l-yew<(qFKhEbo!HsJfK+5z8}&-vgh*16K}2&spRrjJ;wXgnF9=Vi-ju=Y{OBGG5^xzbd>j%@p)A-=|76H~D75euAbbyf=p@xt_C8Fx6@feki>f_>Vh?DbJV{eV<nsZ?HAQ<zV0@PVI88wKm{lq!dNqlZbUW;V!86YNg0*p<zA1ZL>6+A|AeTn|j0fGdAS!2PnsFfy&glwc=zDl@k+k3{tngZ+Yq_wa<6@6etj?BoJ$J=_cH@`l+R`~$LlQL%U;>p2f6yeU^WKhR1c47I=$0-3WY+CGe^=M*s=p)Ykxf+lRMTdo0rGL2o>8gJ=j+)Kn^4thUr%J@jn+u$Pi3*0|BqeG%?zmgUHE+j{DDh8YtWGaX#$VqMq0^Cr3^^@gb=YT)r^s0Uy6a820pWT3uUjr?w?;390A!pmGFZVYz8>iI9btXiXit--B!AnX(jy1FkOkIU}OUv5(%x&ZmtAuq?W!`FyCkpc-uB;YGAkariu}>TLn|KPhaR;{iK&4-g!R`^@*LDf~y!63CwVCPxiRO%m0&L)xhO5dXz;&~l2Cy!1T8mFijdfi2K8anBC%%tWO2M|j&={-45^XqnyGSWTDgd7#4j!3jg%WsS8xExnvTb?b7e^oD$^|a39zfnePCscP)?wX02wBUx%0~>E8&1X>C92G8RbW>c;08Cg?zoWOC;|O*tznYiS}JM|_9Pr)HV#x;ubLiV%yC3Ul_d2RU)53CqEzK1sy!PxspDJftx$1An-LW%{{VmO6N<i$(yz$)iDR&wbP8^Qh{eVsw?~qzFoTH)^AjYJ(}Vw+<hNm<{{v0X8s>9Nfd8hH+p$*C(-riZRV`P2#kUX(5cJ=XF(dUwekTchkV%{SfvVIa3Fx8Hhm;8~C8<iTUd*UJP}19lqJBqlWe199V^|li-KQK?VXk^OREnX9)lT|P@NdAkfvr$ZLJjYtT73{$AMhh!bp<K4VHMXPCDy2r#FyV2qH<mW#IIpJ?hcfO;H#og;YO4QL|53rSDs{mC46hx`cK~zwbiHeJ+ST`73C4;{L{B7O<5U{l?C=G9as(gUbTiJakr5J&zS*D6B#oraS?<4Y3MN%)bf!>eHph|k%6Fe19-~k)KaBS@Z}!au72ji#s^xyUn$RM^noSpLi{?vzdzW)N8VPCY&pjfVxk_STD*rfigBDOiE>9Q@s_>u)sllQmN>$=<ab0+vQf#{*ym01^IV;V?RrRK?-Ja*J-jzAQ1zg7xH+}nV~HIsdtJ-$C%4}kCr8F+s_&xh^q=QEh|{lglxId_fUTf|cIHjK^6qI8XFIfg_wD;3Y&kC4WlwOq#0r)ego-fe^ORDeX=k~YKn!WKt%?S}bB!umg;qr)lwbRU&{hN6t@5%nWqHxgM?HFD+d03!?T~oOxuAAAn=z-doV~HcFqZS}3$FUlZ$2cMjV5OISn`NMeQwSTQv=C8yOqp`Sxm?0C4Lc~;l9iCbNG*Z*C6-!?w@DY<#mV7ZYK9xTXWuPJ{xB}&&C~=J@D}RXWRpahAY1@k?iL^=D(l$TF$!9|9hTwUmHL7#LI6-*ok5+d*bDu&-pBzF`s>3$+P3=8GqP6;}diIz<TZ(p5q|KlINQD4nN}{1|K}&{q3ogXV{$m*UU@j=TFaeE`PQ2jHm48?;4<b*UfunCC^;WmO#1WrE+iVoDW+)>#zS+e?Qk}#f}gDN}ibmT~MH&KF1kaxp#Dq&&>HaxX$@F!(H~sF8zC%;~HH52;}(Y_ZrKYKO>R6yPkP9AA)E7AOEUv8qa<{=f`rNdBOSl?)kje8fKxthghBk9OPL*lil{RpG@-KkjV4FQK@faKk*!2SkCJIb@ne=qrcAn$^4wB{F-MO_gUgatsc+sk$Y;7GCpMe76;<Syr&t)Z_V>n8t7*nNY=NPe4t#XU~9DJ+q=#`tZvCS8Y{(p*Gt9H<~YtYIfFCDgMP+ul6^<!el2-9qv^;qFE_8pOB>Rx%9igDFW)T5;?^@3zF#rIz?ZlER5HZq3Sq!mEj77A0Yhc2mlc3T16IBO-v^&_+XAQ2<afAEt+<CtzYfWIBrCDQOr&Y8JPM~0nPN%IF{}CM!(f0{qs$CCY<s&r5!1mgJ5KINVT!>|0xzvgleJVUwP4B!-vMvDu$Ct$8>7Okt_Q%ez>{uq6IeOh-0~G2S;IHH_O2um!bjW!%rEzdWz43#q75=uQwq-mU*U1C1{>hREd^YPWjhW(g6~R00vuyP72pe%wz`_vLXqG8^PRp2f9{5~+hq3rQYe6H9q*G_<AH0hTRy4rsWQ?s5owrsYw&%9t7n-T>*Y7~m{s}*GJ=Dxl^pm(&>B2lxl>G0#V3OtNZA1v`XHhk=&DxJRsY4>0Au<6H{!{Cz^U8^94A#2*Hz3dSIxjL_*bt#A@mujz;Tgq07u@l7RzrW-UCWs3boVd#Ay`s%^Z7~&rHai7P=RNyM-dEK$LqDi<UR|jjFX8%RB`U32BP~Fr3WCto*CK30L?lZH)wQm3fLWPvPCUMLW{Ck5H+0C!*d{vPnX++2qK($o-me<K5=CkQHo7g4QQ{JOIx)hIQ5ZnydJ2zxK5|mERyLmGb|P_GRsj>PovmXkTmwJG*^pYy`#u8-XOy9fRA%3?{J?55N9Y37n)?ckk~z=k)We<#<4VkgDpf;jMe_HpoHba{Z`>X8$4TDoHsYp$0ki?1>M$FY4$rH3B!RC19+e2{`4s&SsqVM=pAo5n1mTKlrTVywxrnL7zC-F1sYS08j?IqB>xV&yPK@O?y2DjN#W5?9CvJl70mia{@ZD_O;TI8tIA_x%U81x|WvKvv)~W*WBq}GDo|_?fI117(bqhJmDAVRPIiIO{dB1LcEP|>9G|3lc-^vXx_>vRTY!+c@tO2DS4ziiD+j{()<1%+uo)y8X5BnbnNsJ7~WIPW`_vue#tG|8}Gi5htg?`u=DP|0I;t0o74d8P*2~%zVC9Ec#&3^xjoZ^rl&cdPpR90Jsc#yiqloqt|`feOI@%l&*IX`+w#K2%niC~4bM{wSZgt28LhcSHeWMwwE>5?*}XaJ*tBLg;1pP=uqYQQmf7{kNDx<YkXlS0sG(<IS5GB;&KSF~t}+Y2nEBmXl@7fy18@fK)qQa%y=1O$O1-S*!PD|(a2KtYhJYEt=6#l|0gQUx_)g<VZLec~UD@<YrkxkD0~^jPS4{I3g$V+Pmv3>a9|IBI=)E~HQ;M{y`gloA#IXw!PW?{a!@KScK7#pIo*Q-nF!VFXf_rR`3BL!laLPM(D;Ms+#e7G`OA>(H4|smU41FQBYak9hEu3>J^(OKW?~BVt!ul0%vksgq$gJK19DUhx33$DFM!a5hm5dYF`FGve3gx?yenao!LANnRu4<_5Nl(myKc}b$n~V&#s{Igml77Sj5;p-!v@!|-XTtkWd-IoARdD2BFa1pJ+~TnpBnH+7Rv&5WO$YAvfomnw&XsS^mU*+y7N)X4pG#4uA|dW0H)>ZO^$cV2vt#o6n88Ob^rmQoJ{9+e4Z9G;3qknaBXi(IDC+b#`?u%@o39)`8|pc`p{{ps22<pPmr2!^i`p|P3%QQ8#2_tTx?6(W>1NOr-B=s?$;rrnW(J?a{hcxqG$41I2M5{D!N-&T)du}*4weL6=)H*asB*A2j~pzt5r=xQ3~bKDe7|xq*UFpQFK9E8y<KCD)=JfmP8JsOz*HBsH5X&f)(T^1SWBuN`Y$<FpT(7r94lq)O3Vpzk(3K;ju>N8iVwy@Zj<?gZ%A?UKkAV@%(1dmZdHP>yXCjKCL6i^7b^Bfluh_mcO{Vj%u$~!Tk~8mmF)($l#BIlC7vfx^-5~|r*T}YU*5NW&6S!?F&1MfTMplM({S#Re~r0B>#>J{s`a+*sUr@RpYe*YHkg9EIfEQ`N;6nT%v(v#%Rql({k{h}#K@Z72z6_b9RgRdAkDRYf;l&U{}|(*M!VyLAF5Tz`k-*G5@h13)Pk<y{7CPCkY@7+ct1(w=9rll$Q~KQt$&GlQwt*3Y&q9NV<j76U$=3I`Z?QyEM-X*W1S9M&jjmqcJb=ITLy3ZrMAZ0<EInx4%`g&$OJ*#?ZNgrPXJScR4&Da)z`EQwpnah+&x}mUM}g9OtQNt8L!?mv+4Y%pXOb^2E5pdmSFti3FP{Lw)%6vv_KYn_fWf%xGgTcncw1ui@c>TV1tMf^K?bfV*P?N=_VCkB9`2PalK5dT#O$?23?`Q66~`u73e=paqc{(6<Q8>6zs0MZ+Jo4mY#H`uJ2qArA@Mw2lud@T!PjMOXD=l51NiPk>54bkkLtO>s%W44D$qbZFLA+eZf2O9txs?jM$X11vcC?l{R2W?FxFZxCV)Qi|zUfHo+-!xkxp37u;KAj`zY?*_6h)+Xz14#$=k^iI(1JAJ<+NC-6Xcp~Y<ldw(^_n`RRjR~PIc0y;ScJ=X}V6Cn01aF1{abjob9*tryabJaGkXS?pW;%<H0xWQt}gPVMCTMT~Urwx&qJHO6c%M+qWQWLbk$vL;nHLtxXJR1r2)Rc;I5Haa6HpO})nd?|%lU_>wIOQh#fb})b6UX`y2KKY2Q)#9%|DeBNZZ6nalfs;1ZtnA=wsp)wc<2HWv)MZ0vqi`Q5*+By$R;5p&CjTw$%iiZ-^p9R>F$5Q=6|bM)~2=;fiJaca+<500x`%g+ea);5QBqUe8@Y3wandm<cIr`bP6-ie|%x)|6CRizN-@X*_2!YdDpGjqaIl0nzktC>>u#{jyapii=}u<L^#hb)qUHAw&GU-Oq*STTiAveQ^y=kjE!Q<-@@2CjI#nc_PR*I^}vIOT$`Uc1BfkGcpU=<wnjNfFvh=7xdP(omGf7{@9_KgPvdwByUwu=cgSs3=cS|kT#UH`G00Dp%g>nmxm2I4y5S{aM@!|x>Uf+`a=yj7SvbB8Q#ejr9<lCJeJ{uFRsE}@>S5LA1%AFX6)%<QUjp;_j{H4%f3ETg!0Qon64dX1j^poDPJ$?0^i|k+UD&frVQf$J>{6KA)NIU25Xh5PIb%)&M@}wMT4PRtX<?lw9KZR@NhsS8epg~n0>SaT&zuC$|A{%hV0n%?39Hfyeki`4u)_OTsr%?wMrl#?Iga-MSXYgst}CcLxPOf0+sY^5)$1{KPC7gub6Ihnyo~DvvGlXT_Vf0$-d0FFZp;Y?-C=yJx6Sqq@(-=XoP?!Z>{L#|c>L+>`0T6hwGGc-p9i1g5_h=1=i_*NEsi(j^yZB>&fC8}>vU82Ud@{``SBC$o!f8qxZPDF#xX51cLa}r8INB&pYtA%=kp)u>u|jcxdib2H6{gK@2fLWzN;VB6vln4G<P+=$6h}%-6$R1R11c2EkQD5_>9~DIh$80^UQoH55A!%`H~oU)1N}U!8*Jb!Dw2r{#GV3qfL1Sn_C0C!f?D4d3+CK$_?_ywaSSQr|}Z7t0!_&9(b#7K=&K6=>azc3$_d}uAhP}e<&Hp_=UqnqXn+_bC6+!3{`fv+o!zl!FKM=f;1BQp_PFAL!G~?emz}dq`W~pfMrJI6^sks9JSI2dU~fP?l#YWQB%&esWf|##Kk>uX~!MD^|ksE8zr3Db7NatK~f%QSH7TbDI37VZZq|3V(uKW*<p=qtM|<D9KRux0CdK;yyZE&6H>HinGp_pSZ<{ooFc7>kh3gvCD!u-?qxTrlZH3ta+CPik~M-Fo)dS?RRAv7*<O$nRpV<HF#lYz8#nlgCCGn&odQN)`m8xbG2k#4aB<VOJ5ClGLP8mX1)xn&g#*Xy)gtUT=;8hVc)JGNN0{!#@tvkyks_v29_}>Xqm4`pmD@`Cyd8MTg}6S6j`XPpd$sXiVn@?>%#qt{O5q%!pBvH9xX@Pjf><w^m`1FwPK5}jc`MiXfm~CQuL9y(fGc0vay5l#iyUq?)g}|_luX(b>vR1=FJH<!sKeIRH)3V_#*}A9p~G_q4OK;%Q`Wf_9Kz1l%hoeh{V(WYu%T92<1KdFLObF{4`AD{MvLrf;X4;IHN0~!E^rLZ01wNsqo=Utx5&9J(r$i*=W))7WV_DuV!M3FmsA(n_rvYMf@wBUY`H1-%na<1oL5cEdOg*eH_Fb=PUx<*xl4)k0B?isS)IY={n$9<SvWk1jB+BHDrH8MmiMa4NcA28?#%_&s4h=oB2Q`E_n}!vQq!A&m+pqK>xMNMHR`K4kZo$zFt=d97(EPBR<sFklJ`A>{TMlw88HI3;9e^nDFNSYdBZX88u$(88&N)`$?>*pWECVFIr>)l($hKez3XfmbXc?9yIF(z5Y*e*6=er%z<Q;TQwrMkkw6>S_FTp>SprURke7|{7Q!iEZ3SE$;6H~>c&*2<W}Coev#@)cb1^%^?@y&o(GQvUanpl6e22Z{g`y0lt-FC!)tNJ`!JcPfU0ec#yi$$uz$sU0drme?iXxUT*oz_RtV<{;JU984wPl^wlUu6Scd1u(q+|Un@|y%s-p&HJwkbTLbjM|w5%R*c@{~KsImj!f2aDLy4{5u<$8|%&{+BTc7GYEAe(M45|8ez=9?oCiQ*E01j`RYpnCytW_@vSOx)d?i^=hkI+3+WMx2p2)G2WhZs$CuQCB_F`LqBWgHcw&fO?I}vg=<@6IA&{u?5sAKw(3DwDwC~fRW4|@Cqd11zz;^bk=QFCZel-1zOypRu&1Fx-JD6Di}EN~6@!*^iaSMa#h19LPNDGJye&6?la5hbx|tbXK<<K^323R6UD+~|>;AO76Ap6O4cT-J^Zz2+rUIE}W~5nQ+&7FZQyjdQ*4_ces`EOC!b9+p>Ae)TTyt@KMLT%oHgU-1WMk_mY5KEbsV~tlk`A>4gAW<&=o)^-SXaS`?h`6@Z02yjy7-(o668_2oZorfWPpVPW0RS@YZK(HlE2i04mFbw;Z@Fi0eI#m6#-z7sr214E8+g5ct7(Kj6L?8f<&bq6`*G>VI2gt@h4nNH>D<DxNDt24P><S{9S`w`u40qUY#-DMLzOf7}iFn(_M`@AcfBPewKE}eY^zSqIqrD_B_6ml!4yL?B+ldPZM=|<M%2K@784t3hR-#zpDUmHf0;I;E6h*vF_Y~Ik~6x%#uqz+j5LkU*C8`*0Bxfse|=uTnV?ih#7z4Z5ab5F)>aJzrU&Z*?*s(0qZOX-TL+UPM5mzl~>iTc-yQb>z|8dAOpShOKsL+jR7@gLUv7-GOXEYZka~BP-8kj6dKBLs+~`)YtFD9klW!PjezeCE09q$W9N8Mnl;w_hPWO?g7}e4s11wQw2?nSA}%UG?ic29MooA&cEy9PB2i;e|6rNC@wSpP!zYBNMsZ`Bb}6}h1HA(F2{~<rKP&N>+C7h4uqhhM>jw<hdRvfj73MN+oHAke`31B^0P@!NIhm;Z3-b+ZhO5iks?I^~1X{V;EjjjDsr@z(pqrxfKEDMZDy4R=MC?_(OZBL3l4!{nzFX^QbG(BMFfAOO0bV4$J-_9w!Tk551Q`NyW=d^uox5HWYt<%f%ZqRVH;;*k+LIC6qz^Q*ly}M{E8`vUPQ0mafaNy@=<<kNU64~z$@`kxuvhEzbZ0k5YWBo8%5^GEH>RUa!aZ(RlC{^5oHVX*JX*G;NZHv9HTjDA3&wv6V$TR$>V<c(Y8{YAakHY#TNZY8C|cd+2mY3^D?CRwi|%@eYvg699XMjYS?ccfs3p{oEx68VTM&Ns9goAgV9(T-oTsMfa8DDyP1ua#esH9acE5uC76k_jdpEI6mn#@eL`@LE_cVz0*KM-;C7*@IAlIA5D1`S8GVPFyLQlKE1>O9T9e5TYXKY+PvF2!CoGOp4P;!u~wYMEPOwPRX^uVAi*zJNRU_W(z0(MYSiqe-(tp!P-1r9xf4%x7~)kR#ozSg^NjUHH#7s{@kudhss93rILvIAI2W;JE7-Z<m0ybWU5;2=r*3Ebm5<NgKiZ4%#0zKbo82?YBu`Ir}0*kzJ-^<9wEEE$;9$nSx*y)C<gj$DMs)rxqtD$MY@;RN$R7CZ(-i}@@d52>EsVzcBC%0t0Bu4A4T%pvK+*eNN<MSaUEloKnEoa<6cb=F=kk#o6l*8^F{7rg0Xsa-is>{%S^G3IT69)69m^Dp;aeS3Ne2wh=cyPV6EX;&ZY*te|+aewY(IA37*A=tlBcCZB4>kM??k|vf2o8W?ZDe|tn+eGE5O?g7<Sd%@Bx8%(8<2Z;p*yLa*II&LGxij5Fn!JO|r14UR>ko$7mYOa=_nI8+9m>5Wt<PRz^S9C_4%f?!-S?N`pxwrNPj~0ibxFvxZ&M-IY{`@G!W!;Mvx&h*dj|U>i!qM}z6_SShk7VM*=J9BHyQW}i@yHmlUWTMb;rTya`@(_DcXUvGaKqPhF%o|m)mXN(Oz!{zl;6NU$YMX>aXdC-_^sh1Fvj1oTD7-OU&VSgTK8Q;s*ma`KwZ+{UY&x48Iw3MTB?9+WY@SZHfH5KL~jgIoM9u=|$C-1li~d3Ni0uIUjuGDo-N}7c1l#rDHuZ4Xt$lU-C4<qh;?`(O7?yVcy204&~Rpj3e?iDvrP6^*6peMU=bz#+SFpdK4$TDBscQSKpD_A%C9o9WBszv{F6_QqPs|D8SwX)|lU5kNFL%4#hf-KKIZ33#@Z_`Qk!rv5uLb&uaBcKE}WWhu=S|`iKX&n0c|r`jDZXxeYh?`%g|cHEuKJEvV~=MxPD(lC;Hf;39+1+4wzIbtWp0Lw$}uB&_eiyosCUgaF~Zdf9!}oh-1f*m9A(OsaZg<s(u)F5X#+<McY#jgYb4M8yIemB--CtsR;Eu$&`Yzg5gT#mS7mh|S<@@h?AzdHMOt1$L-v$JJamx86PF6O#36^;M@V=hK;GhFkOveb$XU>MtI@KYrG09LL`szI;g5rw?iI<wJ_bdX9SZ%~0hN8tYmXt8aBJ=U%hB@wnvKE-h8Z(TvZh{i<tG<8_bmq*c}H)!^$1x-iD;Tr1z^wDyk5M>XVuEMCVt6{6~%zCM5d{2b16{HkA3=Q(|z2gZAxXFJZvbNcC1Ta*@kB?<Zv)$uRm{J($B|Nc6j?_ZDeX+-rL7`fF#RX<{9)yr5vvcqxzrF>25eTn%c*SPzm?_~n|2JOe7SQ1G=K9_geWrROte=6<*uHiHh%J)J&uvZg)@HMcpYO2#ykTe$7gy%X*q)EU$3#MU903VYlu1z<AxK7fpd1q{T&h4p3Ykn=A*@-#)m1)7EB!R$KGuP6KFV0o0S2Q|!C#v^{kZH60u3Z$~G8-f0!34%|u~s-TnrYgFH?TLanaMu$TEKo0V(E39sT|*!YHXT!<rFawV5%fYs+ahVIVXAtx>x7sQ7=tG(H6{%>r3u5S<V82{XMhRyZYKp6oA(v(c77=Hzn8ukzVSoJ|Bg{-<eJpVrl8=U7kT#-!rFqiESTnNn;jz|03*u?YmZ-f?WuBwa-9jefnm8Dh>%z)MbDiPCMQte#fTV<XgD}wB25tG6oFH%ZhUgb3@*J%uQZe6R_!*ieo!&nq8Al;*MO9<3}vXVv_`}z?x)12|tiH(|xTp^o|Sf#c!)MJ<JWk^aP(x83*3RE+eobyTAZjNxPm3qqkwclJdaiuJHhW1sw3fE#>`G*uh(Bln$(i_sBQ{Hmow=(Jq^$x^u%5^lnf2AvmX8VoVD#d+CX~TCpbhh~Rj3=T_b}2^ZCwae2!dQl)yeieZ-rq;Caa@|^>7%(x44r-7|ng9Ny-&N8reB1_~#8cixXo^0HzFI!s2Npla}zRR?;O9jU6s&m?q_fnjuQtxX)sw8fwCvF7WyzPSk?D$kCsch1FX2W{W%56^ibJ21QpJ(7`X4?37w27t0CFbCUoz!E;i+Az<x^sHKb|D-))%~UPa#n&pPB1RH@mneicz&sIx>22<<h`uu(hFhF=ml)Sj7{HITL30LyP30}=1bxgbu|T>dm6NWo9pRDwpWoFlY4>K`wrleSBqE#UDm)}H9e<r`&Svmde*#;Y)M{9p*t*Ty4avGH5v!&t3}(VRMRwR$`^m>y$6Ea3x{2qZY}bT!URqe|IY7z($^U)Ca_MPcJ}ow?_gsc^r`4A5idPEbNUnDu_R-3kuMp{OL)&4eur@@hB@Qy<R;1S&P=j^yE>%p<eoP2ZI@J-17qy$=_P0y&98|NE?=jneG3Q&49P2@>bAj-20I;d#<L|S>4DvI&ZpAou?OOWHjNJW`xLp>A~mWh9DnEB3-TrA(wA^e^NXk(2jteVY_EsZ?9XAt%u-B;Tn|Pp->s%`>~(Rh0d@@0H&YF^;9TMAHRh1>ev;P58xz{40JIwGgu@=vIqnM*Y<wa`(ex|^=nJ-Yx{V0~xdeFClN)Yd0p%LGASY>DWvcf*uZbPlthbUs)Y}Bdl}xG&JcBwhtI@xFOyR!HS(D!K&Vv13o#Up)TA~fsS?yx|8SQ15dt2JnNp+co_hu0>?ap)xruH<Y?UXU&x{MFR@wMv{<^^VV^e23BJ`8y_m4$Uf&-B2bus({K0rGTR5KnL-LE|<HpK#OXK_qH<2OLXyLVMcMB-I1Qx7p0c-eAK$Jvo48xjxt9?r2K4aw8_sh1tCL%$}m3o!1g^!J1=^TP-Ex8fIKH>{Xj-{Dyh@F?`SX5p(rk|Kk6^nwr>e;od-!Ax~D!rC%7Q?>t!|X4N4&l$RL!K<>l@+<65o>iRsr?PBDVEXgJ=-=Z30!n(+o;Uv|F8yMGamslA0n6fyW#VQ^xr@ltsceX@-FWDx=tkjPoT;~mNkzKMLdGywRyYC$91)NGm_0gm?L9G0i+maPrR+Phi!W_lUmCB_aZWCN{SBEEZ0%P1*%q|gV5YT;G9xR*3vJ0^e$N{9=^bywe=dpg<#@2w#*mVLpcf;cOWd}#Z+L^=op5b$>lb8ag7ucUSb~(niU$^3n$DLr@Nn!UC@o3!0W2`qk!!@1+xW+YAKg5sI*rha$^=O+^cwEFepX}`3h5Nq1oM*AwbGEeJIGbU;67z|N*LjGYo^r&2qQd&2XR3QgnAdHT!2G%cr$@f@Ca@m#vJIqvAe@OZOj!*wLB0T<hdsTYg07kFTJP?gG%HMN19AfW@Y_slJYJVPBh@i?{OgW2i_E#MrI@Z_=55grvTHRBaPnIK&@*E*OE~2gu)YiONXwnG44djBZum*%oEnV?O?Huv?s7dfb_wx77r<`v&~|w8TU`L+eT4~F!9Cjfy@I{IH<-9~g+VfE%$(TmtqAljReilx{g4$NniCT|2K!>+ca})C;EZ)wnbG*A;#-?wt(#RG6;8w&7QoD8oodoR-yjFQ5BpH$H3#`9W1n4X>{kqX`S`^L@tVT7XqUbF4D2ecl3~{zK~J20jYg@srlPHoGxjBOs3&bcVF&9HgJkfHbCh+BnF^BlHe6#;)_z^4`LZ%%;aQpJ7dgAe;!vf?nOXAE3s|rWyNaeFc*&D+njXAm8p8@E-YvIv4|KtWifI=%D}$O`u)|8jKAbeE(3ge%wgX;Ir%~PLlwCFETy-e|tb_Sbd=+Y42k0+3F!lp<Mmmi(iZVFhtnX4DfUa#sPGIlZB`xpzVasMHS8S9kg)M#TDGItX;KUNNW>=iMNCR0TexOcUjJ1f*QR6uo_uhP`I;A@Gc+-%qk*%u#A!NJd1?HU`VL$VYpcw_5a#siMAzTa9eYno)reN~K9sQKn(*td<SYw%Djpatw4N*aD5A0yc<CsiYO&ne~HjOLLgHm$i8b^oubd&>k&YFqDdO&u(_*~N1^mux(BF-e(ghA#nEfMhEj~yL3W8SvhM;)eYd00o;BRBD7@Duoh%pCO1VUYX3)V%z^`8fv8jCvSv=y}i&zpDqI#y1`f>o)W^S|`J2gC9mEnk;H>$Pu(|L+`2eaBcrzzK-f=q6c7MRZjlzlgbI?gO6e8F+jt?FQNF^(9e-t?wsuB*K}biKDMuV64iStTn&9D!aeqkQ+^KhTBQqH<qoC`GWtW{ciGT?0?w1H6$k$>^(P9IsQVpqX|$u_sDD;<Cl8K#5B(T`+le;tYA9}T<;Q^6U;G$z^P;%zEycT$jeZPO_b?ypN<2Amov-n@#Y7`=;AI;)>J#iWVqm?7;>#F5e;PUQF_!`PG`!(+%Ne=ZEyc%%y`gNyk0D3Sd4j#6f-x7x#@;Cl<Sw_6KW^YECo1QoQM?*ILymp~2Xj(#z`@zR9dlC3*+SJ%^l$TS`+{{9Bd0vPf3A_A%|dQ*>-CFw;UD~Im+qoC;hhIBM6%kK^XZS_dTt6gE4)nL85G_)p7EJ`@x#5W9-Q(H_JB;#pMm}s%~Sq~bjW2fFn4C;oL77g$;BIUR-)neVLaA<yr>+Q@wgY2qhcw)3C_nV9dckCcNlLq=6u*9OcghMh;<>&%xWh_X({gfT0Kt@R?43-9_OW>$F(E({P6kY^K<Vp9&)s+b+UN*^jpAq2j#bL-NiWXUpyK6URxMPzqE#2na_D!ypFtj-Z<X-?|umwPu0DMV>;HoIG7_tyHMi&KM($pp_gU^@^s+4%oe25c4BIkW}g(Q<&^cr2-WDlIt9*gg19ta^5<P!WwOEA>;P=y{!J|98+FPTtf|=8G6O79g-rqalplS}Y0#|`2Mm|CO<yv=6&m1+rtEXayVIrz`?aBA47jJNQf4-%Fh<*Kx@87kltvQ(uDPXV6=vq~tA^&qqMO*OHw-ah(C0DW6mi8GQ!ujZ>yGrnt}TNtW5^wKjBOQv=%da8{bhad#@fn;U9tW#G)l(wJ>b&xCc56IgiN*q?1YA94zV@Ay-fW(G17Z=rsDdM+gGr4>S-wU8bcnUv2Ol5w_EY54VYuV7a{03H)!NXp;ZS^bPkT6-M(@uZNeL>c@FFPrCfr|26oaIldwRSE`oYxa`xjI>E3~M)B{6!T@nh|tGF<2a@i@{{gaC!Wp^)$V|Z3|2^hYZV0S;T>)u1`p?lC&JuYwLIXZABAYP05m=bzJeOxv&V;c8U4%f-kS%AH~25z!nuncko@EF!rL-d%}rr&v@=z`Z>W3hmhM($d#Oh4*eU+JX_SgPfK!96o3$f;a;nO1_1m8)D_ozx6o74JXyvdkqlSooKG*%%uEI5=(=xm`>J2P@UMz7%?e+=9<c?2(Tl6mCB)HSz*@H;CKP+OqvnyE<|mXZQl^(#HCk_Ue=_uSGJy`MPuqO^3M;QjBxaB#6^Hv5Hu`BS!_yeZ}k9nlc%%R=boA*hxz&QpP>rc`?{h6UORU0N_FKI&*%8wTSVQiEm3Gwb_}o@WLDZ4pw)p;<BC0HpuJD!&wyT1|G*6zS)srEgSoSJYH!%TXON^QV{OLnvKB*0UPy-aTqYC>zRMonL1AAF&;;C0`?h!>-wSbxW2?Xm&l8bv0FTj)mN$N)Q}fl)hV+(@`lNV5P#_jpUos#jhCq5RNlQfL|%iY$zYu?(e~Y84cEB>yjX(GKRfxV{$EZq(|QtOb%Q-OEdd3odZL7PA=u}BT?s#C(@6BIz+Ra<Mqi59zlk~k+|+Zbf&Fis&4?2>a;gp3$p^5Dy|Cjazvb)5o-U|4H&dfL!#a&Jqx8Xmd<&W0`8uzt*-YShRDzw;q27vng$A~6J=1*=Ua47P9@ASCH*Q&Tu<mD7boX@L6?&;PZshh+>CC`}_tJup518kQ)#aAf{S(-P5u95u&D4}I2h#T5U@bOTT^V65VIBBp&ZO9(&(y8D@Sp)c#GHindX!CmsLR)=fnO4D<=fsV<)MbL!IGpmX29NR2t&@GQsu>~z4g?R(&XA|x?7S}l<-x-R(j^j1G@({YiB2>_f}|Hi^ADoBXK68@v6cu5BVXu!6TU#EisTcu(%UfE-RNh*Bkb<*tN|9Wwju^CY<RT>)0(~{W5~R2zcsH82WJon4Y)xgqu8K?X`;%>Xr<UkWoc~m4tWmTcP&{n8``(N-fnbH)^E46IiRrlhWx=zQYZ4(lD@-ah=74KkZ1frrf?Gp5Cz^6V3qh5nf4y#`11S&>2~Zsafne+blI>^pE4-OF8;WwRFPT;^G?@g98TP8oTk@i}U(=WFSKUi-b7eAV>75rH-$ATi<OETRii+B7&znGtPdA*aBo9!(0i6^T442t!J=D{cG4@eghT>(M?p#11J2Hv1v_f3HLyb+hm3LFZ&p<O;)e85U_I=+ZVw34%QD+p=)uS>Kym#!Roe&ia}?Hsdjb$%7hK~EUnnMBG<?(7hXqs@Zvj-ki4&8TpHhXd&@9)aNXb<`W|O>x}ksSA92NTu*nYt4j6OW2f6nr-o5W}QLx<sieG<Hd$wfenh&^QjH%AQVU1s6x$9{7o&P^!jkU3t$V+|Cjp^;@Fy3s?jl=JT8YJ)E!?m2TX1<qX*5n<%?UG+{$bYGYcN6``MRXJ}=4A03FLW3#92H+ZVlC3^{JLML9&SSp{^BcM`lxUJLp?m=m}>sL9)9GRUaeHk)1KT;zxBUU7op~5s992Q3Gu`0kOPnLH+)sSUKc9vY8>rsKlFksZeY~uzN#$(Jg|}j|KCdSL#ue=X1nZEKeN|`>KX5;KE*7wB7|2MmsCBSux3E@inV5d7u;;$V>}c-e|_|nomp;O4}8X#rFx%WFM1v0l$$-;k&5>@0DBm7tW^)$R@IFgr*-jm{OlpSXv3BI{?C1+e++%3&zoO*zYzMgaDrOuHtIvnf2#%Z#MJt^WV19(K%U(71NK^8IQ%^|X7$iJPRR-9>F2-U-|TiC)?8@pgIi(1Z@C5b=Cx0?bF(XtYsKSW^sgm5ce(k!54d&nzIZL#OkA5p|956Nvx^kdNBy8zv>>w_<fh>FVn6a#3U69Eyec}cf^)dC^FDG>H9N&|j=cuu6!t)qx50;W_|VUEQLl`BKlY6a#`-*}&TH&-_-xt~`mE2J+2gZ&Cd&6T0ZXstKQo6<jQtdQ)?!{T_B|esnZY$0O_#SsD-#cnYYdrqz3iHwxpDq`PvoJWqLc|gF(Xy`#~l_h@<k}VOJ_dxYKQf|81fI0Zymmeb$|VB-K&4!d)%?lbuW&KQuToI!?D-l;#(h6yQl`6*&X}~%6co_hMs)C_HX^|`dNWK2y?Hl-x~M7%CktG)$ROJW23(P<`?+a{F9dg`2@_NH?yj>QTs;qrG)EtPRrsp)rS4MR=8`acm|$}U4*^UjzsZ!DqaR3<IfI`V+}kE_550o`*iZEdNAYu>D2yN;{I87IId7VqQCPk%+1O2!M8Bh$~a?9i#xuq##c|_)T3s9)!e*~H8;2M6>)dC8Eb1+$iE54h2!yb<cU}L79cbLSFdv{SH%0URgI8W6NRIn9<@6)NkXqhibcGBD;v&Z?Z(%av35xDgsR#hXW+$G{GIA`@_oGivo>cw<Wb=3ZhTdInXA=!f99k1247Xp&_VHys?SxeQ1hsLQLlI&>>=kM??eT1FZ5OIimLUYwWr2Gd>y_WhTd=l<Y4WI@N@_X=4&`V!}5oP_qq7;UuZ7Ynp(rUSUjm(RE6i;@MFlc7}k>y^R|WO2+w6BmurRV<$~irXmB6++B5^Z;RRy_VB<`95?&=IZ&D+)5a*t@70Hz^lLMgio|P?Sly<qKS!7=uu-O62%PH6w4&03km@^9X)QAu8OV)tBLpMIyZw$r-`&0tfj>`t@tBzzl8*JWIuXpw80`~74cJPS0lEq-7r*}`I$<X(9w+Fk9+4@%0v&`)G{Llc-WJYF73CCY{Xgg_5id^z}mzq%w7|Wm@a=?eRKMlJA<f`}X8`yiP48RU{8JAnX?K9aF*YaL<tR*XMfR%6P0mgd4CclB4l^e3Z1Khf79PiDqLrui`X4h3bwyQ(FB#b)tl$+tTNXn12kuK9^AGwtX2s5*L(`~>G16<$)UH^n}gP34FNMFmkeBp=kHEwA}^<Mbx*^Wf%7B!nl4RA^9Nq*q3qNN+anrog|Qo7bkw&x6N*vvQd6>Vpi!11EU;UY7UtAoT~@$;>ig5C=5c~XjvbJkG5ZDQ{O=Ias|^oV)+1;!V#{;_KSpVMh>Yi1bFXTe>YuET9+J6@F<=dNgHdfw8XpaW02`J62}+U(rNdvEYHkhc}T%Ot%wAAUj)+-RJzp1o4Td+|-W@bBD;gzkz1U~18O5lbiVTy(&$vERy52<R;}xy#%=Tn9YEB_X^G)`0nrSZkAt%1HHUn%SP0ah{2$xbu!+?Z%yAe!VG4dZ4MSJ-HLp7qRqwKPfMv5v=^C!Q9<TBpU3E<Cdb#c6BffYocX(^CXr8IX9nEgSx@8x$n9@i#huK`H`~b7A-0AfTcp5?zBM;4!}QH4_y~}T-TS#KCk@_Fr!x7qQo~#CUNcs=Cx<yY~tLPORvh@>Jkfj!`N$n*H36`D>5nfS>?s;sx#R+up+Q$vN72s&(g~A8Yw1wuqi&^Su}E?p6e|ajX*AP92@ZEDszHMDliv-a=_`$u9~sjobLg17*bsJ%=G|kdQ~1-Uf#-&qSdR?X+HA9aV_@MAp^axa*2~;D4o>}IUbOUW5>##V;sr^9r|M7x!-f{3BZBMW}>lYW%l%v3EJYhVQ*+-?l=j>Y?9e}SDGREDlWU)iU2pRHcr{420wCrHT4gKsG1)^JLFyj+vmz+j$E&lYT=|5g(=wnR@|F=88>yzN|7%s-FLz}tT8Tcvk$y}F7%Lh^ljt9^)GGMxBE-s$eJ_2@!X%~`s)PqON&F*OO3w-j(*;V`jXjz$!)UPwX^56sqbJjouvsfgO!KOrXc5n*Bv7Zz-VjCncvvc!>%qR<K;>&%ad<6XR22xYVs{|=BB!5<yw=Km_Jg_&Y43^L12HzWSVN^>=W1}nyhxD)I~zEKVR>+L}b{{kzH32@$_8Nt4QD9<Cu22j(ymwW8hS+h}k_N<X!6IAn)EYJ-|q$_t>2;VvvD?6TrjQx56NGPWDFBmM2b*E6k5zjm$EWKiLjte%&8q!1Iz|e?xY~S_R*}y1XHqtiHBP<08_CE$>yF!}TI3ex$?NaeIM?oYz#u_VEIH0lD0pt*~clR4<FuU^CqYPBbgik4Jb$N#01hYpGYVK+l}nHr8q4W16r7NI$MGr6w83zo_6rO1X8($Z;?2AGgA(g2D}uuk(U&u~@7O|6pr@D6XIzupa3tGZ^-!^wSP29%t{03&WY+#KB^j(36ebcR_vrppCW3HSdLW&09g_GY9#c)`1<ivoPemr*#nRSkJg~yyP*B3%5aER~^OJKh8rg8%mM0(<!%Ux4#83bzt^o>FCGZ(mMuvqxqe8SGob#zf2mAJ<|ehTBFa6FLjAB)e`ap<lMbD4On#W)Ak`}bmbdYn}b~+HRakDx)~r|*GrLU)d#F?F2s2&%?c!@x8V(cg+0<>u9@uSH|d;Lr8vKX-iU;APHC;Lc|)hP@kG!B8+PCrKYiV@3it3fPdq`z`MwUHv!$RtteKbG;ULqmAK0_$Hed#8#MarGl&@TuB6fQxO2|@(%8T`q`FHZF_#`>6ePTHqR)(yVamYA<=LdGhWy%?u__ep@OuNQtSKI?C#aW{@Cm>%xC@j*T_Iw!PlDCDS;_!G}>w(>H4H(WrjWriC4hS~`Qg#LLUh}0C5v)&Gk=S$cLhG3ya>6n9T_R_sBVq2QoHrKV*%I{471r}=!dvuvQa_3<C(@>pf{7B|$&GhbEcGCQxs4)noJPEIgrE`D1x3dB9&ozO2z4{lJLFiSDpg#smmlW8|9z{s#cA+WD`D;qz7xPh_jKs51sLj(EfRW5;fbUzIb^e=FWVW&a)LdrH2D0@*u&ZYyjQv-XG^Oo%x9TkrE~%4h5uypI#?KcviLP-yH>7~b$Ed1d94Z)^m9w<#HcFl=d~Qqo4}fZ`R#Len=RYsT)<udJpeLgz<ovayN{$eD&TV4|5skXAGcDwo}!xn3-NVvA3;xuJb=jSw;DNG06g#QJ^Dq+-Y(|RYIq;77S0^z?9ulMIax6FHdi>$`a)5Pj%E1`=PB}ppNR7m2a1YcE{1+l7c1La4^9@0yDo<O^5f!xm&TsvPYaM|rGA{1u^vBsfeX7KQajGXK{M3eHN6I&4cJ8dvp*Zm^DRSO*RhuhJnsYSqY7~J8_0lv;Kza2LB-S8s&DyyF=Ad7qYn3r(GT`LXMVW%Z#nbB`ub-NhZP$+4RJ1N6{~wuz7TwmxxkADw><87x0(Hvx@FRYni*hzu<_1`QJ!)G<UI070)|&T3roc})G@atrCYuxhP>s5{u5+`rq+$AdIQ_Jb8dFYAJ)cLm+^|v&GkpXj`aa5evW=JYs_W%e$V6D`MPK4>z;3mE`;Z1VcdLPR8$-MRTS^hieG9{oJT&QflKKe>R!e=xh>AaUK;v+%-nznB0V2H<)hIk@#~rSk6eRq&uy96<d-?S=U6vth^t!fm*aTN>5zXAhKu5T_0RjVzy3Gem+~J0-u@X{lN9c+oRinNil4)?b3(TY0nfwINLV$l=Ky=9FNQvBtM`KTQ%~_Q67=8A2mVRyLBCPG+R=Y!i6ek0Tr1jw&8=kaV*UcID;u_kb#(yW!#J2vJ}>@bP2Dc^vVD)|A!EKijC;oS&Np7hcW;l^dwpAU>-RbOD=s$Rv|g>bzxffywYY+{sFwcj#p2Z7o4I|)K9`hh=~bGgksd7U{j`lpAY#I=nNiO;atASQRkW8Iw@d6h)cA2_DqeqW3OWMQ?l=#OE0Jx(LRQ>!m%cK+_qhqE%sk#jJ*B&YzTPr&n-4Kd7?S{|y7qk8RG_tPfH|=5IP%em(yk_8k%Qj9a@mm=W|vuRlUK0qYwS0bcfBDR3**SoTjo`3e7g3z&&2ejG{Lsjs-D%WyC4<~8tFx?zRgL%ISX}GV?5=$+&ME^F!Edqu*Wsh`HctmP;kQB_=s~ijJYhErY==q%ix^0_8nuJfGwIx1kSGZydZ%gmtL5IRU%qITqd6|=c2JzyGBGVqJzZP>=x^urQV$VS_(hmO{&|-70jgGBTse|Cterm{nGCU;B~nb%sc0`Yzx!Eo?y0UCC1;wT$Cp!Dk``<he?&?4&W{3Yhh>gk)RINGy0<BtgT4wTmuTASAsnR`1B$jZ=J^+`=_-j?~&`j2mB=|ui9A1j_FOywY?U??DJ)DWt#pZ4Vm$#^aBRZ9^+`}doZdLdE4{$VgOc>J4c`Fmepxz*H^4N&SFh3-jo{dm&uB#z5ME{y=)o!hjjT#CR@O>pnDTfE6lPlo$4Xmk@pvQ6F!QL{!C^^>>u|5I`ve{jt=&{O~v(YR6)4o1HS^?ACLIVe{h}+enmVNe=pnShVckG$dz=E!}MkjK42#ov${n6`##vvfAyQX&nj)}UG?$t_oG-*c}`2^CtV@enKQ%(FuzH~6T*kzR0Uvu@tgXeB5Ba4feL_>^Tl%5_d{Qxuez+}Mmv;4|LiXba-q`}s*j5Ux~G;u2ES|Y=obXvdybqdzmuc%t~PyI5x|YQJh8UdMOP+4%+1|FW;yI&*4nyof(6yC=&OhTKLU0s1KfX{^h<6`bOD$IIW}U=6Fezl_gCAnZce4$EGU~`9Ft2&E>q?aYD{0!16Yt<qX(q_2t|!Kg3+$3DA@V^h6TtkVo+`7#2uSTq0{o9FSm&|_E@LRI^+W%wYwT(PruY44taQ(%RI)7GJO9F51vV}_V|zb1^J)_4{nj!yxs?W8Gh53SXajsKl0#TR(8*K|MEarr}WC;U%o0|^FKJ87WkY{4&R+Y@BC2tIH9+}*r@<9va_ccqd)u0QpEM_4KbP|{2+}!hNoxnrq6QRVo8nM2+w%GgH5s?^7T~CA#yxE?|xao-}3iHU7QZOb6mzlEDZ0h9PaHar*1HU(yx2dj-S5s0(B1e=c;Fwz#2ghd!WL-1(>U*)+}=`3prOD$phyztjVIWFeYUOXh(JUJyYMyxkOz%FY4=$c?08M%)rGyTh=}4FqaPPt@XR|&AZ5}2W#9pc||XAJa-rm`HV2;fLzdCy-?i8UTvw^8Q6euJq-Ew;JWjw!s9%3+`y0Z1LpGeC-Q8$Xro%6_hGoG>tS5jti@R!xBm6GXZDBVKBgUfkH^8q7u6N{|J>0>4~FX%du)M?Y^S)_$;GOdw3z=gF4mmkb$-r=;_1TL!5?^k%k~Hl?S{5Tp!kap-|ts(H9KF|1@c&%vWK1RF0?&WKE`nWkg+S|uxy(uZLiG=ZOgEKA}`;5r~F!~ukh{hJtg~nXpr~3ooOpK&<oc(?INpM*%bNFPq}F|U=u&fq~2%fQ;RGcc{t%bFAtwvWbo<A2|n^x_7d&8;qx`^j`4G3Ibid>%Y}8vK66rpdyJzkx??RCR{Z_5mDAi;4%h&TKc0WRtIBj`Pd`@ngENzj=awI(nAR|+fH9ZoUo8_$`{(Z#$X9&lOUb-GPO3^Y<&)~6WO!zNpc^W#&k?K0u94foA%}>S&-t>Mil!%An^JC+lQACpw0N=XG=b~2Nta)Sd8Batr3)CK<60(W?`n=C3uAkC_1-<tRu27;iN9C#?VvvqfFQA^%s^auZK%#Yc#b1(o$Pm}wqA$Rn+lALdQ9c<-enaZi1f#Ouj-gJJ@HL>D^vydqt<%NN2u8#FZt{z71bo>!NMQnap)JZ%4DeV9>y-;Lw1@5GZnAb3(<%us%>Mh-=vCdPJd#IwJ>Jy#vc2N&g$ZAIOktu|E{NGzo~R^;C#vGG3R*TBVDOn;vp9RG4SRepJVRvVtBnQ?EUBOqIopt1nl=it#&e;@4w6X@W09W5&vO729NLD3hYoy<K<lA2MbJLe)35PXsDFzo?h}sf=yfck`otwdklShBmZF=emw`w`!oL@A653#u5Lmem&;99FI9|m6z4Wz`x%b%JGTEG!_Dw-g=d}9s@PA*8gYzyT~rRi1H;eR1TnZ6o_q5%G37OFC%VtD_G>-FbYF}4pRwJ@@jIU^zhm;nh*OJ79rs@``Ct<~Fgez(BZuKC`a`^VQGASf_3CbGYv2I*Gv-_XPESQ`ibHVsjS0uJ@=tv^tS8i$=CD4#^yU9%eW+{Pe{#_e>%*mhII2n11+=`+Z@dY%rOwyBQ*yvVugoZr&m|Hq_oK$1ZbdrFZ;$n%ID?z=+xlq#wm#e;@5jY!bp3J4$*uWqO(>J<yT1nq!MOf!cImSdBI#0%T#D7)diZ(l`49(JI$rq=43%deKR9kJ_8-8*{b3${o>ZMrwU8jg^HsS44s!8XC225!U5#h87xb}Q7Ag)swHHM=_#t+Cf4_~!XNq~OhvD9DgS~H+-5=$OI=T04POLrXM_2>C2z0sh+?@IETL)u7fJ5#R{JSqqig_8AZF4*_kkItbYrhTv&lTp*?Jp(i9ng!5jT;!Lm?d#Neb1NVC1|I9e6UVD!W@WUZ&<_LC0Rn7JP8K77O#I?qy6wbefTX)hu6s$@AF^R@VD#V4{P}0FHv@Fs{AD%+OW^Qo`Vty-~A<nuQQwv`%C2^4YHx4$_CuU{SV|=R{0ZMxB#5;Iydp*P*r!K{DS82xutAG>=SWWI@n)A;J)RrR<)liegv>}KJz8o$!ES14$dyW<r%5-gDw2XGkS9Do^f-3iCnpjYMO9DHf1f>MI%2l4dm*gUOnbr&4#;Dng{e2>fTG~G-sKNI`3tupJBh?$Ldi}(+$Ugj&`jc^L3;{G+7>3>XpyHrh3b)1oX8-rbWZPkCp$j4!_&z?~0=2RXwlk=kpqMm-6REn3pr~gM@<*GkN~_O&0ARk8+enw^0_kN`~K-&gjqkCe!8Id$Zitew3ff(NF7)bE|rq|3_Wxa6WwB4tpz7_o#!N*n#avW{)|k|9Fq8o@qWE*5u{$9<5PNqYt_sa*e*pq+wU6pAItV1^@mpdP<wOfQhT=h*Lb25zDwiJQ<95a{a8X=cuj$^D(o(KNq!6tbgny^rx!4sqy>o`{*})wNm4K`i?jM#QTb8qf>o=|Ea&0zto-uqyN+>6K+?V|1R^NRjpJMD*3h^=ThY|jyY4m)l&Us?I3pxa>RVC9ryd%QTMd}$F(~gb?rww%<uogCQ$mB%#}^B9Ij@t*Y@KcNQT<E-+B)%zU6qS2+A+l3p&S|1}^40s@x(JC-}Nhy?h3IIO0*OwvJ;CrHSv$&zwq&6!ZKA7NQ$2vrB(Vzk2A{N}nri&;Mod{XE}$>D;Ybkb$pOa<NseWrybnylNa>%%vK0#eP^Fa?k`bOULok&+*^(pW_3_=jwYADj)T)=TYygAC~!i+Jz5XNoEW3>v&JUjAyCu|2Up|S>f|r*wfKpJNS*W5I3QP@$6^e29e+DRqR>}?3C>`>76WG{`mL5XZ?J8$JpGucpGHid5{r^72cHIdh|wk8{%F{n7Hd9U-)fUyQ4o4^E8j8Ju!-d-7k`H{k)AjuI2BkK2tf9QpDLD^kF(X+A24)8)fWiu%WMG&#<fmoY`PrDPYh)?Q^wOtz7N%+qlnFTny%5sBiRDek97>{R;hk#o*_|Jmax%xO(s1X1~d>fBOA=b%NjRs_I6DHH-F?rFtDGzu%|7?_oQpy!Mj#z<F^%ehSUp#PfUMcpp+{v-pl&l61I^(NFZ~f8ierJ=eU`F803cjn_fOjP}L~G4<blXOBAA{b0Y3d6*CEg;+y<|9ifu_3i#o!~LTiT&>H&$AR|ajku_PEaaP-gACU!j&YU@e|IdAXU7d!4-B$MyzKkE6)xzYq~FFybxVe|H^@t~e9DdKbMZdLs)l}ctEib@X;KZk?eSZ!xk^)>A7kcD&jU7V%LDlz@>754A!oNZwbi`X|LB=vJuoZ2?^ddx+b=#hwOl7(vh2s?n=ET?LgjCNt{056q6~ROyST(WR2N^vG0)ul%-^;I*i+5wGyim<c)h&u`P<8%``|Nw8+}g0e0%TM3uCT0zlVPD%8qw257oNwl&rU=>kji#EzGk7og67U5syO|2gjj(h-w30?NR0~zT#Q@ZP7iieu-ywf6t2@*FS;vA4(qHH?g&pI@r#K;O5(_*(2sEnyTS(koa!U?TF`4jX0YncT!l>8|EFDR%M}HPJJPdOpsTMErrQ^lD6b5MR1mSQ)NwQ1`h4Ol1?JhuUTiki^NL`v+N{Tc^vCy8Zr$9dFI-WDQi`ZR>SZ9)n9tu&S4iHc{P{1wGR8Sugz#*_JeHdhW$BkMpZ*BLJYY8%3o77gT5pKt|1SOlX0KgIbLrv%DexDYx(SFkd)7HQ?c-<EkEPh!@gahJ>!mb+aT{8kYfwAPC?G8xG}v9eFl?N{6DYT)i3LoclFCJa!%oeMUK8-c%JvQ%3pRK`OxFK2w+`!;s4dTa1m!(H>t+kEaysYU{9CeUD<$ceH_*`)>m6UtiN1OqmGaMa6RiE{}1c*0vOSi%cjc&k)<<T=B{;tHKzH7#F*Wiw5O@hrfqIhuc&#qVa;|&s6}i2Esgb$hu_vFvW=YcI!dequEWeNZpb6)lYmllKHZ3BDwup1?e$PN$k7rU89R4aAt!8alZ)#b>&fzabBVQp0XAA?`W|!1+)rHe-S7A7dK}^})nLzABQNh@&tc3BbZcT&dDo1ww7=Wa%HL=lC*^&0?FZZRG^`}lAFEG%v;4ju0k{6L9svhE^fAWSNNE30^$F3Jz6q`D;@y_*h%1``M{+yuA9A^<RIR|@<-NOB(D*X=4jw*9b=^fj;(>qu`-TVXFaMRMa!2-m!YZJj@xJi<;cs*Ki#|T$6Z6^N^Lyyyy|S4H9<=YiOl2<5zxJy>;==($ecH};JKFky+l%XU!297<_3ltMGXK@ajFpYK8f{FXzW=f@y?^1p7;VhKhgeUCIN##SA2RCUp^itpzLt)@&bkNw4hFgBJ`c5NWA4<S=HrK&kBgcQGK#53{)_d9(~j$_`1qf5fE0Kdp4WZxZC<kd`jG?lI`lJDe#rU{IF1zW!}I&`h(Wt57IG=x!>?;zV9)CS{r-QxFMJc!-!am7KgS2AyA03!AM$z5zCG{b@VuRH@Y6kFctiXcpYL4B&(vR_ePKP`EB=b;(Mt>D-Tvk0JOFb~%h0a_c8J}g-6oEX;t`c6Y$Ky$d_`PgzKfa<tDZi+lE&j^56`*Be0w+2rI*Jf3l1L1mcb=5h?DbPOOxQ5w$mg!Fzj1!2<*K{LFaN2Tzs>N#FBhSo4-db-3Fv;K<~d6%WA<ILNeXj<Tk&uHsD3m$B`>zrt!Dj;m<MgFa8oN8g1Hed-_K2^_9gI2N8Xa4g@)+4zvR)%}dF<{WUbIBlh|(MgKyDH|4f=-5p9=EQyHQ@|B9f4@j`xHI#=*I?G2p1ar1iy)s!#&m3#~?WU8lX6!1E&#mt94!du7uT-NBb^1^o0vav#!#3Gto|l8`AU8orhUJ5IS2<9Oee)6==x5EDHLR8O@SVIN?^$k`nbiiz+-MFmg7vo_`phj{ufqBQ++)U`x0#q$IoPjKV7(b_WN@?qr~NJO@DkUvrLV=!AAC41u0sdp@oJFA-|&xGgx~WX)P4K|{|tFpN4DICLmr{BA5|SuFk)s;#d@<nSAB#5QzJeiV_t-#cw8o+$1xU-y;{O*Q|yPl&G}$|eLfeaSB!PlIb+v%?phta>mT@etnW=$%X7%CSNuG@W8Fq|2!vj7unDE`o~d?rO6RDHn$YN=yIWBVT=gN!sq$tG*x4E8aFA`^pI@;b?6}2#lz;nCmd(GOW3ku%BHsodZ>d{vk<j&wyq*8)n^L`?!DcI7u$~8G+y3)GEdMFn)CGY|E~+73G5UHJ`5yN4FFl*RAA_zW8<n5w^mojUwFK2c_uq>b8=rSSpB>k*rY>bde@dr0l(4q4BpCj7S3m!t%SOAPL5`uj-@#rZOa0e-Qn5N)#fM&sf8G=MTwLQlMWcRw+{;hEq_nFyD&McWER@{)htDNcKAlkMFTgR2U-cLL7Z@53{k2s1{BthoZM9c=TKNEBPn~ju)P?!bTS>MM&3oZ;m3Lfpt9F=!F+b9n>7{GwB^iAa|3$A^xUaTD+-#KapZ?(??<iG1RO`3>SAWja*jsUp^Ec%24)w+8J5~Bj@&5)tMt<P|hu?az3yuWz8v6Ps*pty}ez@g);KR);IezcK_ufV#?reT|67!SP@8s)Zj2mSxo~PHW_UNhSGw=%`FEQpi;CT_J;&|}8E4~JDz_(bhTw506Rx$RRvR=WC^N_Fl!^J$QnP#iJN#vV8ZoZD24#y#f_HbY5U!nUU7sbk|^_W{?z1k{=qeXt?Vtl{G@&D7oI8}i4fylG;zH>t+=jXTi6#0WajVPWaI<r9b;(U^H=otm)5egrx^I*QH=3)+qbv?oLOZBSaAui^+6o5l6u6ngFF2b=c+a)Tu<b=J(Ft-M-vw(G|k)Lz=!>TY&=Di{BbkR!G!_GJ!TyIq`ozoJJJAi)1`*9q^<8#%I`zQ7_caEt<zk$k`f%7?^_aDLcD%S>ih3qa2<<K)s4mclQu}&Six-8_E!ueOc(fB-_!S{);D4$!nu6c6pAD^q|n_SP2@5lGozZ|FIJo1s}==*uTK6j?hw|U3oVZNVKkGc{TA^h&=(Cce8|2fos;{89a>xY`Jz4g;EFGTGN@}p4m3-<@_f4WJySL;>n54eACz9^0=@2*nkJ*r%t*MXmD_1V*N$-w^WR%2g5C2jlp`DhmosdvHnnjFLEP^HwK#)0jvi>69r&SrtTQu10<)^lJsPyEnaGW&Gf#Zp9_rC}af{8BICdV==!W_<qwHUNuE?;|&3j6?OMgEi)yWeLR`a~g>$eAZOC(>zJ;HHFDfr5g-b5B*>U(ZKdNr-}DA)IBUS(#*^>p$*ou747+F>F{$wW-Zt!2lT<BPKup#0QgkK%`?9L_WKXOh@_Te2KLO)%;px>Iy!Ld8LmakHMCjuM&<JxQ?N-&y=arn((u^w|Md24-Hqx>w?Ak-Y`}JQ`{6to8-a1aK_ChAhQTp5*L0lt^6O8PgwyF>Ykl8&Iz2`Y0_Lh~RcY3o!>)t*hR+k^?6(dTSZ4FHOp!lg%=@Uw1m>J}XU^~01atUiuuqLV?BmjEK4d$8Ev)b+1^>uhK1i!F;6B053UyxIxlgIX-H7vmlX)7mnUk31YvRmT5vP7){5N+z)V)^gdxM1XEM0QXC#WF|@7K!D6t>c%y>+-g-ldlU{C+RVSEk?W;MzQuP2$c^>Y3eouHT(LzWEi-xx+m0{_VYNXe0K%?6YD*s{+^9+VWL>lRKZJ6Z^BU8ig4Gzxwgq>9@aUR^`9$;QQfz2H3tw6(_}ff>hyhp=`rp-!hD)jvO5l>OF+|f6iB4cq&@n?4T~k@(ds4m|9f>@7$N3@2L5#X12!rm&3R7H~6k!=Z5|BPRuPRLxp#OZ~51FRh0T^Vug-aAUTMA-;MK~UUxenPoO*U2O|D<xy1PoI=Ht0`zc<J@#qWw9;kKG!}@^*Quy4J@&~7|kNgLi2eU@)&XJE0@rSro`x{&baB-`z-+bXiJAaJh{+emEwrBliYk?i`&)S|aXcg6<_&^Zr7<6B2R4RW4=G|p+x*E7{4!_@CTos3UwOh45@O3{sd*FR>Juw7-P4OO%{3AK~Yu;!#KkmO)<1N;)*20AG*1x~P{8aQXUt3dL`@(hm$N5^nA>C%*&+qa4w;BGvQF;n?f%Xw<jXDqQP}GWCw!PvJ)LV1h!niy!$glVO##;b>=P^?J2iwEN^}zyvIYwyb_t7hColNmJ+(Pf6F^c>HqlPK+DPm0Nu=E$xdU1@n;q>}^_Rt*7>cxZS;24D;-a~U#T`$IM{`dP#^?i2UAG`-JpB$r&zYx>4#D%rKhWAH5r1n(&5$ENfe(k0aL;Q+67%Su(#QEZIaZ;^?iu`^B+^5vo&pFuIlZ%7%zO9bakG10WBezQz@mH+Ztaf&ljr09VooAyRz|zIKc1pX1dA^tBVt8|v?OrNv%)Dw0rDvhm3@_{avPTTTUrGygjpbph_J;Gl2lJxZ_Jvzr$`*MVr2XV9!Cp=;@&n3~C`@YSZ(nhN3+Kc73A$flSC@^qm=;cT5uV)_UUjKju>W4aUk~4d_rLG@Vo_aOZ_$J2eu+IhE7tN*)@wJ~SIC25{%}Xk)G<+dNi<^?z2&R2rkJbRR<qdkYksfXWYV-*63&v7?YyL+D~@(h@@kL{2S1o@kdJtqHdfYEY3Rs)&*s&x8$6zrhBRrucCMXphg!ImB}wQ7MAAL4jyqmX=qa3K7HRjW+2>K%BA0hn$rbIRmj0y1fI0?Y*7~V%<O%N`cFi-Ya3to?iWTWavaphsPvyznzOeI%b62`vSth8Hd%TVe)MdhT1)p&P*DUHAjM=lT<L5y)<nTUEF}oVVL;h)*6;^c139rMt6sUg{3V+3sLp*JQERi#5_-{K-PSQ2*wDApi7b@Iqou}D7v#w|Ag}$_|b=aC4-Zirlb<)^$zFQe!4^)0$%Z{C@8%z5`%u2Ul{zqucS}31u$oom@$|;*TW_~XW*;X{aBZhy#9OtQU%36rZK>h5<l<__#$E+!BT8A?vT||EAQkX;5up3=*0oMeyK|VrfzDxT|to&KV94izv)SEKnlSHn-h~5b;?&cA>Bm=K;qQst3$GC$pzf9W3&Q1(<D>nHZb>W(Zc2$nrq@0I8bL;v<4Vo~Md%Wc&V9hP!{k%~8>{Xp%42o2jeM^_r;5={3MClH$qKUMcJi7;%xbu;x?an96P`nN&<Q4a~yc^!&x@Q44+}2xMrE^|~;yjb4T^Fc<*Vs?2rITn<EoE9<MLJ}AXLjAUJQt*#An#wo`(BduEol$a!kyKbQJOsQyU_JTaH<VzmAA|c*V4>pdr_StR)%|GzX#Bcpngbr;#=kr%(uQpnB&n9_=;*8)%}Hal7Ow1a(0a)lRvYRcD#Xl<<u>WS;E^hFYeAQYRLw*ACY4%;`S%6xyYGWOQXrxF71Lw_HtscB^kV=0lUZyk5S^wkf6pzSnt?O1lIY2<w93}z+3aJbm>pwRj4CwNr$dQd%nrZP=^e@?^HfTg0je(Ei=oo1ozXOxULJ#Lo&-V6UMy2_q65%H`ce<D_NM>sEyunGrDljW(ngitIMP?h$zH>@96|}*u(Q~(i^;tb1tp&Se*P-xN5q+2roNPArFYLKbVZwjh!s*h;kq7z38w%)CaI5>*8h)yQBTIb!yc6i_5l(B%7h0-=-9EKR09@H}XAbhB)Zxd+7D1B(|5C^1g?A#ZKvj%(wD3vi7Vtvb!k-v@@tvFL%zD(xL?Fly5~b%i7B=OX!E3$Wv(?EZ)gkBEloJuG7T5CV$7ADmz1KVm)wP>w|q<*pKyLL+9tBj#IRJtjnVRY+Hpr#$z!@z1}6h$lEh&+1KIS_j8vb&jhD;o5v^foqN!J(!(vDR3E5gQ{310!h-U5=|BxO1^ezLGs&3|IomaU6*bj4=?<5i44v>wKT1rtiR74ruQ@m#90u7ptxB+6jh!`r2YdB`G5`GAx~bxi1N&8^^qF<`HAHSzrQfc6s*S?Xi|Z@c`yXZaYae`-Y5Av(xw^iC&vBHl^Vc2=)6?rm`|A3d8rPo*Yc7J#;^)&<+2cDe_zVAjT=Vz3=zrD4B-3@_MNk*}wc-*QwY8M(Cs2Pp9QE9xPBOzot|NVZyk06_lp-fJoae3=)5H3>Sgvib<rK$Ke^`Q#Xe_eB^0+vz;eKny^(4S{19x`e7Km$l17F@(np>h+{<g2MlfxFdJa(2b;a&KXBA18L-*R!V3TIYJR^EBa=9x*K0z%B7Zl<EMXM(}l)P=~4f#)<^&+bYQM##TXShEY%Pgb&-5s)%3Nwtmn0XcBp2T!YNrrxuTgKAyU2j6V0<EQ?kjjVP2EY$m9?~WWecZFwAxUx|Lwkh;}`nU#s$2$DndHlTVe&=RqSZ`tf5+Nr5jHN2a#L+w!h^JHh=*Xe2?zzfWR{05j>ltI?559|H-iOkf*D2;Tx?Hy}xM$({pCxk2pzqeqVWdSrld7$LXZyx6QtA0z#|me^`P8c2{t@%zDz>P7Al26Xj*Zl~T^(0fG3OH7UUqPf3l*2cwiiPGhqkp{+u6ZAsyI9HYi-txZf&SG*5h%+dnjHou=9%r*p;1*3nIT6@}m>IuKkU7cjT^EJ-$!ZouB?*mydn&?R=%1J@#*3K7Jp|-_zxf>(8pZcFM<WF6vmS)<t!DDVnMMXDqpBGCcMJ3#!n*8LsWB!h&}%{wcrW!S4|0=jH0yDbhZz3I21-Z{TZVy}nu%X$ytDC_hy!<ndcK>K%@GudA<ooY|}L$LBrS3G#-#PBz#*;FseX%sCg~4Ssu8>z*bbqz653^$b(+A2Ao0&5N;JJ@_xKdVJLRJ(ZmZW-b%s`WicP4)b9U@i5UjJWy_`E`H}lT#xx9aL*>2a6|DBq?@VkM_ul8Wd&^-@#nYPoP*sMsys0X{Sk5LnZ;`umoG)j+dQovePNAdl1`AjD#@Kz$9GC=j`zUz&2N3CF>>URLC%e@KGT?pZ+~3Bn%J|_t+4EeT}NLFjHSRc3NP%^iCtkH@reER|KHn9r2C^jw%0Lv-RA-vBb=$~b4+(MJ2+_kmWn&j1@er(FX$9=h92w63MZrE4*k-@Esd7TMWEI#JazpP&)Xo+=;{%dz+5G|#`_+Wj^in?|5%T9zk2$(zM(O{&E*&0qT(q~^Sv!<j4y;b9-w}Azv1`a5XY4tDm;Isc?}GO*H?HLj3ak`2HUq~io6Cw#plxnuJ;;_it}UqdqKzF^OcTg6v$h!Qh1pK#wiBG%P_>t;9A69KX3iW1Nj4Us_^DZhWW{IB8a_ZF4#d<IItCIqf?njcOUh<%-oHx5f6|<^nzTWHgdfPihT^Rsg-c&v20C|tQwZVZ1j?lr=>H0&s+a9OiTjrfgE(z&a9DBe4V(QhNxMU`kJTI>wDIPS<Hqd*w#mW56zgF9auq4(AZmQ4Oi)rEN}+47w}$9ab=>IXUF>4I!Lo<G57dcbC;yNDKP$O{`z~w9oEQior&gwbqzG$p`7lV3Vc4l0~-kMh542rMW@HArN-Y=-FLOFseSHO(C@Cuhl;uNw&E^@xzCz4rRrxm&d3k!d;h+!w1Rh>zse@OOJ*tXLvhV?%Zt{?3mPb%T#R=eBIJ>Yuw573^nY!q3aIZj`~UCl6xS}Ho&M1tmw&WJ_g~th^DAFoJ_$llYx<tu$sq6K95p=8lJ$&twka(dMM*ZNC*zKDSE1+XNV?}NA^sEiFhOk6Pib6Gw`QFf1NcF6@*<D}XMWGy>N7zOt78=xX4S{1a3(FE2G-z%J$>P1af{gWnxAA{g1r|v!;JCX;MPEQcho39-wLHY>l<qP>X;hSO1&OA&TD!++%LxSRK07gprPl#ah+1$_IfOQ()Ut2FSl2H-CX0M{=E%h{GT<>Ot#!jjHegfj-r2QM=Gx#<EQ`mGk&^KI2eV=(ecxZ;(MJ%9oD022a8`hbvCqv_1lQQ(YE!Y9pD-^j#nDjH~zjI$Eyg(D;wL#v%>dL#2a3|@O_oivmJR_5mWzI&-oi(c1BP)R_WOGo*oas<qTAs_eHIvLVE<4?7{E)V^OK~He;!tv)Av1aa6T`{A0iUwy$tD^>Q%KuS337|8?Q+;QgMvXrp*&%0*MJJbm6u8msZV4dTrdZ|Xwn)xMyf?xKsHRXkLc%e;2h*w4=Bo5Uj@YohdXmHkIMdt$h#f4k7Sx<BkT64Ks-eQ9|6=h+Y2`qI5!zeddu#ZPOib;GSZK)*%3)ow6WRwVz%4{OWXbEEQvxe8>l*mc+O`ll}**4B$6T$hBI;Z^Ch;CanVpSN6oo%e$6#a8WQ^SXFLy_&yX7sK0#6PZIf#HeFSyvy_9vcdC$(&j&wZB(i9^x=DL`D5ip>=kqOMW*<1*W>%H70+xO!hDW#;p<C-@z+wV1OC!o;ai+@l6JW4jOje^a15Ytg_ys*Bn^xKSDW!-zFV2o5vTH05dS8evfsJGv*<`h9X|;ivtp!t+p;U_8cgC<wc#uBlr>;GCfq7K`?#~rpU58?xYQOdUxF`YWybuhaGv)j=RC||F13<ou)yA2?uavyVh}l-or_g?%y@N*>e+qI2ZwWBXUG#W32AgPCojUh{iXSP4zU>yA@kS5xl+lqdwgnMq9!oF*fc|@;xVHu+Roo#?#&HSuDSJN7A5387Tk*+dEB#k9`o=PHBDdeda_H|jGxGdbZ5vL;sit<Y1iaYeYqxXaHpnS$7v0|_&nu&ZR}Rkm++jOL##khD!kB-tYX5M(ij;yX{v&hX^{Gpvh_cxDFt^bo7X1t%Du?Ra7ya(jW+TvX-O0`l`F+`BI;|hXMSH=*Av*=Id7-8&?OyM#IyKL%*<ThXj-))lYV9t_Z?}>xDAKkPQd1<rdeZqaaY0dG7pXLIcn+~7esJlMoPEbf}QL|;!4X2e>%Ffr}x7&5T%q3_Y(JD;dhlrIoUe{>ggQmBow?GeCZCT4bPLVlsgk`gwkXd{iJs(vIzrYr%Lk^zvivXsTl^*i6l^m@ZNm7bHO}eLlzpdWapKBQJ3wO4QJ{!lGfoeSaF}T=`C<C*K%c_xKSE=cmBRd?KVaP%vVD~$`0n55Vhbou{{(w8|-y<`0{y<_G~v{2k`rwwHum6=Oed2azWfmG5bIs_x*8k$kX5ec6#$0M}e4|YY#PoE(bX8Ub^Ic2R2xQ_wt(0GPdvKufHdmm>Fx2ey&~RLrjXcF=UL-=eM=j`)d!^S&?6W{YM<CbjMKzrg?&MN3Ixh%XB+lbFVySr|RQH_<2CsC8&8{Oyp6z)hu@WDYMLc%S*O*_<PA4N04%xx0g$tazgLyQr2Oe)u=@xpCqnJIA;NMCurNSpbn2wD_;Ua*Fj3+y(3?^FlWWe-o9|Av0@9%Q?Ny8RzuYIACU-GJ9c&B_PiENl~CrNIkbZ?ZEkR{tsu>b-<x;TTav{0N`m^B&;?0Zg>3c~BDd4TUrIAHL=&dMtDN16%EYYvq@KMq68+LHIaF-tn#0zu=Y`id$m0R+^Bu~rUgJ9V#IK~wHc2~&x^6z?&HlvtE+_s_dbHU!{W>$Mb3x=g#?!&}UIr)G!#MOQ-NuugnJ?n%A~xzf=dRXc1i#pwp)YqtUZ)(_vQ4NDqfBE{UiM9f*vFUAw?w`OT%!iR^!kn(AY~&Ru!CIAX%ZR3GBD-?cl#^neot%3ca!=a5Tz5iWi5Y4Z3<{3+a36l(00M5BQiK0X32`YWfO9a+w0qo*r!A^O~lUAxHgZdpTzEF3gvWyK3czs%REF3<x$5Pjv5oMb!Sx^WR(-wH=%6syWYT0H*z6|%pz)SenVe#M}SRE=Jjq;e!zEEl8hXXor+bA_`vV>{VI1m`?G-hNWm8_pgdB|ne|$F$Q8|x$YEKWH9o@@hzUU5fJVni8PwptdBj(gg;kujFY$NHkX7zX#%E243G>6x)B>Mj5?0bmbJyZiDMAx`cJRF$c%SA2@dz-!pf3(}NILn@UohqwC;rbJ_$E6+rbRt+6<F5>j%^EfekoI1;W2jB73zoH_B!Sh{=3boatuuHos>_r>|h)szc2*<%AbjNg-09U^AFVq=KTgaRAd^y?vQsS>^*$X6yNWkcmg!;73}gdC_3?~>{{c2OH??60R15w^J6rwK;;J#<?r|C{|6(UV2l1g*uB%mb-mR2f{KsR8TCmVjYm+|;e9TPZWI4$AM1bLxF&87Ja_+%Crt4b>Ks&sQ}=)IhQV>U2+{A+eh&EEj_ZF?BYY3RPldTP6K!#MN#v932D6xuchSzc5LL<&a@?(|Kr~?QB<p#|F;79>`mvmlud{R&-}P;#+VdlBFYh}m{3%oLfvvK^SPrxw?U()!9FWM-MOSthx+b-v=zFfkQRiA@fBK;MpVHJB`8!7}=oo*;GD4r>sIU@lPaYbPm>a)tRqkPJD~>L(-H<QQdY|!jPGdsPv|G<gZXbDFU-A`CX$K|H7L%8R&1u?4Sv&Izak-StuS-%r$q5)cjV_}R|Eptf9~%GL>s%6*Q}xIL_#bi%{nVU;?a}yPk9<xpzm>;cmq+o><?)T%QzgDbc@&pQ*{GVw6uDFEM-JxQ>y*|3mdE0ei}_{KD$Hw&u}zF+_%Ya8tXbdb7=s+^<kl#^^f~+OJN_m1kff!-$xEZ-wbSvPqpzGvo!hXHf9nf>@~-@M<Y0U7lzn|4jN<4Udh2}rPW(R2BUV=$<9eKp=hGV3%udKTqWHfam_Mm<A(byTh4Y^(V~N+zsDau%8XLO_%Ej9Xb1N{1rt+d^EXT5o0*zgCHzi_R7I?oWwJoHtxI|H7bLh}FQRhud#I~sWG`9~Aea!7jYfRdP1J5mO@)OErS|X-p@x?3SBn{5<&uXneb0#kaXYx;VqxpLtIfm~#7qQmIbbMf|kLj`<wC_LHZB`9{#YwN<z3KBl^tIplV1Ha`YQKbJZ5D4|Tnm?fXcHp_e0WVQV;Z$)n%pJ(uWsXGjelzkhyE+?WjS&hsJLp>>p1KIxq8;HJuEeTtB1a!=9Z_}r5oY#Wzf#9nNglaEuGvd^TI4Hv?Y_saxTp3&73%3VZ*TJ%svWI9mA&TqIQ0l4cHoDUUM#UX3Z0J;z54$k8$F6!77>ulRg5wiDiaa2f_?#R~}#3k2%=2hs2X&&t{+W6mljmcX2A+u;F>0kfmV#g!5q~PWF1#1;6vA+Qx=la<F|Q0oxLu8j2=}I!Ps=0krB3YuGJuOj;zS|H9RE8BgSvn{veyb``{bVIF5e!>7DGCoq0^G~w^O=3(L~J@E)R>EXI1_)y!DgGU0_mBin$mCwM(G<j1diP3ygc7D$c{*<^B<EHl)Za+EB^_hzwvz*h9#2F}6_z(KzqW(Gy@c0oqN^_2!;a3j!-U@SdBNNMmqmDBXZ7E{Lo7^K2d{>qW3U+KsSUrc|Yxs-iTEAN6VH2865b!*SMNgF|6MMQ9GTE7-yHCQU<mH*Qp(vc@rF3Wx?@{xUz1%nS#%ehW9Dm>@i4)AHOsNrj{XF-mQFy`A^KCvUC&fqMHTPVY7qExBQq*8K_}#O`Kb|d|-}t>;{y2U4E6P4LFZ*=lB?XH<7s2Y+Af>vV;$|E*!c<<Ons+dU6@@c_If)0wC#_=Z$WJk9-mXT>vy-cQ3>=SK6^j_PXdTRfv8{gns@9czUt^pR8&BVs8cX=LoN9hXnD6vB^ot)N#N3DK8$ZPBf~(w!f98k49E$R7)r}fr&F}a5{Kbp0$uS1j{439d`^5$BGBYsVFQ~65A7i^sN6v}Gu$p}3OzX9{4mq#ruoL{VM0;YQ{=O+r_tZD6Ly36W56rPGP9rC*7dE?=-qw2DtJQp~_$Kf-zsV+YjIaCuRnHo8UlqUbvi7WlKNJe9J->my7^qwpGB*%!j2ICZw{8;Ze$VH1meQ(dM?Jf7-bUPT#{ZprLg&PCDmZ`lBewX(H5-gMvFi<vY0d#-r_-<8#l=Bu+F=gtaQHI^Rt@Fhw{{of8i&q-4T5prj~?^>$aQT$xZ8`9G!|{YQuE=1Qx-9+CppfODyHg;T6KsCy=C3kea2j@K*j74tB*Mp*#o;e-gl{Dj{6b2`nccQFU)HCb-(Aw{Zy{vc>QYqbv^Qe;(4LcR-SBb<9892^PNVXI$y=^V5?${OVsvWD(yX2X=33PW1eFSR2@%L|M67L5bm?b@2C}S<NIpNsG~5W4{h(sMZF*S{W+LhtIEU0_qN+n3#-K3H+{VSe!Riw?Nohqc>f#TzZ^BaHh8|L?bh)<{#xl=IrZL$@qMdtdsLcQQ^b>~-)rRyz$hs%C2}`B<Nf?mBMZi#7M_C|fsR}v*7dT;FF9gGT^Jwm`d)FB!wchesI4`QSB}!w!rTje{@Zx|&+q3yugCM<==>VVso7}_uID!T95uK+jZuaBt(M<o$IIe+#hCLoSJ>0_9<|Gt_}rD&YD3Iw;zchSn;HgkK@C-YtF6-P!ki?%AAf0h!TXtCn%te@Vz+co%Dd9k-gi+nZfRcmkKCw_XQio5>+qq8-fht5s<&#5is<)!lZNAuThYgA{8r<$Dwo+<E{VeQs^hW_63qR<^7AgE#y8VBE;^@VThE@h4wxaUPy}8Xi#oaob$`tX$&<Rg!~EaH7CG~K4YQ*8o^^bNI<xzh<S;*iKXW#zbKNlT;b>x9IT;oS@iR)KTUvgeB*7$ZhF*}tp{C@yTe=yiX?Ef>nB$IHuW6#r@0m;cT`FCc+NZ2FJ?hApJgJV%D5gBM4Qa?H=3E`&5WyzpQ8dmyVS|~kP>Za5LLK3x4JJWT^@S(jU|gNWwQrUueq@&E?VZdNPLooz*#=%S%LLd4#J|D(Eahr#(5AVE#x+LVB-lSU#N@K3s*;Yr=PjKgCTZ6-@0mDfL9;eOj#^lyvv-^K+@)eCLJ@nROgx`vsMiAXhyvH3wsykqr7`4%Gp_?y_B+zN?J<aKG?Vad-uI^};JiBX&Y!@2SAiurdr@_wzIyP(6m^fdSsr;yo_HIYL2bIynuVe+lRX$sdv_i%Lhh(zy_@vY#3{4Tl#|l9=HWg3h)=W+cz>ZL$MR3Ilbr@8^u}g5$&>#=Pvj#s!F|71HtlLNaX1G15LcW>*ftzf2oLPrwzzNEu+GVlv$~jYc*j75pSy$z=?-sM&2AzgZ>3k|qA5SZ#Q!PHW(wsVOV3WTI=jhLG%aDS4xDQ&T)L&!wUHh<$6T)V>|6zA6|*ifCHTeE95C+uB3JSZ-;)&v$9O^hBKo<UK)H(kUKqoySd}$=bBE<hNi*a3W+GPRbYI(IPpS#VL<O!>aNpg!XHPUu5-@+mohBEga^m*=#)LEF7RF_-V9PZ`oXE@0BdDcZC5`N%4O>C$^D;4?P$#HNn_0y8G%;o`QOf30akG$zeml0=a{!iQ-tl8}^8FyGjKJ&-Zu~HV_T3WgHRTOyrDck(Fm2wJv$BQWUz_hN&8}H(zJYHLyfE_Qkm|fosJ)wD{B>^A71+z71bc^*z^pI36PSrrm2t1WM&de^wK;(bSPHiZvM#&PuIf=kYK{5@MsVGGCDsL&-Amy5GUlZpa{n!cHqA-($xo&~eq$b`WSTHDFYnN{?&b$Rhjon|2{}z_^CM5_68s1^Yl2&lR$hK5sKvbGX$_r8Ql3Ot&StadWXIyPxN}Ckz%eJxnqGD*vr)J%&BgGgg$-}{2K~gP__m_j7N||wL>Jodvowb=vM?@tm`B|(WgYeCy)xyU9%*Z?w`_d@zeL22+~#6lWvBHW`er1JvM!y{$X#;TS>bUn$TCdnn>fKZP|v!3Yf2c;rqY?cmvwW3cIgT+y$ar-HkVzBv(Jq(*%2GYyT*%&AMe{AchS*=)jr!LRh>g0W?gZOtdQ+^gKcGl<4Df4S<=cNZs5y0-)2@hVaA+CsC#FHF?FvWyp=p@vO7PK4XraPaVRZTruzbe+~VAO(&cTIVs717PS90@mGA5cu@Wl`g8Izk#4z`DC8Seazz?}3ZZHEMaVby1Jrh+L+<BP8w{KTr4*qIalIBwoBC@+}Wpz1&er!SeKgzm{w@LW4GY4>wsu0?yoh5b}-=oV*LZ6n7>Fn#$-mXl7^|fm_yn7i&4aIe+tz=Th33d0xuS7z@PYs=b1asP;K3EU7+rdCwXzY|P;QMx^yN1418?jYVTxSfq>~jNof%UhJIIJhv4eOx3io_ad);PD~#7RD>PQj$yVB9Q9hm0$%_w|#n?5b?adys~cSgb92=R($%$Gd@t*7*Z<>p8Z27F>8UT)07|v<p{R!eJJoo1G_7FIO<;cL~o7;Z@7fng!sCpLd1~^ShmwoE%@0XkNys$*%1DC&wjL4C7sKvcbRgq1?<H`qI!RV(@LRnE}mAu&Xp?KchN~gOwd)^bh>*H)c4OFfl3AZ3W}m4H=_gj9ybWB+wQdJRTX9!|Ln;_4ppKex9tL&X1Ts!s8$v+>-DJCWCG4_%MI1FS~}#<eh{&(PY8OnTxKEvefn%^v#mNIL@LwO`JL3*UGQV_sGSzz;zQ(@t6wCDeoi3vRmF&VF`0ac=vPohIu@4`e7T7i999^%wtUm?Paj{qOh2ST9wq6lQ5R<^^G?b-!*dJHQj6(j330N{BD{rT*5qanJ61%Qoe|KeP_-P<*uKXM#-Q?I&6sC>P;$)Y1W=+J7Yb`ov>!D+0c4^kuA*OcW85Mjbo>m6F$Lt25g(NaD4&Zw+-KZPYkqeXr8h1irRFAa13ttW@ecN_5rY5*}jJFBW1w5%FOHQ4Rzz;J#$sg4fleCyJf>Su-%5W-=N-nV)9T<{4g@ZD)69eu$+0h&KqdkD|*^HguF251Gv7o3ZYzxLEC}TJ6R@;zvPWS30xDoyl)9BhaJXl7{&Hf#~ySiDC5i^c959R2RXK<fv3Z^VCIs0&NZrMZ?vg=s8^4*XIVDVk6>;{R_3sw{MINO&qiTq{}HpQwBlE}=kPEw20w+i%M50PWWJ6#4EKD_V#1-1hp(L5x1G9n#HgM%_S#f)pRbnbicTNXyuZGwebf2ZI&O;kTVkf-_{1xltVMp3@{V}UER|qDTopF7=rlI9)N4;#UtVe3Erw;;ufbox7r17Wpx*amor&G73Uf=rHW4QJ>!^GE#er`fX7C)@;F>S^+3)!G&h!7$_tvrG75Mp?HUE$vuI<1G=>4uQ|8Mc<C?V<Ix%@!hj=~(>=jejmQ)-=IgE7Zy<bI^+Ks%02d;1yJArQNX8fuB+mEWRYt~J#ZCuD?}Q01p<UXB2BQ&(#JLTPMo!DqPr8P`^PF7`Jb*8l#-*@N5VxLv6n`H8XEr&r^PqX+!4(`7blSSfA;<SGNd-C3}Mjqw-st5xpkYZOis@3Nu`yQE|MNpt>aY-dqd7&lsBybAnp6(3l_tx&@rp6`#?Jn*w6`YGzXrSeNPR!i~Wdt?pIM^3`yLkmltr?jSR<;SZn#sd!F9AW5VoJi-;*Ry<0Xas)1JJ>{9Nx}?uWu?)?B`Z%bzk`h(neocrWSz|SRV89lI$=88s90ZjX*8qvV3M`8D^6(V&z>?u!yPNYR)u-8CZ1?7*HX|N?14T>>~2f^ZpRlh@Kt1159hKW64%9JvkXG#+=c9#?2~#%+iL>$hqtQ@v#e)9boa?N@t@%Lqj1S)?_SqgOJHo1G5BYv@Z?L*iuoS%{z!j|8~F+Ii3}zU-?GNaL|DOn;hmK|n+9HW-nnNP67XwU{vM{!v(e^);a^5^)3}05u+Z$dX!@HV*(JX7Pq4FC&iOMJ!My1DHFM51IGF;z{eg8|$7$8ElVM^Ucj+{K1oH#TeJgRa8Q4viodX_BOV<L*qHxP4>q>7cuD5-|>x3QdaYL-I0h_)HGvQW#e&TsSsy=EDm!c&dpR8xG$Itt&iYY;SqdnWBR+R~Um{m@*yFA0(;^%IahjoduRFje3+H<h$J$cLS<(k$5yu)0Il|O+w|0xlnA9V7)>^Rut!z^Qjf(;%7Czvnbxm(iw+;cX~QyD4kE@oz>Yo0I%jkg?Z(BaDOzRNl&s}|lRF*ESN2Ky0b{8@h+1IP9Fac$1h{0OA<_+{rZ#NTdI{Fl#-5@Ww*Z_9J<sCZx56ZKmf-u61@<Z<ppbMoKT_?kqRE84PYp<{u$9u;6r(L67j2V9Lc7aT(ZT>tPE{_R8IH~V#xhW7qsRxjcT^=jN%Qp`)J`~9H`Wn0ECyqFh=M`ht8I++$?dzQ|uiNF`#uZ-FEu}E=G+TS>q@5o89j24sH9r;^x#S^N=60H;X8j+7&ud&?%r4zXsahqx^vUiQI*WBvrp%<yv+VVrLe?JX+jjfp(I<}~O*E*77S}Wce&$m=Q+xT2t#lF?=fjX}8o^8xWx7C`Q;xamqTt=a>Qaq3*#<;fm;ffs1FFCHQrBS@Z7<w1Q1bJH~qXrRb`J9l4rH}CbOBH);R|@C22;Us_oho+eW9$;SnDKtF|2*d51tX8|=5;X`j-_#mr29HAe8f2MxP!RE===d=F~=?OE}PPp7^AX_qcq6Gc-|eT;d;iiTr~5QJN;4Gt<E=ZDBf?YaE@J+!}awNi~~Gx>0wOK#`81$j+M#>AHM&djpqk@cKxxOy)UF~|5(a#>+7vOLw>h%zDlDauS~=1E+O8}QL#X^7V-LPpUhX?Wt$(>cgDYBxig#-dgQ5Hi}wwF_f)MR{1|xz;r_p^A<X|;nU6Ju=&14HxOK;EK5kV$zb)<UxG%=7!o9K%?hEC6Dwovo(@TUL+)jF-V?FS%_oMy~N9g({{a36xd9{hIZ{z_OW7SYUkL$Bv*K@TNy;A*U4I?PL-vaaA!`q|1!TIv*d^<!wp=I#{@v-{3?$>iKEWd1{Mfb8P7xVG?ACKq%a9ZT~@$a`^_bq<im*ag`#X;6y8ol6sF?Rg2uzxs{aeu1!iKqA1>+$z)+|S0}$LrVndaS?tSN(;z=U?^be&<JBO{Omoe$;WT`lNWQPt7_r1`hMfF%;&sB=&pUQX4T?bY*5Rm-9%RpLu(wrAh0^dN&hiFnDd+^aOTw%AZ`4O@j9P9;f_{e1h!MJO@^FqLZ>g&6EJ_dhUXMA+ByIu64kxlQaX&DPF@olje@R<}KLmgf0V<#HBlTL@l!&Yql>5dBg+{EOAhu`)z;nF>iU;CY2GJLnMg3Va5=!_KM@~^@R_bKb^q$Ii?5C{F&EfzT>48f^D$lL&Zh)9@TsT^EeYuDRwU0w;7h)VCLQ%4AIU-!F^osJq2}ngDGvEOoj#bh_@5h&%7S;*et9N{M3LCZ_KopJHn<?44JI`*^Y2OH@JlBt)h*lkx7@VF2M$x;y1*lIOidACNCU(VT{YA#ch|=RtbJjVt^mp_+}x%BmqCFNK8i@s|0KxxE3`t<!4N)4fv#6k%npBm9Csnp0n~NulX!+!QM01v!XpO!Ovt{*O+ac3Uk=ssdavj+Wsz1RhlQ9?OQWXn$V3J@LR3*Ex3aR&@oHY+y*}=dl6l}h-V68i1|ISFwBJb4D*d&Qu(wbiy0G28*hNNQtxZ92v_nFqutkne=V*K*cn}XH(}m$27BJSi5YH3zM&Up{?dA0@kgH7uVc%`PU!b@*tc9ZV^-}1G#}@Ce%r5eZ8Mw|25Le>9T9#B%u3|#)DZRb7Mrr$cMayyGG2#211|ZFH-b+Znpx9Z*j^@O&5z)<rWhyLb*e3;@V@@OZBAw4C$#lH7#}9wtw@+Co<hc&;>sKH6o`<4o#ZBBY6-9f1F)4}g#WZ5U=g0U2v>e8+6vmrkQXbzW~|C~4h>`8W9&C)?)53FXE4H<8;pg3PY%AmFJxLii_W=I2KJ>_<y%&sIj_2;^#guy1nY)tW?XKO0sZGBbMQSm_@dLIzBWumbEwldjGY$^>c^IofcMwn-fWONLNw5KImamYF=)z^*I-Ax;WcP0w-B=z(a5Bz$#I{QL2i=hg=KTfhehIqSwUo2PMSPe1-JO*_fa!2Y7m~dWtLgw3})UfZ_h`0_uD`aqcDerTNg98-lsw|S#J7PLFkbpKL9BWnfBm^(=4i|7WfEtF3cP6La<-SNvz7aOn4NF(36wHYzO6su?Sud_qe`HaXmui%;UO><7ZIUCX8Kqyb8OxmM|C%gx*UYi*lW@GG!}%hCY2{Y2!x7+uYKZ9jn{~Imu7Hm$U2+e#vo<c;kc^p{LgiWRqRXdzlwWFhjm)sJkmQam*-ZSqHuYm$&_ip7_b1(3X58&9G*cZwKjNmXMH!80SiTtlNtql@Mu3MO)u@Y(UZKeCL!ao`zj$`7=K8MUf6HGb3pC^0MoyJRspJN}<oxSHV(e4*tbm)OJA4Y7OJ{q$EQEe$9r8>Pdj_P;&kbKHG^~rp3GJEw+3kXzD9Zp>NmV(cifQ|4u?baamhlBH{lGS_5qB=z{U8J+D4ccQ0@wYbT`G!#if|no;5pVPgBzDKC3x_8wc&WtU1p(~w}iir$SIw3Wf1Y{ba#tZZ&&FNgiM==jI3Rl4kI9Y0U$&HskYgK=V#i|IWW@u#cQH+St!adDwdU#6#gIr(->kdt*N&*01H+~85eg?#5PZZ*fW#sIE0?rPBSoKZ8oD<-|k!Z9z{YMPi;(=fGf3gGuRZh((vaKXIYLxcN7Nn_x(#UZf2-OrJCS;g}ar)$;MAZbiGd1xqTZUyOuKlh}$aL?EHu!F`TFU9&Epzek>hnjkDn`)ex^(~L=k!!5*2#?%Gi@3a%r@W)q7e3iNR}6e3g+*J|0?O;NFy|k7T$cE^;z9mh+qJwDR;kL=I+%aU!L|;=WuMX>^R3l><=^+nb0y4I<b}gr>Qv!H(tL?{;tBm!*b%Ei4973sSlBN<H160*L)16wvo!3LhKV^h_Nm=iRfYF{&5;L=Anv2NBQ6?jhgZ!zanG0DuWPNtb-c$|hJrruAp!V~9ehhI9~hB0otykq;Z-(g)n?x`_WXU}{2M+LHB-7^6;9|RUaMHv>=%Ek=D$AtvF-odA2oLre$E-MixEGkV_(t8kCrVp-Y#3(4<0s!UyihvlhRFj><3HKOZE`EQXwuna7Vn}V~a#skJy^d3#1w1r-h28Va!b9rz5<+IR7p0RL9Jei~OC_7U|#+JEbtc3e#C3=E{nkQ{=xbrr$BGeEWBdwTc;PK99@D=K;3-m;NE@?fx&k?25Z#Taz#D2CtV;M^ZN23U1RM4_)h*BmPa!Sxc)I#BZK^w{*!(THJuXP-g<>2WvXmo{kklA2M>pEeYfUe9i5K_Nc2V!=8*hf&YtE$@mU`73$p{I+6B)+-8e^<kJ7H-J+n(isKx$Xqta{*5B|=qz%F5`|m=<G`=(lXMf}F|C`>I`tcWD?wf{kU2Q`Wn4vS9<TcvFgvu7|2CzvoGn*7<m{U?9?(k{Ldy`uYEv+(7#5IW$GK=crR62)i%t|9NjBDO;JD)URa<Xk)J9tSBn5*-puW0<c)|QH&|IqQ8kr)R0L8_07PaFIZm{%v&H8##P7qewj%aEHk$=Zv_Q<-p+e}+l9-a54rP5e)qk}kH)4?YQdY5F2zrOZ9~9vbx}b_V!{%Plj@kCM%r!YhyY-S@%1hHJvNz@jlvn=}(c8lBi>*ZMx#X%_1$3;Y#JxYsbW%2QU;vph92AcN29;u`R<r<hwdvA3a^2Qep}6qji!q`#{VcUD)QWz%2K*9g1*k~RGuYz%Xc+)s&5IgDfbHsrC>yoY!Dp0UO&@6Ay1$}gQ_B5D}FUB9N51Y2W>6ORmKO|H_Ym}n}-Pxe#U(l|1%%g{0h<dT8$-pE(w)3W=OH}(?SPpf!(C??;JX-xs5dGuF_;zK1a*4wBvVAEr5C;#vtwaWOi6?(4w(ihJ(E??oJbMlAQF4!Bdg*7*eHf$bxS7RQ;woHADWgefqNA5q>dD>y`Xq~~$M7JS5&g*=fwa(!_X&x1cV+VQ6)nP;L&b3IDlH5WZ1~rFff|xLWCE_u6Gn0sfhK1+rxaFX9yKj-kHtIZsgFdD;5VeN7wi8fiM$I=`M|>EyB{c7V)~HbkZ~HdYzU`=&G&_atd@cGPW7+-EtPrDy(l#ZhQqYxP;ccaV4@bTYeD1?OIR%_dqVCyKzrAaIm_WaKqmK33j;i#!l8S>DovyQ=+FsK(%b4@7^WZnGzP47!v>x(WQ4<uEe&>xYf0cMpoU~07Xig&C*B>}i*Z<sE*IS~08}aihUi`?1ND|L}i415S4-T0|Ye}a18eO)%UT4$%2pg^6^Y$B-{#_r_V~ob;KWm%oUE}pFeeIYprpslj&(m1{5B=PUey-MU8MSanJ5;y9K_B~%=4JZS$21qtfAukq>mRkD=il`cD@W(9X<V)1G#d3!v?hu7eAUm@*RHjm$x*Lo>N>JD=YZB-(cCAuSIyn>AALXFAAVa49duo`mtVZ=#h|ZkRQq~<QOC{;-M+M4{KQU`zZXOG=s(=6q5n`KMw=9T4kK_YZM%+hZShk->!yx9`?_uFJhi)e_vb)AOWS8N{e0bCKXo}8dfnjpk^464I@|``7PamFKjlHKuE;-S?p*el*5wP-Sb@0@_9aqWw)W!iP49Y*`_5=%Eg!bnpEla>y4injk-O&4<LkA)4{R^dHyh7!et-T2-s|8k7skf99M-t+(8ycb!Fsj8`x<NeaB%VX^W|_{uIi0{I3&x}VI5rh>C#@~@5ki=u8j^p?ynYb{_!2`+8*v(;P-8oiyv_Be!V;t>*eK8E*CYN*JsNL&r{FG>oD1FvyA#+=|t<`aCm_NS#Q<zGr0E9{CaQ1TOXD%4)%*fM3#234x>Z#TRB{+*X4rY{T&#~3MgMV2sY~lZDO!(4{G~={x8iGQ+N".encode())).decode())))
elif sys.version_info[0] == 3 and sys.version_info[1] == 7 and platform.python_implementation() == "CPython":
    exec(marshal.loads(base64.b64decode(zlib.decompress(base64.b85decode("c$}<!S$C^A7v&GChhnf(@go=n#sM3FB+wg!V+>+Q>;&vz-$&p()bRD{hrVl75hEcqoMG>CBvzyGkADUHXD)w@D+GTxh7+2(VP<gMa^qkds5iNRGovMNWtPE+bso)6Q{R1XsBgBTO@BT|Gn0h|H_#QHGi15JMu(mGv%Ji<&QiXmy~mBR**e9Rorh-2!W|#IY^#MP52tsFh5Py1hHvu~?z75lEYxFoKC|ckXqG|ym>cU1IpL92w6Rgoc!(N1^`U+#3>HS`5oL}8_05B<&t*B<$?`##)45!e<(Vum=JJ&+S7muB%U$_Cvz6uVvfSyR{9?-TT$b;cEWgY0i!68L`!7M`ioThD%l0l*)<4Voo@{UH$oicu-_7k+vb>h%d)eMLlI0(=+?(6G$?{f~zd2#YE_46-`S;x3+`n(W9WvhuKUs~MH`L$xR?U1Z{9-k3-qc=|?fG*2HJ8s%^7%lH-`dOPS97`SZ!Ma@3DpYZ;n0Q}w@y+X{^C~E9MaHW_0+)qzhwE5#hhDHb4+2K>UDE$!$0Ty8aBA?z;gp!y(V12a}5$<OShbOBGj<m8Mwg=I~B+ocCgFsi>!~hEt;s8^|`=efcv*5-pSup6El2}?MDnBIoitldyY^;=K8mWXqd?I*uj*8xIlTpQQ5Hh`E{eUm~-@D8+3r@Z%rca3$sZWKFQ|@!|&Xg+l_c|Yf^?U704a5TXQFp_X&4s!{z$~Ts7Rw=V*%u?tIAdggdt;pWCgPoZ&B7&KUmY?%Zz1UDOow^S7qZup-M7CoZ^4o3e*_6lzmycs1W|<C43gInDPs%}K+r@_y>z4R>E;dlh##%~`&$^_nw_wsW}_S$sG5x8cFMsaWL5ac~yD^Ih3ocF<nSn+uEfvOd?MH@>^e`aR#NO)dM^il)}0P?l$HeC8f%8rhHb)~r|*b1#zfc;y~##9Uu(gchZ;e%?l$d-HsJbMMx4vVWb~bS#?ZxnR*d-_P@L=LfIpSv1dcp~W@d2hAY+*WqShQ7h}0Eb91vmJf~ZMe`xw*OkqO7F}ie$%$@!KhMXS?>EhLe&5hsS#+Pvwdld$=J|N#Z?w71&#Q}la@W~=yVxgF^v+_xraxJ?S;}{2c9wSJ?F4%AVM;yul6us8phwXf^hjP`p4Y$N+8OGHCF^}dz4@9xul@77TCU@>e3a!Q&nhS0vYs}h7TdDlRU0GjOF8~<xnDMSIj&yXi`bL;dy)3S|B(IK%XaQke|u>!VqccmvfsY6mmdN5*UdxfVZUw^C&se<T8lx>rM>?Md4L;L>i2*|(=sgWy|Fgz;&Tv<v=af?NfsxZ?{mY6Q_jJTc~_$g!CswhgLAkV@=C=UOkrc-$BRQ@Ubdm>9($gAL49cNj|%Jn@p=Q6R*pYXQo~`CN8_vE(AV<_&dH&h<;srBHMAGMK(!yg+1YCh>Kpr0Jj~9_Ue`wW)5+P!4=-o?@~_81{_TdwyRo&5L^0nD1nVr<eUFTXVwCdti?Mw-Kvh_1pGR*4gR^=AzZxI5*&DPm_qO>S2Cs$+?+xkUC6uqR2ICBupf^rus+LZAJ8T<AJL7AX1d4X1ms5g8vFYus-3<AychVL;c$`9+xCCIIISanIlVoO#MXGHY9yK;RH{_kEmO=042~|?&U3s$G%VB8e^7#yHK0<In^8LrY&NZ)1l;Fx4`r=^Ah%4fZsblU?my$;H(dLos^qy+ut8hE;%c9F#{++U6n#bV!`{(rSjBqq<!wwB;B;g-*hh6$8cZ5yBN#Kg1GV&9or|s^JRj@E@J#Z8xp*DpabTbguI<CEIuKDZS^4DA+wyfhR7v6_&)2c+}SCH_plm%bqquKC>>g+=|Gos;YgFG2X*e`MRzAt?5FXG&?eG%?2<j<%Jzx&2x)TrKS<1@+ssI2$aZZc%6f3@e=-DQfl&ck;7HETMay>E;4vAVtbuV*6*&*6!Wb)1C3@oP}J$H{(stloNXVN^BIhvmHBjK&ZA*CB~Hb}0T%O?*3rlm6bH%kuu!r3d`+*BD;O8)2^f{o(lOmtyB#j&D))=!o@J?kgLX@D$#(t#&eFb<=n3-Ol;>aG8+nzPda23%{N1)1$S{Wm3Hu?Zae~F}gO|Mjv(`lgD+>{lIDWhf~zk`l8%oBW2&!yJLQB*dw~{j=?&9G{K{EJcS$C7%D;WPSg)>8rVZx;vD-|y}6nE^?Y&JcNg;V;IPkWyAMyb_*3=&Qvdic-ab>9;1j8pNGsbU>0a#m+MBL@W}oHb!<@2UXKcL3$L5I4KRx$U8cOhySf4j?!kj5bKeN)~Ir1}eYZzq`iM=|UcEpd55jOj7a?RIQf7kwb#=Q!j+`Q$(rdp}nWV;!i1g#EP>$zqf=kM#A_2+%+$zZG+E8YSg&6B2VQ?mN&?fz}x_vZW_;a9S{YGc>#v1k4{DzCd^qnz?47>hP7UYyNePIEr0?H`*UBzUBo4}K7a)eQ;$zIotQHzz<J$c-PzKlx>ySjK5{-F;TB8G_D|dwSa)n$ro5`rcf>qWI%_{C;hV#7a%g{v!@Q?fv0q?C4!#!|P@Y53ThFp-RZ3Fj~E{vHZl&>+v|gXwGW)2aS}oX^gL>IlaC4<6i*UQg^gL4ne*{bCL7lHSP4MWqV9t@OgdO<Ih)%W;<mE)>5g9b>aLqX4J5DE2>k+e{cTWSK{TQ1eZTA`*-gZl@EQ;b8`OkUZ?&05kznrzAf4m*`=7uSFxL-_$#l;pC1?HXfY%{w<mD;;!~;o!XM~sVeu;83;%troWr==d$FG%uj_!Q{mR%F`d58?ixgzITC&Q@@HIcj_&qH^-F9{GVfKgS@w$EApifQwNjneub#&lud3NKq5`L+69QQ|Wn(hFzHf-YoX8-HsblIsp_dHtM7$d7V;C1ny10RVkwK5Z0$Id$YOWhAJ>hgv@?b9b$*4_TL(|rGr$J?9zdE@nEUA`IRA8+XW@NSu*uiW3*o}b4iOyBg^@S*MP?68SyEBZiWcvyNKM&DQbrJn5FIsH00`_>w+?>jgDBP@}VZ_yv@7<d8~E2^INnwSoUaJ}6<)IUOXb$K}t@5e3AJh%Mjw$IR5Z+WxYTe0Pst>Ay)LsM+dOg!E$v9|iyZ_}4Uw7F-No~Bm+C>|t<KX#vloHLpr=e>2`<G*e>k0}qm!ZY+saE$ETf&7v0_9^nW-Z^SVYH7!YCc8iWn*M5i=luDHJ+@IgB_wnPue~LWbp@MD?q7JdKHhdkQXgrom~4}L>ee4cn{=DOuhh-Awi(`NXbJVzPD^rKA^qUK@yiMHteCFX=8`m-IsKIzhuHkX*yPrqe-=ay(ztV3vc_NaS7e}RPsZqc*j@QsmyO5Q($1&v*XUBFzTGGh^o<(c-2~aj-EQ{7rz!=16Lg7=?-@haL^nmz3g9g3k3!pgomw*uEL#o5S<O{SePLcpJ)FQ7y2P!_+zBE-Mjma;eIY8xSB3+3CWSkAmxDhkkasCsb;WJ;a-h|x4_Gr!f>kQ)JF|yF=JHEv^Ynl)_-BOk4j&FKZ_}pif?Cm!tR7s+lMjt6`}-0Si5XrZ1n(kbodVXUWb;YdsSlfyP#gSQgRqZ0g^F?y{n4pwj|XHcT*s`iOce`EneYNC%za7LE@34DWcw1MAte?P2RqzkZhwZh+*F(NtmausOYorLg#j*xcB9;)Z>h%J2+^-2n_hOv`@|Y@V0AuNGtf}w+rXl=Ps%p8%5_eMPi6;!AFC;=s_0~w8tshx0S!LY=qgWmkSe8H3cfwXBHN)IFp%~2)D1V_NjqrMEl|Y?TkEuLM%LOYRgHDn(F1Et0`q0&7WyD`n5eQ-OLyp5O(~(fd+yxoKq+r0`=)V5YpSMGq)jZX`4<tMPSq;osQQlD;iYhp28d=|c61H>Bso(LxGR-d3>l?f7U-s$s`M*W)*rrQzQB^HIWRA*!<@Ej8YR_`*+I=8VCC6$!}UIe>)o$~RXS>2DrJgWRV^7&NpjxMSoKe}8S@9MN7t)yBR;S&4=Jz;?(j5HhHKW+ET_R9#u`#V+Y>=sOt_bJ)fZO9;YbC@Lty$fVh4-jh*i#stnISqO|DjlNCY1l9kxWp+gRX^6PgxeO?*pafhgC$i@ThXwckuEt__{LgL`l$TCyp_4}Xeddjrq!h<?6vA(52l1%zj@;4q)yYi+T|PXAzS857&P$7*ni6Jdp-3}}mLs>68NaZH=d7l^EuyVzqkWvszk*y5h5jaoQ2pItyM(0R(7K@Y_6VD_}fiJ`K@OH<)#u>P0W@<>2DlnK$md!wu!AN$Y)ynCMY!a;$8AI6$E&7Cp+mA6w<I71y<0VTxWL?G8-<L<<Q^|0`Tt7Qxl0rgQzwcFvusyeN)Sw7VMNH$Wg_i#T79_R(A%l%;Uo9_e_7iD)~NTotpfUNa{rCv^z$xfvDh-x~9s$d}3I$+0_)1_jeQhi13M&4gj4e6vUFGRpQS@l^e8^D~^Dr%=|CVD+&yA6(&2fLV2M#_)erY|uIACW!mOWkxBQ@=vN1K%Ag(8bFk8PrhiQ?Nlv_@H_Q@*Jab&uTsbhFRrgVmZ4#PF3aSv|5u+TvN@fnKPMzD-N+!;Vf3~#~2T1V;k|LPh&eseY#WO-IrWcEkKqPvqy!*#^w+!I_O4va>X_z<qF`tO_XYj9RYKf-l<-p4Cc#iE6`};<?X%!3?wwb)9W{3u8AgYg)<4PQtzz|zVoCnG8Zd_)qlU~z(-p3@jvRFe%8~bA=T(t0es;fT;dCC^X*jK`qIVY;qv;OIhz}g*5Qc;L!OvdPD&a@Yv3g6i=+MQW0Pya|9WrvtAD}3wY6Go|Fb>wAn6?n!KQ@kH0F95dr6j5$3h$U2?g}v^i!@(UM4&<)k-%~1DGp&oq=tm^=_RzrAjqyVy$2MU9YD}WgpyN4+tYZ(2@q^bxhUaN>!oftjwr0B_NYyCXg34WPOM|k`b}P9qPDN9%Jf}1Mzg;P5~33Yr=%JT$?AtKZ#R*kfchP?M3CI1j=3t3Nl%!;EJ_j5B5M!lOc^%^Z?d$@F`x$aq&o-QOl(NfU!j}vQBNqVh30w;agG%2k<XE)I2?Ag_gF$&9!MN8W1t$k70{;6b+y=;sCfoOPkx8v)jnE2^Y1eXI8al%zN>h^TeES6<Y}YruP#AlS2YC0Naq+)0EZ1q#b$0%(EErw$v7!sKuR$p$}SL$qD`pI^M_anuLwI^Oc()uwfNb|DGqqm@>TM$iu!%YtmG=I1V*v_j-!$b(s_sr##K=l@8e864SF5cEKYO!<IgRhJe3M35|(GKg)z?8LbBJOB!kM+HcDq{J+iGD)HS4pSsEqU`;@e)JPp}_))RU!f9-oUjg+Ff#re!w#OqIH=#bHX$)(p?$*9t)lpMbF;TRfjOvNl>l`8A&mIHc(-xL@iPeh2*d8a*uK)uyrOIDG591U_TFGu%L@SNNmBt*b`NHb~BOvhm3GOQO)J#54%H5HKo5KC*Q-*dK1q6#wUD{_YrbIiCDLTdHb*Z9+6OZ}I+Ai$PC6xA{qYs#CL|NJRD#zr3VzB-rSkuf`t2>EJEz<CZ-+6thjT&o%ge6sS5(D@<&msb3xWz9y<BaHmmp1mJv^`c@UIzTz43ga_xx3$@J@|E;GSDNp`pA?jO&=gzE&k@J_@W9?PizH*8pfqpv~0jvx<UlBABjWPk&7_1)MNU4u3`SWm;S<<a}DZF{=MFJp>ZC~jp2soZ?PD~XhZWn+8pk0xv{qlcHI`2s*$l4I+|a*b7+)C@VV_gAGp&-#+*)P@LY3l0e*L@Ei+7RIP<kJ(GsJP_yTlJ0etkq(V$V)R#ScWVC_J`7pNF;mE)j@DrXhu#bT5u)UBq%^|F|t+mRL<Utnh+#@Uu`-nnY(7-k{6^@l{=bi{?3bjy!K!$S)Ab_Tpb@8P7Xd15LV+kEZAV`gYKaVq;T2m8(0`oZbulPBVx!|yWaO`h!L5LIzr$$7e4<J`^;-r;8Cw&P5YxqN!gZ@4o7WA6+c0`;~-1Mjv)B_A^D-&SD`ftlxDaj^Xy=V?f3m>))FY)j){!JOND=xq#C7<nb1nfYl0Yh$p`{4&JZcsI=0*f!hviRt%Yk{Rvhp`G!VCb%!oGOuK1rn-4A9Wh3Fmu)*<6=Kt65AnclIv8cY<E;SwT30!vOWex+G49v-c{#@=;?>DTU`yuSKep%RSk5*v!qnWJ(S0ZHIsR`$oxA1CQ!~!7tdE&{V5}HUZ}x_#7%v8lb6d%ANtv?eanA8X^F912JFmtpJKmu<&!MluOm^km$7;2V5!SkB<rtF8Nz8Te^krP9L!#3MPrUa65H8Ha7uS!O<&>gCn>J&U$Xf({vN4N`y{z-U=D@tqT*N8<=h&C>-^ae2m*m&jgZZga>X)k+rx?c0`fYCnug2asi<&Fu&Nqt7q<{>d(%_Ae`k;qKBFkaz<$V|Qvob>aH~p)m{$;cNh5yjMWM%%Ye?R8%bTK*D&`;8YW2glVtot=%qK}fn;xWpkpDr8JACrD_h#IfB?3OtQ=Xp6T@lGyIj(C(V%%$$BdAlC+wtO!&m|th37n|NGbSQV|t*DG;jXF={Y@>l*rHj0J_ubNF{x>~a=Kr|7r+iO<(Gf>A^Cceoj40cV)Hh3BF<j4cTy&PNbo{jr+wdPY?~ldieSyu(&ajf1ZM=tpBIC+n17Xg=_Jw#^i^c@T-aEZfD#pq;`VieiH$=TrDO(n9&m)@eqj6c2_c{N1-4)IH)zJEVe)e8rt<fCUmiJpz-hZ3#CyMiKc+36HllT4key6ylp}v~Q2<0cs&_}y8R?yC9_r@QU)TzIhhv8B#<KyQ2>sSA*fA;UE%$Nvd=B<!219s|fGP8A8yMN0JKI~!a%Ubnk7UL8!#M*Z@HDPK6JafQ}s6!3#1KV69>Y4dN^^ddy9wAoD<x&1HlvFQoVLJh41pv|nYH63>#1?G`Jd0ZDZI9owt%EC&8L-i+(9XeEuD@p%n)Ns435NUYuF!Xvc`Yx+zvQyGr1QO5@!Ta&uAS*E*ValF^cHu}8tfxrFLYmIs~plt<!R?hOTk7^g)6|jE<yX2nQl;(Exmh7TTht<8>$Bi)KwBq{mwhwYiB9v=nnRzNfT*fpXIs`aJ|3D2ZNrLt~aD?dM_M$2OrcV!1e&EOTBp%mqqs9W?Qiv7u$CIANB}rve<w<6M9PNf#~$Fx$OQFdeDpQ8Jr8)CQI5V&=31;M+P<)zjRJbXUQY17JV`P@z4LIFZWqre%b4%9@u~l$O!rY@&=~*?k>L@Lr8fE4%AKuv-^jQZpCBvHOY_l3+M6qe;eQbumM^n4vE*)f6s{=jBxg~HjL%vU%GGnL-+OB7q4+Qf~-5a>5k^}D)CKjdWr?MpfR*i=K5X@MdBi~F`W=`BeJCq;sqbU@9Zq`QfYXvX6kQYPBvyYI%EWeaziT{hkJRJwxuvZXQI*oo5DgD+Iuxu{uXrar_P!B%KaNon&+@OXlH-)+c+~ocevx5zt(5=Ewghai(j2_2p^@NRQ&f4^d81`9vy6SwhimD%;&Z-L8pei3kT!YZ{KQI6DR1UjQ)p=y=?1g&X-AESy(T8E*s}}J20kv#zD+qMbYXt2U`HL{WxCa-%=kWe>DC`NBdW|XAd~9c|5l@&9RFP`f4Ot`l}J<)0pQ4owv`v8-sCb_KWVhndQ#-<@>-kZbUY=5BR637x^-PpXUFC+1y!!jdqcpSuD)6d7mfL{V*cH2w=;OMKXAj*ZXwnPYw$FW<$%id`mUu0X%}7$flyG)Ptn@0(*B0m2m{!O`-%jzP+0YEdWkbGTfCirsxyh+xneISZAgw@QAYY>P%a^gjQXl;WgIHzUWK^c<uT`JizZm9cb&1s57;a1vDenOgnUqG&;oWRXrxY)G2q-iQtwdFlMktMYq@{uyZor@KrwT-af2hPNa?6ea~|;qfoFN+H7Ori#hhY?!bP5-NGW#<g?(<watYC&q+0;$ebnAQNW*LnaeDbpq6zx+B~E^gYn;;@jvu;xi=$YvCMn))Y+|pXS;Ne_Q;fWC^BFTXYBQRzIYb2?Qb~wF|XGMGFZ)d=2J2?z)`GOSM5btWuAE6F9q`d)K$=J_ET4le$iF%o7TG#$o&LP74EpqdzTW6X`#c76Effxv;Wj(I;3oj9oae|v=>5O&Y-i>uZMuyz$UyK^wsQrt5|srC^qOkINPNhWO?;!8WKlb_r(=3qpP@}`!8-6I;GrqHDkQflCPKla}@x4&_3V;I?nsKpuO@BQ$7EN`|<4m`8kmIe;;2Ot2i&%)mVI?x!A)0o9>0bbT6Dh_hcU4u?%i+ix9^@)>HcZV>sK6r=FSj<NsXmMbC!6>)DF~{DUjQ5D4;hbf#~Rt84LC$-f7XK^Z?9kL~}}zNNp}w-D^xtL(2M@rjulP3TPvw*-8)^wlhyxsAc-c7M$MY<%N?Vf#f{7Hq%FQ)(<c1LkwdLD)<Ed5*KQeTy=RzIlg|C@y!ogPYvORjO8XB!bUE5l!R(S9zFq`VhC$nW7SK^{EqIArs1}5j<4QZ7NWm)~1^R`_1gB4lK{7Z0LeE=<)=yG%0B+>_?ysv5%<7nzKfl>6^4DWylO9ZeRkuk1|B3xVoI;po?hG1>{DvIQZr+8o-a-&1G$tF*IaZLpi*K%L<av9d(BLOw?R&zATvC7`CqWwmdic(R(z@m$zH)E%@vI6|<N><$x{zf9jXz1|M!pyAZAx93O`g*N4(R!0(gMc~4oy_qV0pzu7a%D@vE%^VYY1$&mk3ke=LAb_}>DU>NWw@6r~4jp##v=9*8xZA!oGoquxBE%?q<>fr2$lr_N@(1Xj>STGo`a+eAW{xjEigQ4%f=6+okxte?M-+B_rd)K93Kd{U^ep6zaWGVk0m(6Qv%xkw`nHlZOxC{`EQ%O$ArOvpDY0j}1#R7ZxA^CMF_lru7*#HLVLi9JDGxLk{Z2uA?*hqT`80gFCLT|qBdMB_`$~Fmiv;CtZU?eoR&!yc>#x2;<*3hoN_lCykMsuE9Ed>n3@9$l>mpD=O6L=8t8);7ufuT!YWWJgh>{-ZP&9;A&^|s=ld}Fa?fGPiD?Tx{5cc06g&)DwoT%c~|d%NYi+aj~eIy^C_tN?!VHe>&&39O<kn|RaPk|z}R#$DQlwN8G={5y4Nf8iRz5*IpvEvt%7?pFlAnE<Y5NoF!Eau@FZFI=npT1bYMuf=9&Pg&T@y*`%2@HpH8z6I<)!n(qYglE${qdWcYSj+Y|d7ruP5^vb;xq)IS-;yJGo#d`E-Z#$iJ1D<!!;2R^Fqb`Cp^RsTgBkQL*oZ@he64U7j9rLj+~jF%wTc6N5RVx@IGgu>@|^#T>2F<zn)_p3v)_4rDC20(JXT|8gZ}e>>cfH)cE9xD-Y@zfdHZ>o$52Xt=I+{3#x6lW-etLV1zGWCo-)tLqWe;}9lCAoLM%4zF!$AC%XsIx9Y8PBzv=Sd#v@=YOEYb6TcTS_JmY6vFqL}k%&{WLRnFnI5OaTjj|(nz<u|-z&+Y#nn+3<@&aqkP_sv+^qQ9>N{65d}YPGmJCBb{q(p$>J*UX#$v)==(!*z@-(>u7s=e)qK@BCVevss9L#W4Rr_SL+z|Ai-l9)s+C`u2H@;_4++H)F}XYsQX?ogLGk^Sd?BJqiD*6TkZU)QR>tonW(kIMU{Wt!Zal|7E%1wlsYHn@(6#K1_SPU@Ii!&iKw2`6%Xo{6F*9>OFZBN+}SD-sfi?PlqMteg9KF5^uI&|FZw)ESrnGzshkf@!(Qkd%%&B_a)D`lrFjD!IC%$xT^)=5!IpB$vBs+Z_4`ex&nOsv;IZa2mIUs7Y#jr_7vd0dzhjYaP}KK|EzbH?FHNrvfP`?JNaA>&!t=0zST=S4Oh9Z*4zdrE8sqD>_l>I78q>-<rMtFd@kTeJI$7*TW%hHl>b+K0=yR9|MNHf?f1Xxn{z+rdhA(m`;Ys{Z}<P}ed#~m$N$-1;P%ZH_yWvVvxWJ5*2|z?W6Ajkv6|PxoafD(>*Klp@AF&MA(iWcxCwsp$9g59E9cRD&Zj)Tzzwz8?ZE%aey|YB_@bFE>$u%XyC>xPtNHybyzs5`xAMJa<H`NKTd(ov`ax%RvcH3@FV8c8e};Z;Ps{plF9Glz$&+OHFz15y#+z(s5B=#wpepV-%hMkE1^D2+mGZHLab|POdi4eVzBlfb3_=3l0A3^UhWZKCbX!d8SJRdCwK=!c7~UNw^$YMoC}S<M-8X1A8}}jL_!W$MV+x7gWd0x=p}$Kz!c?pe<5-$M;;?i1^s~IJp5@N(<@aZ~S$q$`r=TAe=nIznq`iCFE#nGya$M$z-G*P>0=a<a^9sMtdH`lt*3T+W&a+y}`S75<_aTw<(wm1lUi)rvX#;g>17G4<kq_)#rM@n%A-TO2bm%GLJKRn$)F~?&L-5H>&m8Xq>zI{FmC!n%QF}AF8XQhEFhjs2yb%GWW=0b;PL=AbAnV4rkXMjYC88Qb;OkWJXzmmmQPhN46rUQkiJH>IZT0Xq?+xpflh=UOVw&VJa22Lz4yu$BnasSazGG3wwArn*L|jgmr<|P4XBf#i5^iNom3>q+YtCbC-$?18J=L4(;Ff7Bup0>Of?r_;rMFDs9W<O^9XUK1rYNSaui>{+R2QPD4W+1yH2)D<-kv2~jqQ!hZ$D1$`hpXoO6fc~wu)8H!8P!Z#N5R#2JW@?U_2ylZ+*~u9~m{bxm$+m!@R{0q4=#@ooMNiMqG0u1XlWqxI9i(dMgB_Tt^vq6uF<JKQJ6d_Kh*O(OD}}m@8T+qs)<+h5iw;1m8-*cfKW>m=qJN$vPlHkKF3u1IJ@Y{|IRMI1yZNQN57%RSn2^50zjGK6uYS>oV0l!Ww11s6L{EcR33hUxhhJN;_4Ad$5FiA_7JfOqfhv3Dy9s;VRO~M_MB{7yObTv(A}%44kUtny1l6v!<QMSgXdFTi&^bYg~I5D$o@-Fn7$~q_wj886)@^3q&Kk!1|GD%uz+67MWC0Cf1evR8(%Jrt8S|m@jCPX+ka3M)8~LI!y3HQJ=;Rlu_;wm6Cu2G;9K#BkK4zuEP#zr%RPmU3g(aR~b?DEUC84vh}nUH!An1S!V4s_3LCKkky@*18?;$^+o1&Ek?iQ{q=Ms%9hS?DML3a?(UX2<m}0xF+9|d)B$-zJn)@r58QVfCuYY*|L~iNm6oYR1n*L^mgStN)ivtK=+hyhx`|I<A0*$H8+Jc>kOh~;=aDN_P1==4+ewWS!Evi@BMZ24Qrr*DRF(F+#-v=GY<i7U@5LvW1@<sTbg((1Z-riYzEa73Us~FRE234~unxkM+>)ZJ*0MYx<u|R<doK3{sG*wH<|ucXl}-96wDl!wswmTO#~m-oV~<7cG{HJs%=UcW4lcNBw6M9Y;dzHDsNtP4rpoS7sNOZV)!J_b3tNB8oZVRJ=S^Iz+f!rKAyYNls2`a+gjBg*i-+g3MvbxUWtpvld!Wh5q9X+%@;hKLI!)4tefL$e;+lwy+6!q@sJ{KGalP4Ou^OLRGme@<Kg4t>RgvcH?OG=0K7H&STtyz&g*=0Bi5u@4vLMdeO;9k<RV}y$lz-*Ty2`~_iM#Vi)!~I%*vqw2VeFP3C|Yr)B+#aPuu+#$wDzrHovHYX*4!eGaCKzrONvnIH{&`6yP4KBi3D#>B;c{-edZ46xZ}lgk0ySgZK~UMPI-7rL>(rg2btAVDmZh{XQ7oIV^vIumz7jpqS#CQ1lERmk31QG>jqYoRF;oW6~w_2>@p1;Ws@c#KMG0?R-^gJ;89ZE<GSi2=3V4o#L|^}IIARO_`9%!n$*FTwB^;;f+Oh2*4Js5cE%%bgDuyF3$BA}M5@kbLFPYrL|JuDmGxIh(Ss{0&(uH*8GfNeZNtZI!VS5TxMT<CR&$L;C7Z^mt{fkEh^XeaL_~o#{bbIhhhiWgLs8)Hjv{-?Yr(*7?jxqU1P#2fa7~=`DsJpCYNlA)k-S#%Ntkt^6tmo8)M(5`VE@K3Vt7ZIA<P}xfL>p~4qu6bk0)~5W~};3YYuu3_EzzDPRjs%%SS8*!EC-|wHbg<*d36U<$9ShirgdXH-#&8dvdumJ+j&ZF)P1ezF!V>Xoya?2k;TBIX^fVK60?DoR)i^Ome?aoHsX|$0`9k<evm+qyV`^n1wpto@_-S>OhITKHwIE?VHTF<qm76Eg{9GwA43gzeplhA@f$Hq6S$kwlqf9v<q%9pMCD|`sAqL$qGiSc~PFg+hdhUevmGl=5MxYu`k0)?p4Yg?>ln@rw^}_`oNg4M2^5kTZY{AT-u)Rxl6qqd_QUBc!En#{Rw2Mjfm<-Y<iT`^D?_Sl8%03)UODP3*=x-**YQ38iTxF{C0JZ8xA-_#F(iLW~+6o(HrQ%SB~%{rR59lunN93lk4l(DwX>sLqQYVdb>iUN%jaBQMemBYs??Y{g|XOuKFC?%>Q1t2xopbJhF$XzJxO`lR2gxcf@11<1Ci>)Zx_9%tki&k;(~lGBWlGwvS&6?JD_oCm%f36@@u^1N%iH2e}k{Hth;EZNSFUbc_&UB?aK4m0cu)3)MoEc0<PHt{;W33q`%eHqzwYvQyHB%pKOHf~=EM1(8#%j<CKnAD!35%C-(4@)ljQ1Y{A$9;w`-Vu&dXr%)TVxr#n$LdK{K4yC<$u^r@L<>mw~^uJl#w4s+HK`(oIYQYb)00k;VfF^BkhzXBNl}u8$PBheD&JURIw-{BJ*6PcVl+d0n_k25kN55F>*@Z&&BiJ1qA<M71Qzo=$@lNhRwhJBFIaegDJ@7B*4He*rUBqAxQ_ychZT}uN73LKDuq*c<<CT>ET;&t^u^1zqh6>1Wqujx7Qw(wfXn{m*e8k{o3T09WId8%T*mIbRSkM+Xd`ARLGfibNNype3Fpkx4*>}gD_LK<cU{_blrq5XA0@syKRCGBe;fA>Vjyk)0;Re?uont8TtjjTwhZh!lxCt)}`MF1gh+E1^p;ZXQWV4UxW*btN(Hg&lU1hlJZR*ff8T1K;zd}lViZ&>=X@JR^B&um*8+&o{o*5Ky1O?kqykm?upc|8q;ojB`deEoOwB4)#$A)DR^xBzk%LFUA_E%<#6667Ymz#bs_Y5UkpcY;5UEF%RXlccReoqx~NEErPKR_6Mmm0mKo%dbpfq;5`uA3qkn=hV}?|_Rh!2Ky{ruWF+1TcoTvPJhq^F}UA64~(1j*fHOu<TK)P2Ygn2XoVVr5r2TJfv)D=i!n&=qpn<Gxml)U(-Z<mkH=r_p{H4CtT#6ytl-si%kzccJn3oK9!8he4gB|aLxZa<|1<fAHgH|$kjOx{@f>M7|&dLCgbw44E*4;jMMvbta6S~?v~$V{>|k5y|GJWz7L&uTlw3O@r`iauk+)&mvQf{%m>01>Sc4xsrUaGb3$`4XZ#g&I!iq3hD)3;k#U<~-ZM2{<+)yCjw8T*PmwwOUpyYm-)N4LXrUu{vZ;l;It(P=mhtiKM|(0qH}m~2w7BtME$wsp+}qq<BJ+4bV=ei^#**iTjTiY|`&sY!d{6j%4}jxfY0uox?eWp;%udE}N?9+SdHBu;zKm9nZZv!2^5oCn#?VLTm-sZg<L-SK7nyl%_jceW-I!?3ZOHrVdH>9f^7s46Pu_c}B#(uDT%Noa-R*9i$Kj+4@7=Z`<>tpP-kZq!UkmR&4{|)&%zIs@f3{!zY`^i8?Tg`;hBou=BCBM40iOTC_dy5T@U1r{;OBF^VES;!dERBbBOAT@$B*)tXE`clo)V;H-VgaY=l$^JZ~~mn0Z#-Je*#uvw84xf!-|O@%^LB>bxaDS?B$+QOoxo>hDy5O23RbP?41_2RmLoTjJooAqQfUu{0YmmGHnI=hWsNNBrkrPs4!1mg<}!K+}^D+#xFGX?k5+Xxisd}*S}m4Rk0EPR-Qse)+yMgLv9CPm#Q#ofiF-|Q<Y=DzX^AR8?tK1osAbOrFuf<7>efZ0~C#P3cB0hb4qQ%&>RD9;?A%JED3&(GT>r1Yi~*T06v3|N0kyC*iDTbk77k!gN}064l&>)Gixx95OANmyn=t*=UvH8ov(r20zZATj<NT0LV+o9M5$F8V3PZ(S>1C-tuvTkLe#DV_6=C4FW9&SoVa7c1MX<n0aGi$$1lKPb*zhPsnf5B1iJ|B9=TR!5eodU<w4e>fa?5^u@SgV^;IbACU<Tgw~2~d^mPKRk^_D%*z}e*UXmdW_AO|_2HlP<m3T0XE%0vO=OcTf!29>KtDLl%t|V?YxuqVcj4fA7?q|kf2slnBZn-n<PmQQJt-$$+j<jCn>xdCud`C&JJ2)6HN5ui>pt$B^uHh~49_qIx*yfv?KPsC)cpYo10$#D_XfQ(+ZAombQ#!az&|}a{FMCAI$WiycF1cKFOBHTsfOAvTe}uIu_fc4W7p&6GY*<n}a(3GuX^`y@=UBxoN}4gP%M`HO#8vMS)Vl{Gs0#%TffE5<o!+FppHQI&41H#{AQ*Vw!5u=7=d@_V#2=L8O$q+u_CbU^8+Mg@tQqTq7;wok?06Pf!B^C-0mBbBs-+WPY>_tQSEM2V4)f(;Pj|}j3O9pG;@wCD2mFm`WSM&k{5le_0JLgAW-g>Q0S530ux#Y36y%|#kzAAItk)p<wKK=h0jIL?ey~Icyb9K}jB|Uf#v16Wj%e<bFMtaYzoyqyha2FSI!GMwA>cNEee&8Qz@3uPY93`=z3gnz^%x&Q)f^}S9z}PLs96(Vn}A6Hp0OuF$hg4|mCOC6&XT{LwG=o9_C<M&THwMgNOJ*tt(Cyj0YBGNIW@eI`+;zWAHXNRv37H)WggOmCxIoBl6fx?@@%RDD{gO1M6m<%x;??%VpM%bG3s&^danl8yd8F|34lY>{izlir2!3FZyTWD%~!m=&nAsEBEdDvax`2{?OKAlO(gg8vmgl+z_6l(d0lrTHoKGtAM(Ax2LSh)Zq{&7Xx;_eWry2hJTPQYWw)j-(QwzFV|$<lS!cxcKvt%K2yYKqu+9NX2PD167Qz5#rXyJcrW+MXu!HThA~9Wt(g&_7U^@G81Re8ri8(p-Z61L=p}f6Wv@IQ?Ou(0joa_2@F@3JmTP(aV5}4<RMmZS}aJg$qd5v4{2LdHhr=z>Hn{#eRu4hHra0n0#-$GZ(aiZ2Eg)^#D0A~OmN)mYvR+YGxMoQI2H6CM-)0}vY51bhgckB~SCuF#g*c(qyAmbPxzUF-f4^^;>$pVmbTI2Pp^?-kR0r0LN6~LX5=sDorl2&6}qic}#tJuELpsPNj4g>BrHQEKo6c~pOHWuV%Phvz_ixsdVQAFvH3Vh(yyHet-z@L=Zf*Y~=ab)3OC*J&R46VZd!ndTMfL+A_>)w*nt`^>yFSsm@oXs6@pxkp><p^-5gYId9zl+YBGmS;J?9-k%UAo?qqwbb{8|9L((w97xnDgDhp<h7zo_p$ES4E6g88Y8+;;olw=PeV1nRv?{nr_+GFmI7@_jBm2=y$*8x&C!-AV|;@D#4g<UrmYGg6H0OXU=V>GVgUaqHt?H@ge$w4}amr1Jv8186Q4#;`4R4Gm`!8Kl5aU@+(jFvfBR03%>(ikb60@v3fY&kFze}HXDO^|LVKkW3Nk`2zW1%`@r@yzMJ!CEVQ5bvw3g6IpaM3Gk<2TWZtDx%r@N3&$prc9!#_CWqxJ8|MtA^|GIy&3`gQbD(?rs@Trjdx%cut){J8}jlEOsf4m1j+l&739*G|t1h{D#-`f^&;g`{dN7){d?U|>*bi<we?Z|wPiJ#-Z5{JV3C)p04ai|=>`SBcou#vd#wCAtJ2S{XS7IGiRdpPGq4s)I+@y{|}1kdNca3;JrQ4o>)MReKT{b#<%obx<<{!SO*%?;q<<GYc`eS3hbZ*pIq+=PDrtCP5p&$v+LnQV7-mi&`k$LzU|^8Nd!G||uJ>Mo4t=T^%+?skgYd;5jlrM=w~=i0y|`F6kH+@@0O4*I!;b<d2rG?w=I5H*$-o@<axcrW3Scg*=DPmZ^F=Ep*A{KzxS_r-i4dON?rSIpnv@AW_5fBf<O;(c1?Y0kqf^R$Qcdk=vDKj&*d=cTsu`(a+EKj%Cg+)sbx%e-9)>niz$JU3+N^Zfs+*Z-_{DNS|;bdfCc>ApVK@AJtYUZ3N*{uo~=`NDE0Malt}?Y+(W80UJoXT5Ab*K?l7BlBU~-u!yz!>G)Mef>DM1im8jTlFQk2Nf`Z38T~rE4MU0KT5Gva~Ib|gW~zjp4z9(qU#eF>XRc5g$RbQqXToi!LQ2|b#7E*jX45kyEA_!v`k|~)%XMPQUu3PphuvJmbu;meCaJB-Y!$tk?*1mi?b2}KPI-&0kiI7O~%__@1ZuXPl7ju6eDfWn%iQ)N~*GiH-HV-xbaNio-WvJ6u?$rCou$o)$qwFdlsWORJ=zV2UUcMF$T;PYF>~x^uU}6N3n-u@Y=ZzK3w>ZQZE6OhbzCM{V6f8jQ01eEj_LY5vyf%py$a~hP~ent5grth}_(hGkuhd*CY-E5vV^f&%_U;`x>k+n{Ev8N#+wuD`0>})sTocO!1Xy%3a1?BW?0Z`TaB`&)b_Y|AENan#D{34ppT-fXLzzc%@yXIpSLG;D9K@)^~=E5uUIZuQ;HD$O=Z%tow)s+r0HK^xI~njI#!<P9g|W;;(&LedeloV~+StwGxpIeP#CW$lWSSMS#LqrI-Z>@WPclRiD;@#a!S$O2s3!<N+-|b465<y>8-m9HXYW2Qr_c3Yl;5qGq_pt+%7vbma-Tvl?4O+3A2uFPRm*(1drK;VXFT70l0F<{!Aq6VUrAr&S+|a12B*&*6I+E621A+(Jq3J}NW7AbOMtmB?H!nd2t&UNt_)d;65K^{t>X{(>r^R#Pm<ct8VYmhjSts>)bgpwf`r)F}k-K`yqeQ8V%gXko80?hqmEq{YINSm#KXzbRr>`H7$9IsOKH#em6k`<9g`08T++zWhf{@Rd51k~Y|+mdcJXl^DLJ!aL+D9SHRp=-4ME0r13h1?|Kb1zSqiPDWG`#llI6$8kGQz_USadm&Xlz}CiCK2+r-%;+S_?|}7ViH4E617Nda#bYz^V*&h+)<hF=C@@OJ;Dh{UA)78~$6X5LAlF%j0I!j$15E7rEn@gVr-%)1#40_vc+HtI(s(E1hP}j?u&yks5iV-;LIJC%f(}07fV9hrJc=<=xy_o&C%}D=Fjs)82SZ=t$baL2ZXZ%=x>3X9lMv0xF4mM>H?hRVpc7f+?L*;F{;)?FJ9uTlVPsHp!go{|;-EGjM=Imoq3(C+fn#M=wDW#UM`B$<`7IL2@rC#1JHZv$e+%=Du*zHV5Iz^^DC5rMy|IdR*<;4fzj6euGBLNj0Jk^b|IKR7xw*mZ)S6MCmTC|;V}yo1vyjJG$*5hrWjj5xPM*Uq)<MEwfX8XTowm&7A7B@TRPip<#*MF(Di+l`&_Z3tvja-BR1I#KGgTRIjR4pZ=p5!Ma1?vk=dQU=+wtzJ=u`4Q8=ch?1^d>??>(-&vR2=Y49oa*<=2%n>lo|rDdqP<<uVRF0e@I!WXK3vjj_u0Sof%JnIL<(i$yT`7G?16I<^Cx*NO`KS3akM{;aq%d=mBwI+#we3eVMMOxdj~g}?GG%z$eP`RxYaD~BVSpQDsjD{c=CA+IB>#XeSmcE;v6jlC{YgRPG+<G{fI%j58&D92d5XeeD_h4)}5RPX^V)vKm(5s+B09WD4GnR63@hFbZR#>HK(CCsx&>`DoNJNV3Fz7AZ^H3P7buFNrID))+}v|)1kT=Vr4*g>LA374@F+glaj%Sfx-fg^kt%Ji1Sff=>sp2o-p`#0szniEukKd7!@(~KB6`>CTkw>PqV=M;OMZx;{DL>Fi%26+R`m)|}SJB++ru5(V+Dj`V#HV$28&g%AKlu#GArzktr;3lZT#=GW>XkbIPxo+sGj&HK>nT~wW>GhG=8-L#Car@+qj)}JUN_5~FuGAOG!1jZzmJxoKaqfWaK>QoWV6~|ad<S?^twu+Z{*3pttI5JgkVWlH3tBJC8E{#xSf`C}Pwf<B!pjP^Py#AmN&#}CdRtzb3D}l2vUiW%qFx5$rnRRQEe^3ZutNeqyu(RBky4VuC*V&cQ!X5AGK3FBY}ye)F0}`+dzDv^Vugw5N_D4$G=PT#-_uOA(5s$UCG?y&RPdN6jfN9*6*famVq@f#Td}6n>|wr8BGj@G>rkz>+%9q2rH?>xT9Qo`H-R03@5mgQfxq1r4#-uEceum#fmTvZcQg(_PWy?lVoU}1VhvM2HdL^|9iu_*y8)x>5X9g!vRJ(x$!+1pO|S=iFp;JoGd9^2<T+4?LOUK8VB-ntHz3!lv_(G1btJ%+QxEhdxRwZCXd57(a-C?Ze?sVT1lxB=U@aZQ(x!jl<`%`Z8NxdV*i?>_ih<s&VuWN4bv&{G`Y+=GaL*oEc;5(icrW`;A7(?D+LbggeTOr!{m0m*xUkgkV_Zrf#9?No4@w9_th9%elFE~Khln69)Zhpn%%MbGgPb}i;sKH<L8ouK+}?!pGgHzB#kDf$vI-gfvyc-D&ZYmvMEcK?Vtb|FW*`S=8sbjoq^5x+_J-BUUCs;m<x42|maAm)*(NG&9z<k~aDv}(Es~T5-@bF*lsfnxBq&WPC8{f&TPCpm5=;iIe7Ik*60pzf$OIRxHvN*?E2%G8B7Ig#i=<Mcn!@@SE82QTu2R>x5#_MvMEX+716G%Qj*xO>WWz5_QB>)|nbGDwi?N40fP3d**_U2db=I!I-!yX_+onOR3|^vmCQ*nMpbcO-anF{VbGUHzC3a9O=RCYPq1Vz8*Nm;jkF&02g9qQS?`fUS=ShifrhrN8Lo(cpC0?K`ZIPdRK1`}d)Rk$jdoN2Yp?ptN^9ArHljqNJ-BgR9cX+$G=L{*!o>%iTZaj@7p0>2Ne3#&PmJbs;c!h>&aO;Cqn})*izM+3jqLrcydR*$>AkV8Uc`f{2w&+^2Br{~W>&<6h_u+eH{`@u$y}vL0|8t2^EORj*>2del-?71e#w}nCs8&^lT73}tT|hS|mgs^!Yc9{K?B*O8I@{?pX0ej{^wAmk%-?fdzRYE9<=NXM#}ye>x^?DnMC@d)i#^YLgfh2g$@|M$n8P!tMvTaq_cpi7_XU1CBQ+mg`0e`w$1lls=Dp4Go393vXS&RJKXw;x-{)9{JQEVgv+d?H=CFOn5Ue>jwUaRb?-~1G&)7%yEB3((xrcMDck&#odH?LjAF&Jf+0O1)J3nG5t!2!6YCi%QJCWRSYc6N&%tUh0W<Gnu$KYB2>)-X4vv{4+7Qimdjp?jcr7?fIR>l_O9@04`v*h6TGY1#_+5_B%hdGwP!oA$XyuA1PJo85-*Y;*E%?j&T|M>6v<FlX7`7yW8T;Tlt{`owNJJjVFK6%z27GIv#|J=$Lh&ao$e@LGFv)%9@`)SX)Mc~n>SiaFN&kUYvDnA#HpS@I`&yX>U()~Hl(T^ArAMN=)axbeTV?w6+EB51rbY3qQ|2$uAh=0U>WPPZYJlDy35Bcg%#!}4vGsjqNw(jVbX0XI=UZ+=cj@ev(=IlO@ls@###bsyo%*D;?@iizYGg!ZzpPJ82Ib<~$oj1!a;O(9^w_9NI2YB-etK~>Y*#!b0u}-hRJ#^NYNe-U=)ULCXqUgwW8=uNg^?2)yAm!ws1Nf#X1p8IC-obD1DsFG+C+~MZ&a|0a&Z<7M#KmW-3%cCN?_5y5UuQLXi;}_hQNJqNvOX|@p{;d{`iVZOChyE+s=Ph`QcbxP)YMT{xh+&*9ngu2ZK$FP2QEd(S}AOFiPW<mw)_#(UIQH3$UP8XmE+vP71vb29lXvhPXqj|$USX<n?y=h_Xq(>j{`4k%3JP=m!J`9<cO?b=P9kROP%qa=>QL$^5qzl4c7aRp<#WpZQuwrC|UWC-{{D?egxj-(pq$YCwT<=kvruGXmt;L#&KJQ)D`Z5O<C69%%|l`K!+D!01lz)hFhv4ziWm&K|*o^OuPbag|}hbsA<>V0UxnU4>AXZ8dlJiwf)E%ltdPJoNAf{sPrj=vCD6$w96UE9pWfYkQ3>FohDU+RpfHDYJfunMzcq%AqBXlURb=7d6=N~lmjW1n0en+1q`G&6C?gT&?Z<zbYV^K8FoAX{NT_BK459<B@ZTYtg>%abs~f5gMW%!8gs>)GJ-Gsv71iz?K2a=&28>x?F3wpgIpE&fYKMqdHxS+@7krRu6z%Fp#9<i>N?ApqFlrVn?MrCI|N%=0@AJBpr8I<6|gVsvd{Ay&mQ9(SF0d|q-xGe)hspv?64C0zAOnndTblpTI>V_e#6NcstGD6;dAGa*}z``c^Q(Ei8NBJ1#d5wzFSsXyJ$)6-EvL3fSsn1yD&JX*HBN9M;x=GXR_G5`I>x;R;-F$tm(Ji!YBeU5zhfD9!MiP!q?YbWk<2o`zfpwxW6Aehj_78dcYZAWQb2D-WhQ28ZdPfvJyC)_X773A?Dm27kbJ{%;kOnJmvxSn*h)6fQM{-gDrD60Ps#yz}#-`w9hHmS$adwY38$AI-^JX1YDrq(e)%ZE+t(38|J6Q#(KJ|B#wI%(b6Tn>yRG-p4<QqpHaixGL1PQ*0aVU36Ajly!ZEx48vG7p{}leS^zfV40DjCI`DmuStao10B}jr5iOlX6FC(&TSb<)1T0xnEuX;}{83>3EzHB9k#RZ!u6>mC9_Dan+pj*xmKyWSll%&N;F??B^N#Be>8)sXjGTQ}+=Nm1!Z}=HqmO_+Jr`DR4FN~^HOqh_op-VM7SVnk%Jpog=~*cKYY1ZjECJSJu*}@RPGdV^)-26jui9042b{tn9Cha`jo$PSbDDVUZF3`^3)hnaF1g2sV4l_D;%k`K%Su=?7ER0s`2ujzb7r(Dtb-)G(dk~=S*QmA%y)ms+9|gJ;KR8_am~f7^(`H^QfWq2aAvI4!X%t$H^B9!nHGsWhs=a$rN0TIn@2}o<%`8fkLLOU_u7*DdDs)O2ket5>@#9ZyXw7AV_RSrPeccN3A`!PKlZ4;VN9cBfc@rA0kxT5=}%b_JY~-OIc;Q{PvSeidx#9Hi?!g5&d0nb?V^J%5IKFymJ{`zAApxz&gHvN7QdYn^(Ro9Dm7%e3r_xU4lkwBY{A|=<mFIDMh46`)FC%RuKVve*1YbA{j?S86B!4Babyj3T`Y%9vxGdQTxh5lHRNFdmRzXsKYZ5-YqFK|fj0-uFn8Q18*8AS)L0GWz4_^H+EN4F6m>!U+7r(zr^)~Efj5U*NWhCHz?JJIYPSIHtQOH4bFug$3UM#(fOyh9tP!6s-38#vgW5v_e0sq8QD>2CPQUGyssBHG?v*JdjWuQApuG=x;Su-Fnn6nlaD+M5l$pQOlv()wp{5F6)n3cJhKitInc5S>+9!oO##$va#l0+n?{Cx|mJ#|RZn1DL4sgfNTPEq$^$dGq9BYTo{Zjl~WQ+B<2eni^0GiOtI`7t~y&_xHo?#Br6RgBMnI)>;d+|~Z_*iMDg)#Vot<`nh4I<R)NU4pLHTX=u9WB8J%JUw40oapsJP|Ih$SSBj26kNdN@KRv3%&K3P6)xg;$sQ3r{qz^x|qq3P0WeUiwp2$m)PRGr<aldtJyNJTUs>(zPb%oCIjxDg8zE)omoauB{xauA!43YG4nOs+S_CcE06%rXnE~%ziOvow{BlBPe&`3kRyw7DxY`9Aj=HQfM7NF(ivM>S~@Y?nA*#IB?7R2k3OBhaw(VGWv?+WGTyXrf?|$gpXIjShfUr^-0yaLc8=<@N+nyxl=iSXz@sUxf;X`HQ=*p>)B#Cv!6gHZU98M9WW_0<`m4~SAKBy_CBhObFV3{J?rTArQ5chYu5U3>*(lG^ZP7(F#hi8`j7vqdLIc020ZysuL@fErBxx-tMXa0Phksahxg2w`ZWxo?ANBPkw|`_#;O&xtXU5D*<02K>?7_D#8I|B?V%7w#(wRZ^z_~m}RJfw<X9b@h$<d$CIyi-fcO?d!_<*?tWywC4)TiE&*A@5+FNhpFWANN}M!!yv-W#X0)y`&KL;;UE-dQ*lIDVz=S2{;~4E}5xCdJgRw5c$xIgj-pXphNlZREN&_kZ&frzxxCT4?P$w~2^Zt{29<iEYM+VRO;QI;DETVmSkB=;fAZ<7(ZdQkL8$8xfloVzX3Q8pc#%oZ3BOX5g0ZF=Jq~^oK{vFphomYx@=+wdp3j+%>Mk@4n!-IKvuzOUT)L6YKYQ!~aKni?!9w^#5iT<@_nGh)gxW9PV?ca#8zx&2NW1nj#-}KJ6Xq@h$V0-)gJX?XAA#j=p2<xEn4`A3B#{?_R8BUXrmkJkSQ+OR#e>>P0cEYhEcnt@x?=x^(@23hYHP@W9u_#Dnh()Sz*nkT*61FJ7wiJmX%nS6~k5#zHL`m0PNKuF6p@@j4z9?{r2xnBX40r}*q?A+_a6X>a}hxw5;SvUgb1YmK#`>UT|Nw4YvOslESgurSarUvO{V$M>-Z7u;`Ur$dgxD#7E1J#}I3@pyQB#u`%K(dPJhJ$|lo19r%hhxf1e{^Ot}1AMRqe^O7EYCP+(Q1@4d`(sGP@BcHLf4RhQutitQ2TeOq?ae<8$32fZ4!~EVaFLYh(;_-pnYBn3p3=&B0)A}Oil5$cx3ksp_uA3KGX#E5#~fIO=c_(yLo4974O|CU7|dyX3QNtJbm*^u2jhJ_<9#eqpV4;leFt+4{wYj#o?6WtBWzSofHRF$ZE20Yz|<Z%f5P0|5H<VA&*gfYC#vR@VBBJ<dWESPQh{1VFDjSTnJvcizrybwmPu%->&PtioV=;ZVHl6Us^d?lsLUaUc6{IXJg;#-@05<$_crDva6I2;%t@flFm9hUx85^+uEuS5?6F36DOSsmoP;MgOipI0IYX`Q+j>0SPd~=pAAj$9ACJO(8FL4g@VV`?4z72z*r|Ad+qrn&Hy3k=hrcm?;A=DR(ftqZwo%bkQ{<BYO|{&>TGzuhtS)En1g|@OIRiIHcqLXl%bWN{k2;qms)ZiQcE+@xh=w#o5<K6LJ2J`=`2s*Pi7fGuPdwb)IfIWq=fE^}yf~9YyzyhPDlD(@Z-K~I*+dO$8lQl}GD5-TVqRgQY|Cua6dPh4doal{EraOjb)3nP-GJ}%;+=8f#<~!D4j|YrPFwJk1(gB(77vfaPIcg^Mt|J105yf{nA;6C?3fvrMw|lJsC8pUb1Hz7r&ZpQW2(oF-xaqI@xG2+p1X1z^2-$bpG$9S83V>m<>I<c%GYc{abHGdV(m|6Tv&``nmomov`8&0-{~JCUbvxAmW8yBz`-Vr+RfHsC#Iifd2EY_GdI%2ZJ)4=OWaRlXTT->j<OD(fhD+|#C4w)lw@%ufy<nFKn<l|_2)cc9gOLWS)QbcC$~&AF>qg2dog$PB~SbtuP-b&$QtW#ay_U6C&j(fdwijMQ+ng}8`bS4@PfBgW0%0`$<7M0qLvR~MT{Ny9$-$eY(gTj5^fG-TDUAr_231#9pD;|?W#7)jBbYY(}1ajAG2d@9cHv{JH|cfS8I(K#a39%CAYE?T2N(H@xYGqM!CmBgDmqEJElkfCL{~RgyG(@j{AR{lW91ymw?G&><>4p3*fB6Bh^8tHJcTNy<}S8!2KFgT&{PTCwCS(!n{a#Zei^0(>1)2W#sfsaIy9)?=5$VW5o3zFfKoMC4T@WIPVg6!`eIHl4u(fAVz>6D|Vs|opPsydBrXfE$qD|fDf0IPYb{p`b<#iMR1H?|D2|=nes}16ox?kY%{aXNycpn^JpV@SqrChcf5ZrD({&Xk`&sd0U)qtMhN`eo<*#13Dz|;c_gX_#H<MotoLS4c=IZb&z7$H%<^E(7Tw+<9ku0~e*~;Hp?W%5T)9nWVp5dhaow?_rTefh0SlkEE?Y*ibmOC>!1=SnDjIh5aPKh1>nE;g0Dl2@7ccvIp80m5hjl=*nrVPBw*+u+S`{g=*4JEXvpwpGx{`10U_v!b+pcu6Kby?2b(hIN^JTkXTGdl7d${gYRB|G;OO;#2TedP!*c%b}`7(<aeVW)VXY5%_%xB*&-bh{aQSDj2aoOy!Uepn5!09ur<;-s00|&c89U{1EZUyfvz~pb4rPsn>$HFc*@LW!SBZb1mE3+4@#NHA=cHDjzE0`y+R<<z4U=NlwVIl>)7Q<L&NAXPK;1&MeWpM4pXu&?1H_RO>7<g4GkNcIEu{db9+?x1cn>YZ%*dk4|(qA9r5@TrfKC#Vha+t=nZAs<1Spv^H_Ts&zzwSP2=FDrVa=Bj?RGTI69CdMnxndXZ+XU=UB_%w!6RQtB%*jijvz0K2V0!QxR{c#l)`Z>6E$4j(xb;m~({5)6o~Vi%_oxDn7}}mhb<qf}C-f#~J{Ml76>WSZr=79xGRl@PSI(Tvw5VoVe^q2V8O%aSx|D}gm~%_v%o{F?G^1^|vvkD5&wFm0+&yS9l?{va(<9F@HeC+5SKS-#)5c(<r~9g<l$|<2B_y5@wq2Pqi;E_gf%Ki0N3vzHLr8qn>&N7;c_%63<Pw3&+#N}ovho@q!wxv3&aI0_Z+eP*nwbQavtmvlMHk-8WufV7Itf@vXMji<1zTFj)y3J<{+Y7He0S5WFZt|4-DGJprWL?tiXU)YE27y<++c1$n?8r%59|4o>g?zzZNxP38qw0;O^87%k@$Mx`OeR|k2NgA^<z&F@L9edPg<}owi^T2$hGo0uxt-=@e0hHv0GkLEqK*7+8@o^&a$as;+0?xGV={MhLDx6Kk}bAKK0k}8TrndS=u$51h0?m@L2;|mE6}#GipdDbcy{3z#bJh#!A<R*|ujzS+FA8Qh^*3{4{W*71;s@b-@p;fg8d)FWVUWHPadO<zco@#1c4L!)|(pToLAj3APsJgAv2;!m|)qLk`@?@aysxU`!43wQP3YTjeH@HuYV2?%I69FfTx|H=zfyADa)X2EJYOF6G*sue6)0xs*)qS7fubt<JZw*U(Rc@t^SQSuc!P4C4j%rp>t3pD3-c=9up<B`;|4nmNT8a0zf@eHu(m7ktDuXQD0Q;7C_q&)|9^!+!KD!Sf^7M`o_~)_My580<vw%xlbfZ!bjaIWsQ6<862Aloc%UW1dJru9vgV8R{7<>BM|VZ{8(j=`7O=f5&AN^0x79_J}dt*yvw*BGRy$J%fMpvZ`<}nk$?TYchD=NEsz?FBMx0-7eGHT4!>hhe`(#Tmzr~;M7iYc+lcjmOHDsk*fazb~PnhsKay7;F?#0f<JZ(xuYf4$#lLGggX}C^-p6bX!4_;s`Z*|6nVrkhG&blSDQ@Q46c`l+T3Bx>bPVn*wh$oXa=l5gLRWpewYU<Jyf*`Ohgf^r@;0y;Na&Bu9h8bd&k6;YH(g@Umodtu5{st+JvmLh3`+=4R6w0TF)+fCwK&W^_*2X_AhxU?Dm}*oxX3{DL;zX*F5UmLT0k`!eej-8{C0E<h)@&gcZ0<7aZ&nn6e_KT-RYt)-W0Lpdps9=4oV2HQ&a3pW-=cf^(`#k7&$>-<r_Iv@<}8O!J}$p3~l$hnWr-h3h<H!36z1ogDf|mW13EH}GqZ_>R8{nBOoS(O^|*9w%`9F!q32=6V6X1oJ6GY;uu!X>P6i9oQ&N4_dLxXQVluVk=-Y!CpTB+1<=DjM<~G8G&`d!1uw}DSP<?@SC68_Vkg3bB;MfHee+R^YLg#VEaqVGuhkXN@&Y*4aKXH1hGDQObF(?*i5nw;LBIqq+Q^2SLOy>XzT~8?bwIUDLfmn-y3|EFcYzdl@r;X?>pWZ@co4~tqpb}pqlPyy4^n}hxrzB3RjZlHK3|$#&;U-z3D;7f)nHVHlnG)Ebu?p%qBJQnQaTq>rmJ45Lmxn8cM(kH+w>l%%PTy2oqXVr5*UTI6s>2k4Zb^u~9aqaKAJ;beR-&thH=+G`Ea-jet1~7=_1rYlHtKX{^h~*l*or&?C&-!9H3;OlHuaI}I`A<G?T4!Cwt={2>mr8G2C+T5Z=sCwuewEjFW$-HiDmf2b8{hwoLxv4c+RAL>W)cF=K?L;PpZ9)D4EqFpB5&*3{K6~i&Pr)rn~E%tNxk_Y*BokaEuK5*7`Djy>o!a8H#gvz%_$J&u_xke39a=<t_$M{f+c@~FojE9HVw?XAsES1jU$+QmZ=%e=ddtQd6G)XZZgPevqI{Z%l@|zys5MTPDhj%!@_&Q@viK;zO`2?!=#8tH?&PVMDYR|#v)nbA*9N+RYtTC^`R&n#w*Zd3>mqE?8uXzsM7(ZH%@gbELu^hDC?lmaY>aHC&!CK#PtUZDE>me`UL$ghtSN>XSg7KReYnU+}HGWRV&zZ_UP_-!Xo@byfC#XekUo|I8cL%RpVQqzqA7NbS1#3|}Rg0qHS6=0+{1Jw=D66p+Wr!Q8JcJ(@Z*s5}#q<{D-kxFn;9iSjD=pFFqZXxm8ph@6qZZ{@R*tK=bYZ@EDo!M-_4*@Tk&DG_ZcZ@nBk;IV#VyvVh5|LohVOsWPOMMk_l`rK9Bo~gri$}m9BDZj<3-In8uKphH6r9QE@Y2!A#b?8ORHJUJ<jxC6=pEjkf`TVk8vhCp063>I7FCbwOJ2woS+Hgdo2juPvxCH;zf>FzKroA74I}Z-ydtbOZ7XaukoUf+7J94IN$wu9>?)`_^dfu7G`v?laQZ=<DbXzfBP8!LqGoBKlkg<Y}Hd>)J_Xkt%!9ppT}B}J)ZZU0_ThRyTE;$ZqSod^=R9>R<qK6cH1dnD$Ln_$t@-_S!5VLCkzma(Q@CdrYUce0{lRBBVJ+Aj@7BQa{`lSmvh!g0@xvmrL6%M_CwvDhBXODjhuyTbKdpf`+>8}jyngygT|1Lo@0Yi3OF^8LC+iDrIvUGTv!%*82}$V6TNjp@Fjpf*BGCP8o3H-FwN-9q2P04L!Q#wzru={X1CAy3~x%lKYAVFz1*;4Vra9#Ehw)^49BHGTs#9N1YT!11@hKgsHctXrpNpyjQ+B7fiG8qfqgvpwfE)&9^AUJji_fuRF4Y71ALoLXw{zlnnl!*OTb=6YRC&QdYL&M;Qc^`H3QCwd(oE-a8@lnR@a!>BC|TYR>hyvC)`pr5x-hn<m6IPzYb?SVSs0V2|B$~BxWUK0e+A*%pkE}0WONoH05jsSjMOHB7G*@SbCkPfiGJn<}56Eg*pGkU^UhkAa;?!V?E}}Vw2rW&gndfIh>yrUSJg=iDe^<^^EB3960TjAIoGPvmR@6BZl?l1bA^v0DHe?M&WQy-l%Z_d};zt)Z;A!F2g;a7(ZvbI9OxMF*?%8?pS(xRrXZ2?*VH=suiX%WW*A2VNx7-O;PUbvWbsXN9^{@otd|Hq#Y&F1wL8(@Y{fIH?+PO#PE2=F;BR<p(a$&l#hipE0`N~;F=BK(<_M=J*i7KZP?r1xm02jR0QT!T+hz}bBr20@arN?CpORp(F4AJ&Z{EbIo^dDY({mlWQM*;>z_BKNx<hqWHxHV=sJvFz2~$q>b8NocgwZe4R|d)grWj$*7;Jt`;FwgguMc$zXIQxid#^UqZhCWv1fnExP0|_(Xu0RBcqg<tCDFY507%j>ow}HZ9}8i(}{J9D%}z~D?`1MG4Kl*pPo%5>PEi`K0_S_Epz(knCn-HdVn=~2fPbt*IV&QM?Jn9#!>jnL(Q#QU|{bPm>-jHmQt2vD|Yb{hI@xwR_Q--t*2rFJoTmryfryocay<02@FrmsJ9Gn%unU%26qCCk{~Yuj9Xp7e(1QCixqoGYj`$HyzF_8dHwC)ns<RNb(pt2b6J@hfK7Fn-$q+*S6+?1OmnM$3=Of2SFFS10|0%n7R5I9T)@aW@YQW(U6$M_pHq$ALg|&L4Y8xZeSj+lnsmrbo-(6<OSSSsB|E_yN4~njIt=Uw7ssRtj>uR2KgBO9%rnQDD$0D!Ur%GrW^`p<u^u9}gV47aFZ5O*KTnT313pZ_E|K8oy=@cVb#<U)JUuXaC%uW5T6PsUIo1OI9^(j3Ymt<wJ5?o<a@>zTrHrb&s<&M=F9W+=$Mw&SV4jlWdD~cbk-rH^ufnz+m~SS`6V$I-Qe(zoF1Dm1l=1!&*E-nFo}#`3-1GWRaSyP;3BejdPAsAqY<JTMas$BL&tZ){U}@(kBuc3`!}_<0OOC(+5-J1RceEk4{2BM)Y!d1$X-%xVh{5*cFz<GiZ9OLWJf{LVO3aRO<5R(DO}nh_TdXqxj`GGT5A0eurAal1u}x6B{A;bxSpS3dGqqn6V79E})Iz<FbFTScb+C9*mD31pA=RrXGlB`&Dh9s5g>g;y3D_E0{Mf=8%qn>%tmRmP0ruHtbuab_$@a1cXuO_dbtiY)S*}_A-kD*&`{Xh4=gdBZG(KFxzFGzMM6vRw>=@i)Rp()2o`FxmU8J$8?_dfEDKx@i?y%s38dl*^$L8TU=LDnuG}T&<0t(E47ok=J%sHHk%}x&<eMjd$Yc<pn^N+g!$i+~*L&-FvtwZ?~xso1hg2gLyg+9WUfxy^F2<tSq3$k5liX*~tGo0gr1~xce0RIwYtj*XyHYZq%0DO1luLK;|-cYYf-1N(1BJsF{CB;-!twp)k5edJg1#sM=XIubI2wL9?IJH|Je=j=f-6O0$!%nZ{Mo!=pX~d+vOUi5Rwjz($6DCVNbKp8F$s%|@DTilir_&%-IV4)xcr#J2C%)!ofx7^F;JJ}4u%5*8t6a;h@|5!6c~ARgSoe+K{aR3OojbuXGc-7V`$}O=!<d?c7i-3dyH84Yhgy~>KiHV(P?I*s7TAQ<7^@3qdfmr`C#oF0tZ1lV^?u#*JZ9I3wd+9ljGb19RF)cLZG(FeL?@`t8sgqg7&EtM%8FaTb6AOU%4rw5<uaR?O{$R#jN3HROW!w&=#g3T5ZBL1aYbAkQ{?Yp6=Qk~J5qPRt4q!;?BgtAUiDLqcfr~aD(^w9jhB>7f`lIBqn}_;*AjKiV7!AA#w`N-i+RD|2Rt`hm2h7yrj5Yb%%eYHQ8<xrn4g!@Q|~9T;<R|(txAJ}AIvygW>x<KemC9Mm$ry8mJB|yW+X>DNB!A8_FhvyPkiQq4VHil3!TIzU>MKB7*`g1TYh9o+LW?r<WW@M9k32at8|jsTH*8=@OqNP+I6f+JF!?!bFH1wn0B!(ZfJwIu^F($#u&hh?*eXNZG^Qx!Ah5p3B$3oSZ#0eO1x5Ob$i}vY*lhBl3=wS=T+BZ?1LOp|HAaQOaxIwoK*L&{)(JqNqSbzZHzn7Ti|ER(ojcnhp`X4VAKe21nf#=1*@>0W9;JxqwO}*#51$Wd27ug(%5ib>x!|Da5BVhU_QQub-`d!xU?}HZb^fHwM!}XJuc#6wU|9p9q;=Mu+TKHzz)zHV?kv+2?jgB%4TN=k#9*{mp<m$7Ax)cNW0c){w2<F(!Rtw#vGN?5GObeF^EzBVll)ohGVb8djmHphT0GIHO{dg;vCWNp8x+N&S73(hVT4Oos7Y6{Z)4@PH#a<>i_(A&|Mo_A`CfzbgT_gwI>$l{t;|W;(v>6m}5^g>)uagfi)!<<G}Y-tb;Gg1^x}M=~$yOHC0Ut_9-~n*Vm!9#FttVl{%<|^~YY8YfKv)YfKh{P6qZ_3NUxWEC$_-L1%tF=#~$98QGZY5}>}tLd7r?mshb0Yt&6wH6%+u=#?*3&fgpA#}B$|j?&M-K23qD&6tikgpR85z*nr@z#N$6_&!nRQ~K+8UEK<EV3332`7!t9N$IwYF$Y((R4$IvmA40da#Pj7c!O?+21uoxo2Y}~v_H*k;f=8e7dSuGN^CF(aoTiBx7|sH9K@N@Un}mq@Jd&qSiBupZWxTZ3(N8IPu+}irmdQ8t#sdi(R=8|^Sd9p77uSv!*%b+SOkpU{HN+K6-v!=J8z6Bq))>*KYhj`>LC_kdg}WhwI44g=Ddu@Z5)-8;)I9s`IKWU;(os8ud#^rRK*Bj+%;#1xidKa%V-$Kr4yho#CV*%Ux!#`qi%+J|1-9+koWVUZicP&=I^@f>U`TlHzW6O{1+;xX3SApj{0%-s4sUPx6P<8*EQq$M*Vs#!I;&cBM;}pScLr<i^wn*VHKvt`#%pclA*@sVW@FYslu^5t$|n0B5Fr_S>EFkA#*)9ulr}fY8kVO25YwW*e6aC%RTT=UIV7%XH6J$&K(`>FathjyUg&S%qTCyl5XtuI%=jDhHS#Bb%m4-)9rIG2?(!PvX|EFkqO+(<$Eg4Vp87X3fP0@RT-T>`#0~nx9r#Gi&ov*w$FYwon^5drkcC}mbG^)tj~qt03YU49nhRV=cxUQTDmr~_O`bvY+Lv%$+K$y!eG>x%`#z>@or@jcJwm9>@i@=c@gVxs25Ig4{KHFfWwa*`-WQV>~nttgJH5GdEA6-+!Oq!Eqi?(u>N7h`f;Wel+^`r!C)5h9DQN`C4VwxtaW`$bo*maQ7tzZJIpEiF{|gK@+|aY(b4W`RXDVg8}#3MO9-YhjNwnf?*RrMu3=x6aVlZ_DET2AG6f9iWK9sIjWFp-FCTdUJ{x>=({A87YKV6za6RS<o@$83ia4VE57a?}@6Y~)3rN8KPSLQACkw2je*s?ngW4n{S_@pi^|01Ci`fg-++;F1V|@T%xrST%YhV;Et7aF#T(7wyfMXZnr{yWA3GUII;d-&xSc^UHi7w%0iz)8IrL0ZZgb)fm1@l$oM1~<{SU->o-I~WYZGwDj;B=mH1VjR7;PlE++m;bQW8e(6e)Ai6-vDmH#6zyhBct~8k<vLE_kVKhbS2V@^3|f-**2v*U~1m;!uDseRS?XXedII55IXLk6x!)VlN{^$y;zeB=2gT1%kE_0`F4SI(td1tgxqw%I11ahfUTw>YW(vv@N{uSY!5g)Vq7-d_I2NtJhIzY#9aAJk8vLuj{Ct9bGp-7ih2dy76xK9el$-EbBiT#f|bdEyOy!lk_@od_<JEB?kTNK8qD)<%TlZ_Vd2emfIBumaBttWflHhK|4HIw?k#VDOTbJr$SHGrz~X?Xl9J_CA&R3{v#P+{m78A?1}v*j`A?V&$R&ig$9>W2G85c${9BRbjcM|Fj=J}Kru80&`JA~7t{L&Hy<|>r31+Wj&8u@u9QU=}!#aC~bqVu`m|Lf?8S~t@Dap>6i!E}A%0BNc*`eZH47?PzDR(w<%@(yK6GFXa>)4Hdg!z4>MwGBMVcupp@x;z9VP5o@tL77J?(7@X^_aONX6K?QDq;nGC<*R6Ymvp4q*>gsPeaDiF4Kj-<;BAzYV|F@aS5N*WU~k6NsqJ>b>9Qs;IyKc-5$qU9}Ii$`s+6?VYEqjldexaub^cI9Oe{pc>YEiZJqwarMIG*7iO4)LD>rPz5E*Hm0m{qM7C)XB$?F)KD|`2R-A$R8iC<uSwfb;BTS6(QhrH_r0{&r*TTvsqz>MZOVHJNhW#`$-Ge#n;ePpw&^d5f&nBpIc=O=*&7^S4rl`dcxJCxgeYUma3!#NZ>;58mNupS{ACm&-*#nD9;1Z`Rt_PTBMr_O&Ihr$AgH53auUL1F@y6H{M6C2T;N)X2BCI`^q3%mVfSv-cULud*%d{g*z}yV3v1<aa)^Cr=7}t=+CZOU(>#B?Eu4j(NLyb*Y<HeYViTcoB%U)I9icYV>x;V@RPNlcYi0UV*1D~d|8OCn{-n(&aJD~=?0FDD&T_SJUGqDb(w~T<y`ZS0lOSDnq*|Z_=a9k4M9;wyM3&mSZ27c@u)sjRvbIlt2QNYCYt&%YZIL&R{5nZ&vt9_x{KTz9%;T(EVTcXG<zT~w7XBhm+>;K{rf68V5uA?_-IumQYqLc63V&ot{e&;mb`Nq&2bu-jpHN*E*<F;kBF%IG?xP99hv!Mpb_2vTy8S9I_)VQl2cD!$eJ;xgP>puCu$NDe4!%g&`9r%{z{#j||-RP*%XDaRxVxE17^+(>qdRg>`rRvEx)V(jqI`w-m*Ux=bGHN@M_0q<D)89A;*2%9G=U4*gIRDnqPF=*;`gZkhfgNEn4|#zY7hl1TZmgx+XEjdN3HO@->*ZHcEp%ULDw_>9c#V*gtW{mR;vCz@RfGM>oWoM}fcI42VH%pz!p0t}US;+ba1?Ls{c6sEbF5E`7WY3F_a3pT@3UJ~1D5Yr>hA>W3Uu6;+@5fME$QHU!5r)C$DXh?_Jmy-=S}{4`sfJ@KjICa|FJLh&!I1LyZzS3#U^lE0QlfMkB^!GKD+{a$f+b3QO%DbJK>(w7JDZz9rl(Q^9p;x{doEh{5KzLgq5}y*26VHX&huY^jHfXgz9Ck>hoT*hCKi-{X?(yd;OZkUM)|?fxPGNJ9j;I;K?%OMCnfClY8%C`Mghv>Wz;5(oI8LcZPlv$q_ZnWnRmAU!1_A&5k>R$f3RuICpT`<Su*0I=sZVNcfJWez!OU@ZOui`a?c@y1$nLe%;kJcr8z2|L}cq+F~tXTEllac^Zy+#NLjrFlHt85QXDB?D?K?F-wg3>;LL!$^nJ!?4ZVHk@sV99YLaIS(t-hskO7loCCEcRR497n)zA97QW^X4F7$pQBi{DFyPt2IbaPQ%&nW{{Grdf`?b%ydG!XHGX1vJ|8o7z4KU^~RoDN~PY-)d+Sk7O<C@%lS(Ez@%?aGQowwSsHl4AS!u&bb%)Blp{<#=xZI+7H4d0)wn-JD4FUMYi)dJSs33<E9eQ-)xt1GqkWWLxvpRh-(i#=NR$j7jEt9w#4ET-bQ-pATmOs1<ZYiF#%8EaZp?!;J=qh66OqSgcXsHs^_$C{e;_<GlMSG6-`wVGh<%5toMK~08mJL<=;1@P!ad&Y7^ypLGLC59Y{YIPcGbDWSBi+Z>4FiznqZ3gu^{;tyHT)YIPqka#M7vp)d@pbp@e9cGg%~I*BtJfdn>pysXhw=U%?zJ`Q72_+&pPS+Rp+DS5Z416O_&Xb=Kk7A06(8yG{Z_?CfWPB$8+D#H6(0fq{<7kzv~vv>3^gSL*s{)1wI!eNifw_lq(fis>S3rgMgG3L=LU@PrGxqM6P_bHmzk<9!MK9QeBk*?NAe1M`xLJL=ewmD9tGPUfm<YA!)&|CCejHkMj|R~YLsqxG+7=mfMb_h$l7)62EYktkF2s;REbGg_c7oS2e9SVm#D=Je9xL~h%`yDvLo!F0X$*`m=xo-UBn6}c1Ro67t|{Pyi)>=C6~+~N9q!9wADYBRu5ctJ&%C{?rW20IvA+L1FR&gUE)nsqrXIPu%>ct6g6s96%}CbbHT$~I1x({n=Gx?H$rVDCc!gsV3#%3b#J#dGl~iP?>S{=B5v$q7h~>0P(_W<3S9!{Yolypx@m1)>5Z(A^XzS^qZWK%6N<-SPFrD+XQAa-8?erS+5;zgjh!M&8Rq_`{k|gJzABcqF3&k9C#=VhcpHnA?S{J0GDG(Y4LombH>?gEANQ}Ewh=4f4^}(PS4Bl>34F|Je7p5`i3FZxZqh1P1OA`vnVsd#pOV;`XY9024RWElPokGUEQch%Y)|=QF%zrO1$J~qY-|B%0d8QjiR|OVMBT&5BR{kY?0He!$IK|My9s*(Tm-(P#~vP=v8TrHcQfW$oXaGV#buiudSV3Ij0MZgIQ3~mZ~MvvJdB!&xv@=xOOACHb%}K!DdUGL<(*d8_A#b~*t_h!mtO5B1U1qgv2KAoB{sb|#uMqn{A%~CeS_!4>4Y64S^!6xJrqaw9NXnv*vMICcvrvjd*+(&sqSBeE?%<<0iIG^2%vo!I~i*2GM$ijPO&e`#S=zw46MS~(#wyCwP)PFj-7G}n0hT>{_a*ngty>@A%CpxfIF9{xX})^KY<(cxkHX3_TF-x>Ar-qpOlxKE;5+MIQ9>I6`WuW>8M%38C$D-_vT^f1AZR&O@SkzUP9r>_uaF3N)!K()=a{`!Dr9mS+ME>&#lRe4;&^lu$K<%oCc>nF<W5~mrFXs`RVF_BbKJGG@q7cnAh_rukFj)0-rr<OJ#iiwmr0fYl1geLp-l98^k}^3irtEj$#hH5iqjSt^L6>);8W(i~5{yX3X%udS3>oy=y)St8fEJ4b(q}Io0eFW)inN#k`zkH%&(^&Cmv(F|nqiE?x!IllUg5ej>bGRT^SdoMNTv+7ssFQ{>J2xI7EJ73tC2Y?-Zd)Eu2KtY<k1%S(KlWe>LiufN+RE$8*6!Rt@s^(3>sZtIX|GBH_r)YtsAjQpx7x3=BTdfn}KHOpgj9Z`ENs#&+Ym9XahNjfnbQj;~&?9*;yVjs5|@c$d!T~_F293P7xTdYN!lvQE$3G(y3)29X1y+AA9X;r+(tmVM2m(<aZ0=R!{!+PcOV^r%G+`FROJ~FKr5ibNkrdK8f^KH}1=s}}Z@DA(lm0LlOq4w=DNF(QP%T_j!_23Qbg0@bu^^ek_6LRK_4IJJB8(4^t<@(Mcx5ywHZnv8q?`wW2j~UlFtL1CZoI<hkuUn@~@)bO1)NrTieD9vR*eZBLXHC5FVj_hZCbEh2V8-HHW4x$ot)B~9Y*|w9REj>TdndwPUo4%&{75k_r#6h-2XDZra1YO56Kt$C5<hmDtiqc-QEi?ux9YhK^FR{}>~c(wwwp0no|<h3u4(aSz~C{)76d#eVEi}6qPifcskyt6jhK|jz|h~>v3SLOQ{&J-550$GsC9APO}xwpySz(aZPfWBGA@p9&6-e_5%`%Ys|9#7aSSzmnM!lYc;LV@nnsmQi<M~y*1X#RFW5N5^rbjuiTQ@Tv53tyF=5!RWE0phKDM0h5-}x48FIG1#)&_}J$YqQV`;*5p5miNV$~PGN1JNH+B+5rjMc!GhnTDcey){|J6llVSO(K9>>)WxE6?5A!i}r|#++SHkAR|vUd^~LT3mDK)@t>9<yCoAp1=n*!bUA->41H6nJXL$bBpSB6iT~$1TM2jzo3C%VB$T~EbK8BeDoM&VAGxXO(cU|!g!FXJ-1J&@tMH+*I=7Hn44|35|5OTcRvY;;Khk0r;bvQk(-G2GI$`o=mY~?;mjGGlyO*lEJj?x8O$pSZ1fy)MUQ#*VO_4mBlzW&*$J)H@LaJaxUbEwvD?N>7haeI;PV2Xv0Mx5d`27d95I-WwBRr=!B=}uO8XbAQOIw)hMKmKonGT3;aq|(I<n=~_NTO(b53VVW=T(2=`DuicDi--IdZ;WLMJBQGOy)F>4lo8giV$O!}?B34`}<y9Pf39HrfTw^FH~{f3DTz$VI+s002k3rNEg|<MNa_N8m{0n({y@pE^JJcN?5c0uA1OH4f~SJAGTY>!C+_tqmMw0(`CsTI{Q}sDdS|tL69H^UWY+7ap?}@5_8bp5QmC1oig}cyIjO1bATK*zL}J%vQC$<j(wx{j7vOuQT4u56zXo>i+$0&-LfE(E4*!v40c?x{XvP#NJkLFX8&5=hdLIa>Bgw9Q9Y!-|>3sEMUxVuNC7PhlAoyO6c(09;%v>)+cxJRda<WjAtla6~!TzC+zW*piYU2x+tr=E`iD)&ld3cpg%D7BnMpC+J&y_THeMySa`3RVLTu`>ZeWk2+zQi@NCM|U_(toaI#^XuUWGA=;H^^8`cghcM`R2<RAE=d9CpD8`XFGHZ*`&`_Lh3%#3lbuYC4XUS{O8-pFT%9`TsFjv5MUs`_`i+5)u;aNjO}R$6%YH{$!{T_=7MK4h+(KMCEOkc3P!Ij;d1ToR)=?+mZp*>lvjY?Uo2PD!HA8|oI=74Rh)Vhm5%&rQvniI07Kt(|j``{WOEW30P)Q92R+NP;o{|1jwBgrPZTcK(6GhoATCeBSdFI2v+yZE^B}s}pUAPZ7LFGk&h@{L-m4GioATLLFRcBOde1u$GpIdfyEg*wYKfDNqNA*nTyi{2R}=>~CXs13Y|94c-r&|1@56it#(t8(QXX>tF9njsNn?v%IMJ9U{k{rm6><{WA1igJ%bXy$pSUQzN0}IG+PeZLlJzPu6caX=k3&ceJq=`$F}?aIuH{cF;FmVCU%5+C(nzYD>B>lZ6ZG5Oo6Ja(HO=jyx>jJh(@@$p353T-5(LwD>#rxCajBz2M)D(oGDl1?n<-2fW_?b=hp*7Py`|3;PkOImbG6{cvBwKMVbUzw@?`hx=S~<7T7c!TV>EQR^_<IVBAo+hIo4Zxir&b?b6lykH;con%I){ltDbQwBIY<$cU-QU-bsxY3+!`FcW(3s1Gf6>vH8fg6a*rhBV+-r2=VDqFx=xxP(MZ*PYC0h32Yu8Tnjeu_QADete$A!RBH=F@(%bG#I=AIHAI418AL^p2=|><gsrTpRoSa%SXM)A`DQ(?&Nvc#Mm3gOAv{#DJ;a^NAftlcJ5OS97Z*oQW)w<|C5<_GHjwtE?g>SG=CLfI%O8Lz10wX_)R|e%zTkmrKOwE<LjMqAoCpEDZrW#t!gj@IyYoB*1kYz<n}^OSWIF`<?A+IpBB#93rdxEv>sg)YA@dS{mQH?cOT8J>V6ki{3CR)z;UPF)9ox_OdMFgfzhCYaj3sZ-l{FZ~+DlcCPh^cF=j%o<hU#cQiQfc-e8<Uc#h&+c~{oVDD-fv{<i?IzyS0-)O^ZUiVYNiN~tK<+bbt;`_KHg;9W=0W)LUDXc5hfvRG-s@#^8P1f3$7r+4yeNmzQk)EY`!2<g8x~t?%v?AHgD3_^DF2d;aY()eybhfvPGw{lH)P2g2daw!gt2yK>9S8edTy_Qle9Ugfp~e1<SMcGJEFq_lSS#2@z{(xqM=jC+lbLtB2tL!S`}fqa&-wfmQ&-07dk%9Ml~3_q*DM+0i11r-*N7Hu>sww8*g)Aa)bP1X)o+=#{w{#)0@hLn<nM7(^QtyW9!|<{jGZKhJSOm&i-Wa9ja#s(4(2DBW8RW=kCR@0tF=;EW#$(f8y&v-m3v>GF`nq0y}VLdVZZf<RK8Yeg^||<;3(V+Q2hzVen0T}mDHh)@zx>sUTk6AQ--;PZtxPxHe)wSFR<PdD1k3wy|Lm5T%=>kVJ?z(!JO9hovzPhkO^6M0iXXU?Dk40av9icDdI9^mUrD*p10Fj6(pXK)#L(Ped%k(dwR5PLJGG?%q*vNf;qcsb4n?%uEkBh6|OvHwAhlm)fxD2)VmI2-59X|CFoZMKXtW-+Pfj|VC*e*9G>gyp3m*zSOzEmi`JdCPfYpey1eo!(Pf-hmsxi1)bq9O&li0pU?Cg#kksCgeN_o`-{Q&E$N!C(NR=pl?(ry0v{26pZG2z;f(uY@TQV^@Orq*Sg5yGG6?p`^>!D6}0P~;fhYt8@$?MYhb=y=rs?Tu0&qH2dJzztHd66$nzRlmSc;I1J8v`B~r}0pKi1#)L7r)>=bxP;+-h%Z<tlVA0L$KqaJ`m<;gE3%*fmWD{rsk|Pai2-)9S{1=sJrKdYF}!V<9-!>ZmZAh&{6o%MZFy_Mx8sDvp=z(Z9LyPf9bWw6zdQJ%$-|goxDo7gE7ugM|i1ptfsyR-^25+zn^!r{c_$nM;%wG<CNZ20?+29{E2%KPk3K$w^G<Hd7w%k8P7W>c;3zT^FD;%u2)?bJdtFb6$_z`L%m@~t<hqP$(Pm24Lvm;<N#~l!kB*mbNk!%;Bht_r_Rd|U%U)^6gRbhw><$aSgrAW1NDfO->wV4SCP;ASyqp+B=`OF{2?+O6;oWA%?|Z0d3Qi8mT~)e=g<T2+}W}@@h{)2R2<8hcVJ`3&s&Qx%~i^0Z@Wo&$S14=j6PdC)`0+;5WL5IwCmaed>WbU?%6EY7HJi3=iWWW_8^k#fW3W1Et?|oO7;Gsb@ruySzF@0;InG&1{(MT3D*JGzS``cNxHVby?4kG|FEm)+8=*EY=7AL;Skq94<EiF8h#sipuU6Wx-Uh#wgQZ&>bV>K`n?Tmo9=1Qg*6KR2h?oBw#4bvw2^OnIt6SZJYInXYbq_{fktlTId|om*CGM#uZx?w<DLzSL%E0R4SDfCj-!=f--lXa90j=MRE_c4y>rj$VL#Ch!kNqbYO3)@?wT5h!*^d;9dPe2H`Lhv_bEKJt7ffi(g!vNEFIML)@N0J$K|+>7PI_TG~T%HKko65HkOPU{J=--%q;_|tvglItj##1ww|})=edoU8QrRh`uxWFj0tZO#=wI;iTjhl&&Hg9|7NCByaOh<DkAwW_0zdjdi#5Y_qF>TUpm$|kNTphQ@<EqO?0f_OuxS$4n6l&y*2XP@q1-xu7^5ltdCYX%ERyd&IO0P=I?u(-}Lu}ef*yb?CBc<=EGhOl4<)@u%XPBsJ+4H&lzKfF1OiQ7)89ro-#Gda;slas-f?*F_t%Q&9A-=dyhZt|29T|sh$!;{)m{#0?nT-Lm%zD^<n3e2UR1VcGl-zspyyDN`roCuX2{|JqE9<=8u@<&i9rdJs;Tosc67<9BEImckRpIuiNf#zG%?wT^;<dzG%p$K)d(bzU@HYK7Em|xb5JJG*yF)HO_hIRcI>(+GM~4VDlWz{hJRs^utHifAf*SX#;b-%;F;RC;n|$($&{k!3S@CALmE-f0`dZaem<5-`Dw(>a5;lKU&?I`fkaA3v<jx-P$Y`dJFRdFhOHyLhCcc*7T@#AM*oq9t>buAM<0A{dEnsgS-On&*$AZ<jIip^KDM36ae};CvHk#S3~@Qnt~tNk;(cj5N~qCIa_Pcrrne{)dr5NEeGF-cr;oK&qd)LJHDLEW&IUvsAsK)j1JFN&2xdi&(=6<Bo60uc8c3BHn{J+szR?<{j)>+$Ktw}ug7PK<MXKQ{Xym57zf+<<CrL82d?&WOdPP!`$YfQrxRBBRdETg)1SEa1Kjua_>BLSz+Hm(U9$LxKbP^&&SwFgUISgGOfOJ3UFUVM+G$>x8+Mu5#Wt4m%<A=I*N`o9y2&OaBbL4AlQ8TLa>*xm92bmpbfYr4jMA>b*Im+tXk*^To$vf*4u8G=#W07*oTw${ED^MQ-t|AfVZL8;mI7l~XQo<TUo;@D_K?Rh+p2!+DprAc056M|#Y**2yvItE27-Fu#@HYB%Y0h+DfWsG*q4%@90zlSn$Ce||B)Y&tNe%@^CPSgYr@~fKjxR1h8S$oDsI+;USU~oa*6wkwh?G;$0jBTT+v0qxp(!Yd!#?x<y|jaC8?R$%@{{TT#~!sdpW!7mMFKB%dzeS|5#S*d%a9M9QS~AqnXOjA%I<yZ0X=Ddjj720?$<g{|3I^W8cp8SG)M|t{%W(7qj7+eE75_zFL@vGxTJ!R2|I$c*$?QRn%PmYA>s=&oMvr)qpAOug`Uvb>zCf=jZ6SuE>^*W2<_SzYW*=-$4&|dDlp>YP`qb39uSqpZ@7SCgP9xIADwI;Gg`@dkjDPbl#5fyI<_<*I4XYt&fiw?Dkh*p!6u3^?sZ?ON=)!v>8?0Y2=g7!}a*Xn)?^O;6A8uVK`j#=JT4<LAxaxKL2J%!~1g>?dVng`(J!3j=!h+`2Lz7wU~UZE&GV0HcTh$80#R$Ir*p9#edb9RlnE(j8zOdQvdy}R_f1lN5!_0hkeYQ-)+MBm)tHQL&Pk`FuvZk{bJMp?4#7>g@ZjFbJ5g(#Clu<_JB|Sy^qlKx9bHTv5$!c-%`0cLv9Yds{BW_UvcN7FrT(6FH-T$8hzJt{F`9j<1^+xE->%0UVrq%F;xxCpZecab+L#JX3|+Iud+cr0KD+W!bKj4wPmP>47Sfy`IS26h^1%)S7-yz$_7%jfos%n#?SxQXGhsatlfHe+lRfjOuCiQ|FyrL@4w&9XR6Qt(zj==_GhZu$XV8EK4jtQ=YRf#IS=HOuVln)oyQi&kBiwOwE=6j*UNyl)H7Ecz_=)Xb?<TTHmtd!_V9J6i+msEz_@Q$!ZD>5AH~&=D({XZ-$&nuIhDyo<vU6N_y_+s4&;{c;_V*8Q%TV7gFT#2zU0{Z&me6IHvUg*WUlg1&uWcqhBbm*z(P&#L6fN)<9XP>0P`Tbp?>iYj&^zcyBX&Czv8LuU+|Q>rV1Y^9A#@m9M3_`<fWRMa>R^f$x(kKh`noUcog&X<Jh02b=kzIgP9y!(;cp3(BZoGDf@X1ZtOj*`<dT-;*76r62>0)&YlWac7Mbc?&bmC+b@2#gNLC9STcP6wMWDFoiF#_4fntH;oPk@*pdy#lxVRC5HDJ|*W@-TZmITG^5;@B)m~G1=N?`zPhakB-W86#?5p`>=6d__xeq<!ChhyKx(u;9m_NgwQ@Nol+upkmZ(qL~C3aKPllwW(nWTDb2*dw%EPmDYx&i5mz2GqThiJU#d+!VD+ul@ZnZNipHBZ0pP2Ilww!};K5&1G-#=X{TvBbS6%r{kgQ08dM<j0z~am~}iN1o{#HN^4ram}xu4#C$ozx){QdN%Ies(7-i>Iv0zdWPo|OclR!tCs@vPE|go`O_SH0Ul=!$008C1<vOJTZ$`g?0w{pn;dNDS@jfKjk)8?f60Fx=Rbq_Z%TUfb>D&c&Y9`!i;jK9i!<)9-q&cCV}4p4xKvAL0WXdMdqY($X7bcAjrQ2*3U#y78+*tt@w|6*>~z$m-0s-T*MOVPSYxik>eT1fTnN2*D{f`OB)bsZ<7pySX>2B0EFZF)0GkL$O%`2T7gQvNTXr+gkBQYTn-Oo0u@u!T!QBizz8&n(u*d3U>b+6_j(yp~#k#_w{^7n($y>_xkDP&j;j<oa0lm;JTW*u(ahRXg=ekw70r}Vq(8As<)?%&Z>EbZ#6}$I+jMD#~^S1jwZ}~p*zS%j&6TI`_Ya9QheDFu!^Dr-zZ<UMx)4V8<U%FnU&Nubd9yRu6$&H!9BKxRR^BR0OUXS(X>)BG3hrRy8^}Kff_j!6WV_z#)TTWVEN_*GHbLN`2R7-EMv<;z^6=!7^AB%HN<&q@pS**?9nWa0Kah^OfagW!Atn$`-in^3iM0U{?T8DZF9n}KtOKoJ7iCsNA?<~E`>)_-Yf<$!@3rnP1I_q|>=WQv~x4eIhbV5nRUb*VYUEKFnp1;n~@AGl!^{jd=Epabq*k>8}kBjvPxnsZWll5+x(|^OFL!2=?mJ|QzNQLpPqoaU%wm1xR{wgN-Wj-!{nU9M1-2H8`W;h>z_cvc-TI&yg1Ka>P!S)ZF;BJ?J`&qxQrEeHj#Y`6iM!m-(PYRnh1E2o&V!mQ&<r@aB5~}*`)t~TwvnEPE;V?CSAIoq4SUs_RSl7<Dt~ZK9z5JHXvifzsDpLA;K1-y=$5p*IZ|=zRS1$J8SR>CjKXVX**Ja~vRSv>o%t1)h=VK0n_Yd;)&m08%mwcFe9OUkYhkmiKgMG`}mwVmJVlr}u%m3uh3i{m!d_u?Za7KLMjM|yw{Iah<e|uim$2g78>-71&{LSaMz$m_0Lw(3*u~PPDW10Cg`9u7X4IImTxDNLy&O`2!d7UjjuNmu`7An{5kN2f!xbdActNU51S~QGFE*5{X&*qos&BuLag&*KKDLl}GfH%QTPw@Gg%6=X?m{<H{-T%JpV5r_zjkek^!Cq<r_ehKJ9Ka#b4)KQKHkoDCxZQPBdwl&?_1IM7;l#}g_7q5btG#56(!uXoRbEor+L)hB67wyM#idBdIXC2UW*1=)o5sHOuaVU|`$pQSk>3j2yZC%og~luvwy#B;8r<=~9(q$s<?BwHF%pX?kSyelToV@5Bx%op18?*O*dRG{apO@|U+OJq#AhtQ`uDv}Qq~Zsuv6^s$hRv?%T_^_vSOK4y6sP-7IXavvF(|kkZt6^eAPoOu;y##64PJl$vuY+IMNw4%ekXBu~SmYbN!KuAC41DcC_b#Td=etE~Da<RkJM8ZTT2i^IYZA;ym!)^Tuz@F(#NRky+sWd~F0{9UNeEXZUQ?s%^Y-SCjW$adJ|le9w3wasDmuF|OLiIs#Z@51GkDyQ}T9%9W^tcj2(gIM~O(?vvllZLIk>vK?aLt6`3riYG-_18HSokITUxfAXJ!sH-s<?6LMI{)2fA;j#?<`H)MvRrv9Qc+yaKay9HRD=xi+_g_rKk5rG})!5_LJtF>{bSt#$OKUdN7rN`=cR!!Y5AGCEVd!ma>697;d1R_aAXc2#(O0o0XyFtl>U6>LGIrGC!Y#I`^jubnE%th+%sxJ19r2(ykGF}>${v1e;H>6Xy`RItf0qNF-rViqa`=w_`5a;F|DNxO`x6uDT)bVvPW(;#HLl~MUa$+kXpMC{j=%i0ZT_#eO&tX``DzXO6u3Wu*yjz_G_G9@b4%1SQv1+ghfyPBezLMAc;8)4ws6@ccZ2I1drX791N+_X8dEQ9tkDcKm|JbG5C6`~pMUUWW1lRBy}SME-YHZ1NWb0Fu$LFAeIc*=^`4Z8{~E8}4EFjSoANM+z}bhuXB1!B;J(D_7ypI5f9LQ!=)Zu+tiSj#@((zQFa8Vp>E~FO?)q8z>1V{os1@D6r<~mGe#<OQUdCq~*s~`UUw%%_kLQd17$;22U8db*6My$>Ft6a4{|s^A(ZUb0Ql$lb$4klZy|3#}&9_DRx&EdqkLl;aIW5MVT+~*68MSnkA5cA=2OfUgG~FUQFwARRqxLZN)J_0_E^*4Dp3VL98a}T8Z@c)ptiZ3R@0s<<8~MNqbA^}i{%IlATpM(Q!iOiko&<jvc`BaId|9biy&CwfiS>9`I;wgvs$R{`32>Zv1#IvW^PX0dFuZF@XNTG6akV<GUX<ye(TnjF)4_U8+)p}K%8v(lzF1u+_R1>z@ozjo>JphR0Ijii_}t{PX<?Getj{aV(SZA;s)v`W*<gEdJlWU_3VtWU-%)v4_7D7>Lgl77*fUDKF4Ca~c2F(NGwLg;SG6CKboSFC$K23W)?v>u%$*5-nmx?Jko|-;>e#qHR-Y}r4$+_=PRH|^FOCyBS+~WQ%=QU$W1LeekdLd}8=`8uvl0v!Om)>`JHdq0`~7=AO+MzbH0!8<FAcg%Qt^ECiuI(Z#pP=2Vf?%G_&mkaP^%8FSgW4Gb(v32bAMkw-zR4>em?%~{^d9qb8k&P>KA?eozM4oLw?*i?s&X&aN)UP{imaj|EE+M*avey)OW)De_U6m#tY2f?g?{!V0I=wYCLzgIDq}Ie-_1ZuqU`a;Qkk=%T%I&TB`NKu|^(VlM}cw#KGe}=LYfLw_10=zQEl(uo2Vob%rs$xH*LpK%0=xs$fMnkzPh|lFsAF;JbKff~}B(ReBfFi@m1-7mev{BJksqJmmHKy$DWr;Ye-gB$>%bTR6QmO55AjQp>n~Mh$yfvs=M?EuReB&N#?Pnh=@SdYRXkK`$aW@nllq9v0R|Tr+*H39fgEA>M&oV$2nNke_L~2Yhr(FYx!*@6Uk~a#AG|@4c9x2zBgZrs1)=w?l0V#3(!g90NY27Oj}5nsqmZV}&8#^7+Y5^q}3>xR(al#L#8odb4|usFf6eTf}=Z3643|<~2ntTyio>ZvwWq-s$sOig`hNb`o4RnHy(IOXZHLdOM>mEQ0lxw5N$)cyR^pAMPjC0+U$)!7ir|HJ))?5<^xyhiPdNyyn>Z*HE>4Pw-k5&M{lL<Fy#2%y@BvXYdGPe1>D&qGtZi2-I)p$05(gcE)?w=kT2X?EaVQ`hSJJS(l<b_dfiA?t_;>>uC>V2#5{JkOXpuV2LtlwN^QN`v2YuR#o?X_wVhsdRbzaLP+*-?d#eR7!zb_G>yW>s@f2|r*>o3ua!4@loA{CztS?FeQ@~p_fWds>>ci3gLY@Z1B_ulM4sps_~{!CeQR_t0%PjK=#S%bH{tnTj$vg)cfr{^JWJJ|JN?;@ucgOMSZ`dlv8C`pu8b{Ve|)t+;kACYHFlTF2K*VUuc?r)!2DZ$YGzeky)Lw*u+c{Iqw~1Fd5Vhzu{y=5b%6YSU^^w~kS(hD?r1GWjE^IKzoH$w#GH{m;x=8$>9NDwmIXSx4z8CCYHp4kAJS%8Jhc>TSt|qnygl*`s(g8DSKS!5{rVStt*^?zDtCX;<h%*V?NRM-UpXkLF`PCqzZx~pcYbIHw2Sp0p2`D!9!F^>eB%g_an|uTmaJLWHp)JJ;!cql;A+YEm(;Gr^F$N0^<MqhM-2nZ#Jv2oeXrV2gKzCu6}EqqyaR8Ndj!^-ceoy3#?hn}gVc6hmb(kA*W>5&`<v^)I`w&--+2g*@iI_+1~1OMXuW#=Pk{D(*&q%8`3_NAaq<4t1eMyK<Nhwz&tK>8SXyTv+kus%rUSMQmQRh)J@%92E%1W5F{z#!q4IO&4M4tvKaP`)$Las%F_`b{V18_^&8}%ZcD46#{pfG(<66cUasB<}#bs@!h)>xJafEz<9FFJAlS<|qk^hif;XJ0qc0L}kuD{M>$<HUZdy}2y=gXHrY75qPc^}EUEB)(GY6{?bZ^7|kyGD#-akM(k?vJI+Et+v&Hv65I#~b`^`&a*U-u$wrsMXnw+NIDRK8`0F*Y)Ccu0ES<>03r&3v1f?6XcJGUafw*lH)Q!jZyJKerlx;ubtIgm;QWGxy_aP*0J)NYt!32-U;g;7oMw=U&Z^v$NLN(;#kd_tLM*;mD5~P-zutw*wyWV$FB|YLOjR2-R?7~$JG>DFDXi=YeieXu`Zg1eQ;-w$V-MUC|EQtAJ%f6Hy+<x;ilV}Si4;E<ci!>)NHRs+vQkOzs&^9Z>N?qp_L>l7w+xBy-S-IjfuS2n@&u&EZUc>hFQ>>(%yY+hlas?w%#6)o3{B7E;}ZDG9((~bm&4nHuA=8S<{q5C*nhUrR1n__i{`!%g#JK0Y~|<=DLdC66Ajp1?!WnME-lNeqjeO<zBF2TIbbycQ3MFN@=hNho&q^)1)-eSbkb$q${dEc_|5Ld0S_!pG^xR;LOmyRSx$_$rNM5u<jm8PY;qd(Kh6iayMyHQ=FjfCCQ_;fO!D?+6C*n>5AS$%Fi=#&|SW30;-9S4&a+W->1;0a2?a=(e;!>VZ^Uy){7&3?DW#9uA-kJcbv1%x|h(sb=+lb#Tz2Lo1c;5wq<0Wb+wnY@Qgfy+L|`+HNEI5JU{jkI#!qw_qxU!QU6$QKblr9xkr2!Y_w{cwza{$AWF1pk{z@M>P#eNcZ+j25mYB-ZrQQXnnk;~)1i4UP4cpETRk~+WzmWW<Mpr1yS*f)l`+PStg8w1G1yEo@~)q^`=$+@;8qfLjd}8(=!9*I>Q)Tlon^5pOsh<@$Vt2IykeLqT4=>Vn{E#cqgile?d45yj2}#w;O8EM(=2#@X@tgF=!pkAkQZd*z}kn%uQi@`#YUSpsOd<%`b-&I2aE^dyZ4MY;5#?%mcl*f-B5YKukhe%DX+m7v=%ESer{=UNZe|&b=etfc~ca0a;OG26{j>>#(k1+JMxRs%cRhbCOtG{>lPYgb&9%TG`9xU!E?<luWYANcCgsyKpt^_T2?xF3rTVgb?b!<f=8`>5GK4MUaW`h>Bw@63Xl1z&NA_+_nT~Sk32CXJW4iMz*FzyVZVgg0y+8K%0BV9ds>FMwHJQ3Sn<nJJYd|q^@8>FOX|gsSgY;K(BVajav|-|s9cfSq?BU6>{6{cF*op1a-th&u0fv<wVo^(zfS9xd32~VO37Qr@H&%a*wsgP)&zM)YeFBw?DoP5?8sw7%%hhLpYp5+12qmto~Y@I!;&<mBwP@S(6(DAw)JACRtLV@V*xhT!aq(@+V~q5^rh2uylWO&7U)~I%fWVCQtzhm?s$hW|F(svo@zDfvrUE8m5EMuYKpTUr)l*_yfxL!rR>iOax`$^O?^RFCv>u}4uKXq!LaqBN9vz=Y<6I8bw28xZ~Wk2*e7XcSijey?&sd(v-Vczg_jryL%iLXhb8DQ`{GJe{8jQ|1eX<Rx@jH8yxj00j+@-N3s?77ge}%AqA>R*^&xm{-P@Jw-68C6a5wc{kiai9m=lczY;PTT_TRy`D5X~K!7}-Q6qVZzYkEFeBQMFwtub;F1k!#|IV7yDPChoqO_O!J=E!IFtOZjwq@s2&Y2~{n;<H|_Pao=pHYL`}_8ViWefzG79PHFTYNXfR4SbHEEwU*lROUZqG~Igf$?P@rE>W6WBI_3K&`#BuJtptp_WAd-*nK^VdW@;p@GPv!&U@xG<)^gGB5iJtI_x|qhqy)#Bh`MfTcGcW^_{3kH7|C~e!gGK7drwr9dakxd+;?mJmdX*xv&>IOX_7A71$!d04w`kNWCn?NcK`kOI(BBzROr>J4KETzR4`U!g}GxY8gCVSdXs4OSD99SmnU_fH}o1yi>E;SKdiLn`QNYxyit_butk~T^1VH^?ISBPE4scd3GpZ{W~R`L;=fmXBmr;YgO@3RA&|UEWY#Nb`n#Fe8ao1HgXK?lwT@FZktHr7bMnj)NSQ+`Q3W%W7S75HfHCV>+e;s^5F`<8D#j}jNQz}`hJ1_sLUB4Kg9wyDrAlQGVatd!FLnJtj!G_W8qI8iwF2Y!^TKnH+<G&Eg6n4IOY|6Zt#nhf0u*xumwNU^6@iK*X##W#s)hoV}s7{n@=sr?e8(ZfMffu^nrr>&p4hMgYur0uAQudz&JXNjdWqjI2?{WwCiDBnC!@YUM?`ME_t(#JG(k0IL2(b9p(wi_r<~9zs~cySE)E)AG?yzoT)ta7kBQHlOlTFpL%xP?)PW;{GNZc=do<B-tX=>{{HO$TJ^slY*c?;rH`4beYR@bLT$Uc^FOg$OkNBAfS3t6Hmd)sjeBx7gzDN$x$O|kXJhN&(?9EGy4fq@t&yuo<n>3@U%q}DMvcO^a6V#>#`>J;tBgI&js%|X+s4HFiVlAH>~8GXrR33lgYg5z9_ip8`z)u<PcZ9d-{UW@bslvv=czet<g~b{_eR$67>$*2s@s`%drjRLqir3=EXt}@aeGRj$sb&LizjX_Z@R){n&cM96}R3p9!mH3aoLu6)D-;<<2)X6WE2MGg)T7OSzqSOtK^=7ITiclIquya-g&NfwK2nE7y@xus@=NsJFWEa9TA`RX6!n>GQReAOlw+u4fg$MGbFE-N3;_2Rem(&rUlp6sJwxVxUZcY3tWzcpi<*QQ{zKD+f;2+u?nWf(W}a*t1%PezU~Ca%wtRvTR+Eqs*9h=9JxZz^JJpxKc6*5$@Li*uzeX{h;4fwx)LWN@d*=bw?wW`#Stpw2dj}wbSJeJ58<D21n+ZA8S}I<+3k1N8sA5LRGNyOj3;OoZ*iT+JnUTlUd}!6;~G_)<L#^$cYZ`oL{H+kWF1C5PZX|Y9{hrJ8T`H_`t7dFpOvm9>nlvn-8A6m4H!R8$KOl&yO>v)_y3kRIU)A|mwA&|=1uT?sCzKt^w~ca`y+1x&kp@N*49O(P1hSo9BQM>LfY6VJH3a!;KHXj@Z~I;>BTymBfo`TdaQx@_+FXFofH(DAm*_Sg`RZc5zbhCTx5FpM*CR?KH-ZEejV7lAH_lEa9v@nlQn9mZbl3%_y8$|^)7AoY1D(yr3C@^YL~h0eMP6D?4ve@buI1dDbryMG<4)G2$u0j3D)#|<K0fh<><rvaH~0cz!>-G*WU_XXe98W!ups$F|9X=Ye<j-m?U}Jzk=<9$C_OQpN>2-DkoT7M!s7)C|b|hMR$=SHX!J#8S;H}?-(!L^vsm+6z1XjX@hkOf6X6Bj@(&K&8W+Yxg7Uo%&*ONsJn5+x&q7{+LqMiz<g2w_LlnxK0>Yp-|}rMrDM#d8rU2btUqY$xT8HvN~{e&YAS98ze{|8%rVNixqpo9o&Ds@C}r*u$C0ZvI?rC!H9zKW^FWSY88;%RQ{lYE$-BfIC``7*Y1#dGSsmj~Otw01`K&vdS^0$g#zjj$>*4vf+dZ-_ImdE64{yQ+o9htY!3T?LR=2534w#$I(C!%I`-`^o2lq*u_WCt*FO>6oid_0I{x0Pq_{a`=3*&FS?N7tT3}@wVJkp*Nygk`ldf9KCC`@@Wz<ICWAFRUu<O&D;MS9A%;5Q^)-BS+x-P@nlpysk#&1Ht1%ZAGOX6sDUwpO+KKgJXI`LfMc&7VKiero=FmGkF_<N8~Tp&leFF1n<htq#}tJI=<&x*})prixp6v3QQ7-TcpSBq>OuuW=ME(X`ppKvVb{GE>~hp2`nh#U1mI$ibrcS7Bb0yqwUkpYT`2;SE=N{M{LOS6#`w%BuP1AnS@;Sy%LhhfSqki;Ayet@dYa-hbfwrUW%#5x4p__hDQ$^FnbdTZpl56sL>K55fHTocHQEjNb<HZA`PDyselwL%!2zoc6cx{kQK|x4&AgebO)ok3K^%*1!E6;-%!6spnnm_^O>FG-qtL++E>)Fvs{RkJqS$`{YM;B@gUu)R(#7{ih>OY9_UBrFLyHSf=KUJgG`YrjI%5$G|$_Z+}jISTCQNwTsud`yu1GmgJ*di5;vnsJ}AYG{=aAjH8bHu%6WB6|L{Z^#N-U$b7yTZsYzhqwWd0_d^`N&RI+P_*Lq(V7qRr+S&GJyBK{hOX8W9uk$yI-@<zHwwoKVC*z=IoT3IT@vlF3SE=(8Vtm!^<3{#p0QYN&AC4c>*ZI55J3e`3<tJXRokp;(W8C%@OFYwdN8aS~R<)cdTj9Gd`jfXYTjYFSWM=mUc29}gYqoo%l*hC1pqtfB+MzEM2?Tf8kr~GcA6SvPK@qwzkL$I)qD<eoU7I?=GCPo8#ZX`31D#Y}0)ClJ3T-wpp1gCnvspjw5rZi-;g;I1T#@h^_rwVGla1P(sSb85jd%=eZsm)8$&d>!LEVfOMw@m+#0S-+hT>&SXZL?pjruNqbf=;XbXXgch=_gKll7KFF3aaSr8_NU%&EPZx#mf!k?O&;<Fw95lxCJ6w#9UtB_-9RMi~NF^-VUPZVu!{kjP0X+$*W~)a+j3ZgJc22)t0ejm*yGS)Es1pl_TesNLpm<0c0BsN4yHir0)~(IWD0CUcUe*6U-K3p4c=MxtB1avQ9rX570JLaz^7w{DVNhvz`z@X&bFoBrYll2IDa+K3J@*IU-pd+L#pJz~7RTVb^K?a;hLc@&gdb>H|5`XIW5#x31?4KIes-}tB#O3J8>CUJX)b)4*(26yJwqId*8@2^^IG%tHE(G#PXY`t2>S7M_%!kQn5wl=p;aO7SRCy#`);j|KN=M-AdWQRrwQu7Uoba=*X@*sTWvn6LzA9Ph7nv!?Xdpxj=q4vo`Og8<^<XkTjcly{k5%R3k6~A3Jv?EDR?CimO#&-9_yRB-cJ21C;Y{}_d!x#*?&SA}Y$%q&>54~U0+siVwPSxE4yPbaL6PRvHx&u3=TX>OP4FU4>pSLNjH+=ezob22ET=Fo0z25!CUBGAh0&}I_bqDP*zj;PIw-}G*cOP|XJ?gK&&4N$0g`a#ZJn2iARo`hM#q+cK!aoKJAI=SSVP(+&kMEj1((5HV1TR}Z_^jnC)Hq%+ufEW%A#1LeAz>`+px;q_(j(K_4W{(blnJSWt<#;iq`h&kTgClNq&Xwpp<3NfTd+4#-{M7TN_r7z?MZ4wq;BNK?QC6jNfI(Eja<<&)=W#sO0W*+slmfL7@K<Y25sL<Bl0$R;3eMWz`>+|XRfh~?1kBV#GSQbUHf3h=}dE`<Cqcf?!l-R6@yufvNy1muhg{cQjZuvL^;o!(}q}r>CMlqtIv#J&D~PjWxIx!Tu)a1aVE@T7aQaq{JAsqUAyqvRhR+T)^wTmGkDfuSKh4;eBQMgoN7PmHW)87f=fh-NBNK(#=pWtaEyElHBbGLFni5s9^%-(bB`+R6Y!6{Df)CHcP{3$;dy9H4t7<(ZLetGuSXyA73^v7{g8|Cc1C>-L>i<m^GZDlVlA;l?Z=dn;>K8TPTDEU@^%vX;jA!^E6lkgrv!|V)dus~cc}?=3tMek;5)66OUQ5G#z_u|(b1UI6WZ!OWBOypGij$C;=b<I`Ej;IjQd{UuJ?+IQDKi|{0VdTfew9x_w@$;I@pVtXHhx)W%63OeA*%YZDZE&aNms}BfsNs_S(-x`REGM=?&IL1<xY~pSXhlz??d~L$9?TAm`y8<5vp%j2JWMNARtmHA|er6MS@|wqS5oHlK=r{9FISDP40smr3*zj++~LSD8^GjJ))WC;u@#53hsk>E0_dX~5?}pB$bc8Nl}#Yp7-gBf+oD<>+iUnN+Rf0GS)N4z{f-@NMecdPQ8p#<;=rNfei<-A2`*Vmz<Pp8ZGKppB|+wG5bBI(+Ycmi7Si5ScxoA5NRT{yR5jbd0L!7+|w^IR<9OCGx?brh=^5mly~#$?^LB3uCRgG^fI-!)oBK7^JGSC%53@iLLzfkHDW#WqqLH{lYjv_^BnL_`fFeo2(a<_ySMXElgCsFnp>S+#??6Iv<wVf7da5!_D3$Hgxo(0>s5yBNw5nF)h*Wm)oBlg}p$(8~iC*%Za?uUht6^mvic~cj3Ys+1EDOC!QC*r|#v<yy=0{Am3*0ZR3itM&B7ZYbB0d+>cKjv3F}~PhxsT4Exj16_1S({StXr+D6@BOb5n~s#W?w_#KfqCULAN@?g1)<L|W$dsPo!{TVZn|Gx8W1ixY1WAsITS;Jyq&!abMIhPuFiZhMe7vLjEPBb#s>g+A#zQ3{dl87#zCS5qKI_m<n<h6F#Bk2=X8TGF<UEq8Z7j5Kc{N~nl+NPv&#G{%qqWWm$4p1?;ca{4%s#*;d4}OpTqaXf-i3tj=3(^PqFt5M$$5!>n?mzqEJ8!2f#DxB+u8p)&6+ai&c1UcAEo(alscnJ%F_$${3e!3AlaSRi&Y!iAK}zbJc8f<c#v;dOa_?pA_Gj_ief*{NC(CP%k##5Et?OjG=J>NVL)FqR%YVHKUl<$pF8uGe8q#m~7xJ-|v>fjf?{DPLYvlb^`{~#|X_52b5KCW^$QpdqkemyN&5^#`1lqqe66;z`6U{ErHzdDoe;G<XE)Q#XntS6T76$B~0ku65gXk?KFV`H8_aZ+l5y%=e)Nniv$mc2BP3rkS<8iwCyN^ERN?ymNu{0NJmMroM`eah0_UHT)Tj*x0wqCORmI5)o^OI}-*RvV91I9Y8v#R%P)i#AUU#V@XZ%-<RGE-w#aU&j74(Cm^dsq8@=X(8dOLA)+k%eAKAz8^qbN!Do@r|oUo5VeG&<pxMHO9v${%tJmj${4o6OUD>_-cF{`S}Wk&)V&5h5I_fyCK(>m()v^+=*=7PbOevT}mp7(rl2!@GUtAbL+Wxs)ai5TwQSFFrA(&hwaO*d5_!6BV(sGMrZAoh=gjlOrY)EgDrLl;?P;ls{9ydgP@FRdYCs+GStnQYO{LO8>V!+Oxl1&{3iI&c@gr5=e3=+r=Ibdvw6(5buP8;&)~zYs4JF?N9PjkyQBv*(&!lUPqJl68S=|=1;&2nM#yFEuNi9oU3IX9Rw*fTmW4O)nGVze3z0FKbxkI;4)veUqNPUWl4P6d$2FBY=PqM498TCM{>529sCS}peK*v$2A|<Qp;P3OCYjHY%+bR&y}Y>Ytzk5t3O$K4H$jcI1h2z$uO?&j>6RpS#E)#qX`i5miPwFEF8I7U>Q;ge;|3G(y|~b*QTkn+vSeN6ft~2}2e>KVgLL<rBqdzmg5^nBbkUyDh((U8L*MdkW|39SvJL7TWR{IJ@U*RY*|t+yi%L)G>_v9W;u{^h>DCPhGm^AqLV!=Im0;VIexg-=`112UGi$SYul(*Ya;L!=TCf{};itjge;T;Hu}5wHIDGmm(mvL&+Z=qF+yYyp2Ky;=z9uR8>V4;-knv`@?#LR~Xo`8<<6L6TWsDtTStDlJQS-soJt9_H&PSe%MT}Ty7d3^fm-#~0Fi6c_d(@gucXp53O5V<XQCN0Z??Q=%{^Ea#F!t5#zW5(r=WI6r8=r*Vu4?ceoMF@h>wZ7Z$2T5{5@TT9UwI_FPo8g&nxS4@Lq~7Kb8fd1M7-gWd2*h0PA8QwwTGyy6(7$>jrN48xOpUBdmdnI$zfwm-!TXK#MfGWggB1-Lgfitx!(R7`Ch?iEKG5?l?|!1ut!dcrOGM$#x6Kj(b1LM?9nk4UUvXnUPDZ=;L{f7t-F9{zhyJT2RBte##YC58+=NwU}L?@-?#z{1`a<v2QmGu!GX1Hti@g|WeqlJW$&b|C~L33YCOpO^skt_oXWq&Qr9uYQpcLba9sD}=emFV$|WgmD&~aWu!b@DhDi;zKiYp{P^;ehZ2yHl#aR0uV{#7sKCZ9JoyrABZ7N@Jpne{2DUbIedEq~gXHULkS)cpgzxFq;vYjI}n4<gH8|{`H*HfZdvc1%df={U#70X=q5c{~FD{&c##E6bDQMDb;d&F4nn=5}utf>55YJJyuy-Xh8LrmvWo4fuYug}{4b{@$)gZ+WAP#%j>Q_GiJzH<B9_w6#bA!DM7GpoYm`^BdwmMdeT^19`9yvka*TwV8Kq3&lf-q)uVmZ^S6Ei8-)TV5qGyEb00Eo&~Y@VyO=n#AZ@QmYzqBxes}syC@oos1gQHfnskQj@w=HA1lQO}6K%{mZlc<a_)3vwizB*Su{ckn1ZF_O$&u(PYliGO>0<-q#iT*XawpyrM>RSiXWC7V@*KweY3(xXdx$N9{GcYEPOok+m3)v`6iA*?$kEwH4drcTIlxud+X)r*_v6Oyu_?=0q)wRom6jXl^immh)8RRM8IG-+st(<!nDSxlee1j>1^0>s_|BWsjfW>B-tfId98;Srwx;w|Vu(?VfPJKlC;1zuW&hj4AUSS$>NtXQ$Qn(1fYp`0P-dTXv$M2{sMi-T0xw*vncNT~l^-60y^z=!0fUJG&fC53o1#P=^(gbzwq?w`TDy(~~lGuMh5?c<R?LygNQp_jD`0q)gpfXY@8?oEQvd=?&LW182Hv1Fs}qyW;vD-iqtS2>e86Ue$L$i;nnP!ZKJJy=`ZO8EYu`Pk5a!UT4<tCcJO_im^BGuuz-HEd9tR`lR1xja|cBTnyyG^Tv;869}yaoAxx_803xnU7DCy!1KjD(Zs#d;rKdvU(+8mHXN^+cPh$u+HZW)#)hV&_AKM>ox4#QIxI|C<gffD-*|P)xgN1LcnJ4;r}R22ANuiG3+fSa3UzCl_|{2yjW3Yrx^KjW)r;CV&MNab$^4`!JF%#>q}-quP{)o;KjHPUO<zyJPRS_~$L)cE{RRF}XT7h;$*0E6+W5^O^P{AGXxf@LFDn;pL053<*9jly52_t+rK^`QttMa-4jXTAX9$lpPiA4d_rw+brWfV5i=3DR)5t{)S`G6E9&fD>W~CcDG-kz4cK8s>sBc`}1=!~|@rVwYr}wPy-d0|~QID(46PFJxj}EK@TUdat`-^tgwKRfXVOMFwOc>&xMYp?WhwcnEG_1J+-wxfaV0BTjz>jh(sNFi;dcnEs6TabsuVCHHT#;l4{RQ=*p<mO`j1UW23NP`u{q0irU|i~TS8LTQ9!_)Cvm&K|xdFSiGV~#7lV5Rn5*XX8^mxkKOF`RH7xvRekUGnT`kcA#B%#+^(%*{0SUe(ax&m9WOdkOUJA9UaZ_a%&tu@kaJ+Xo@ds=6^S@umUenr@7Lm7uL)D_+0ULV|h?FMDW>LAM4uMo^^X3Ua`*YE6*ToQb?S$BxDAl&$!vGIa^IanX*LH|I#aWS-yn4c!Bot|Ur&XR|I+U}aJe1vA`!n0z>f;-l9qY-`UktpopSa4m15tLzjn`}@AbZ=!PtF(~M%nC6Hdb7+jE9bn<(+AbdAt@sk-!~@3+)~WlV7jGbx%I7R<=5GoUuP?(@YIn;E?bA;c^+}soZxy_;lL)DcR68P6~@Lo%p<R4Y!&igRl30kZR0D|=|dQ^C}EKsx^xyv%$?Hsm6TN&`*s=@Kgcrar%Yrp7~7k@C5uVu)GYPDO3ORcQ@CM0HEh=t{WwXydRg?-OPO_k=wjjYZj$xMN9qO3P`jbN-HUJnKkXaTcsWF72jc*hsZJ+&S5|R;Iv`%S=E?iUApv!(YtpiJ#KyA+IfG9?Qr7vkalO`D4+`37w4HtM?u0t_cF47<a7ZCKI3Lvy(57QBk0dyc_z7RpX_$FYCOUDAxjuwl<bq$MRhTzun{&hpljZPEGU33x?<MrMr`(-|4?RRZ7t2UG(Gz{+C(nM0DcA0m*<|$~4jU)18EPU7rv)22U-V5@c@50y-7!AUM`;kkOz=Vb%em+)urnhfjEh*2oypqkb;W~W%jqrTr(eZ^`PAwBEsTePHJ6MxL(IvZ={qe3{|?4ol=(*(k1gV2!0%!#YbRQkb+mK{JTKx!ZFf%&LCRQ%xNL_V=F_#pQ|n=WITpF~hB)Pru@7OK_L&n5kxvG&X<;rn@t9u(Vgl8@f{h<b-pvEe0+?rSZwZd;;ixCZd0H5aSsyeLV~m{8d+J8#ZI@&PKjqoMoz!N%r&`^zgMcwF0>+bH8>4QhiM&kUos(0UcJ%}?(xKGe2wG;`XmRM?E1j%_DLCBwBSv0>KDuFECH2k^e(2CYjn@2(I71o3fOoY?>26B9>I(OAiz!8YA&T!rM%W|FERSM-C`(qE3&ZHJxTb_o;2cpxq9*iRtXYT)X89XeTxw>OFlQ~3ESzm~*q#N8Qim}{>O<NRzGf}vT;QGQSe+4?3^0-ogk*hSXKbN|#9~ojmsw6u%$b|$o4cO-Nc6<3O!mfyz}-@IS<~U<OOD3jh@3OX6JnW9zbJWe2`R#sO(IiVam}a*HP_%LDeePYD=!@U`CI0btRiBF^I*vI=$&O$%lf*d2kT6A(X!0q87b~*d-FChFQL|X_RyEO&cNE<vo<oBetd*FSysH+^F!^29lHpvYhdlrBc5D15Be>$?7DA$3HNqkt@v4yZqMAhNc!j$^?{pc9ozb_CV*|j2&`XSV;0>>54C!^F&fTWuo*hm2}3l6Uaum0xrjcvZ&_`_+-IQfJp9UGJ_r+?T-Izci?N^Gj<EwtF;=_DNR)M`PXX(i*D$!x0N#PDbgX{O81^%2ho&2ttH39;%1pnn`Q>E+_7UUN4ZI(i1GHP+PQkG6(v@R@eRLU0s=H-AzrsS+;CRZkCZyfs%KPXe&gpD>&~7-Ml8zZ!595X<lQ3^ql~x#O#yn1fgy$A7X%vQJhu9wWN32f8<xVPYJYst!E2h!hNJeMNl+EmzMI<^Tuc=F7O1f9(!adR;%XJnj-Lfao*iVHO{yiTgV}{kBw$&<svaSa9zUgJnsjSy54W=1Q0&iHbuX<RQ5U*(vqu||HVMqhTF*vBW;`W<gjkr?Vd*+qs&Db>;kw=e$*IjryW>wF?ch@iIQzM`8XO0>3Mh3&2@2U2?*Nx)w|3fGKhI8Zx)@xucM+}Laist^(`g^<)x$4~;Gn;UYoDqKX<WNBF99#0gr;=wh9&1J=DUvm(;0au@#x%to4%vY((JYisT0DX8s3X6?_7#508dH@6+T-V9_tcRO?&tr;(gk0B`|9O;yy%&)cyjQFT?GDf_d{w5dm|@G@niLyu9}L&By+NuOD;0-s|9LP=bE#1Z;G>rCX$2sI8X36p2`&k3mK0xr7rx4`P_;5m^ZN%_6~L7J@ivlyEoZRVYRO4hu>0CNqs8GJ)&yyq1`+Bt8?kc%TEL2THtqn<4lwJhUto<HjP%34e9j4Kzz$-sEzs;g%zmiZ(v7GTkbYsE7V3j91DiFx5M75!P*P1rz={(*a&i=?`H8qUu}DfW`?e<VEw9%fF_21t`X1Ci(*UlrFb-HXy|mss$1O$zrgNK60E<XUA}S>@JX5wY~P<NemM&Ru^M&61~JXN$-MyMXWL)GT5l%l5S=O3t?6JZ^X5`Ks(VV<c}=@=>0T#cJLNFH>fq~4E2o>*eR5!C_XzoAT9M<FJuI*TuXoO(g16J38#nsI;V@o%m3DHH4zA1<9_^d5?wWU4k92tFE#^clV(h-A!HZ2SgTi{0W%}WXGqT-oEp&HQXZlaD4}#1kNAw3H9ga;RKlQHDnu~VBniB38R;j>*HRxQLr-N|nMd+TK`cRi12~OMzjw|m3w)qWiKPW<P)_`B|0sW)HGBu%nT`>1#ZF#-tPN=2%X@GUv-Y~)=zSB9_FJXVvYZ{bs-fAn77+`zBT%3TfAS}*W@PEW|JAlpS1j)u>`idNlEsd-wM;+JVUg&~>9Vy_sv@1_X-lrloNwhH&1GRBeCQj9Zm6&}@2Ju4KaY|`1s}FjQwFYWVT~5Exftu{=pK9*Cj9f}sH}BoLWxOfv{&w2*>=nk&75NqBd{bJI=i5il7yRv^a@x*k+sd@g;BWnv??zDl5^JJc`7XhHoj2lf$!^q-8uJ_uYBj1lb#I<r?dq4rZ^Coc7cndd^+WH_?&Hk8uUUvb&>~~j0MENwXNZT^PqkUhSf*d0-70a3v!>xp+4j#k?4P*a@EvW9b{<XVil_SS4bM6=ZRBg!tWDoYO`hr?wI1y!Zd3Bf@o75pGA?S2eN8Y1ZfRCI_vBo~Cof7fFWBPmig!_I3&NcC9{7kSmpL^{@jT&q`OYp~`MV?Q-b%S$%<I{Rdqh67pRaR?^K<I?4d%Ky!Wfs+AH&yJXwJ(#t}UXuyEF2oYOcg**59>zuCMde&XvcPF}wg{kG6kxj+VSn8N0M4FK>rj&M{uU()J;;&Rw=2uFKkre$5dF*@(|}PBF$f<#tOWzV>soOEi+hXOsM}!J=3C@{7K<>X~g!+}dj3GY($k+xyy&#aO3K<?%3v6`wS3(0+<}H?ujmYcx-4CEeaVc_05seB^Jx`>MU;cj4>&9dV`c>%1R7_v7al@sa*(tZV*qUf0(2hl6#7h_@_48*>i6IewS;ZTS6dzQgNszjz5&xF*10p4T?{W#fInOMcJw$fpU%pMLUbI_6~k4R@<82FVkKpVs*4ji0W>t#XN5#qVVNTuB^jaP?mk*x!uX+Gao8Md-XH<Oi}l;PsK>^ZL?PjM-s7S><P}*)^}p_`LJaSap(o?(Z!=_h&NJ9?YHU8fd{0W0KJW#^HM0UwrP5<6%0ts~_Vy#N&MS)0IlTo?(rA2;=p<Kd<M9EBS_k$L;I5)z@(u9@nXMLF?!78jtJ4ao4c6y5{(OqP`PfeaG0b{Cya|7vt~a{tLA~;_F+)*Dv^a3HK#)C9m-hsmt)ilQsLt`AwHW=BN)DuF>sjk+~;UInkbadS1K98T|h|1|OPc`V@Rew)HMo)<=n~jnG3qa*sOenZ+G#B02MjID}ny=03}K$9(Yb*5EH3ws{?_*>1*%V+=lqUn0JdiZ&$8S(x#x>W&NM-tw3Vt?YI1m69-oH9z9BDe8JhwA-)g^vScjqf~p8dNJLCx3i`7bwvYh+a0gm5ldJHC$z0Ch8RgUYB>?OKlkRB{Z%jfu8g}H{Gi~aVkg2funAf^MZG<$RmR4z--Ld=G3}@q`BCQ`_&Qx+Ms#}E(0b3PJKJJhj4+?^TT-@gJXXI&S@KeJ$2&C=yCUpGa8h7y6ZQ5Y%HEM5u`-e}Hkd8k+9`(O0c&VcXW*Yw*F?QI@S6&nhxgFwvf8^Hcw1v^Oh-LkN`HXgqJN;431jss@}eOnf~W3fNqx)0*h`pKccD#LrNIi=iK*~N&WsTH>C$WuaDSeDSb1zH`^7EM#d*t*58eu}q1emz5P^FY4ROydkr#xart@N84?fgZoax}dZNSEsTJ{OXeJfA5GQXqTt0~5jz@}MK+G73w1;$DX&%m!ec4a&WHUmpbew!3#Jy1uxue0`K&5j<NZ-tm6W7n<0xBb*_cG$Dd>}#9dSy}SE4gFTjrcEVRk?Vf1Z~JO%>Cv>(Q0KXM2?=`(!CPU*RObWu(Yi3OKD?k6>dXIvbKEw(<B{L}D)a@`5gA|y?h~&r*I6~o;2FWQ&%sA8w_S6HA7HP7Pqtzw@RKnDs^8)MX~^n3J47$37un%~c!@EAu|#M}+v}RLmnC8A@E|zP0`T1v7%Qis@`JW)n{Y#t2#$AySFfb~4aSvaWsZJbvjAh$A$J%TdChpYcu=r8OFt=LZ1!Ng4w1J2|B3M^Kf(38cX+3~&7mtdB$~uLnxqorPG_Z~GxY6~u1Q$S%nds=;7>1OqY3yB_(jKh@nHL;t8Vbu3kUlz>=SS0O^>`gWx^$Nn@1tl$z;u7>~^Pl=GVoR!RUUFGRvYg9hxKD2TzQS!8pkaO<Z8i7G>A%=^;o%u4C*-XT}-c%gd2-QLI?ND<|2fhhPuhvsTI22pqSaJ~pn7w&aqv&6Ig$%^fQh4x6O(<kx01*?6aR%k_YD-6H|pm(t@bJ?IG|aBW^wY?!!0yD~h4_p}Fdp*x)tO|a6ar$rX!S;m453-)2&8F70%#(i?#(8jC$xmgUv&or?v>1hw|Wz6VFgZXTdk*Fw%2<nF@!z}ulcF8dzr#LYY-(C+z&+-k9v4I?_EMUnYd1vgXQS)R`v$<#PEujxRK|D7+TbH|xS3^DF9mTv)4+eb+J(@DkhR_Qh?2+&+KfM)?`F*2_pPT+t3KoSiO{N%!#CI?}XjhB}3B3u~z|4r8%24l?tZzKtGk?q2R6G)l=bM;!NczAG`{EW2iNy~j2mAk6J|fhc&1lzLGh;CchlLjBif;vu>t%=L9P{|P$qC>1E%YDEWnJ(d!DN|fwY&ABb790c@YOi@g?8qXWOLBtHQk*8bD1kFsWfWu?>kx7z4{j0kokMG%Y$#2Jmf(u`Q#CfxKk$&^i4lS%qe0=-|PHP+UB=yoE%Wkw&0P9UHqm``crA=^@>kgVgJ6zb-wglD)Xq*Xsio1x-O;7B+5rk)8}?=F-?(s#@{?S5e^CIG~Bn^Dc;HPc&>PeCY?QN5Zharb$as2^>&eXVc|!=wxqi<tT&(k#w+^>`~TvVweE(hqgEKdvDR4P5TawK&P6<Umk;HT7@xRg@6ymbQgJQ2<<MUrl|Fk{^RmFdG0rpc+AqdytdX~0_NlSc|5bx+>`vEho*c2>T7GYW2h0`7Pxp#kWs<W^#zynfMjSEnOCV;%=n%VcMn2rl5J_IQ>RsWD-5lm{eReGJ=$IR~Q=u!pSma?tO(W#7DGA~|x(DK+Yj1|Q>{G!XrR{(1YwT|0F~&aR$rBe6*10vny&!*p!iKz2IX2ER=7$>ISW~X}QP1&z@Q;7ulV?NdL}p^93)By;rcZqGmj>eRpT|GHkGdujH}}*|Oc6Jy^i3q6bUKd<TjA^q+Zy?^?Wfk_T<PL|YA?=1dk&VekC>GPV`QN>;`E-MQj1X?fBvb9OfZI)6pDXM#mr*dzq<VR|Hb-BVgbopE@MoV<UQaBhyr`mK>mW|ZvOHummag#Uo=TneDpeUDJ;VIC(mvEbF3Nv8>V&S9$2;HlY78F3V23BbYLC*OE->Oiau%9h}*mzJ>>Wk7-QXuw&3itF_2Go`55OTtwg*Mhp~*c!Z7z&J!?dCB#6hahCky9|El#>*YHmzV+*5L5<ClXpT>X2A-}qJ^!;UsL_E3LyT6?4U$`dHM~5c=pNy|QIeOuIyFbtOFD*y;;}=fun|@~7tT+kpkx$H`y}gtNmcW|bGp=7khT7;sS?bjz0b3^3PZ~2xLi_qH%SjeKz|-mKL)q>gY0k8*tG}21&Dxlqo(;mP9(pHh%=0hpWbN<zU$VUAhr(<<H8mG7M&x$>Vf~DaR^RB&E!8ffWPuI#(Hnczg!0>!F_M)!*uN}VB(w`+gM1`8DN>j#HhF~ANF3}et#rY5Zo7R-NSUI2X0rF1PRz=S_QfIKU_TF`5t*TONrl-31rIPkeA^6lz_fZw2g?8(;K~V$qQ26Kj$9I_YeV-IB($D{ygO1aStfeD!g`gI*63?kb>0Ol+JL{pK0+OA2=Fz)j&O^XK31&Iw)`aE{0qd0L`Kx7KKNG$OTe7yr%tQaVBaKKedCAv3ic2909Yq?`jxrSDQXG$Vhx3DJ?l;{VEeFG6ZVGd9_(KTueM7kc(I4Cda-qCy*TM)SDD|pNv(zz=JFHF=SvI+zN>|LU;q5iV)?%t7IM0H+629vUw_J)9^NGJmW_B$TC+5x*W8Rg>O44zd@1!(Ke;}hwg3Am*bqb)sMk9v{t#=_4ZNte-c>c#if<%Rc^&C5R=v#ilyI+d9T&8^g*lPRaNtXh>o#dHM@{voUBDtRq_qs}0;)7%6i-U4j!zZVajDi2b&qoLMBa003n|X&L1DLF)jg?wO*OU^Z_B%!51+QgO6ua|%k|iIBX_rp*QwV0M<+EVW4&{#-F4)(cGa8!=jEdvP&`OdYr*}l>I4FLO$T*;A?wYT%GNlJc_ev{!9-oBnrFM+{9BE?%9l0rzL)C08>N|}Gyxat9`_@*UG;^`tyBkv*UVJAnVP$j{l=J`t5zH5ba^gSw>R=OQ0;cjG_W=4?XENw0)?~h)IRxl{QOa2O8f8l`8Rbfk^tw4pZ}%$;HI=8qz-6xQTw*aCQ|m<`}nNnzCV>F<z>89_59R0ZB+k_xP7HJ`JvkV@0;#o^*(M>*Q_wNAK&#5N9_@%_j4!mnJ!g5i_#QPx*4M;MYUIU?m}?~3~J3(_6=3z;h~<JvTt_E=8^SIzvn(x-N%UEA2GaR&CE$1Pg7$kQR7S5v)gVlN%QWlVB`CvC)0@QZNiR$`W_6mV;!qEb*{5I?u$I``D`hCi#%?qwyD~`hngpp4e+kcKUMAS>KUkdJlp)ecCUI<IR(Yh_J6IJyC29YRr6c7Rvgg}Iakcl)~d!DvG}{LwT<7c`Dj}y?KyYUHgT1H=HfRU?Em<5Ke=&#JFYy=$Ym3Mv+aI6KP>9i!n*Dvy9u$dEwn9{!uQOcU-7t+Juep44z}Ar7K`0(YVV7Md)-ZJCtR-PyA*$i?XYjVuw(pwh4#l^_M9%^I6mH=z1ywf*h_nUgzx8tAMXNa2b08c1MSrLVLxaCZCiNh8rOCf3+K9vZRd#R_h8>e@O9me{DgUM2{x}4?{eFrFiC&!hj5W!cSIh4enrhI&$5mdnS(96D;#ULke~k#9a%3_".encode())).decode())))
elif sys.version_info[0] == 3 and sys.version_info[1] == 8 and platform.python_implementation() == "CPython":
    exec(marshal.loads(base64.b64decode(zlib.decompress(base64.b85decode("c$}=fTbru57e4rb_C*7VU0#9^5Q`{*B#=7}mIwi<(kjqTKPy;!_x|-^{xkE;?xzbO=VTq;cO|eKt$+LHt3T2FE8N@gLs)ie@zLTZxOS0KTXt^o$mOR%!WErHB&}s=<zsc<brIwjR~tn?%OQSZt>r~_p~`vcIl9{N;(e$4{8WFZ%Y4HlUs!c-$;(byvfX&)hM#VbkA~@}x0_B~&30p`>$<hrB@)(@yF9XaJ@*Gge{$D|_Pi#oqhFY??HqN~7PjX={!~P$buS_0uT}m;<@dNsk5ziE(ov?;Zz`Rubl+3yN0nZwbZ@KDO_eU@bVH@TtMt>HzJ&BMQt72i-_GqDD!mc5nFn)yKh(Wc`M0XRvrzeKl|NARZFVaCGN;e=NtNEJ^qs12!&Ul+N)Oa{&Qlxcmz%oZ&GpUw8&v*RBYNkJ-R|_uBsNnXcF~PDxP6ruO>EXVR^xXzsy;)N57qdaN|nE>@_W@^XRp#t;gA+*k;R*##a*;e@~}6erEogeLYEie4DEiY()HHh5!@Rtl=~qZvpvku*KOnxTa|<BM!0(@H`sy(GV0hyP~4JWbcM@WasfGONlOf}Rrv`gfpFhdeos)5!}C|+-qrn9xO$shp#E02i9sTjKkf(-Xs6O&1;Q=cs`RO4oN$$%aFPmiR_S|zhn91a*A~j5d?C<WZzPc3rm9|v+SDK?RgQK^Aw1M(7mz!N+sq)Xdd@r|g_o;xOn6nBtM;U5b57ppbc1{dZ>~2Jp57L7y|OI~GOBdmkxBS-e+%K`wwlXN?ZP9v@S$EdRKl;?<NVxg7o3>Fe^<}ngnw(_)bq}6-#Gc9>dQF!Lu@yyzO&e(_N3bDaC<UhSEUOtIf^Z7Yc-CJwF@Km#rCY~>%>;J=Q)4Xo{czE`ExJEV!KlH4Pv`)+qu1=U3xJQ!A_O?5PQ_NMoiT_7GBImFwe(L1XbJ3`OUWDajxnsjJOcNJRhS7^tM;+^{DNQc%J97OU`14+KcL6kK3gYH)0p7b~LeL?J(zus}WyR{;G=yv76;%A$GU+L$%k}?FWxPRr-;~U*dJ1kCk{u?R74HYp+JEsq{B5*2U}G-}TczO+R>Ve%mLJ+uhTCz3Iar&-A;+FE;2&yij^_QhM}y20eM-C_VZFJ({nV?<?rB7;%15`u%!$tU15&eO-NDe>|_@=KBhEi<ch1kam>sNQAhZ)VMC9op|D@e%D6gi%`k&`&PAcSNeNV_9EG-ew~%Q2tQT7URC--*@w%d(r0_w@MJH-AF4d)f!%6Kzc1@n>ykv(-+BoZn5%RmL?GKt+53HD`@5A8Sk<HKWUCuI?nb*cJWfvIrmzCdJ&jx20t0&*Ep=rg9)%THZuz5@$4h9n7I~~Z_9x_r`VJRm2R6ACT%vjWH_x)A<n(%g>)SR2=LFa6d2N>SwY9z3FUacheUC01Sf|9=^zCYPX7)ZC-M_iIIbnVnjkCX7s^67mzgRFoZxMO{`)AMVe4)-EvNgDOE>`ej<t{u2f6;53%G#f7f81Om?_`5tyhLbiEk=iq)?m{=hq;-3yHRx;Cwpb5OcQ5qxr>V2_NJj+B)QE4v+~%(IFa|lke|j$oU;^5+$7)=w+05gk{Rn(RNyx~)_}c`?~y7eKTDr!#;LkhDXFt=lI7_FEjhVue3#+zVENmFYX8R>e`TF`i;PKT+>`>Xqa(vZk=j>5D;6hoOc(g8N`pqk=6I|w+q}CiMJk)3i{>$u<K=t$PPSvYkwq-KtkpEy^w`!7rFB|3!HOB^&K~8o_e(wN1D`P=ix#&fDz(B5y1XMPch~#8o37adT}jjG$5ziPz0PPy$IL)2GfKVm%vGjU3!dov1B(W$y4bsJjMcnynhbb&8OE`{MY(<%ChI*&*1Kx+;~YsrH|}S+xm8~)7yrm&a-m83nLFe86>Yag7?ls1$CVsjf=BzqTa1spWe*$MHv0|6m8Jby_3;~CMqh{1XX8cdl)C&976VxK1NN_Gg{3Q)w>}|HHyywFakllvZdIL3@8iqfOwo;GW&GokP3J!&@>$(HJ$T($QFznd-I&P0+$^$Ju|$W|I9K9@+&XLZ>eBLUEKf(%{j|uR`)qIPNB^=ZLR7epRYo+}UE&%i`*CPTEzd5dxvTm9HP%DB&VQhn%==R>@ay*UvXF;;w7^={lh*#Qok*Y72_IV5cH2~x*^lONj5XBXH`^-zQQ1;kiu}vn4)$uF{y`sK>FQ#A-cG|fnehR9ts$!8+a=!LPi`68`E9Yk_~@dY9IfAfXfM=%X)9B6B4a4`pE@y-ETWg`f=@r}?R0UsmaSJi`oZP0j;3%OxZe5AE&azho{Jy0*U;FAJpHpb{DubQ>%tOcdNSX$w)8N*{n2TMKVH2$Zk=<4!{BP6+mRTePMYi2?!`twVtXC<Q*wS3n`1V(t^bFUjHe$7F+Zb)eHZoPQY@}{Z2iHDKQ-MZzMUFFyQ0?qC@b%W)(gMUSIo(1bqN1hcdxPx?LUq2{OOj++C?G>&e~~3%w_777r!6b{(b!M$6ZV%KKWT<;>|U>tTd}mUrF9S7Phs@4kk&7Ed%?tUKh4;bBpoi59cE*PL0W4W6O1%N%P(7_2GP;9sBeKHcZ(Ku$NCcUrgt>YA3P*rGw|l<=}md7_ek?YON&34>=ZJ_CT$$snd#P(~sok-Aji*BjfeQc6fnaE)K`Oy2Z{PJAAHR)=~K7buXBc={<O$#ho@N*qfg?`SJc5z2J=VYhZ3~9si2mX}rsH8gYlN?{xZO<7R(ar;7}y>yJmPC%l2xcaE#@<@Op;>rK4XgYHb9Hb(3E@tIra(71S~RdN`EKQ#W8r)yre^p3Y?Ck(4P^knlVC3t^&>3u&C2!vN_*SY^WthNn30qVxBV{h?j`f^%-IVTn#xQi-|!$N+1(f78gnW6D3S>5`iE8n#y8y|m$*K7Q#cl%eVUG2s4%3jQu5Lu68d&`E-*%15m^)@+&>_RSo>bnr{E-dcDLv^!vKPK-_wv5j9*<5Dt*}j`zPSuxbYgAmfshPcK9Yc>g<<>`@x=Yh(x6L6no%H<rzL764fxNU8*xqQ$(oGn2$?1Z_F!OTOo9>D{3_DN5&)`s;FPEUXn6HcAa;WOlzQGSns{Q4BBe6ZOl8PT$wLX06H;I|F<k&jLt+w7qCo?gxr{P4$ZD;Qan;x<sgq6*oU;bw{=9{l&vJpXpDq`hrm+Qx9KZ0B*JJWC4A6h*f!!<iZsL+pJ<-xp*<D1dm{nYrQFxnfl_GvnjT8|&6v|N_AE?9w{J-qup4vysF`?srQhW^sguZKU@Q$qE6UsmExdaJ#;wNiIT?47j)O7dBKSbt0!`SSjlc7c8x<AiLXZ`A6y9>}>@o|J>MSLkexrBS_AelTQwdMiD4&-uE2?S@BTfDb@*5;A*38aA?o-pg)URcL5HQ{~YQu9Xa?FsV4FmpgZ(2chOyp)fR{T`Jia8^NPUfwS}%gQMuqJt9hDea@R8iM!!)^a4&Acezj5S4PoiteL#(*5|^j&WGf*PLA!Ha(k<&RQ`2P+}QGmE%%m_aO8ufHY>fGU3mJ2$!G#*w8?c>gSI)QgA?}^JvR24a@=#2Jwmtk3Z0F##eDA$G-)t!74e8$J*2W`VcIT}hrT(UZJM>!rSQdj0X&Ck7d`2R6>kI&_23JGZ{}`ASQ@U&#pOh$?PFkdp%3_<u^Ve$ZSRE(qSe>E-;TT;vW$W+P3_!6K}Qx9FP-4P`ynNMeW*Ipa9W*Ndo%aIXK7#iQ8#%<;4$2-VH|9%0Ff0k0QPK~8JB7GkgpY;@(7W4qE%P!4bYC6Mi1s6+ac$OnN$wf%)o@`2=Ih(MS{~~gK*)YbLE*6n4mOd!@wQ1OBO?vB|*v@d8inMev(bW*PiGJ@L0woImD$$8fuuAMAEVBFBx<3jl1Hra#1dHc00PaOXA@+)M}DF^u@7;YqMSMd95Wp)QCpBYQZ`|b&@zb=<l!!5w63|<n+PfIALC?neSBt<3{x^ZsdEx0MfzS=E$}gznP&HEJ!<@GsDz4*VYBd1JzD<K)D^JG6*&0n`#3LE!4qw*cdwCOCU-?%e+9wtgaK;jtLtQwz!PI85!f{od9bJUC}bFdK50x2^((VLf|aXKY3dxuwDx$sh&`I1ID>87Xo<k0CO;Cc_;Hs$Cs$bhmr@EBNZE_={wM=G<Qw6aHlirmSfTc*FBY#&~;9FVGEz6_(Apjf$|;Nj@+p()uI}BC$hL5aOnj?$kT&1V$8dMhuu=g8nZc{vIGTsfwqIy{yEGb(Z6I=lYY`jFXy@_xQPo#jKaWuXw(EJItRHX;7wP1UTLHYVz$5>r>&kPBBh$?=BPgBEn){s*Te@oY-^B@U=gNR#7?j!eKaN<eFDZblOFm(0Rj6}cSzC7MZ%7ey^B-3=ZQ?qwAvmLwA!KU9y??Qy79&NE#+xBiG_$`RFBZ!V(+01cY~eirUh?_9Xon-;4<HWcO(mT%~Ig8p4jGe&`OtxBVUe8p2o^R8>XMkFl9NfYkp+a2k87qD2D~p)?oJS*R0cTg)UgWkSouH`aM0)j48=r$VZB<M@mAhqw68f)|_{i6$BDwHe{?eXlGtU7kqKQvJ1a%5*NHgqm2iqbhtho6KNM|9VT2)j&7jk)I5u3J04N+QTmr-?h~zaE?=*Jf$~(;*`ocVzD!_k#=>Jhqd--S_3c<sm&zyO{`~R<eB@q$m-_d7=C6E(C&3b#58w;`%OzqHc#6LAj9ROFz_s`F1@7gmv`uQrTj@=b=qz~c@K=#uieG&+$XB-buXgoc?Ush@3$R81S|4?n3O6xtO2Ia}xUp--s_uyJBi7|7)y5@m+&j$UJEO=E#_hGF>=DxHLZnPXSzRli-God00&M%SCw0-1s9X$v$?zU>>eR72utgw46&D(&F{<vQ55WGl2BDz|T6>OD=|x603f;zqPClcab)?nz%+q;jh}WdUCgC?nENoJtnnk@_R7UVg7Lvog%X^W6{TveCu0vUmlwl)k&5$7*A06x^?)09xdKk8P5VqLOeH_LT-${pK;VyNC0_T_la@5Ro(N@aV-oc0XbU`+R);({)cDtrgw)#2l<qCAak8~7;4ZeV!dYQc3iv+R4HN&tUYLeDwqUj%z9%{I+M1tz~kRo1jf+H<lf}fy-Ny&7PA9)=Dhr1oU+f=o;Jwap-^zy;osmq%R?-S@-4~&J@g0@?*eW4kn0Edk@Bn~!{L|!Tb%MjW~q!{-+;M^sfa)A@xt<$0-U6{bS=osO|)-!!ra-R{}gN8ccJ@#s|aAjVpb@y(oyq(^|hFpuDKDexX@U;u<S0Ul%2bGzY0~n6zY0VmaILf-l^mM0vICAhIu@_+a5Ipgb$r?FPMr469Bk9n{yFh|p+>|~Bd9WGtNX}%HL^{Tp);ib#7i=jx_TnM@@P71aR5*4Xv1)Vl<%-hjt1{emnCSTUUe~!>?`T_&#KT?e1{gacOnhcmjoeYH%Nz-ov~t8=U~+%hWGP<qHek3T7uE`xHhcg~pi?%O9D$8hzQMcRiB~6uH|4-{=+UuP*d52Pk#Wc;u>HZUL?SI8)tNikjbyD+{Q|Th(?w!U+$ryXQ63?y>P%Md(H%Z2{j?0Fy)V1<Wwx;iGYY`%f>r3~AfwQS_aooxqOmi<>usW=^pMugKXx4EeFzm(u$?)+pg-~8s~=gX(Oz4AWWQM($4WK0BF*X|`!u=&o^OP;b1Z({l;<I}yvU)W4cFz_wrtHZuDh~b+Lo_v0B5djR9ZN)TXp|-3Nj0|R-vw5<UV6HCfL%*Adl(_{B;E~l46G)j!lp=#D)S%6avo3Qaddgb`K>Mp)57f!?BdZSH#CPZ@|F2*<j;Kkm~E6`W34D>fJb*Z>dp5l?EQ&7~TZf%*x-AXG}<<qlabblc6w{gSEamxxq}Mwy!zIvgol)jhj5Obqn{JaYC{@y{I|5J9FG>8$Ii(-%_m_Vy%`ro9FQH9r3cQlk2H?4YJ&wir2WO;O?s|UikObu;)J~6&VZXI(DbopVP{+->uwI@h%7E-n~S@+JZSPYE{Oa<8H7<DrEL)$&>YF*@?AlH%Y&pyRnPX-0IdU#x-Usxs<2!8K=_MZ<Qy<c+uyZUeu*r_xVFUNSCWv&sKEu3jU=oIQu!?IhIw{)?9wWpga=w(MKWXbMGIU)30$;E6VK63EhML@8dn$JJ*`ydjF^K`rG4ktnBVT`+9n=P1WXU@R@O48nqmc>9?Qcm7cS;UK;G4F0ibW40ILD(FB&Cy!}4*?eAm%UjKPw{p~yx;u*u-J%{CPEE3uF3D!G(rf2`y@7vB@RezrGPdxXvQo81A7RWse?y|X9_{G|}cG(Ec-iB6ro-~*jR9T|6vJiCAN>#e0;-k6cgRa(A<XUXBKexc`Dy#n3^g#~kYxVqiBB|w2wLiGF(xuHUTY%1PxQer)5auq}12z;C)vvU>j-m_Af}?BFNjIk0$rH3Ij3J0!<Q!PLjyG*kp6NUv|2yYG9zFS}{6p?60H1cIn%lR^ke|X^FUs}BD;JRNvD-6#39{G+5_pCo(ye%|V{i|ib6oyD@BgcJ73dwHaZk64S$4wcdksM6wkk&ISp=>pH-fdeJ=fyza@hWDEe>b(`}i?vmUjW`=+&?$PG!NGEJK((4}<Kvm5M?80n9Ob2Wj<Z-BfGU+M1nP+scxybqVeHxm|(`!#cqv!Q6jr{9ylP;rC6q+<@$^?R2!ipP%OEhI)?Hc0X>upWoGU$5YRPwY`Y&o5fxr-9L@^#rC89!Lna~_a81QcIE$1y5>I9pEC4O|JA?c-}<L?><l);k4Qca_XX(M8`v(;Ntcb5uJ(}MqWZ@Moqp+_P`bBiU9dH?e^K&NvAUt{%XsYYt)RiRFk}RL%fSsY3vCD}kc0y(*Cf51I0b4YgRjsHnj_b{0+E4Gxr!FH2DmeiQ(*%a&kiXafL3mWhcwX7q2OTC4D+j6UqY6G4VQoE@K2e1+LP@ZJ1FN>g=cf@VEgg3W8bpJ^{=8Q7vqH6EbVjKmoiIVXZuJD+3ejucl_BtrlcpL?6yXBySSx+l)U!Ox@I{VHr3^|T#&l#$s5S?XXQ2dCdFEo23l&6`dD3dKhuw#!FBsJ%W}=MvXgaz)}u%R@JHkgY?B7|`4iC6J$&~2KDX6`Po1;=!!F^=4t(GvPpg_yGpW++Y+tuO?XI#-(Wq?HUfC-5<i<)*T+7{pkJ`ZVY~EXF=5qhU4fDUb4^P~1S2f#8U+l}bo`B81yMPw}7ib`#$cv!A&->Prq4gdCmRJ6||9yR6Ejsy_ZEw1j&*$YlE*$-HtpBhDVBq&@&^Aw7@Y5detthfLmg|BI`0?*H;Pf{efaiS2wti9jkKIV-{iylcMVoGnD{G-S!osZ$&4X^b&wVS>s(q+h>7uJJ6zDLIz>2`!q!H*YcdU08@`)E)mKI<irE8ATwd1U7rP4L1oM=!EbQitY%TQscUv}GGEdAf@wk?(2uJ^_%9K$Zjt%s!np11!tz|C{v;U9YXTBLq^rShGX<7@W3_Xa+tje^OBJkL4aC>-GA+|=Hq*W5ZUN5BvbfVKO-ufgS|P<G!_ywdv7&1)9UA_;ze17j;dF8!Q`%Q#*_-gT4l>2WwO|EJtP_X}sqogdPtug%nNF+!h_7R~#GX=EWKTXtss9K(AAAYCo(uC>9h8=!-4#Y27(O&*8?W9tL=*>C(=as6K~j(sPpd@y6=$8%Dl>63k*fBWxNtlL8jdR}rCBwEEohA)wUoUk)l;#DFuv`3`}{So+5!YYbW`!fa(5gG27^XffL0}pKExioHhA}d7N+bUv1M;B;Aduj0YmQ^$$Ra3#dFAd5>PYhxc4ft|ue`N*%n;PVWFB{RBmskoTH1H#5fgLW85$kA(yO+lynRU(o9`7wno!nYr4eXD2K4T-;pU<Dzco#KbUzJ__-R1!10~-c@`weW^9ps`13=KAu08UnA!QUI}v*_6a_@^c~c~i0j{+<*@&{ZjJR9=DB4;5<$Tm9cQ%-?G2BA>b(f9o<}t4#Uxy|PcX^6Rm+DVrH{H&*m7LjOCzc~J`tGUJEad5_v3UW65ZA5=PQf9o)6ZErqn^<vSd4uj64zjS!_t;1MTd(CQ(+P=_@r}oU#$azyXp^N-Ff+n`gzXFCc)Y+;HvcN|Ge{z&OgRKC+uX&*B;J-)oX625x*n_`6flbiB8QXKZ!g2>oVL1j^?p0ymwGH}ltWC}CRlOawtNgs$>j%)I%2~=!v$e7@-@MCzJ5_)2E`M}qe9&d{Uiqd4?z7n1&o!9$lke6Ov;Y5ON9=nv+k(LPeVu=|9c8OjdehCn$N7<`=IL196o1?0iD0kI1Xu#sg&+P<zjNhRjrFZ`%zv!?)1=RGk<4{Y>Ve%W43-jwe@E!6r8uaCP8(wNE^txM_qk6&@a)s|_kRA<F6_$xunXIHoU3`z-*bt;R%rDAoZT&%9SB-;;oxiKp%r)8jv7}pPSLic=6mSkCgJ)SbXpJf;e1S)&3dB8oH$h*Y$&VGg;q_h$Co3=dDxmPHp+YU2yP(~qSDbhYH%30<+!KvJ$6`J@pYReB8ys`i$#!Ay|&|qm~j`phB^xNygI~&81im?E?GHj{HLubTWuagGV5XReU<|FuE9t}Ynp%CkFx#NT{YHCyDjB&>`!|g%=%l(r)<&Z9Q{AVGQQ&Tan~9wpK->+`{tOo^6Am`mp#CWNGgu4d_GxjN;y-9!S=V)v#q)OJsjtHy|M#*rMTfg@W6aOJDu<IDKmpR)<jb%;Z2=G@kjd-g)?TJZON>o2y}G&KJOocyW-Ik>-^+bWiwX;erNmnoX3HK|I-C!caV!aV4{D;dH*JVOwGaTQwM+J+<V2j9pKz^`ae1MJk9g|**E8&Pn7tPm7k!NTwxIC>uf(<caGO6JJ(&Di^3$?6W0+x0=orR2Cz{B+#K*7a8IIbY-QhILKYg>$6#$4%N%&d{JfN4uNF~IS*O`9rWOVroa=AZT+VZ9WPpXl<Jc)X3qHLE`+CA3zzu&?){s2=3HBu&H_FahOU(g0r`7^_%I@`}m!EDb-)@d8x#myq{<Lj!9_`@x&-pLUPdWRYyOzyU-h<~ljL&lagF*Y}+TCV65x3YW`>IXW7Z<pRS>9X!S+DaO?w|eW@>zd7*R?;*GPwWA1%Br>HYc+1;rV~z+(l?abXa{pePjMy+9#$5T>u@3Hh^~l(*wr0pd4^G8)RYzP5%*xvHlT<nPY(W%{PVzn-23OG~l#KMqZw{)xK|Gt!7Nm!lxeWS|@1*ozF-Ce@ePK!M%MyJnhGGj-|4zGq&XOoayTU_}5oDV+wRl7vQ-%`6d3_9()L+7U6YXt6#A;zyq$5f4FV|^KWb`xQl<+ga3cW><6<}0xz8VIUB@(@4JdkE+QU$L=un2)3*E;vzX&XbG#7N%>{fq%i4d$k7ir^ZJ%cQ`ZIo1Dcu3UJ>z1ga4_1xN5OOb{h&}6buXf)41TY{U2weyyf)*qe~tIa^;`b1x1rlEkKNa-Oy!t8yQE@$7P=SzE@PX&&$s*6e1FH8!GZd7oLSB1v+nMxEBWa^=aVQ|2wioyp<d<sdaQVG&H3T;U;Fm&aY*a$eG7h*1=OpUw>ocnwaarb+w<ZyX;vROiqrm*1zqtlvj4_Ul$=|)?4EX`c*?^wPS8AK6V89d6!B%7>MslI3&Px9dyZrLYaGAi1IF`zW8=~I*LX%HFVNXH6(<CsI%C>20{pX^F>9s#(;N!|EDN?-SR7kjxdH5|@_UMh!qsmgkjL-*n;F}Zc0*dw0olQPxWc*sFU<hMequF0DxWjgr?;C_rMGkXTn@0XI0dTyJ=CwR2X&6s-D*gTf#SaeWTCY)Z6hGv27V{(xxe4_L;;j<-Q{=szvhn}g+>3m=YQS*Grt<=cfR~PU+}l*$G@KcYkTLvwb%W<zZ!6hoeC)cr+9_={Lc68sP`w-e0ksN;Lr0WRsLYk|NH#f2DZ6cAJ)2a>~LN$C|9X@JbusTo0?CDN2eyjYTb~q=X15_dmXnR*V;z4zwzew#U^OCOBL&ss=RvNp#}MtbAF?Y!KZ7RUgggf=h&!z2FvIA?zWl>zWl{nsB{=N$i>CFse0Z|qc_K;-=6aHG4CPmtXEb36~_4;8wHGUuR(A(Pi{22m8E|GTH2J;q+*;<uQBgAwP4p_Qa<0JJhFOEQ`iIQ{eu2J^EX550C$3X)6G})*lh^y<l_$V2XSSsPR=5VzT17KXTQ?lzthS8q+h<%)7K?%C)M6#9!CJ}4byYnPCSo0uY>lri}Xg7_m=c~+{T>WyTod~aHauG+dzFj)VDvmt9f7JWsc`071-<7VKxq~nQu`2b)<t${K4d1&EmGc73wVv!(A{Vo3gaJWIgjMb;bf!ywus0Yi5su7tn`o1IF0JDMM5rE~N|0*)11I8;(qqBWYM1t1}WUNkhrDLNgPBDvEi%DvfACjM}4pXk>lmV^=&vN7f~)ygipXW0#D(ff;KkKKd0r!fDiyK>*heC0>Tz&3KRe-1dZuujcQF1+h!6m_=j8t29ZFT|LA()=G`Fcw6ZrVibR1qgrJN_Dd?rvBg29Re?alIP#z=C}y!&Z8ME+kM7V^eGo=1Hh}M}$}aGZiQMcR`zxb?A8TR?q0PNp8v@!Tn*1aN+E-p3XN^5j8r&<*Y${Lx*r%6!+@S}11TpqTGiKOl56Ii0ChqhVV?i&_kQN+s($yQ`kS)`Nd1O_N^&0q^eBhOeGoi;(y;5W736s%y^vH%71CM%1<5X;^yL`afi6{vT)>P)vLmBthaqh4n@r1K?w^PpRypnZHyX9E2fpU)pysPTW*gmk#9+f5<)>d*)D>LTNJ<<Xc8`Yil(yyBOCJb@LZKXKlg>@JeEYyy?3NtyR)RFYaryNV1R}Z_7J-i6JO7V~Ze5g8iLl3Nea#nvk`|Ta9p_SVC4lzGQ_!>(RX7rYZ4%$@ERz|ClNxVHuv1C+!6briGJi8YUi7U6FyspC%WhRp%p?YLS4|~IO*I@i*%sm`ep1IngIzCd<&iZ<l@L|Zb;4@6CGpx;xcDJkW@D|p739?EukbhX$*F(~({a&p0>D2jq;G~9l#+#hdLv2~lv7dYS#1FH3<qh~|S`pS{BW?!~J}P|dss-=Mdo0Bmx*}k-z9-Fg45bv@BfIQjbKcu2(~-!XcCgZ5q3Sxm*L?4m)846i=3!oRlE*$ZVpe-e8{9FkSo8??z~eR1f!sXA^5{)5ZL%pr!i~ELWHZuPA|A0Oz1Wl2Fclq)HNkF>h7VFFdL@n?eh3$2_aV4=1Q)K(>phqsqM;4->PEWh5%OS&ef9xzg0d#Kl`NYIROO&g`>3O1Xat`}8f+?GwqQfjij&vUs~hpaRLyV5ahP+tVU7Knb!fpFZ8}i0ilFTxt$AV$18;H4j42M=TP_%$qQ1UBzeAFsW!~E#JhkpHu03F|1}A~fsNQpRuCGBnN?4aHs-8Ub)gi&F4B?I}sL49$55=FcH$6&_-eZCzn#z9fk$}4u^nEh3NBx;;nkhhIO0G>z)}Oh7eC`i>n%Gy~$&9$IAv7!mJ86^-y<jBCA9NXal}^)WOd7dluFfkByBN9a#2-#HZSQLHsdDRcC1I{wXp6xbbQR1;U1w4{9Bf3G$R>1xC2MPw85s13Z3?i5oL3p)Ae)OyL^?L3cC9lnn8Gfba?lr;$D44oWvQ7#tl@#CrB2%y(2i2e8a)E}Npn=yd)`h*7v^zM!+7g1lWd4-usEi59?7Z}zCD870oGT?MK^7-1sk$9_^22<#}3|R3%f79AP)^QAiTV1I(-x@NOK>9?J^C@&7Mh#s8QR;e$bPoa!Ln%!MYL9*(hJIUg+CL;p1JbWp~;R33Y=D<29q+%`aTGDP{DC7Ooa`<%7a{aU|YDzY4$x8N5X!=eR4R+*gg=B`z4iM7tlTSW(bhuzyR=C(b#_Lf52)TSK|pjeBy<I}#UZa4n6=6pl1`8{phE&#|FzlpJ6QGWigD%!ezNb{4jQAG!m`MvZ7gzK#;iIE~h{(f3EtZLoW*0^xUt2C(Iso-789cO+r$_8#>jubfbedwkua!C{MNO1f#Ewfbkl(BhEF)y|zhz!!0$gMW08legO`N$rF(5U7TDkxsnAyY0dICW)&P_R!q}3zYqGjvU*xuW6FVA=UyjOwl>_beDEQ=~rH)WLYfiChO&m>dZW(*<kyD@#I*)+p2H-($`7Ga11(diILR9cD?6(oM64Txel_WDcz|)a)hqbl`-UrBR)PrK5jHY`LPv&XsdhSRO-Acik%=9-TIxkECKrje{fx*s!gPTb=WQo$@bs}nwTOKQxO+EYI3fptOK9T)j3hg%LQ0*AK5V9jymt@xzm-g!NXdufgSrum^ctQgczZ-IzK8_?dIp$s^|HREko`->BH%eIKzDYW7BSoQ{Cn%p6$56YHwAp1iM6(ZtqDemQ`X4(gZsAvj+n|TlRBocC|+=jXiR$7|~&_z`r4_TG;2%tv0N^ZTCogv6OufuUt^wPV<IN>O6Jg0xIg|qcVav;?bHUnsKb{jHK-{V)c?!O%vM7I!?4napm$EuTf`WK9#RLb}Wan-=IHSo%>=4JGmCPlrymT_J`X4sQOE!a17A|tC*eVF4+@)UFYfLlK5a#b@55{fF51^8MUy`I*u8y_P7-_^UN!zrXcMttRxB#DP8A2)W-qWPyrtMmQ$D92zS?+nkT?7fX|wW2|=3xY$SOkpnn@g2C!$3y`!&`A0|x1tQ!EX5Lca(XAHHBZ^yF3Ull@1{u?L@qrjLswo__>p8zxg*#P-xUcv|~9D7e&(Ih^CXPS9n^SRoXQQ;L@jTo07fQ@?61|er?qt4aBn6t!_Ot|3p9Kj0Xc40mCa%hk8<+^h8^YK(u;sg#@$@O!MXSq>h_zHXc;End!5%P>N;|q$pUJE15UCMBx4MC~}Hr1$s(K?NoK*otsk=B|~S1$ar8J%dVv5-(5C6c^R7rDfhd$PXR3~&V1B?cQFLOm>TCj`&7kx|RcxSfkdliSGFO9QTLpjSTmDsC5#eV=JDPQyc;8v@<Cm&W=IZQlh)Ej&+SYQ9CvoodX5`-R}ax$M>pb@s?OO<$$QK2yV#mA=+8{t9@X#R*z(6HP}y<BVBvcNCFr0&P~QJ@2_0C)O0+`XS=hH%@>tV65o^gKVbxrVFkaH$PHCVecfjyQx0%wO(N;|EteTRvr7CpLOV3arOWg(G-TM<=oT-Q*k*AeVVTSdG5`)fL|KE=p6I5AM~%-{MI5D+f{+@XtX^Qj8O5(IYz%#XAb83WWLYT^Y+g%N+2JHdk5~bIUe@CfB(E*RD5%1MN4(%R(+b|I^Dm=LFTQg&2Mp#lZwswDo*byUasOB^Es;ds@@Z}_TO=jK(ma<1>UOO|5b4gb&qCVZOrii0Q%APC$9z`-T$m_1NF`Ef<AJD_3k|D7pmOrTwkhU=Xj2b%vTjJuvV&F_dDO=yPfE}9Rlq<>r?TMXZ)eJdll!aRK8@6&uqiZ9Pi7m?Ip5H^?vNk$NMPA$KWyb<J><q^WfnA=pyzO#lSz2@%9`qpZRnDdKOl-wgby9Q=!T`bKGO*-RQpSM@QA8zQf?n{B=v`v!RCi9>dIUcc5vlcTxP-{zU#bk5k1pyvTmvbdfLYcdX(8W&X4N`>*<mAH80zNpte~T-!8!_uK!;&(q*oS)V7zkM>V~?seb&KR)}v>%P+uf2DgMHQ)SNopU4W{jmkUfq>Jp;UlBt$U2h~|1zol_CjlQ;INdr)wXchdnGR;GhXy;q4>9+fNv*JSLN9Qw{e57CE#$j2&afoz+ddoBSY5%@Ins(-U8mf_iN>E6XFJTPNy?Yw#Lz^Kk`K|?@JvoH3Ob>J38V@m|Sp#_Io}q!Om}sb~qI7BtlkgX)5}>i!|V|7x0r^%%oo|YQ6M@z)ipy_{YM)m#`g}0PdmQ%fMcwK_7A|t55LUT8xHIre!*C<UFRezfUCC6LLPbl_-3$+Gu#ChPf%c%g9rf<?cWVG~@|4fpgv-g%N=Lu0O(uzEk)FeAWZ__XQ)Vg$>!4-FOGQuJDO1fYl4F;yGeh+{&-m1-s@=*USiRdk4KAI~){RwJf|^CsgJ!@bY-ZCwh{*Tfi)49kFtmbmledwu_>x_tcn{aVim>=Vsj`oql7DxW*i?fiZFFvkthvojBU^z-N5&!6;IG3BWA-2oYH6J_r*4AqRR{3!U8OgQIAOSXbXDpAIk=bqrcfld1=N&;ZBc+=u?tU`q`G_;nCfXJ$#yM%+acSqPSQ)hK-F)8qs^1$>$ZJf*!|Vm3sPhBskjuT)GT(OHh$8t@`}kKOeyOzpjJ(5;}^J#Q*W5WYv<jldj5VZ)ZW5B!F!n87Vq@0@Irh{yx*=|b)@z{91c!yKbC_|1^hsR#ZwaZdown7)*ZV^mI%`vdSHCsK025IW3nMq7!5q0?NeSb>7~QVyIgwmS2Nm;?UL-GD|C<>dp{aVxJ_9}eu%PK7bCtjC`KC((fptGzpofLWGDcX+31IOYhj)x&0h*E9z5dX&gyY1LA|NWe20;6pd*f*3QFU<NYVPJpfHI(GEMdxY-u-Y&W<X)?zTc2z3cTr0K0LwanGSKtDSb>)&iND6plI(E8BpGZ?ZKxZ3bNDt=vka3hA9r;<M!)ohJ17MQ<ky#7CX;-Rm?{Pm+VvGyctvx}ff%0r!IQpkLcj`Sc`06`e0C1ta$4zA<9&U=3kjf}0s@>A+!Ny|?Y=KsoG&QVIa3_!2%NzTVr8pIhgn7WL7zGW}Mm_4Tdd!g*O7VW|?ffWDV+`CZmt<1!?%{5LwVBdm!?wqc<hhQGNRmy31~b&jj&@VX8{ps$dK4}>SKN$g60QZ<r}^D~z(7@3HP|zEG^zUv;gBs{oh>eR;nWI;0)9bf;B1JrE!Z@q?3$VQY$E;TlsFa3H1h$tl9t}|O1pXoJi0FctHzpe5>F?*(R%>9O0PQL_a1O(kMZH7l)@z4Ei3^;9u%JI72XpJ^z<`!Y!>rd%v6-bofb5q>pke_@oa}BV=`$;lreHBd=ZD*kb(?eu@oBuxEDAsJ*e~jeelO@E1?Y0**oZ7l(PtIhZ*N|xHAV|1rxc#%R*Q0t}WN$;&NdrQSXc;rF(0$PS;5z-t&%~=|gUg$eptGdN2LjE}cq<1nap**A!h&fKC09iC3`YXQJ0}!iT={0<PXYh*YetAsKefdx4nJfjy&m3GM7?x*aQ&nSkw?NbGk;Vg7V<1!-?%8S20f*<R@g(6LCe2GfZ}bi7mkvd)21?FhP`p8G%)1n&U4_ZGD%AxWmCdVnHIf&@6-=^4|S&uWzywa*0}Q>(wqPOcPw1I(6))UL}8X~iPA&&MnM-Sb?_<$129c|QBD<GJtMJb4bt5xS=jnIC&<{5(6i_uc8})lsamd;2UKKjVY!J|Fk+ck^2S<?!71>YjPT?|WSTiy!4%`e0K@u~T~Emx?)-kMBJ@z>bc>f>CCNC-?MYjC|)5hV$9_`P|3&ef^0Av*+Hox_@HLjlzcWM&f_$kvYGegZMaYf7_4zc}_db=e^V!s|6p{VtW)8Qu~$8eEu7--+UH-KIbjwJv3p(-x!i<b~j_j`8?S7o{K;4x%iPMtn-Wo=kr@U+Nr&u=kw3+=l5UFZFTN^B=cUBu#8`OOq+BB3^=HE_VZp3V8$jQ|J#oJ#GEsB{JkA}ukLAO-RAL?*Pumwxe?Y{)i-}r1})V&_gdX&^ZoZ8pzW0&U`@@L>zU7=&Exkj-{W6s>YUsOB+^Q)U=8=K+5>UA8RI>CUtvfwW5Oq<+qQri*HCy<=7HKv@&3Yu!QJZB9*meVpr_8i_0eHIFE^i`yS>=ZuELIg`U)#TzRQeFPp&_DPYkH`m-89(Kik`#D;xbP*Z5I9mz&pb-EOz@drJzt&h>4d?Y_Gnu*%JD#;!$MYi<wy+`v5MR-)uY)pv>JbvQNZD4ritp}5Ap_Z6slY`^!uB4Pd96PusQZ|oe+?f-?H=k|lkul5f=+b`eh=R9qWzvgMz!MsFFL;iEVc2A5xx3BiXF1^}o!m7RD*IrpWXzFk_w6D$&LV2$C)Xsm^|Ng6f;YaKOs1B{3*!;)$I_{QFPVwWrzpvY$^RMJ)^F7Yp$y0Ku_VCj0eAzRf_paXYQS+tx2l;;Pg)zYDvAO^Goq{b2!h#N0-m{4(LCSsg{^yO6CcM**U1I|)Hnhfxo~iI{*2^YhWU2OefZK0!uYF`4y@%;(nQQBNIqSba9}}b;Wo4_!LX!d`+(x~85M8dgciZE}HsX|RW6d-}_m&r^HlvgP?v;A%1Un9xmv^Uo$R~MhvBJC$@E>LZbrIvDCx8zH5@zLY&Cs#WdtcJ17oUYb+_^uHl2?G;^rUbD9dLH7-hoY8_5M-7idODpZ`5LXLq$r00trbO_Nqq!-jsZWGPooQd&ASyJu#{b+LlLDj(c_iOfdi#n3hqGQ@|NM_yoZEbyGI@PTT21yRA+Pu}D<=T&j1ZZ{<Rs0rNS4;q}~=X98R%?(`{U_BQq=R`sG~GSs3bSj1ka7d+t9&>y@JS?tPPspH`20v2&iBksrsaM~v4L(VBqDWEf9kS1xu2bIGm;rLc`0pVSB=B!Tk6vf9*VA|r3kWL?oYyryxe)p<~HufjrZduIlc)~jOgvE+Kq`<$78u$=%!oJki9zcSs9Zsu{P?KZq4Q*sh%J<%neqEQ^ItaCs7EAlecwn#xx)ux8@K!nz4I)g@xpc6@7;r6*VDbo;Ij`Exkhdd<Mj`Dw)a!lHl_Noy2lrVJd)0f^VqdhvQ}R)<`WmN|&Nl64Mb)t{dtdhR+2fUm*twvDW5dK5UuPhjI7BGNs6NM3TLTWeBu>o;CrbjHlxd*>d;n7&6Tn$}tN|7Ds%zew3l(3($Xy(Gxh@vF;u{~uxo0k7DXx(|gj5$BE?Jl9<fb?!aItgNy5@m~YuaCyfa!Qa%{@yhf|<Z^H?a`FI%!EP5SDZiFty*9@LO=CVimQ67fUwgI=M#7e$Y-h$HX##@2)5c?o7MtT)m&&$_)Mo{Unm<72Pv;iVVEV(_n)s9l5MB#)dD2WAnCZ_M9xZ9768OfOe%$wdkIKwZ(vUcw3pdi>|!GUP0H4K6LwduESDi$<fC<z?^RA)f~6$k)^6`wg5Ru3c%q^26?1S9~8!0IeNx+t@9l_{)zMF`1`R2&H_9`oxi6ZSpdgk#X~a{-po;^MN)1uNj2bWG0ew4W&|C3qLXe&Gab{=ds%1cWy}2RUZyxX(DnT|+ZUnuhr_yR$ARO~rX8s_?U)a&iLx)XCkmK&qA74uz}CA6-;d*8{Np=z4#Rh~u&um3V0F$ecUY?h$o(oq!GY<eo;$!3ds}_`!4XDHGp%|peES{vex~+8SU)TwJz;JTR$v!tC$~{YXwm`q(3!_l`GECyN*A~a)f?97OW^$%>IEN>rf&dKW8fy)-W?95r=P*@Wt2s0vbaRtQSTst?s^E9Ae#r^QdCzl>F8c)q5}*sN(by!3wBY(z7fdOqTa`CO;}?CV@C(T(fbh9tmrC4jSMif@OUr6NJsjCZ`W9rb0wpTlM(k7sU9};u|6=#+R#CadsPlRO_ghShd}OK?ZDi1sq_gUhWmOIw-t#WcE%cUposM$!VGM0O?7Bb7ZLA=FqCLI(3dsyKOi4)0A35Q_d(TG2Jp!-(`6KP1BZ3EWsm3%?Sn@&Yw$<FCAWIwwnpsf8@!M-Yqt;1z`i>&-@Db0b+?aWE5Qm57jRHorV$gn0WMr2OIqKfR*cxgvY^1zyW3~tumKjH2o2^%tLmdit}&8~`*>d(BalDjXFB+m)NTt}E`eW}g32q=5h^=C(v04LZ#$T-gM!ve+RHD(+L3#}VR<!ViS37=)5mU5oB|B*TG{L@dQ_Xzm}0@JZQcetaHA&o^ewC($ik$H$97#cI#*{qHpWc?&v*mQ@m6{3@yXA!d)xunV?h?W`W18q*4RYgyMWSw4`(P*oR0WUPRFk{-#hp{ZgnFwf}}`c=Dq48>ya<KY4QB7O2sj7=}HbR)oVaK_D=92i)r8#9t%QR-dV>$AHilDh!-jNj*g@R^rm8V7<Y1y6QKdG?zkK5p?nZi=I`mSDi9cnwt6K=&{r(5Nm_HtstxUQRxIid;KM9-L1SeF`Xhk^%Vp9IBk1f%nFtfTW@Ta<ECG9<wRiA0o7}CUtj|F6L|9Rw{2%yys=ld_sBbASV?r@U+dL)beOjx1mlaF#5;(j~sWz5K7&C5wHDcWCj}n7#kpL40CvhZEHt;|vWm`6^8+OMwn`j#<+p=Izz>kyy1__c}n?jmqz_)d()&{tzjC&P>*c$WNNCNW)L>q~TK5$q{v^?;W+G{!`uFi>e0Sj)&$HZP0eob>-8~_vWjNvfxDpEAMcA)dVDQ5h(#P0A(X*Pn~waKGm`NNJFt-xD{dgx&uu^~=;Ou*J%)j0s*&IYX8p6cw2avl8L@X8VqWUV;UE=VF4nv4@K1Z<|h=|SD?NWh}d?shLcJxcW8Ju=3zZ1i{K69iH*Oz8m<*hhdpU<@P3i~5enl}JouV{()B=4Et>C~Mb8N8hS>;YgrJ;tkW88!{Q^t+>a0KzUEz2}n5D3K2T(TKLKinJnqSeszR|fDKtM50MTN;s}<3&d`UlUzyIO2#*ro4hiVXZ1)tZsBtV2DI0sqq<!Fs<)MQ?D5@B28{jtK@~#FQQa)N+mvLK`_49rG4O+kD2?<Ca2;($7&!0DSlXvE_oQW<lF83dMVXuVAzr_ol{QUfkGXzP>u9YXRIXC4`u3xoe2tD_nHN|}HmoDtAl)~Mo!~Oi^`mfKrM(gLd0HU;hfNjnIi+q1yp?XVodv)|CuHG*z7PemEizmAEz2Hcj_m3X-N74ocO@Y_U^)2W6zTdYclnp^?fc?H*aAr(H=>=cVzcw{0S>X$*7Qvw2M-!=#MNi(I`&jDTU`YQJpLok{D4QAVQ|-C^A7d5Y`_=z?1{&6Y8Gs}8`kh8<KM9|oAqDlWxr$9}bM+1iQt#AS$sg8fJI5^cmb?FBd|laA%dK(V4|CPN)-z^tQs;VO6}y<Pb++-;8FsRTdbV6Wx7GJP=XX2iv+d7!cc1%d)FR7yAMEz;?`+L6pUrRQoBy=j?^uWW&Y?ONjOMfM>U<|~?dSR6#s8}qhq^xZ#kTW#*xu?j_johs*hTqns`Hz3J@)ch&u06p9{anVVBW|28S_XLw>*8nL&p>s4Q4LO!5cmEzy34-WzMhm$E-)G-m&{U`YPYNPt~b&qV~_&%FkE|kKFIr%-lccqQ0wu+Ra6MUv_SH`~7YoQruaccRs1{Exz+F|B*lZ?&r_>iN5#!p5^QB@?GiT(O#=>qZG~j9x%?wceTHj&F}cB?={r6=Jek&9N^0T^B!=zM8CZU{9>v7x}N-+XZ4-+xgB2Gb31cP;D`EtNHnLbb+k!~=JU%i{$!pn&7EUK^ZDL6hJcp8VmjWNm7mlnz|;8~1lsn^sx;Sl#&ooP^yiq)&vUlvu7l^3HbB2}@nXMQ^!aUq(NZy&)f`L6YxSPg_csJYa&9+eJHMy52V2g0r(X$Rc+mlX(-27j8!}h-i7`HMDRS`9cMSNYltZod5JaNCD&8+rsYNMT^49DX|H(QTWx&q?bFT75@Z|me`-wHRUm2${_k%Ox+Ei+QpbYp=-<ny2fHO}%aHxCL-kPM7P1ImhunXk4wfoct3m-lrb#BU&4Pd?<;0PV?c6v<3retUm6#N-o-b)p$M>UE1;6cy;ymM;751Uk%N$G%hSs?Yzxv#>j0RNCPcW(jUvoYf@cZ@^;TsA1%QZEo*0lv>-2j#hUnzB~+fzz3}b_<13-VYRTx3BQHFiRJG9X%a~yaH}^QaF92i+R7#0Usicp7~xNG8P7oLiKIHt}=iH_*8wXuCMb@uii1OR-qgMO0VnC(S0?yY$5Maf|s$j1n)9zVlHo4H{MxaZ*y(_UZ5blxB@TofzPFd!(#PqVIs?sC9MIz>oH@#v(2kckBAH&xq)&9)VEOa3nxf%!>%D3)cewUWrRkqL*F@I%0!(fW#^EA#cwJT{Mtv@npftX7Fi>ls15uik>EEfI{|(#j9^u?z-{@2XSwht00w(0T+>(a|Eg=vtheq_Uq`u))HjGGvaqjF2VAL@X_8Rw*svVS>WihVLDjeQ0B0T(IaR*hByPot{J(g6w>Cv}EnN5q&5H%7wc1Nj0%CzhAPMA-gC)vAs<cYw*MDOKtgfEjz4qQWU(aW@ts;bwjPbtXSn7%3GoU!1d8BI?pPjJc#2YyS1l(iHCR>?Y+Fi^lxyd!xl@&kiVD59h{`8t!fc~8(2D<~Vp5;2mJ(e2a-fJpgJcizeMlng6Tb$!sx64Cn%uLqGbJ4gY6MV~!s}XX4Ep@pDtXol57@1Y~8F^o@W1SSu{+6P@S}(hxUSHG3(zvmnr7_ddhaBi`m0QJ8to$Hoik{Z>R#>-l9-H^1E-u{g6X4VJt}Z^d>~!M|)`Ibue(P@&*2SJSn`TaT;9{yp7}Lk<glaH82e|mLxTLGP+eNUhd2yuG88E8yNzKBTuOhqbI3s7N0hzZ7z9YpstLsm(D$$2Y!`NN3syk%X{3xs9ZOhA9+R$f=A@=*lEMd}#n(K9UM88N59E{AU?XyfIv(%~dT~kv3xV|HIOL;x>s#1f!yGg3zk_p()2B7n3VdQ|8sZCqp*ym*8v!roXVdWkGW7d-8edbixgw-^3%rF!`u2@TwSFV{7{}@!|ThMl}j;$-7@T~w%2&~J=nwwbwj?G0K`1ToXJ8N$JxQDIJUxYr`2ORf@vOiQM>{Ol5X5J@)OyN8fp4l^B0S9VsI`ETpi?QZ_wG+J)%m5B#-C}X%i7(D~snZba2l&FmnwG7w<%Suz0OlX0xlS<_(;{WMi(RZ^xQb%h0w)kJk&3Unc&*tNk?w71aep3SzvBV-D0%$wNeSTKE6QdO<#UHsBnaXC7uIw(L!I)mt_lH680$auK=IIdm+M%E&^_!#-2-;>l#fZfJOdAX35;3vl~Xz4tswP{&QH(km`S(s0ZgajKPl0FJ15pUyvW!+V(#DrzXljTZ`YltUGDZU&o94W-#`1q!U4Pb{Vsk<O`A{CIKa9tfsD(pAoEhTAkFIe5PKDGqT%?<uQkJpllN7hajYMfcVn%j#ozGf-}1rcjno6!i_K>6kxd6=hq;c6As-CzBKyxZSOMO&F`mj@Sm}TE`_&SCXkmcgi~j^C%i3GJ#Xd2~Vx0rd9OJC^m@jHC;%D{ze$O{l?z(UJ&|91^%zf0*x1wsnMd*uCwO@vKDG{tx9FxE}sz;ubi?v|jc;$<MSM*(c<s$*!AY)z`QE^m1^O^+W7F&I;d`y>WwH|Pb>5OquL;sl{!+4&?^ZF{!|Fk%ac}3`pLf=FEzG%056*nYQycN86f8?ood&Ru&#oKpW5=50ufv0wY(2zRyEQxEB<!-KBTxpf7;8>q!<DWBeI}1m?iKB~o`nsoc8R+FlSd~~KvEv4z)S*wiBkc96{0y7!3i4NSolax}=p!bMuS>BLfM@ig+6w=jYV{j!<Q8xc6O1R3cDi|XopMrqu-KYM^(hgKJ4-6!>{fhBb^j1lw~jV$;~m{;+MKn#RXK@IXX1WxeWCAK>zdS79~qa8?13lMg|`J=18ej%jfn|zN{fWQ+C`)Ry(s;<^wOTT32?FONH#%pb3{cVsky0V=|?Vfmf7w}Hm(zBC1Fhw@Y=e2HQ!_vJxGx2h2ghDJu$dHhrT6(##_J!aDJCp`+K%>4QkMYY29+W@;{P@I*iMt5W0(Yr_2tn9CVMT6F)VIJDk%&TL(zIRB&GpD(mWrHQ<GO4swiOEN|h|1W5igv@~66+B`VwC(s8+-`09K=Lg`*RKT32NArZWc73b<lzJh3UNk-@?^3G|)Zphd=0RfYd%;~dwd5gU#Yds(E%3>n_ukA~S<^(DcdT+jDHLU@7b2><GZpSMYuv50uYDMoB#mj3SuQ+qKlE3@+;0J^S>-H5tOgV}Yl;eEl8On&Nay#|@xzyx{HiC0weu1l=~a^2<bVw*#v`zc6B3#1gkG|`NVZ}Iyt?MJp<8}jz}WpHvT*I(u+EH&_U0^x>pT9;uZXu>6+Rb*#JGtBufJN{z1E*#-I(R%QRB+`MHl=QpP-c{Bc_bC?nT6-F8IHcx0`_e4_^M)8dqBiNHDUC_3n9yKP6-Q=}PhN0P8NY{{#UcU$F!3T?O6!9uuI(w)z$?`Z2}?oW5#bl4|j0E%TD9JYb1=eX15_sN|nqa1|S%VhFx!x_SR#jh7(~l)o<~E*vlCAa@+(+gQT|<>XSG=YYOsx4^j3jfF7>qa1u2`F4rpcpmd{y+<A=9*1$HC#<z_QZ*WW|6cKTcjT)k=Gm^~<GLzFK*?{#8>PAR0TG!hHXsf>{G2Gh?jv8c@OP^ie>eElReWfCh1Ub{M2tl+$M2i*dzIgsAx|GZSN!|s6@B9pdzfH<GmJgJS`$H`?ym`UN8qEw@&63xUoLSTh`bhPp9pYVYgGqP{qBIz2YC1jcr4b!qhlN_QT4XsARKt9e^&XMO>i82;K-XRIL;Y-<X3{{b${lIZeB4i_u->=v~^+nKbERiP^qmZ*ER5aIBu;KCRLv!zx@P$tIl&8=FOcBF$I>2WpE$9`8{c`>oG>bdL3dy$e3q(S9z_<SFd6N1lB6rjIja1cz*P~<8udozgBs+pm*hR=VKY6@%QI3<^X=5j=p&H`Q_(%{jc*5u>)@PJjNW52G2Ld>t;2@d4%Wi&sR)90^h#|I~6mK9dE<;*w1YI{?!TMlUZu^5YPLu9_QEl8PB^O$8&#-voMGCKjg;}_&)p@6EIsWbCAr=(2wYciFx;tzZJ*Q1Aen%wK>ZS^2YVr-a4KUiuqbrF6bAI^#xa`XC&!Zpx4X%=)a4|O?-Bm7VLucc?F9Ljari7`3m56z@KJY#N!&VquBRDrmv&QwX#)l41|6IjAumTqy^f1xr_XbU^Ed`=N62n881v0OU;|OpM(4wYT_t?=X43L=Ib3?J14%(c|I+SSsUs6iE6H(6Hx42VjX^#8m{XxcIWj%+uA;GLgXk_FWN52nSPQQEoEJlzIAJN4Fkp;Tnjs&iR$7=O`d$f#@s31U&Lwd>3|nj5_L|p1CF&L-ZW^7j@fG+xY0DUFYyB}?1_J+LcXU>2{?t?1w5n7mgp-wrB-bK=6R<E;T-ib_v5gyKRi&9RQXYh8PmHZ1D*z4HcYD7C2~w!RI@tMi%`WH*PYlgz7#9sC5Cs8?3-KgGW90)OHdaS0M8Zl^j12HYf_boSFNYHR;Pu|Q|WYow*3_|G;JH{ZQd%GU4Ec#laM9yd%*wGWFjwla}ycbOwfkYazofI%c7Fgm|mn)I`Dm5SeKM?AFeB}fMwFG;h1X|0dD&!s?PCPcZ{^MWawjVKsq#)<~R9WI@Ix_G6oz~0YAN9j5Ie~AAP2~Bi|;+yw7XS<)p5FbB3wKPrjf_^s&L343g^F!%RE_=0o0Jv*t1@8q46u%uZw92wArdt2L}MeoPFVW)>hR-eJDsGBIvz8JlatT#~QqV<-TN9pw|Z>Xi2WIdu30<2Hc5+_&Q9hO9U<cy`R-ov?JD0?)!&YHB5V#`H?E!bbkgw0aXdUC8aZmk1YQjPKHrDc8%llys92c&>2BCbUZ~ZR!N#_6(Thz?(WQbOJNXZoCg>tS3eo`A*uCsmJ}JxAJdH+}cD~H@LQ)_wHF#Zd7QllM>SvtOx*yTzwsQdP9ZZ@|R?i+-c2MvUkg<cVQPVV64Cmdvb>FpF<&?EUFpiN~VA_`H|1y`_FJyhkPQFkQeKeNV%&!z|4La98H?q{DU{emdB=_v?TGEd(Cy3<~nz!<DzfNWD`%5M}56Jo3Orh%G*xM0snHtx^YoWMN1QyXAXF=5>-A)t;;F3LFH)fvgqNw9M%Q;qO|!TsS8P)`X(BedXr)!C#EY`=6Y*i64{#vxUUxx)v$MIDTu!f?Hl6B4_N_jos`EyFLijXr@(L-?aMRo&1cEn2>wSu3fB4xK`ymLU0s1UEVnVYlA}3e5rE^PdB}R-jzD|mth!RI9CCFrKO5u=#sl%A+hKmYXvoQ{O+h1$_2t_%()|}+V;)1hi))ikN(=BU=FNL4qldJ2^&KhSgL}2i+oASNfwGOfEnpn+uC7g~yLH6#+csL<Lan|4o<3zw=}Wu3P|j^>%q6dV5}+MW5a3Al7WUmVIRXc$rXX)_Ze9UHvHWu&_$M>;i8S)7jA)$q^^?a7*Q<)RsHsmuvo=!9|Bs6+h@m9WX3w6(Q&0D|K`XDoIbH(evK02*6%_}(-|3lCqg|xlG1n}davQ<=ELM8_!W*m)In-Yn?(Jz~U8g((nZmj$<JL9jau#VbSaYVvMcsPnqb0D6d1psXP3cj8e~I}0G~_)dT+A;ZU#3|t0i%~S_D=!baTj*!`aQ-&m!8i-wyj`Zbh!>D{!&!>mcjDNtyw}VoiXF~6xF4jYB!xl!Cb7+5C0Xj{$IrrFqVZC@3hgMGC@H`cf9DeyYl~Xc@0{+j0nHO+=W{v<1lgwcj%Q?U99r8t@S*A#1oZe6p`FOTX0}d2IsOf(1S^HGkLGuFR_YmsdzKn6rgKZn_oTS=5SI9n1~B+dE{%io(T<k*%fP??FL_DI?U~m$EkAs8aS@k`$w!4@EM9Z60|iv>=^>OIhBUXReW9J&N7=+e3H)+ak0XvByewApSVYAp}o$Zas4zE#P!1_zw&r-5289On)1Nx;tBf-NsL{wORQh<xwC6OZ3?R5qA-rfy55V}o4pLa`6FkyX>OeiCazc1T$tk^Ba`x&wo&c3o(<Tc?wrVR=`PagOC<4kG3RueRGnn(bPc$Ci+av8*bA5&k?H=2XK?{?rH)pF!hY*t#Qe!1az%~XiHchsa^TeQ-pH++j8?ACD__rrfA@}r??h22d~q)@PD<2n2>c7U|Ew@v=^1(&wAk0QcD6)XY0q&V-O?35al>Ekc(<g@&5}{Qrq=q7`a{}!%NzL~X}4{Pc0wC?JnNi%Qg(owWX8)E(EaCVtVO_p7sGEH2BcueeK%)-oj{JjJ|<pkilFBwv`dS6-Df?Okq-KkcdZY~2kVLeehJXWB3JBI9C;-eV3CTRBZIS$&?RdZAO{QFGf`@AjC=Dj4_3CDvDS16>zUtn)@|eIWP|Yqc{P9GAm>2#PUOUo{K%~Nu}Jgk=3$;Vjr14X2XIa=Y+T#p?we=Hv&ZR%A4@{H^qAIp0VgS(Xr6tGQK1pw$!cyyhP%#$Jchv6le%`eeUoWRQ;GRxQTbHxu1EZlM&?9{8P;#LP>y-5fNPjK$RW^Qr2v^a!F&$C#y%c}mkGcWtki^{x*&Y(_huUM(&1IN&Ol~i%@5RylDiyZFhadJu*T=%q`WbQ^H5_t=-`O5YDyzH4Okbj$h!u*q|v0{I36yz4j9T+c$F2;NmKQp`%Xn9(}a0?(C)8c!!2R!OSG$pqFghF>f4y&dOmQ0JukYB@#HG?<Q^F}&LR`UR^5gK_rXO7e(Ix@Px(r}zeEMfhbLIK8^4kfJ0^giZtobQQXr<S3K;KoiuQ<nrD^zVKrhkoSlR&xp5WAH*h2xYYU0)M#x&_sLMAU!KE$YC9yRMykaZ!j(OG5zwy$Lel1hNSe~MNT7oLsdfbpNu_ZDfAfOubVz)caXkgVp<pg-)q#@sG_n^cK`xh^2z4rm`&F*Y?_=9Sy<_;dr^@=06Q%`ijIc5Oy5xBPUCdi@>OB*@nD&hj@qV%<H92$<^w=j*HFOqa$i@_Kj<#~S7v^Nu`}i~WY`cURd~H~n{83mHBeYGJ=6KkYBhW~ga+8uae_Apg(9af8kNZLp`TzuRHdSAVv{3^mc;uEY6;-~OH(;%tVRi0{Mrl)Kg$?8a|FeXoY`D!pm!`9bCJ#~VJ_bcXTQ!!gP5*-+!n{(Fr#toNs<+U&f`J!Rt&qm9S<nFnHj<%Jwn9rFZj-~@Y6@c%xUi~ZkXE;b9gURtVtsEWA=@s;eyoa0A~1=d5~?}yra@w2KE{=1D_WyEapuhB-XYRZlIB8z|7gmx;gB>BoKIY`Wt5Xhwgb4--Ye2i5H$5;h{HWXXgblRV>6tAil+s_(iV?AKF?%{iE#b&gP5BVhmZ9^(|*}>f1A@4-RLTu$?hQ~i@vDrhO$-nYQl&xorww}#cL(EpS*3_#Sr%-t&>OI<qf@fvxiJt?B6s-xiDpo+*Zd}Y2wy@?HTsIqSKe@^?5twJ<k9j64Z(#Mv?~sesAM#4VuRIg1myEWZN1n;Eb0v?wjxo=~fa}kd4MCJ2ZaaLx{)$;}bGU!(ukeC49~e)mY!Yj4utl`w^g7Jv;VXaQQ2sC<c_6gH{s@|-Y%ydG^ZKl8I+)i|x)_@Q#|<^YPA2)WeDv;!)$!V5828<1gK+$vnV+d<sXPoZJfCH%Y&%&=$MfyRnq#E0?cg-l95V{@E6<}^H9<4vql|eWkNg-BEPvKG8}c|*o{757VX*mpUFZIF9XQ|PIzPtwxctl~aW%48@WLEyP1(Wyq1NT{=_|*3IbQF1I*ua-gfr%eV9W@9e=-ls2lKi>+midEKwF}EU!YIs8nu74sZ4nbeAntq?3o7~#438f%?azV*CK0cGZ7qZDsHN|E~_}Gt+f^z{yX~pQ>TtZbBVW{gmMCSL-#*}rtmXi&A6tcKe|ks`XjAom&}oFR`Cs7;mi&Gj<yb8_jTY<NovW~<Fd?1`5ZRn?A6^NVELRy`eDdRsU|^0r<6_a_`5{Z_oVgi*<|0Rz_nF;3c-6h-9w!xz@f@rg}!$(DO3+Jf9W6jG--l9sR2nEUAiN{keGV|z7ANZJg3HWA{u|?SuXQ|Bl4B+^VXfEtUgh|QAJy5kpmnJbZknBI<5T`T0{%mPqIj!fuFr4%?#@w9SUs@+<4!I6~X?4ORwsvFG~GkbNQicF4Ct4@FP)#g75EsQ~@q6szNJ{8R=kNsL6qcz_mZ54fkc-sJD`3Sow#bE~&Kn1aQHYIcAhpZUWa`<~`tjz(EqYgwOpCHYq27xn{@<{pvLJ>`oTIO|n(3=T!~QxFeoXY!i&zwr@!aoFBNi=STD@tUHtSaL(3UiApA6bDqlHm!g@y!CGh&e$ulzpRw47>z5Aj@d)Oz+>#>odH0b3cMVs5xD)fEXi4N-<bXBF6QNDemy|a|3ai_uJ#gz|ndGbn91J9s6;ap*H`&lQw2P3oGDvE_^DFn1Mn#GkZs!mK=11E_i6-o#3=K}U5xJy}JY>!6BkhY8F{7~EEyhwN8vl@%ev{h#7!rWgEr)07p3p8xg&s(81I`7QGb#^&Z>*5Hum@_F8SWBeK9Y*hctrHHA!r-8L^W_(t@de8reSQZL=?cfl%j}>W3h72z<FD^zYp(-eMk8ua=I?HFKek05oraicmM2L^&9ZD<<_a2qz&%Ci|q_}Q+V`Y45ZC%auoK>hdDTis*E|4&F*N{IrpzYgSDoBZ!kh(ebn&G9l(mGyg^@8DI-y|Tg<&}7rKWXRso3z74~hfOW?3KAIMo~Q<oYu0b|o68@Sa`Cohbq6_Fiqk(0D<G^upJg|6#I@(><9;Ow#u3~NezZf8gL8P-Jv@=N;Sc1R*W;YTv_s@lW4ZTZCPL>$};%;RF@xQkp1b9)mY%wApNyj-z<U&7qRj|$vxA81p_^=j%hGdqAg4gmxP%sr<o^9ao3!fNvz0TzerpIL9t!l-sUQ37|B$H36v0Bh?M<GGvyeRQjxQ~QZ18sx6Rc_t4IloI~2vrFVaZ^$QsqrjAC*9`Mudf?yDLg%$igX*ebtsUT}Iwz-u!5+=~+V@0_H4fi1ho2MScfb?Ov=8*RfRDK-53WAs882-<h3EMp$$a{-jo5@wGeLxpJ>yxC<krl_KDb+6zK1*+^DtZ<8FWHhST_|s_iE<z+PiYzZFd%o)Yi{Zn;Epyy@C+?1!QItKidzR2Gxp~R^(|bsGz+IykoFwpgkpM-DRfpPY*bLP$kn)NRmy089kO5yPbGeFb5p^Wz(Q~G4UCHf-`-<zOkj_Y00rRIoiCU(pI_YMDnodY+1wFBlH~Tz(X2fc|=Oq6VC&J@xo8|EL2E`C{3F5>l<xKT@1Y}MHu^ExnID;qtGcfOx4Phv2gO6>`P9q;*Gb(%oAk8jT5|HZXvr7xc<dQyDuxO%qeHN-l1)o`n@jEzrAbgGKeYGwR5G0IT_jn#}M_dMH{LIyneyjj?(c@ct0@iQ&_pM!(7+1>vPWO3UmUIL>`#|{1_Gm=DuVTcvd!W%(j%UE@%*$39rdZ!1+<-+B6_1HQ<Rv-bJH(86g7uf$ieqcb<beI+Er+aPL;Wq&2?-FNC=)o|q9_Q!by-zana4V2t}##nclX#^oC8JMxve=FR0LthwbmCEtnyYvx@ujHz#ZtcUgd5+(B;t|?e}dAy&7m88XLG39mnLUpcz-s7n#QfB<P$~u|CwSe=(n&JUGFU;)$RMV8l%qrYOEABh1xaKwNg-Y2q^hERS5$6(QYzbU7;#IDPDC2Ch^x7J9<GIgCM`0hNAuCGW()SQ!HFSD{=Wizy^s8h17^x#xPJ+4v`QX22VlH+9%d?R#WU!F584t1c3*ZO=hYC_4&M?sK<6-VdWLCLW2wu%*s=ukGgO1DZNu1w-x34fZG_=YHYvHBp_Z>}*9B@F1^-q%>JZoRe4PRW02-bR_5w!a}%ZRS2<vLgck{i0kn;F`DHnOkgtk=E#P3d;zzGq&M&5p^K)$6M#Zj3vwNEu%NCyzvRondaBf7FA#RlMz~A;mMsMHDORivG9Ma{JVtAGa$X#z`=?^A;GhWzv)}=Fz3xEkQpWqoc3E-k5<Rz42adQqUXHo;ffdUQt~RzEN+n2dm^=DpnLQ8{dYaSOH#Gv&cUdLYr+FyGz^BcyER|&ZFRtVEitPONbrGIp*os-I-66Z^%isn<MIEw&SLoYdk4H21N$bnOI{#(gVs@Uh{5;{tn%m0cH^q`=N8;!FuE_V6#XZ7l2*#)T^#AImtZ2exk~bk?0}X707zx+4KzR4Rg<kul8H%F`c}t+|Bs3k4PZ`)?p2eFpJEW%$_m7PHvQS0#27i4yQ$gwFXs<whmBVwY8++O|c3!w?;cgq%$L`Yum5sCbQhF&twu=HyUEU;@HJ!IRlKf^q5<6u}3?GK^tWYH?fXKRu?xmNv`=y|5W#_GuRh$BVoUJu<cnj2l;4S3(hZc;zlwuC9gVI|F=8dH|Uj@4ekDy&7%Eov#<sm!%*w}ZLkB3aUw(Sk+&fa<M(_M^ZtJQX0zx9Tg3bD+sprp%_2V!wvxZ)dN9N5g(W}#xvE?bHgNr+&j1<i2{!g28gf4J1@Hg+tGz+xY*?ya(PFSCELAVi^-#-<u9sxL4!-AltW^IJtZjy|eF<<tbuYj7H&T<T=40rqqa|=psyC*pA&xm4uYp@(ud)JTSX2y%szq&$HNuDb6sI9JZ!y6b5L4L|6u)kU+GnapIr32vxN@iszEQCjQ>@jlYMm{HoC@rRWMJ)gRexgm{0aF#ykg7%)~9fX&rMZx+{NozD(Aw-TJA#)G&^9*4qycSXa}$`H(}|FHQeK&CO1)bfLhh5cnx@EJIMdVewqH7qp$>CozG`K%*j}j9sAaPU~Gr=_Bzx|PsiG4Ph;&cf2<w$&-i`z6)RHCv{iduKWempudlFazm6}yj{lhb7{>iH+6QWk8F7_;AP$08wAUcdzmz|QTJZn;v=0n16Pnek;~%*e_mdN_uiu>jg{vCw%i;Mf?a@9ko^QGNZXY-fyghJV1Nq^%7(-&JSQnhfb)sTa#@~s@I4bu|jbr@$r@dh*9_Pav=c*?9X^bhM>U>ibQ*!%Mxgln?`KqzLUXSxE{x#2UV-2@|#`8UD#nS@qNQ1ou&qsdR2e1abyDZEa$8#R<5BtP*&un(jaC?x`S`c%VY9!jV{=-%fa0mWtu9LL7rA1x5`$7kd20T$KmZ5fg$9(FoxZLFg@G9UOTGKvg$dPM2qyqal5#*VA(aa8kQ3IZ(j@0Xv>%gBU0IQo>44CQ$coKc6$&Tq}GAYkd&7+jLh=YJ<xMYX*$DOej+`**&%C)xQ$IWZ}YlgK18sILv+rjv~-HP~tqsU9-4LHr|co2ggtq9_@2)N+O4s)U{&O@VUFc(qQaw3ie<|1}4+?#_Qg7FaMHK&<>BwOqo#f{r%X8Xsasrx_xH*%hzN8F9rN8_#E?}T3mLgh^A4@?WNP5E+o+^r?dCtz^?!hF;<4X@}@f*#@`zj?$Z^k@QTXZOM(w&aDujQpA$bvy6QBZu%mxv>Y1*IlJ0od7xDgdZXXcn@=1CTQ<3L}qnI+PWc+OeZ5IE9%6caVNO$zrpu_f3^FI=<c`S*#|66?jXa>0`Xkr-gra$sD<ZmUl3cEX-iVz`5%77p8#7J7=v1{+eS2gBJGPMwN3yoH~_BeJ%b$Jj>8PFqa*}<Klh>~2fqPqf;IB%y5W6!_G2GwtYXdZ9({opDX%+5&0qrL1CTY$A?Wh@{yNkMNG*IGm9)1pp9yij!%*v7N8hyHQQ+bN&|uP=SfBllb$4NY5fg55O?vDYTnlmSxm5}kCv+^LqPne^>Zz{XP?y7+;5!F!fllro;Ps@Muedm08IUij(a2LAu}*Uf{mOgnryb$%;CZ?`>#|7+i9Ph$RCAm2(-k-;+8?6yXew^$S+@&=XC#lhhrgqQ*XWnq0Y~y2DI}XyE`lp!DXA4v5}8|GcWKIQXRHSnBBw#$37mXqb(=sZnnxsZ*@UzF>gj+8dlCh`x#EqVQtR3?HpQA*_uZw0HBne8U^l>|pVZI++nE4ZFn=n!7h-;deb(@}XoXE24|6S6+`{^bfF0vq>>q;Ow?tc9!x}Ky1kjyval+U{K5oK!j|}i)P<7~=EJN$I3?^obzDdAxVXBoF>u&{O*5<(R>4Z!@<Hm*16RORc%y!*C%Wu4rdeYDt?TPT>+C^*{SsZPRC6C-SKU!$VnugXa1YC9#Y?kZ@0gmXGc~v;{SU(jS#`Z9sJ2IAz3D|GlXRD%SR(TF;tVig#$T0v%t|O;zy`!$b2>-5Nlk%6<7@O?Sx(maVX=ZlEfd73`b`etdr;&95oT-7#g0-oB^Oo=))^Sv?y|{z5u-AdhoOX>5bEJob0Q}t2m8{kV;Cwd)$-x>Ic!GcSCNgAg{hqKJ%vA?-*<qfMo2{fFg?q#tB3P%u1xb?G7eK(i8!#W{c}5e%Cz-echj6zEaAnEekBm^{YR{C-+N5?(;O!!h)`qCMm`%#6X#HcxijD(^D75NEd8v8!4aj;)J+ue$(FX{eIn+)Q7F*XHk?(-7d44o~E-2Q7=slRDtnOH};xy}FE(9O@`eBVc;67EifoBnhy}3qzqagB385cY5JMcZ`<}Y8^4EHGPMY5rmtXRXYQefQ=B0>vxK}#aWZas^ud9lJeBN%VUKc!7=N@Nx2<<e*RJJV|}wdtK!Hx}AA8XXH8=#fOfA#koI<Qcv$%iw4(eZm3TcOli}Cgdi86?3MQ9_O{c#h4CH)zBzLzC5QiGN-&MUL@)ZVseVLFbv>qJTb&kg1#ef$WQ!xW#;cH{JgW<M-KTy;pT3@;RBZbAAZL_Vff?lnev$#`;xQj_DZe!icL0yZU1fXPmVsz;ks`_4ox?FHu^gUtbZQx|Iq8N8#u;ws4u=T_7dwc_n9$!_$b+c{|DajJ@#DXA&FZj$sBXa@4I+2<U)1B{rzuW<&P`uhvn`tMJ(R)@AZ&_U^#Gw6Xxf@wf_5`#iwSOxBb#weATw|MxWy&-}?{w;pm(EjWb{!<spwJI02rt2F~!WKfm`xRl~!+hAKWBv7LG?0sCRT4E8+RhkNwloC4CjcCb=CohO)&Q>uPZ>NOcT!}P~?tV8Ucu<!iPgOo1FdZF@^o4~QL$6ymIRF6~#`zRmw%c0jfa1Yf>wZtCly8~eUr-k>r*y4Lq0OMH!_CGD2%7yBg3dc<}TP}Rn>ohwgm`DAB{gglUU;UKfBK803g=!ByP-nmNJmK)W#Bkefq^DSC!?I~CR%R%LrboRr(_XJ$;tG4%t)-Y9GXr~%zjpt@Ka-)?2t8DRvG?z};iOA$g6zL_iKcSHHY%^p=-vu;X|u^6dX$fOU#Ym&vHqXbwC5l{W{=wEZr<=x+Bdi+@ALgwA3~r_9D9np*k|04t^1jYvfios-u#{lIfH#rXN?bXh7WmhOAy@qZtR=pzorI<W2m|=KrvMlLiOjX=a0|&R1_acOm!H;YijeUvB&$@4|pu>nc+8c7^6|QSwpbLCj728u&=pn>(|V<{Ga-LN*VJrGZdfgonh%>&YGwAw(4!Tz#8I9T<eyqm4N)4+-Lu*$J@8u4rM%7{Ul*Gx4{b6wq^h9PyXoDY5uW){B!($+<&qiVDCfj_)*gPQ;Y-n*^BO~dbiE~T(exs%+<GA4U_$&Rs+Vuzof-iE{e)Uz`nbx-+FrW`)4N@_VDRZoBJi*9e{6d5CuQt4?N^kHXdiLhkAvJ8}d>&1|Iij!ud?&yvf_WiF*_H*3(MmrXcUumi)TVkzc(A{yz(Sk3CL5uu1cnn_>@s>>;NGUPr&Ss_lTe8P-?M$x!EVIo4uWKH?9?xP&#<p<Jli3F`M$`LR!9&Werx@lCdHvF3uSY8m{@QF$73SIP=_vD;v}U;FP|6?{F6^)TsIj*LCTW2ico>UH}4d>xJ>AIDRSue<S8^;%o6$NQULj>J%7Uh!|mlil(25Z~92+z|DO*I6EX)6SRjT4Fy{m2<OE@evddD*jI8(7Ydq-e@G<>y@kcF2NiZ`!y&q4q^GTM;f{Jt;$8xhH*Tp93{oG8|;;a>t|Rm*c<I-VSd1K*~-;WuTm~~1kbrf+2~cXbYoqwoEOtVb1NRPTh6V!)LlxOb59#dxCXd8E>AwNe$K9d|MF>J%~Qb2fOgz%NZ=Sj?aW$FnK27@b#jebpA}WT0WP-<EqP*Mdh>XKKJf_aM6+g=hWP!FR2iOEbno7Zn_*otfi<$Vo0gA#t9Sd-3mIu%*mW+PZqEVj^N4?@jwxlMmpkHO|F3muV-BZWg|Y82L2sEgt3u0<gT}fRhReN4XKwAHN?Pgc00(((mlk?)DfF)8HVL_r=%LUiNgMQD)tSKfWLlS>4C9N9_04P7+75e(v;gU~@;S3=1~O3R+V$qgMT#}87?<}DFlGv~n`-kmFvy)6H#>Dsn8)u3z_yu1s~sy2z{%bUJGfB|eQTFKjHwf7d?R~)^p5V8xAF~R@CBh8z`X})(KTS{Cuz_$wDlM`>(y)4=(`ZStv^KFMZU$ImzbtY+i$X%2-$#6D$R<m+?Ujm*Ih#y)lD9)hCIq`Tt|V>XGx`R0>FcSZ~YCZS<80I#JIG1GuN|*z9z=}oK2q7WlL+|n&bPicM5r5b8Qv}$GZ2T@+g}64t)8IVmyH{U-F)>RnN6my~<$00I&TBYD*6>PPy{W(S){%4!p%Fqs*aU5|Ng-<tAkH4C~?V(C1>5v&dTOX+%?xV-1FzE-H+9FScGRUy|yQ<d$m!4?pB9xAw&CN^Soc{n|oYY>Y)MFbjeeDbxHYXiF{Ol`dA~eT)6mCZ!{f^=;RZG~@nz06Q42-NM@5?wVUG;(d=X%R4bEw`AY5n(5T4(~!V)O%~TgPwqkNU$J)!%zXs9S>XKP-1FW&rPl2lVa*3sH%sra7Wqu+mS=^wcjblbu<`}=2{xwt)F%Dfc55l7d%zZ-3D#m;&hXqYheTw}#l>?+J<N$+T)9ElRCjr{(%*LFoMn^6KC-cA+I7zy_ft;XG7C*NYvgARd#14K&+K^Gh<$m?g#N^j<~#PFkxp<gjIzt^8RoQ1fwE(LzGZPR@!E$hszuUVmg9ZBrS|M98@i%chpX2oxTa)WmjRc+!}O=Zn9h?(-|Q+gWL818cHR1zTdV!R+*%`yyLHr1FSW>_FlJX4`)w}hk!q)DU=;5nTHFO(vk<e2RYi?;Shj-BILu=b&NVfD^rttocNk|N?Equ$quep86n%Fb1eN|aWk=WH{eC93;t&FN-^R%m*4G;3!xq-KnKW7-HU3s=^UBwX54^A3_Fs0KF4LBp*oUmBrqkV#N?$Jwka%aoD%jifyp4H-wJZvdnVH7ZOx5|HT?#>0!XaVN6Em6A7vO+*slnWnA`;wfIq7V#C1Sf;=piR-PT=|JW*O@HX(UJ+@op+?|KvAiBiOYUoV1uTl1J_g_P!R?9c2><drUtHp~sQ9S-Ig>QC&J%*MG+W=VIS@UB+o&AkHOTbvq@oNim+8>O8@ibkDjy^BVj9+<<F?EYiq3TqoMqtoN<1jdWLL_FQB-oA8zkX>~qru>L6d!1^;@SgrDpfeStjIL}P=(~0+f4E(v?HN@RnK27c0OUUWni+swBBH=8!CQJ&dT|!y=5fv2l&}lE7#a%X~k*|0KoYqF$PHL~GUXy6t$Y)7UFFP*7v{xA2OIofK_WUC@{7)F?9s2-ELqBaT*@9e%Xf3ye<<_kB-+dyVxLpcf`A<Pr242l>wBjMtI?3(RHR$PQ?zjv%dzBsCZEERP%;};N&Y4}fNe%03MH4vz-O%W4XU|W9R1@rBr1Ctl&s1C812&&}7S`%du)dCgGSw9FGnoLU|M=bytP42C(KojzZt10`!wp4b;@K{6eP3i&`OYiKvHqUae7;+`32)?E($E`>W0OtHUJ}p?#^pu!G6Xr%)3)0roOblc#g_Yo)sjY$uD?Vz?qM@ybHR+uWfMH7D?vN#8<5!?WcuwBYp5x?w5-gLXQvxdzzlan#@%Pg=2+Kd9ZgIY9Es23uFYzG^H#MD`^IL~EGig(&aE5Zid)KI9=4Xd!lp}EO+snhC>56(twD%Y^_Ir`1Ssf<v-LGM0E5^!SdZ5UugNylZZ^}X@G<dRlM#n!1zMy{br*B~1lRcs$So0SC+rd7VZ8yw2wVr5f_BMj7V{S7&Pt~6tfNc^oN=VvfCtl%fp*YlYgorLT#*DmkFweaor|R-yC@We4ZQCI_A!_CCH5n8lM<?@hJRGO?L;>J&wqY&tI6}=3q1_$|BJ&J{z(e|JvPb{_HW7?a+Csf>SwyLM;T1!ePNShIzN#dV-#aL)-%~Cx@7DN<W<1Q<{!r1T?Lnu8MME~cYp35JWoF-v9HC3TLMpmJ?_JG_2IgFUdfo2!0~$Eb6pmjpLvU%ws@6IeU|Y$SLYmSnAC&)<rlli-+ZWETX>n(kyn*Z@7)KggZ7Z?61d!QtY4z+BI|{fV(hlFunyz<kAH%|wN)ScvDW{7=zl%GF8);SPVsm3;mDzs(aE_kPRNzS&piIoPJ#W>$GUc#60o$1{es~8um0)S*BkKV24sx$B7V%}$nW7Zw=fF!BCPp#S*_q%++}QH3|0N8fn&ma=S_Y6>MH`z9rjS2h?(Nrf9i`c*u9qffj15YB*k}e&f3A}{d@em^>y!KPk0rO{^$vhapDX6yv|EH*7`HCMu4i@zE*q=-V@-xrK&B{EiR`W@bH#7poyH~EjHvGbm%MW&CjGE=XfGZxG&YO&nS!6*eHTR0~u>{ugdPgu{I9HK4NXI`r^WV_}l%e`j*SnaKGProiBd&Iw#jZ^5yZ^pU+wai;cb8m#yOS==WZz`_?^}5Bk+#9{X1Ob5+k|s54~fD^_=5QO)lv>F3c0L(6rh%LCdlu(lAj*gcvQ|Eq_4@XOpy{LdnGk215AJ!AQ>3GRpZ0IW%YKHERs-|$es*#lH?!|=RR?VWV5_$9i6t3|@FC%v^Gx;L)vRiT`?is#>-9V^)#I;@olyf4L?I)k6yR<(NCp;ixngAIx2SGGI!w@P@;>E2Ys!SXtA9<eZQHtebVzvh#JJ;wGOo`*c_62;<z?`>845cnj&njh{Sd#~Nzm+j^QYaA}F7VaUm$u0h7S9l$2@HkQXtm-W74kpi7`Igy~37c#HBi@2ZF-wjVGs^wYL4C##sln!9dzzwOG7+FF9E>q40#A?$Z-5ILfK?bkzee)FxJ_hLvRo^c88P1?y*qQj%%Hc3XnmR=HSI;*M*AR~Q_wZ+;VWNJ?1deALQZzJ`-wSS+$vk%)PMtScUfHyfK8eV)&L{j8`szR7C4@$bei<~<s~x94bG``1|<l%qy@fX5bS-t6&9g@kB{N8eDP~v=VGe+FkVnRtJMB6$z%Flz=<;CU)()nUT|ukwNP}xQFsE{xXPH1KA{Wn%Qc?_I_Ui}6cX6&dggP<qu$j3hiabf>$LZ=N9z--e%xTKld$O$uXnwj<6c=^w_Y_9a891|7WTY(k;Y64UY;YsT{-C@@90nYM4kkjU$91fKH;u!?QfzrPg~nFGH$}0m%U*AC5p>Bb2`tj{5Ke1$8G9k+#2xiC2QuyZ*E)4xErxz3-f>V8+V$;J_T$An8i;DPEx=zc>Q}MV7_&%gQIEidxKlo8-w|kMvXrGCqK&XsaBsu3wXRJ>!dd?)V`Ui-N{{}r#p+E)2fa!E;c&qViV|hbI`AITyG%LFQDUfz&<_pcm!R12hKkMJ$!n|c&v|`3jGRPS5vlHqc~@vV>9Ok`z``6Bj<d6ikMSJ>NuM_oYk+<qdr(X*cjnjb=JxbxW-3b4f15P(OUWEP#4#1^iSz<)W>U83#_~@{;Ye=LAE`gl+0N#Mwz4PeND{;+D^j-`V&SOi+Xs9IwnB<n|~_o@SFcY*-#e>1B@|83a4slntdH|Sr)2(>?7AHc5S6kRX;>!6I-czVJYfg7yJKNsDo&Wb+=R>zm<wf+E~lHk`?v<kqbG>fYY9@Oebt^o3!y$PtT_qvyt)6;732iy!Avk9qcKEz25>tw{$|zUemP#So0R^IaYe=>zHrub0PRdtjc9%-};cvNVek7MO|0E<?BJiolv-jXLKUOnh^~#Db~wl^Cz2FSFb(If|gDaojRfdrX)D*Qs6q6$2j5xz?7XC|5``yJUpk-mz4~<b~46SmuK~iSN2z};@85dukft@Ru@jPiTk`0@1D|~w}(DN-3jZ12B<>=w3+81=>PaUgU4Uv^Hf0--~2(!ud_s4gtEA|zhMQyG+ULkuCwXRA{*d(E$|tUR6h*P*ww3n2O2V>EAyEjc^YZAPbOe~j(UrE;D5?@{7>)~o$5R*PnEGy7;;?B!@VIsQ2P3JEU12Je$$`fSM6iK2hC{jk2O=}-?fMhO{@{O8rN=s`DsHfVO1L$*XEr$=&K4QptqLzy{T&F!mGlL<~@S%;k*hvzQWjIXFQ*?ITwp9;;|LRy8#|^^NuQ?7}n^;z3__P$D1>rce(oYyvO$Ec`?2V?ds}xO<*g1?`%%+JHR(rQypgni}YIGbq8w?<9T10I`8q<^J>40cNiDikL?!Di@#GfnmXL8&S<w^%f$`*Pr-bEJXw1tfq7ifeDTY8uqJUSf1p1F<^jfqaf9fW@SboStGC5-f%bm~Yxlt#`(<2soNN8OpGCLQX6(@m$XRN8s_c%z{((u?&QDCbwlDQA=$^>o+i}X)rTXpOAKz25--CYq$eOvfc6>c|%=0cZ%e6(ZH|`m@bDbZ|XBk)f6zy!GX{7_EKRoPkA>i7z4f?y0ot*G{GJL+F?J0T=O*@<L54ki!cg*in1bf86%l1@>r5SzyY;D*5+MazD%RgR!vnz{aZOuNhpWz@M*m!OEiMB5|r+{;=(B@jiruOgSme|Ks?^aS<>k&6gUKgvVuCceb4fnt0#;puFC|540zEvCxR@^hpJ*m4V-j@`(w~_CM+Ca;LX(cg?*CK6p9p;h3_zTDF(AI){RLyZ{e(}?_bD6Jg`YB^?ujboE8zTrZV$PURUvm3aQ=Pl;9P7OG)!gnT+GZ2X?#|$M`|qG9v2MI9qa%@CJjw;EHLvNhH<9;8-0%<&Jj&W?(4SbRo{DlBaewIzzQ!%~@F-%yq+jPQJ_2^0`E%vZ*K<*eFsv-#%E0f??>T!#|7&g_=ca9D%&Yu7>g&J71~{&gy%WWOeR~v7_SoCl8u`vz`TB=g0jy!?{p)k=cefl~uS@IaaSV02iZ2Fktm2a6;d+1JiR!PBC#pCI^sNtmI2D&W`u?vfj&f1WFmC3B#{~OcB-r1<$G92o!jrM~3DdDZ#YKp^lM!Io-AX4f5pX0`Bma5+eLjBe0oVa|te-+|azLW9W#HkMtS|W<V|)YNhxM=fP%7X%-%at~Up#j|`y(a+Id@kFF0n6t{<S7BhA%s^8{NR?Dv-pyU;nC$)=F`&_TG10v>u)n$jw0){d?jE-SkZtsal0!JqNKz9oCs&hZ1F_9iU9UzkH1~F~4GAHW-f+EdGr920WUG3TsRBo-yT!*}m)u!+L`C0hr^D^ZI|WK43mozqT>Xc3dAe7qe-kb!WyZtfv%52IX0A+MM}qsC$OzP~q`z8`&KDf2?2P1hG#$tOFnI1!GPCsF&c+>m`3v+dUudX`K3ah!^_(Ueq%n-|l5P+>5Dt9x5Fr1|9hf#QB7Fpe9(A_<g!qo{&oqKJxiu(7j_{aP@rDy_@X6Fpu4DvH9O{vf{1zP4xk5aZklm=E}~5_*b4$z5ZBqXHc(Ox@av+&1rmEtykK9m;=O!uDZGWqf*a!5z9YfeyVJJ!3x*cu;3EFKcFvRO?blB<;rz3=6$@_BQNQv`0p;CQ1p>pU+U9|^}vUYy!Yx_0>%bzd$|I}o&*|SvWYiK;vz1z8P5ngFfps6il6fXaFh|_nuARR>z&rX+lFVltX7XTdmZeb^w9^Tuz3}K>(BAGHT`Y;`{DVY#x<?#7h}KpWqw$gf6SFoe}9X6nyBZY;q&-~uQ+R__Mdb5q57Jun0>&0&1rdBsDA3!PyXVMpNkSO9bgr}a<}~ga}gHGN1r4Mm6IT2#LNGRt#B~5Vp->~1VNiVVo&}ZpQJvA=dV5DlTJxkU1H!t+oGZyUoRZSso}Bi0u1CmTIu&qP!2N4*$h3z4x{dK0JpRz=w`is;O*z3*Vtg&EtSczTaNWR^7F`V4b1nf?`R_iY*T}dRIjlyKctrv0Sp80>wEmmx&F>eEfg=ylUk$pXbXGjyv5k}WU2a`oX|!VU@i>&_K(k1$y22Z#^-tuzCYLd${uZizwlD`-E`LbQO>T^KDK7|h;10!YF8@X2W`%1Cv@-1?&hCDX_Hy51D-_NIGNWw#{|C4t3S&sB?M-}T7B3x_hT&JVAoU_<#*olo32<ZUGeBkyWT$Ry1(?NZB>8Tf9sCbpy$kcH`q0r@mZUHdp;|i2g_Q0w^a_d*dcalHP|Zu{~Pne4r>%Kx61AR96LTYtNQ!cuYVl-^50`u4wRo`_Xe2&+*j#nP4#?HIO70&R@o?!r?_eqn*i<A)_@cKs>hTp3VvA|%CE8hS{rZsKdz16`uY6x+gMGMU)oQdtzv!P74+(6^m~ll71#eG4pY51zTz@1wAo_8`C{R}FI)HY)t6@9#d!OtJqSnQ{iz?#lM8b4wBSF?jRks6qCEk*<lda%$wQQ%Fo(bmQ)~4a6c~HfpnP1Qe0)z(J`yD#ZQ!o>{h#~ZpuEH!ulw9NdBvjsfqtCVp#1fGpX=}ETd42<(nn{h>>6@A%7VLE6Lz)u&&z-QgYgUn)-Y?kOH|!bPDtxT`jj53O@0}4n?9^p<Q4Bqr%l#FPpQkmNsJ+$V~~-TA#U0F8Si;2tf`S7t!^1BuN53K%I=1LB>G&%UP=+A3(%Fx{A8&Z%Xak5eW>+tpDl(xleWM~>#_I1pZzYlk219e@2Br;aQPLBJoufG#a_wee2BALTcfP@hWGBU-hW@KN+z4%{4=U}(x3KGIjkjRD}*&$pdA8hS|blp*lWO<HjyPaG~nrOnpE8-hX>&q#X%ZHq-ugG9HQ=Pu(dt<O!VuCFXqe4sqTaBLrgW!@k7rcU*&Uc7X#=1<DOM`Zu&3mG2m&Khw=O0ZEWg~T2G^n8f|RAPx5`Iq5LQiQvmjW`$joqp?%6}1EONB(SLO)HB<So%5VNF(8=HLaiVnlQ>4vLc{8q?SoKkx?3(#UI6*$CIM>i;!|DQ$fo|XbFuxt^=AtmNVmzmDd*cy*k!^DOKgGNHjBu|qOf^5Z5u1PYs0e=XclnDyt{3ue+17v8A+eiaO!!aChR!G(Yo;$1R>L?}cs0#2cKv5eIKh~3reeaqF(%x7#HLqD_U--eG2zRvd2eQ8FAHVEc9fk;J+A{iFMm47{nJ~4`IrvoubMy1fm@8dFYtHhZv(OH;A=3-VE0Q#nF3_g`DeT>2EeQDM;W!4Ojp13`l?Yz@h!-sny&oHBSlLEpL)jWnjE!$w2`I4=7wjiue<?_SaBz-lBthzQ*Ct%u(omCg<QwlG^N7ySr0hIqK8cAAZyB22qL&<X|yRmu~s!_ouAvj<fQP6N!JE7x2f)md{SK#F^m0GZKpcM5b<ZvIA47m>q1w(ADJ&NEa;Z)z?&b~bEsLjQJgG)AM3yky$*&v@n*n~$*|tyVa@Z=#`3Jzj<Kg7iNdqPu?naC*(d9wEvL{fTS4gZIM^Agac_doUE@9;<r}QieS+i<*X?pK`beCIZ{(Q#5sNB0_e*Yt!lmeER~(bKr^7GY6V@+0>TJ}-{l<ClYmBpg_)C@U4Sw;LwttVq9_*!q{E+H=+tsjMv4@KPF|OCs;Q#$)z5X_y`qA6qxAAO#{6CFnS&^t6`j7ErU8fP3QcSTX`?YBNrPup(*A!c6xrq<@PxW)v`1>|0U!s~$Xx+W1M}76M{aQq_(CM%)>_NnC9K}WbB5qF}@k82Iv#nhd!RUuHuCtt!$1L*hOz17FeM69P3u~W+aYwwUUPea8JWW2QhBeQ^%6V|u&tV-6w!?B*n{wbc$Kf-ja?!t&s`sM~F)_X@Hp{H7AANqb?`!c_+ZV=7oTf#;zIDTTJpXGwZU+0_u<lH?9`{QnM?oK(5012W=wWi-F8&xtF#P!@SFNA6Cr#zU?`Pj|?E1&B*G4(*touLU*k5q>1wZo^gWchQyK$WHW`b{iw?nEw-|crQEqmYyLtM(L`8^*4`z)xj9If9uz%Mqsjj|QrhIxJ1Th)B#@BhoU`ECE|BbQu%#mm4xF7H+|a>@k8b-Sr~+wE^yUlBw%><j*-cUGu(BBgiMquwFv`%&*KUs2!u)H}*P=?w8&U-lHmS^P0)NV~liw!TT*0as$b@WD>`JmkIoFW!xq*1M`_M20&a*U&>ZufNt>UatR#ztH<RN2;>Nh-I!_HOLx}VH;&Xn-6hUz6LS|`;y$<Kjqk<e^dFgJ#+AJ-;^IAcMxad=PJe@<2YBC$Mk0`i|b(}f92W=du$%u&kFvIIllV{`M5VmS^VW2RQ~C)Mh5bX{dH3=#L0TRSG6<NW8bP)`S>h=BPsSH0SsU@h$&L!L3W9DzcyGaA7UQKQK!r8?yZ!R6q~Tp-@>{R6nhC7*m9cP3sEj}f;pPHTM)PRglqFjrDqfACld+!Sz0?@AJe1Xvnsgd4NbF(R~(~TBbn@4GYXDAWzAWS+D_Ho;f$x0l{02=BJHaYYJQZiOlL>PmesUPb#KON;&C<;sn(_3u7#-Nkyl+ziG1=RdGdL;<dgDkYw>CqV{O4MU_7{`*6b~<$|LQm8TBsnKn=X`;*m=m$W@v6+<neO>Fo%eNG-t{Qb}Uy7f=yz#e^St1=yx`v5)<Y@%`M7^e5~)ZsIy<=J))LGJC)iN|<1L-7(R|oIJqsL;acM5PN519Xn~yFUDRTQ+wVe2E+BI1g5bs?|@?}729?>5!uv$EqajYz_pBdrFfU{{~qUP&0a8%d^X6OQ3wzF%T;!*y_r|+&)DH>b3NiJ#(njReG<7+uq*>_KJ+=;Dr|W|tf}nMuwGltiNbu%E9^h=W~#UgF~(h_=-Y9QLmxC{_gY%Bf#W*s;kpkUYX?(dmtkn@Sj(CDMzMY2F2;wy30sDsPgl{3vd}Jqm)L)@G3NmBqEqxqOC8^mO?oWTf)M@^ujgS5Iz`#iiZQ-sZ4cM`78C2Nhn(Sk_4AoI>mg_OZ@!~R5u{pufxVIbcbNCh&w0P1FDzfgu08lV*8kf2>Jh2?9(9n?T<Ej6hQ3cf7Rr9%ewgqae(8@q_yZokq!r-Mx4|C>D^}>&eBzSfeqVsQ*B`mVwb-CtGKpY4)&1~qdJhIW(O>ZDJj#1_nvyb@|9WrA|EKJTvHSezdsA+k&Ch%D)xUq@PxlAT%MSfyia%{I$9DBE+__LTpM}DCfD_l|Pn<{p0l@JM=OJ(XWlpTT8hloC&|f68=cRP~M@$nj_H~!FrmkX~9rqrpT*vj84}SS9VtR%DU!`3i3um-({7Lp7Fg9`Z&%is!+y6DDNhrOqj{AdeK)p|X?!BpsnF4)(T8wd&7$@<zcpK~WPH;~SJ(~bO^_%v(Na48yj#}qO0E=;8$Jatz4n2xK$m9D4zOMjhIrx1IxOq6vY)<aTZ%?nlewXn132j-h_Qu{&&#yQhWyAJV59M@kzOB@&KICu0_*TF-F}K<r>-fO<w{juh7n98ow5zNpL7;jr#`wG0&)+rbcg><q7GphN^JLoPzyoa6^BHhGo-b14RP~H+<9j^+^9P>C(y_-Pott7dElgUO&3T1!BygWh)njrrk~I|PlaIZiP1OTh`AF<NdBW=y7}v74ufR*x>mnI^D}J>!&zQfcUTtN&!yNEDhVuZ<3Nc<Jfa89cgAe8h>{**&TuXDda2yi$?CT;K&u6~bc3`L1E%vJ3D&LKLN>qNVio3yHS1?ayS)n~a_0Wznxb<=W?hjM>4jZgz6c%t0_G&B4TJb6Mim_9epRa6`IR9V0zU1pr*Bf53u5$w8GGFcX@ws}wul8j8ethrz<#!JDxHQFB59#}Letw=+^4q-Q@9n(<&lU4mZT0(qN>%52Z>r~n^I?9C>#F7p#9{V|J<efu#<v^JFOhqYBjiU>EC;!Q`vb8a_WmkSH!aov5vM@;RO1uo_V2%XYi@ww*}vFYm(>zvDfViaj;}L}GXwq@gw-XH)hzTKy2*L@6agLx;z4hT(tHluTIY>^4cTR~6BpsfrnL#5Q?sVefE7LqAAMD|mf3M?a@rL(#;y}LYibR9$EI;tvxfJDz`Rm-^h?(h^mSn_M&4Y8Iu`y(fZiz!o1_2op6YYJ8~QaiFlWQB<<OhZOEuliNxfwkc>n$Q`N@I%0-WJ~7V{HjnBSqPd=EEkDfSj9GZCjt@iV4K7AGfy-%0~?$^1lO-S2h{9Ag)CX6QA@&)Fj$)ryM_bNJ$kf6N<RXKm3*hn|emoup#cWcs{MCYU!kJ4sQusS~A3OZkIU+>TKe7G=`p?8aifaHER8aJZjH^G$BmFVW=`6tOw_0P70)x|YQLdyf5jVSKWgzrt%(*vE9`jAJp%Iu*qUp1}*u@fl;J0Ly!s;j3%r)mn|6JmRSI`IxKnZCrZ-Yl6&-vK-=YZMc>`$9t->N%5N7^FCFvSN~1T$zu+V-~QdERz3fK``6&OGv?alwaQb_bN}RI0_GO`6@-;L^eRyCwq-tn=YKhQx#8cX;2-cThxy#=k9ov82%R)aEpL>Lxu=0O_^n_*ejeZ9Sig=19d`ljUc+<3c(M;U`6~`E^SXFRG@2|CpE>@+PGAr91lPeB*RfHYXTRPoC=%)audy#_Y*b0Q{XxBGK*C*G3W-q$nS{)Q+%d>P%(msy@atbhf^65lxBGpIDl7yDk{n_<aSp7R$H8!qQ@(LK`$AIp;5g%qruhC|evii;CHKf4IY#UUPoa!2JmL`p=GrriJ4`v-;ej>X6g~Y%pK)4Wn=f0d(B%617mO*^-uN8sjyJ<`KfZHUd$d{20b>z8))yG}pp*8=E36M|>4(qPnK(!yiB+AhgFJ|j>rA%qlu!85^mHZ9U?SsUs7rvqb3eemS@c)M&`^_7YE3?l_on0b(a+<1JpN7cAMB)-r%|9k-xv!;YAJ4JjmAwkJZH!2yjADz6LOeX-}m{04<R!*r%+yZ54ODrw*1Qpb7|TTVouFWah|nq&sg`5{ECv-U^8#A?gH$O<HlProAoJViaAWjN0JX=w_T?b*9-C|oWkJKky@b9d_JGI+260ToUSAKzwjx9E_}c9)_my-BwQI9xPPlLmW?ChkBA3-yEd@SQSgNuTUWNF!4wPb3+$;x<|t7cloW8Ca>9@P0y|@IF>xI?<bLw$!n*#@*nGwJnl@%$8R%ng<#EvduWK+l+{P@8^3C3@MY$f|>^HRKOU2TLbTC@Qe!|aS*TQ<4T@I+Zxy1HxQfv=c$I@vX!#Wqabql+?lpXRu2;*Po#tFB{MSRAxU!pz)V%>2Yz;PRAofezwvUd!(u&PVu7|X&H$F_0p@U=p|4E2|tpA3A?O`&BD3|FJN?40$oFslo9Hg@WWjnz0y<fnM__x0#Dl3VJ9Z`(%Ll_%`d0e{&!aB(WtLL>dChuo?TF};YbN=b{nUsekK@I5m{!_4x9)vaD~FJKF1r%CIk^!h{?%Sv0P{ABpdI^KjG43v`-(JD?C5?715*V=(zt0EbnVSP}Fez?Ten3f$;GBar624?k6)v4_+m>Sq|(mtnr)CKjPeY?zJwMsH;eTgMkZn(;0Re9tqcIMULHfdtJ(u93=4op<Aj-QxS`lPS)y=^tHZ&TEs%4;vp&30cp;wdt(KDSwubGT<Ga2QLqLn2POin@DnFPimvh|3MLRh}wmS)WqcV-{OSMVPu4cK$Vw1DIFJi?FS;utWss`<ZHLFFahac5owB*^%XH@Y~S#twQ=1H5{2})Of#T@4=mPr4`sg;w~r`TN=A7S?gXKs7tB}M-0pkRjk()s3BgnBvn%NkW>|O+PAPJ=iJ5^$%k6h#x*ua0_Rs#y+Oqfv^BCjy+zb>P+Pie%G1FtM+)~>qNb-6=)P&a9qd&A_6!LdZwxhW;dj9@@6O@jWO&RJChx9xu2MBqy^mNaO{xh-TX7??<pmTv6%AKB83th%SmSSj{nC_J<Byzcniu%Z1?z0yd86E8IwJ2~2JK7&TUnJ@8<ilxvaqw>Ylu}PQQu;1v>w^|JG9WVuswJ`B0Dss@oC_O-MApERk^9}{l&Q9O`BxQ5-;4!b~YLO)*7P3ILSV4u~sPO(_!m@4LJ5f3(k>A_@Qt2siHf6Up2YuK|g9UlB6n8*GpC#TUgFVrmRST+=BMFE0H^nUhP9m6<W6}Z>?IWK?d)YK!4ent=KTGTuaj<$bY_%jrZI>hk=z|Sw{j`r9NPcH0<swnZ+&{2b)b%S;PxHZOvP}C4tb?+SimNYmIj%YsNlqk(%DJ&TGJSt)oWA^JwH4?_pQE!bHtHu|2e7b7%rTtl2qJ+a=T3N8AT*9Qq5fOyz~@aG&QUV{DU~N1bh(OR1WQSP%;1H{NsA;>_DoMKz+{GVwmi-Lo_MdWpL5PSk+;T`AHY-cudk!49blTOHxK-t$wlnaAS(a8xO6S|i>VAz_{uE8+2QY>r^-G{wyrVcvS$n+?n;Bw}547ko^GsdgpwBi|I)sB1qmHr)K)`tY6cgt$GbrVALqUTl_Xkc=AdLj910il~((KUEEk=_G@hk9IKUELtW|=eBomVGOpKvZ`~l>Tuo)wIGCXv@Esj@L%w&5+h^&SqJN`)8ka@D|vn_Sr;iar+bX0NnReS4$FS3`4xNQjqq)C&-(T~UJRiyKW=_k?Tc-I{0}Be=!&%D$+s-mZ@r~h7@TwW2JdSj?xOLVLfvnT{=fqRY)j5;eVOtgB~<@J9d?+agNPL?v1{yyex?NMInPu6v!7y@bKS60+N<BWL&gH}Q9n7fAN8wht3;}IDdNKjKCR@k!}|SAPj2YnpnsD0@%QJ2<Z1a!Ozrq9hdD6qNcGaAW44v`IcsMq{_tr|OE_*-r~G<<k$=zUbpMPCld(Kwim#V*e7#)TuCYAY4;%2oT_xYiV$MB2-bpea?;c(BMX|QDM*L-Z+@97ackLc6u|7x+r4y{x+zE}-dgpH3qan4hw88+JtOtu?Eu?<>0KR-DIj+UU`{VP>2ZuZedd?V+x^s-!pJMAhXV!>5sY#TI1$XEh&Tygh*R61>6Z{kG4&(c7^<jscJ?0YTJQFpDxg~V)!K;u}?{VE+3O0`1^gMD`U3kyXMjO-{m9_B`Plm+&-llgV>Ku6&`ruY#f8TxUt-em5jmJ4gIoP4L`Y5^j`6ti1x16vas}1zQcY(eqjOB3V=sAS)I$qIFSdgt&{ub5>YaiPOX9oCpFt4qeL{pJJ?iKvmCHixP1J^=c8sv*<!52=@w;^&{^b;26AY*&pf2MoTfBMv~;4glbf5}z7%Dm%X%D?|PZ!`6)^>@D_Kl_z?v}Meq3ytr7!d+uHuEE#%>L<b6PhdaB)BmZTU_boo7Y5aDulOuD2Ips+I6Az4%UsnUajLgtI3F{()8`56u$9O3jm&2mi^n<AZ@N{ojllks`zAk9zHij)3;&wm^kh8!75{U<r@>e=x&C8K-Ne1=$vTRno8s+!E&bDH7}H<%Ias@Da&bdEMX9YYuJQF<@h0)ox8Kuz<I6mpCf~R8t+gXNgPr#q^Csv=BM+3p)e-#T-;z%=@m?7RTY{CLe;(*x;wLKNz8~|EKIJoKoGPZzx0z`LBBtI;Y^~fFmRh1*4XOsW_^0k+HMNh7ggb6Gjh(TbIg?~vSaF`l$)+5lQnR3sdS|$|cZ|o+948How+_ZcjrpF<!T_INj0fw{uPbbmN8gWxjMcCO9RHqxFJFB1|JCJ?kRjLfS8S{4+2DE!yZ<;J#!jnbl9#6aEUncA#>D`?fjlR#g>5O>V_XcO@#Ebm_%7oq7BEM%&5t?XDPsZP(>LqrVmPRQIK{#r7?!D)=;#)>wa|CJ$U4!(%r}bsp&Rp|RUl&mOG9cTVvW(!y0ObYVhrrBd4A5Lj`Ci|ONrx<4~XeQP5?t{8}bHy{$TRe;d_}EmAs#lf5Uh(!RM}KZUP(kZ;;DCVpR~o-FxZldUxC;h{xv=Pl_>S)CA12=CGf%0jKXX`Mp>d66cCJj%S(U7!k{I_`<bTk_*8FU({Y(6D}X~vj2n=MJ|b5*zUou=BawT#x46O?0{!<c`Zz@<_*1tst_fu8ev)tIYL6ogHaBGTMdpY$<3u!OIlm!f?gB0C4C6~(BW9UpnsCz>B?UWZhU8N1z%+^ls#=s)No2sGxV)E&brj#m+)=1gT8c6yW(D&jSBWB1v|Npd-0ZQ;gUPmu5{V}?d#mK^p`jqH><%e6Ym3T_|wE)VyPktpzoH^_ums%P~ZU6tnm?J+&U5~=p5{;3;x+gtiV3OYb}g6?`NLh<AizrHH}A!S9lBa4A!-_D2Hv)VNE@ee4+50pCT#cSb@2u%RBJHlK-CbnXoe=hIu16$~n;I^ElXGo^^{Hp)&vHnuupGv48iwk11F7*RCsJX+Lshdx=Fkw7LTGzmXj$P0qP~-O7+Nb5J(2whX=>5XUU@gfiCc4B_Uuaq#&4gmXsCi%D|>a}jpY!bJ79_GEvS7+1;RxP1)?<{2@Eg4n=M#0GA<k6kfbzVOSYGxz5(MNSQYCeB<pV!a;OPb`V7BQg~I$+bklx5hr?mutEhM^alm@Hw(H_F7h3YRt(c<O*`W>&2)TQ~sA^d@J+3*VqauwF~tn#{Rc@%DVP<dRMR5PqS{k=gM(KoME6X0Uuy|Mm}{>`$|MfAE@Nw*X6#jM_t%KN}Dk_#3Tz)YX)pz;_T!SR=lPE1=By({?OLcMaS$|d3wRcv$)RFUg%<+(x2m$6yuunyFUN(yOwaQ;QL+sA?6(pjVJk3WNz2_u5-&S;)eM>#IS%Zv5|8T!*>M7bxZz=_{{#YnZKXrswodQ;ecw112Pc@bXb4kPgB%oh2t&RCzd|u>;8tR{|oN($wHk`#EZVI9q0qqI;9eCWI*@HWqpj~XHg88`+o4U{#sX<&tj;@x{>)mjFV2ft{bWA^2g`y$7hLIX*Q#>k^C@8=)v5aukG-;50Q5Uc~RSD>rBUOg|eNGn{;8N4Uf8?;fpXfs0;Hf<Bc*-yFz{04f4c5J47>&YK+_umejK)y|GZhH@M<{hV5i@As5C0bzhy=_2EnRb>k>-UouXb;&rxNy2&mX=JnwEtHze`$+tO9DfMsRI@iWYaZF*n&NTC0>a=X6PRq=nI`pW|!Wyd!U!{I3#_3>;CQ|>!`>7j?7$A(t!dM@FZBX~6A-^_n2uR9s?RqW^4|QDWE7s3TU7o9AC6}GR{FuZ7d5zUy{L+B)kc$fEoJnUEw>7ql=PI_m-^4QU`K>qkzGZ*eMGQHrUbsEJ<!ZBvdssIX)*G`|I`a2zFtmfZ4qMfHtQ&>pg|IFRfi@D}vNWZh>RV$~vO?J>hMJpg8=2NFtF1U~*!i$!r@|~xk&XN{RZqcx=UcWBwjQVIc;+;{WSXAst)L5=R-@`jv&7nzt$7i&;;FLKVU0YM)=>|8uq&-WVf@_iR+v;3Bm%?kB@S-RWcwc@bsQtb`{WiOtQB?Cwl4(>5*8O~MyoL5<5qOP^cO}l#VQ-7`8tg)4LNYq26{?dWd{o^{N_63R_o*})#=vS3;Vhyrg!okaT1F*4Lju;cfLY2(H#1A<lIYw7P)bRSD4i<cZ9aL!wa`7@4(BD(W^`OwPB7?g>AX_nXw2v?+iX650&Z(=2TYl^H!*&#yA>j*;}kxFMjXYg6o1eWn7xx1?*4c)eKo1-U4m~$UPZs&1-ruZo;YDfD`!ra+hxdHP?cLe>Wm(S3}yhPLNb2x2lYo$Wv<G!VWopN{e^pOL`Yhu3hwUA)Zb)SrYBIMD85qiH+d=+%decDL)U6F)&U>qFFp%j0@qk+XMB$KdnT;N|M_`^*iDq#ydt16vh(&PSvbuS<wb8L=6KrESaJ&bAA<^U(>MBjohic+$=YHKAvORC<M7cWA@Hyc=Nj}EuEnD%@W>?@xhp9_{`&(GU%~g_GzuwFWh_DMaEd%46u#q@ypjZ8G62;N3cg)*ACR8_mH0-`5JEE%YGu)*x|H3W{H0+?W+BQM}V(X7ju#J<p{@N{_rD*H7mqxIqmN<GVbN~-;0#%itCWyt}T6_MbWj2i17E>&2<LPb>O#=Yh9!N=Eo|DS$Sf$@gy8?(mJ2Cai2C8Npt2e53#!8wZTH<Lp6yOXe5L-*+eX8P%CnuRG+zndbZU$ZgkWIO-XF3!9swqtzyj7JhTks{=Zr6?Fbbo=1A?g9&AW@sI52JTK1l?rvv?U0XuR(>*{3G5-N8BcpuAUs*-bQijPcFvzP_XVdJsLc9#db+GM8w$zv-?wd-3+u@<1zSre!*?o6gF)!ZI?-d8bcJW4f|(YClB?C~RLTZfzKKG&`tb9OTS2Xhf6Fi-5a$5r7BEplw68v8*1%5~TUxn_k;cX79Zcieu8oADdpbGh)w(jjf$4sNP?=bVY>Y!RS6qWZlU3dd-Ly>bGJSuY8(cOm(MBe#&^6Ud>Xqi=e`7*&QjX?1X!+9n4}goj#UNnf!3814zV9LBs4l$2jTP){Rdf=9h&XN+t^P2C8(+A?c>6{@R}R<MK9Ccb$@-O4@YvQbw8`o=!TJn_u{d&}DTov9bK1!K87A2`fE+Y0Z)3*&Z~Q5AjzY^GY(pq=WBm-iRcRXR0R(N6J#$#?SpGxeoMZroF$ZSc9?$^`S~VtnMrcjOg(cfAE45_9375^H5moc+a{Z+ypro+mB5YN{i*d*gQj?<3JBJSFC;VeGt?4)Rd46UK^)-!rxy{CXkz{wE$hPT>vS+ed6;((L;^)u8=d?*mrr#r#_fOU)$jrP>yYpb}b=*&1649;o0KgWua;&>t=qq{{6p`oYk4Rxcj93Cb#EmiL~Y2gDpMi)M-uthH+k`@q&*UCP9G#e6;VNq9eG()`;rLGjkiJPI<d^8U@CC9(S|_%txyF=h($&xA`u4$MFFL5gvTp~wJ3Fa*V;53tpz>;tP|hx{hsKfUJ2i6XHD)-u8S>;D^<(=T0UrC;>?Rob`8qrOb$-BB9^@qQfh_28q+dOU0P)i<aef|?=HXP0<4<zHdAGmpNsi*0$F)CiH=heilo=X2dZum9Ojo}8&4cJdqkJ^SiE>hrAIRO`tr#C*&BGvA=sNv)8^u)gY*PNFH6xw%rKj(mVi+_SA(9jdCPX4U6g@flmqk}cNPfM4&iU6Ha@=?fbvIW>0iKE3CSV<3J6V>IXD7=HI{#P@1A-Wg&mdV%qmMWD>S<R9(+r!QH(CQ5jTV{)ctWB#mRaAgg{v-y8)qi$}aM~>l5`g<qjH5;%V7B%fAA0ly20x^@|7tV1-m^T>979J0nwPm)jdE6${40yCPQm_wfFpr+ZeZ9(Jb;P#hW^u{QQQh05<|gUmt-6t%V-Jm<IUcr=94r%`UGXv1O&IIH<4*r<lNQ>fts~k#`~2TipL}Rokfp@aU&H@VYx1M!bK+kO;rvS4s<J-7L7o$=Q^xi%?#`rDaC2u&hcRI%<?%%)Uk1jur<z2ig}J<pXdReSe9*XE<?}pC%x&?zSpUtJ{JX|TP%a3i|Dy7JZ@+bV<{Cv)YK;^h#s94i;y-`XbpCiw#I(rT&TM{Oe9npctEuF37AJi^9(+F@Zt76_pq8wWg*GnNLe>{Z-);%VKUET2TIfXCr06SJ$SvlVYw&R-r)zbqobVajv+P6vctOmcy(<w@vc~H@$!#G#S>uQtpJR_)o$|P4iC7YOo%Z(WpwGFN_mNlN<G}BhhV>4<)v`nk$@&Y+XU1(fLcgZiHkm+-&w4Z$;3~;}H;q%-XXaYIqMOzVWtv<6HSL?;-OIG5WOCp8#5rusIeXS^tv}}Xj>kO*)49_;zCrwc`|C;)<0Y_MwfK;8Dcsxh|LE_?L!>OjPEF#wp#QnZn9@Arr~1_`_Ko8(*UCKbPl&gYxTvX?<~Vcj9gmv{XEi_{l55UWguL_4xJkR^1#t+h5vNRBWuz@r(glm$HkVW@RAO0ypeiq@-WTYns1*yl)je(poiU?1v;tYz<DiE5q7$b)_B!7lRtIMY<G!V$QLa80LF|;DsLRcJ)GZU7HA|f|0SoMl#%p3z#_TL9Q8R2{Nx2QShIom|q%Yi5`&<zLOT-6fgGM@?#a(+2n*jU{@&?!6r7g2!XC(esjb2!V=eaC4_6H_*j3d6o`=q9z!~$!vA7f%ROA-eknaPZJYmscLj_8}hc?wI$eW0cbmZaB1>uJ>1;XLMpFBL~kyC8i0*i%O0ZHfA7<b{?`ChDujNBv-t9qJtOT77%r`jd^CBQe!WI1F(cxjHDMZ5h~K8{ecWVj&)8<fL)29e6;QlR0BZS^`FGu!+^OqD=`tNvo8$$mIQj+mp56UnVUpx7HJB!Dorr%RN8Gp&B#?R&H{&+)!w4-n3omSecEQDNVIOK6~1ZdaQVRrUnt%pt~rplwvWgGKVOI<3By$R*P~`d}0iD<_PUe-he&f_0JmneAcd*FS(bSU-g&&BJF1Na!3N?>joR71iQ-L{$-|;cG=Ik{N>O3rtP7vum-@udM(32eJ!u~!n!Zz{P4@ztq}t(xr2`vt6M)bVWpPP;ka?I-o%#LyEFC}t^@PnlW7d=&uZeAh>qKxj9GluK5w!1dHBKifVy5`@Zb0up0<7H3~T+@T4J}vpVxW6{NQ;&-X8H^c^-`Ri`Tmi<G}X8Psw@lXfqnZ`MBoo!qvlW-psZ0Gq1JUf-i`6#>A)7t|m+>tSzYqc3{V9upKwk+(PaWH_=S_!ij_Oxtzbdf!(V;V&#)I^~@R3T&6tXYS?56*ryJ1vd7@t$l8(D(q4g$%RUir3^wQ`ciLBBTMF3bQ_bmY*KRn0zGFS=DE`}e*izQAd_%4EH(%^_Gx4*-T;|$RZ*J|%ywFrr;Z8brSTA@E{|EL{`Ccb~EjQowg4d~rvNGoNZ+HBPv%@+lF`r-`3{&3dn-}&@{&GD3!ic8d$J_GwCsXE)HZoQh+){hSjJ{3W*c%y(Jj|HU$MxR6v7*V>^`0NslXXDz`CIqve607w;{vH+yx3jl_1==T)=B8d<E7>kY%#`%G10Do`z!H0BJ*OljD^mzQMo@x4uNTW$?xgod(`YU@O~$(rYW(S4~^}`Mc$wF=kH(*t85P&@7w5RZL1P_(5C&v&;2d_UM~6ak@pI*nLI3KjjkOY?+pHw&y)A@ukB>_%KJXf&r{9Ylhnvsq87RQzLE86yfDS3M9r&byq-5}Uah;ZgWrL13)kJuH7hcv`)r~%wDHiI-mQH+Zzp|`sU}BiWx+f(A3w~;zyCb`*`1HK!!yhizYIPEVxu?DOU3x99S-MR{)j2}FPm4e$9(=FF`*8|gbVMN%=c_3t!>;N_2J8e2@Q5)O%&OF+r8A_5?DtnKSy7hT<|;UtQo#3dYSjsWNyIzu<?2aCk*E;sz?5swXi>*or~;O!SbQ4y=(CEUgk-ycLT5YMikSVx7j+9^`{}$ipX}+=XQx-F;*@2!}G;hLxb(-e4wVfwfhlkj>r9>u6%A)JJwc<$Qn1kB6fRT)x5bnh)oj;sW>ZXz{+!Gd+8yzHoh~CycS8Rid{)ZUs#s<!iQDNNEVvchHnXnRZrvXa8K#D%P<Gklo^A)LbEpPepHF3KBW!O4~=)ttg4}%8j`-caO7WK1oob{x3n3Z++w8Mw)UYl{78lStc?ZOF$-Vuc7<J?cpEr^(FOS2wWwW0=W3WIJtW5F;E0d3AJ6a})PM_*)3T1+N+;Ypp#~)C%X0d03#br<;-SV(i`+AGF<fGMObbQlxg9jQrV`e-deK=e*nLr2(`A&DPQ0j=xidDTQ^5vg_rkpHDJ@naR`f^xr44NZcHa(c*hFkwhjbS;YtEun%dS-Y6?cYZY_U`@aVzi8Msc7;O*zEv=%Nk{w~JfamkDo$1?ziV-n|#FGe4;{c2u*BVo|BFSrHPe!3%4j_U6^#_LT>V(&XI$_cXSdX=SBSCM;on(0QNi9&oUevQ+hNc_WOxIcJ0gyO8U8(Oi8Bwk8EzkT-@OSjP+4Zi@rhJ-*WJ_V!WZo$ll<U5W((A6-#d=e-5CtNG3Hx=%>Y+X{IHX{J<ywp9%OE(hBS{O&{X7i5W8S~$jx`|_jY;T`N=#D21rjcKZS*ML<X-0vCA`N%oh<gvx~P7uZ0iWI1u%}3<!zWUmE2Q!#1%oXZ)k6Cwx-z!OZZ&qnCu2~nPCG{40cdmU~QAoqyi*{U4MQl*}o7ZhBn&Ij<V}<=YZpcSU8?aH`Ys#<ZR9)YFML%WcIScRJh9yU|!9(!Tp`EOkgT?lRVqQ>NH%n&S_qu|2hHY|v%ei;)5tH19DsQYL+p=A@7&F1jH%iYv>VfC6!OOl~q>JLlyUVR?RwvetX|5Ki3m@{W1@@+SJ=g)*@mBW2!j<R;S1|XUAs-8CQIj6}dtmteQHl9D7LBK7%sQpDs~s%sy-bE9U9?F7?O1C1iPXV9YS)*LwQo#o)Pp@JysK!Stwz)&H?7J&aIozcl^fG?k=;>GsKnn9hom)vzKUY5j~VrLSt3sR*i{ea^_|1-pe`}=7fw3C4qGdX5rf-$!rulgw#$8-NFH&RFP4at)1)mSxiF0<*Ssi<r`M7S3)=b`G<q0zs1ave8T0yssob)JUb0#}AK)HBTHf|%2{R4!6Sme#yuL+o;Krsday2;lb&#c6&}Vjdhxuj*dSjC=THUAKb7^~7tRC-iS3QMo8!<(14)!&M^PK?vxx6++(3Y43QTJxMA)5FQ4*MPPvs+r;0N2mr7WwDJS=c1y_9}wswbFZg&MelyBo%6HIjFT2nAeJG0{jU}6)KA(i&X*K_rdaLZVK+VY|na+=MDO2m7ld%^b$9#@P;*XWh1z#WG&m=PNro&`=~a#5KpP*-WX#Qyq~AY5-nL&sQIO(iiKGHcV8K+jFtC*w(pVVHNFzmd%J|WFi7{7xWhf3_DSpce0*cj@5!Rk3uk=hotl=WYKnV{{L)qc{+7%|QtK(Bmh(ab%wY)dWB1@wIn1QjRM9)qc^+>BjCoH`mR>_mxkR<<Ab#18JuNfIg>*zCTEL2~9Mi_UiJAzpVBo>2DeG46K0NpQtP?KM8B)}%C|jXq-T5S9uMd*(ooWFowd1PXsv69VY;RTutQR!Ztd6O}wZt0sS~&2WD(W;+jLRuw&#d5yDO4qQn1{M^A{Lb>?p5Wtg)X+<N2qx)Csssou*#b<jj5+1wmj%mll1I8Q^z}U7#y~0h8%&f($*isl&;*c^%lOls$<1Ey~O4!MW5XaSYBHx=}H#YmJxSs!x>meFjin+9n&g~?uPclk#or+<Zju;f?hG7%1p*zV$7RZUSzgW3HJ<si2?Iq_>vHO2hWV*!XsMr)pM%v!)}DR&CnSedk*g~W5)}0_U)lEs>m#L82@Unf}d<x7OxfciAYS~_=It=jl?#6`9*LJ31IF!IIYHQU-QBLF7E2nBlkS%cVQp6)-cC#YD!IyII!4&`du*gS#A*?s_=J5U<`~lX_+6k(1#Ltm9cRh+d&$%f|Lr&;y8$-o(vHiRmA4{cB!N8ytuRXoEayPv^DBA`W<=8*=Uyw!+`Y>^&S@)_fBAExX>pR+QYiK6=}r88SIoSu7f0MRzq%$9#Jh;YNea<b5hjolqbOn)}Jiw$&;@RI#VkiB}~LtfUyW;?&}8htZUc^uw%?CrORvBx6z?q>x_GSp{PDpluNKxQ5OytzDlFba0z*^31ff7?kZx;{DVaoKE2v0j9EW!_e}9@TGLC=vO%aM2zk5r&0<Ah?oVR^&*G}S!|Fq0?OtN&>x%)k9$7*4dz`d1yIXH@cecx>g}$UlsoFk)t+EYcBZmGrT64_1_?WP%|AZ?&PQGJ7sQMB$?Q7UrF^N+pQ7QxF*b)`)gQ^><t{9#5${sk<UlWJdbiH93v!^NM_eaiXyMQs&=~9Pm%Eg>p@Udx$xvAd!T`mIjy{odb#@v?p%|CSIi_!e{t2d3O9jmiQf_uu#)-MM)=U{(fZYh4w%!Sv&7&*f}%yTso&nffA|H-y}&`J&Mgy@*ZL2mv(w9o>q4`p?(fuFCgK49)u{>T&kcfZ^4SqXjaBK>YUxy@6o@g(EX19Ff}x-4r+NDZGY`)GcwBNuU*5&GZzm%-c^?xc?vE+>x0YK?eLbI$q59FdEhjgdR+$zNc;T>qorKIK1}Z@>K!-=6WCQyxQZw=y2IP}YZDN3G$t#O;GWR$p|<TQXp6r!#YeS>~D^4au<wesyC=d|dErt$?dR$2tB)@VfStC&8M!2>tT4#4br3=MnuC3-c_SDF=mqqK$sabljUfZo+b1koU?!JSX`5S0Xt9-7l=vdh+XW>(ATZ@jQRgpxVdnaAZ#F1oqX!`e*Pzeha1TbIWsxa{b7_XArjTrpmZ0Yh&W7R6f+G_v*B_&OB~=AMA_FF4;@6UQyI3w#PH8D^=W$Qwlay4t77W#+I8^AnbAnHt;#GTh&j<Y0uS9%B|kltbl2Ql6J)+wn`o5gJo{(sAW2WeWiuqgZYiGlf{_8m``Eu+~U~Cn(~P?*P*n*TkKX0Y=6N|mCtHdVcq2tvG#gMQdq}DlrESKcFFd@)eLN0^WX#@)M`y`w|l{_i=vWxGMKZfU|rsYG`+J<w|(a6ysp6CGnybq><{^1yk&8${yrS5uwa(|lB8I-FJoh<p~qpaM%^6Z3~t0LW4~4RFG-uZR=9vU_k$)3>+(|0%Lw%=MN{1Kt$6Y|d5f%amnP|wS5;K1)ib=4Hvv8nx5rHZYgx)!0>)%h^6ClfCXJizuIQUZTBrAtwvJH7n%HW?nsI=3uZiM)z>4GXn(6y(^<2WcJ2b~-)COAGwja=LJWR%Gsx48o`8U{{nQ&kYNIZ=y*U;}QUc|<U^FS}+Dl9woL~CD(6R;dQSU)M_!U+uClZ2WgIdmlR(SHO#I68fE8A${8F&9cQx<}6LS)byD3_LUALqv_O9Y=|wO`x?<Lqj`SopvNxpI^ao^1EWO8|V1td~9&Z?e-seVP)=5V?j;>Tg25B`Fe`$oR5aNW{p_zFOKdd&M^_rO$PGA_Rl^34!qYOkb2x7SQqHV3D{hBW$}`fPa9L+i3LRrGsEK!ec8RRbd@63xv7k>R+E?H?{kvWOZdspc3W;`gmHn`@{P=~J?gt8Hg`bYHtRE+a&9+YawhFC<~{SRDn{OVQx2}FW}eR}_cp90FNu-Y<CJr2^_kCe!iP%D2EJ@29#Bui-!<mnHL|rQxzG60m-{8&&%k<cL+0oliF^Dt;Q#|=D|r}IoWu6n@w&n~@4+w>GYO*&@{RUkWFh~^Lzf8kcxvO<`e_~F^*1sG*<lRQMUG`tKBtUfdKkk*ogTa%e4geyj&q%j$M0U(qhe|k-qGs6jtd^K&Sv65qOalk)4+Ob*jmnIR~iCiRYq|VinUOl^CMAgM|l?OcD1#aze=N<>b+Zn*V|*eZTc{S^P5egczE2#!PugK$EWxlTglx#{`@|jkM|GF_18xKSPR4WwGs2yo3@6I_{nm$O~PU@RK@8p0bURBn3AI{TfaU&<65!pFZ*F5pELT7>FStE7%-RM@{b)p_fq0@f6csoaQ$z-*q7Ji>Ic?3JWYJYxV7hPHg9D;y&;VK{F%>NiHoH@To>B6E;lgqB$x1b307uuA@h4+U-w76U&y+E&tVN;G3WRd(H;1{u?~NZS;PBzoS%N5&t%NKSqFD$tWL%z7e4gEf6eE2kMn;)f7mu_?|z;8A?(k-u49n*wZ7gIzl5@#`=7mh+|MPFd^-J${e9ir*L5w9*9~s#E-cIS3a@)OUd&&xM#uB#*ZDJ@KOg7M(fqlZKePGsNq$EB^C?7}b(LM-;JIAMRlb${q~t3Hv|TJ;{@@OmxY=NTs45<qM-^<?OU^y;g*+ug{YIM@qE;6#aSLlXBd95SVCIt9`u4D8%cw7T3{Ex1as0)Q!a92Mwd+U8MMj$vob%&7>VmpdKCsRmwb&`8Wu2p6$w|$(RZnVl$&VE+81md1Z{UA~%xvz$a_{+_WTjO#5rxi{%$l<&gXDMclKS##Z<80YaCP4y7H`hrcaL?{uqZQOJ)v+<z2r??!`euRQl^-<g|$%w+d&1}z~HrDk#;o+U%@&~LUQ*$gf`Z^V@VlP{Qy2oX^9){T{YGGD{9BnT75n=1`U-`<fiqOvf;uOg?ey?1upa8mqd(KZKzgD@M%Aarrna*Rm)!d7N))}6fYy1iZK?2^+Ju=cn;}uMPoIB_dvjpPWFkXpoT6{g`M}T2H%aOvD(9$knOBMW6Ccj)QSab&hEh+{ldJ8OfBEaMb$?w+asPeOxiZZ$YtFuGfjQ+Ez;)Te5GCanKrt^`IToa$v7*tfCo<{8x5)io1#<uv~TWMqh4|=i>U>_>#t}z7|%V{0H0IJyk$;HFuMp9cNb%^E;Y|2s@3s@i6`3*b)xA?yfAiY?S1Z<tK?2wGhW<Zz^5a(#?g-Ag(~{Q^FvoLdthA8LqO-6upj$&)B>;g$1&tb-C2zIrg8{>?)!191OD|rvaNgOz`IK5Jy+9f-mJ2s_FC47CvFoWwM*?Y`r2o|6&S~><GXjt&8wDmULcfa#cK5i?}$>XyfUyQLoKlVmf3}-kGwT#+A!mV6BsMtsVjv0{kTl;$6MK?_q?sLP$fphKUN|c2F8b5Y>79&Q!~;Ym8h#Of)g(?#Yfb@@aO_?b;lvM&!@t)YJ3Mi`sU^}h5OgbJG`Gdfbr!G2R3rDAQ&fnPWvDcZK@vXvSxSBB3<=K*jQ0*H1fU@s67OB#|C32d-HPPR?7pY6ue&FVf<*Bt!FSsJ(iF@)7(3|x11#7B30d6M1_@iRu;10CFG@^H&+<Y<|?h#J;uEE))Avoi;RuW{=MDBFz|T8958cKp<U~ktIw?W-U7|j{nowGgb*0FNgOj1`mYe}5q$sarLaA)GZh7Fejj7r5vw|kc@vu`c_KJX+7IyY)426$z*in`z&^LCkH8Mq9Qt+G2U_g31m>383)Ly!8)H?^8f)RVW9u)<o#54t_am(6Y%3P5f_HifC<Fh+y&Yn)VO`Y<$3m>|8~6jKh+@`N1^?T-!d$|lo-oV-QC8hpXDuQ&?tQJo91!7s>yVbhGp|m<DizjvPtY4QziVyZUM@Iz+aa~WgVkaV=>3JQS3!dLj4{nxJcD4|g+(nHa%)&(KEvn5GHs0nsUZ%nRmWS8k)D0#*0`gpVFXV59NT9S-_`7eo-v<P<GVdL<(Y%O;G4rOv(>CL%Z5?X$C#htB`@qjPut=a->s&!g3NErUBImOtZfC1i-;|Z-)SA*4mEi$9Ye-uxdT2>cRh)%b%r_WexP0j?XaM&t7c{cepj$$s3~lcb7qNMp$2}~n)(Z;s1x2luuwCupr31^zcB0x*2me`v2<LCxtuV2$j@JndF|h1Tmt5R0-wK=99U@6tA}8C{;}_z@|Voe)GD3ocqa|*S-Wh)^cuI*<p(x!)~BC!6CRo?_e0IXM-4Abm|o-@)ne9>dF&7C_L(pdmgk3-c3|>^;JG*NX#UXBCVkLZ&yTvo3<mT*Va|m6dSJI!O`)BaJTYj|O}@`Jx2u2qM{ZZ=dE$|uxw@yi;Ac9u?N$C(N(C2P@K!qcL+c>TG>a6A2{*VSIkea6o@mp&Y;^Fqi~;?r&uT1;yHF>b@b+)@(h@tYmv)6XZTZ>k!53V>`omVp$A&nb*V1lr&VB|z8+9SiLbh$3ZMtvm*Nl_fX5!9-dqmFAsw%V!F~v3bdU|0ene7CqM>M2KFeDnO4oLv#=?Ze3p%!Ky4DR>2b+)yqYdqRe%)FY=M&LV^@GMyGKXH>P#~G)B{@?jS_SwbcgC72yu8qXfYQ+WS7^ifPGNv_rV=L`hFXPYc@vomz11H=}c)D;pkGP1ZlQA%B<|Q)_lOl0<?hpOMho0hb)=8W{UnCCtfH-OsV`LYJ+p}l<9&B^nI5rQxlR4Igc<bkX8*4ZE_c7d>zZDpWmx&KeVqn~8joiV<{}VP?wu1CiB?i-y+yp2FfiX16G4QtDN`A&KZ8`maX^Bj_auSm};c0$wucF@X=6_;fXa0bvkbdz894hep)fTM3^!{95KXNUoa>xG{{tbQnBy96vO!6}d#2ED=iD8V8N^tdej=C!{mWcBd8L*!V#HXzWo7vS3Yo4_uoAtB*7w)+Hx(EG&_x7a)X`?pc|7dIDM_bEtq-GP`FW71S*baZMC$_*^uaf_)<?l|KQ0V_6x9<Nz&rt>?zHxPrxZx)5M>p=SaS@ZC)Pzs%@kW`^=ZvK}!<<2I<=vS0G`*uHId4mg#$|sn)eXI;*I4n?^j^7v(gvkNf`X4-$OzaU`U2}n!0udPK55q3GahsMKXSn1eDY$-aXAxeNX<&Q-+I49nivINEel>ggW-U6Wj3)2jZm;ZEEZE`#Zb#Ra$4^|gGH{KuYPmB<~_MnUSbZ~$+gPJZO_Y_%7L~1qtt>O*qi%<W7uh(-m-hBU~ODj2M%poJ?kvSv``JX{v3fd7BSB*yK5Gy6^l9Aq~0gyY17!yBgz~aTVZBdO`((&Y~SA@1zSfIAF;zw$J;HLtLIvqrETyOHr0~=pUziw9`&ul6MCa)n<%2*n^m2gU=wrejVP|pd#Xm%a=?D;3bQ>OOz<&!_LM1CBV)p#8qCUDBMn<|I&^xI(qIf*>&$KIH+O=bcSr32>)Myz?N&J+j>@O&1b^(?g~2{<mgAbHh?kaq72cl>|MvgzkIH{SOl#mnlj38lmp0^k8|a_f@{Q_St2@@J!CG=t<#`W1dtEKME7%L}Cydc+$ze=7yW_M@PPoS6JguwVgL?#jubucv*i<(|@OVD2;qV)dA6wVrBy)SP{>inq0{`nQSnycW+n6#DnChiyC+zl3t|gwVyO)}Xs7E-}DonbCZ}WXjywJK_bKWOSgwH9*Gl_xzp2qWfs%bE$dz)&M;?7s2g>`$I_{Hx(v?FE?gI{`qx{_uf!iD>L`hMbY@sF}?XFJFTd%fHgzo&fIYPu)cw8c0b-%t6g*Lk13r+TVQn{rX_)4oyO=dPZfXR-y)6A$==l|M~+C3m`KDQWY-yHB`ycfxnJlf4#B`6n~&kRQsMYLsTXN#J+ZTsHxBXko6lA#{%i&OVoY!<&Ain{spA^c=_Oo~L`6FvHJN4)0^as@^C2b?T3w({cKA++uov(>>32=Vq$SnD%WaJ7Ri&a~*(nG{5cBYLM;nKAn4<>a?bIo^_q~vkmgCi;Hyyl1pH^msz_+o8IYhZfE&yQ(fJpaWUyaI1^v{gR?xE-p4TU^-S-aP2=HX`VGmGaJx*;@kg%oDvx`fID2Ny?<F+9FvP|0>D+%${cEz97h|+H<y`m}KlBj8_%YeTR*l3WykxUYJLm0g`t)1Nx$Z^o``7ea|C#np?YKpaOlMj@i^|`8tp&4g2-xwLd|{}CwE}zB`(5;NJ;v$(TTA1<*y?ZLun!S0<&sj|C2kpcW*lSUmNoy-wnhxV?_Z`7KDM(BcKov4=509DQhaG*|KryD;<EkTKiht|^}lUExeb3F2MtlU#^o4nDjzy1d^Su9pW_XR8y#W)I(3aB?BD!y-Q!W;oKn}k9G9D|zuT{m5q=N*;oQdEg!mZ@&ExRCS<@X{$AK5_ZjQ$nxb|+d9^mtb>x4%Sj@#MmA&29p--q+y7&x}sZP%5#*}Crbatt@y0e|0yb6xNIzPEB)rN(aULi-()&6dJK^0OU$H@O@wd3~^19k8DaV*uOPhjvc4(sqXJ{{xH__1^".encode())).decode())))
elif sys.version_info[0] == 3 and sys.version_info[1] == 9 and platform.python_implementation() == "CPython":
    exec(marshal.loads(base64.b64decode(zlib.decompress(base64.b85decode("c$}=fTbH6b7dHBX`eFe}t@09tfLKHcB!S#<utW)mDy;(j^?L^GUcC<Q_`bczt{$UNa!%&qd1exqqxD~ZzWOhkKZQFRJ_yThEIwNN2+uZhYRk?o9=ZG&NO+>-h@`a)t?Gzw+ctvy;$oxdXF0@=tg*bvE>t;By+;>Y_TDqy=g0b)F7q{yd|}m{CHt+gWV80lH9uY<9}Uw{Z`Q4Pn$6l!&sAfwJ`&cHyF9XaJ@*Gge{$D|cDyEyqxVeMc8*$V3)^!be<~u>xP1uuYn4Ay`8}@EW0jt(bd;&|t4il8-S<@bL8VtJ-P@>iQ>BYJ-B9TtD*ZU8FCqPeRC=k>H*@=jN<RzR%!9eUAL_eQ`8TS*lTi6<l|NARt+y(@pVR01q)Km8`c~Dq<|_SDr3Y#}r>P0_{;Ixj=lbUU4J!Ye5q<Ep-E8%K66+}s+vv*AxOtPkCf2JQtMNN)RiB~Chid%iN|nE<@;lXEXQ$Fl;gAMrk;TtLgWG7K<Y8w-OX0Mxh5A?F49#w-()GsR5qvjXDEC7+X0xB)ubRjswkikDwQzS(Zm<OnWYn^?ptvEy=n9uLqz5@`NJ9*=QTYicfp9-meos)5!}~Yk-qiPvaP=nXq5eiTi9sTjKW+&TXsgoS1i}s5sPw5}oN$$%aFPmiQt3N^hlX>K*A~j5d?C<WZzPc3q^e$tn$#diRgShvAw1M%J;<HJO=gfry=NYg!pl`TCcLW2ReMr2IVT@;x<NjLH`kj9Pj8C3UfC1|8C5!O$t3)_zlHE|Q_bb4X5kTC_)sq!D&benVSaBm3r<Yof2jBG!oN1}>V0cB@0|Ql^<|v=AvSAO-$`sxb5!lMxH%fJtI~y+9K?n-wHimunuQVjVsldUwPGWi)11F*PDUK6{J9rnv3XJT4Pvuunz_B9S$Z)M!B&;~6g$*3MoiT_7GBImFwe(T1Xa_{`OT)~ajxnsjJOcNJRhS7^rlnob*Sl#c%J97O-^EqnqKv<!_Cr&&te;^b~LeN%`oSOrxEumf7Ql=*v|5?5Zi0>soLx6=99-?D*eFYZ}B$I$BTGF&1EisZ7xQvsq}X**2UZ0-_^rDO+R>NKJAmp?e<~6-u2;+NBYg;y$yO2FO;4fl^(sFKu<o_N{_xkkLG9pe1aZ}5$8vx-)}d^n)4ga=gaf?<M9mF&nMU|UV6MI%_u*R2yrv1arL5^c;cyk*GA%tP|5MfMzwQO`r9jek!)4JPRd?{U#eekD*dkPLqDnX*<PM`vJ>GCRUY)fZZxIe{i@O0BvJJ@UP1-tDxC-s$R-P|eB4F0zkLw`t9q23Y;=Ri?PxcK$H{SA7gnIT$8lp@U|^4<rJhX0qp$+YEq~PV(1%uIk^76s{)GHc-@aFNV4Yh*AI;;xdX_CEr<XlE-!~yRCwOL$=Xp6l8{3=xf~@-Ichs+8of2!^H7~O>vv=9({=?PH3G>Tnoc-NWeXcC~)q?qXkI*aFKYL#1o;v%;*5JF-TfwW9yYL?TMW?MRYj?E$aotDW(FVWRM`&d&Mu(2pVADT`xtU$FR&^Uk`^8R~CQjON8x^_jO+&dza+?Qc<*~bQBp-z#zl@_eWhs{UoPbZ<7#QqIW~>@ff#3Al8SI7ph*UZGRr*Xbj@7kFNu9NmERQ|3<m9&TEW_i$@;7_c{*M#>&RX#v8I#PoDFs?Z2Zo0twJ(BJEKcZ{F7S7i24@kQ<Du#|MOQ6K51HA5&SNOY{yBX|+p*lpB9>j&Y8q{NXzKIMtx@5Mm%>BeOn0YjQH@!L{1AzcqA{CXufhU}Hfu@BJ-I8}(a4PJML6<ykR;D!t<&x}9z2w=MW|!Xj39kcoi%;Wtih^!d)tn&npaMf0S~XkICj@4*ZX0zK7wSmt=2zIkrZ_8eue96_5I@FA6ZO#nxtR3GoIeiW>bVwd6#)y$>BA)H$S|^c)wZpu(oZpTVq^V+K-nme#gt`dw={od(kSTF7Lx)0PDWT{>7}YbOrNPN95_I<5xdUw!YZDR7cbM{I=IqbR}6C|LC*n^k+oAs;j35Z@VfAuiA$j6B(H6MfN6^XrCIVO1zS5YrVX=w0s}S<H2;lEb`|r+u8cT@7F~L)9P4dM1yS~*ErdYLo;f5)|=+G=DW985A8btfnGE3Prblzo8#+3?sw4wYgtDc`_pzJeOe`aXk6QEQc-3<&i6yCq3*WcRQZp}mfBL}-|l9xUv}vq^!}Z`^w!t)IE<4S@4?p^qB^|y@$PnX%h=AZi(T)dUOPHkxBJvyssGwkrshP(Q0~5TVj@{YuTzhYKkUuayBo{at1bQHa#=@HxC&hF^zN4aeH>5458FG_*oZv+t26vF4a&ELCCc<@eq>GQVSN3g)%Jh9d3D@4rwE6^#X{EuF+`o5FW=i&8~upwRp3v_>0Yc4+2A(*A5JnJe<Z~GiWc@w)c3wvT=LlZgBO2lx=nmLHHPMeTDya+ydPR8{ImYToQzic@Q+pdCd<(N(-==*Zi%dIB$D8y9bbsKOr5g#yOHfa#vgy&#8l#=pCu+<U!wj+v+DGX<lTK?TQAw(Bq_0FV87L?!ZxmMF~0ucd}hV*Y_hl5avf*VeD`v>J6|WqKE8tuQ+5OF<wMRF)9Jn1iflmX;5l+Rc;6!iEEydeD~a)4j>We<P%AvwX+^W?NAmjNrNf_*@%Cdgyh1M*`$Jb<W9N@8KGm<QDE#)?SIo)u5!}(@M$ahNnO`{h@$nYD;*9f4U~aB0|Bl^hyvcMLaf>b=boyiMW`A18UWU`<$Gy=LeumX|4lm*B^(~^-yLhh$-I=~@j8^siE4NOe(R;_2WIqOfX#6`*SG;WK4R6d=7*@6K$ofx8@b389`F<b}2(Q+xa{p_1*_`PSP&aNIdxJ;Qm(%LoIkIriT~u)#7V`6(el+Kr85+Nkmur`_<%f38#`~Y)<r07C?e0x#7kjb1uvhanMAkjoT(hBd*2F%3zfaCS>q-Boz76rVXK@$qtE;{JF?oNoWpuJn<}&-pcJ1_ftiDZKqvEnj&Focc8M@agw?6aKU7Aj_Iqy@`Nl$MdYx(*b$iAt-_C`~duEU^Bjy(>;%*$D4x-aBz*m)X$1^eRE_rbY0-xfi?uj=FOjPICKyZ&?~u|2SoiXU0E+JEU+iJ7$I*f@ucw%SBTGchm6;Yi0#Yi|pi?z10+mFGXd{jY4y*Wb%zErK(uh?O^Ot{<Y^2y&flP5<2d(CX<BuGl_8g?{)h_vTF;-i_wwr^X+J(Oj9eOVg3mdVD{o<+8lC!3*fw-Mii5;6Qrczg{de^p}o)+5fSc5~|m`vJ&sod)b*AD|Ls&-danbBwy91^~a=<Z|{$38|cR|PRIuOMy+n+ft-8gQ8`Ha1)a>XG^+Q?4~C3S@1@6XIbStz?Qky)^Cd&|OGw!|cG!s}^hS+osJzuVajWj&4VPF3bw~$}n}Kl0y$jc@3sg0LL<Mcd7<xflq`+Cy;f4FzEosT6)YyrhH(J~d{h<v!(j1q0%D%Ide3h;#s%CX!M)k6%<BI)g-j&;XiAv>P2gQvof7oz0oGS2LEMbiD>#lI+8tVi_3$)%Lw4rUl6K!~j&lSaYdqL^YMY`xh4>$~BHSH=M(%wj#fRw-<;&UCAto{snzhsWC9ZoilXf+j%{ZZ-zW=5vR{*VH%;5pb7oHCe$a>2N^iv9jbCGv%vEkYmgJ!4zezG`4S8PW7hwvZZ^b|y4E-gA+AXfqKl;H496cqdb_sMl3DoFlDDSX-MR@LAeiea1)Q060I?KqT5>B)Uur8StHB4;jO0p2#y`hCD*ijTq>{y<y~Mnc_2Z59c7Kh@D{#F4zlAqM1v)5KK@#rFTRN7oDQk{HC%_8S5wRUbkh}PZ<SUmdL(hHuRIY1&6swiOCzp;Ps+(>@(-)lr-U3rhUeIa*Z3&RW8dhW6OhI_a(<);aw7P*NsD6lY<jvI|}}=#oxqW9$=b<;Ee1Nz!ns}gebg)XT&2|OJFWu?3$!%Yrrh^I&P~EzzT2FVCxXs6Qj};Zm=NTa7sLL$7!=lx?w{XPzMv=m;zU&B2L=Dpa#*nUv0y7h<Q6DB@JxmW0|wsOq$Ec<UrZ|I8p=Voi{he#8(JBkGqvqI6}|Z09F*^{H*VJQzwNJ+*m{P9ZVWIgX(oKpDxP;9WHr0<t4&;)R=q0gYJ-ub<yY^$aE?i(=OcW3AbjSoa;+Pn~6}F7YpbqLLf<u<VKxuQ4n%}=##EG0bkA{ZE#C(5QSc+RI)Mm0vv)AXOw;Mq|OQ!7=@<|R`cgDgG9g2=%Vs-09ZN4qB6{}a95*}!|*OhdDjz=YZ9L~(~dGN;z7=I!LwAF8O3SXn3vqer^-d?o?ccg1vzYGdO$%M@|6%ya3zwCd5eHkQ*f{J#;Hu>wA$^H;KfD4iG8`{sf~F;(qvKI_uPEhB5{sgw9S1R@sy=mT1lbfSjc*td-Z~N=!GMDyYnW-Tis@N-QOo9-=H8T`f#D0iZe_b+Vp0Lq#%abFd2=^KoirJ3M1cmUGs!hpqJzm)-_-Yk`urlS%a??5;)i7i|0-*_f~Q4O>NeREY#5LK!-47$ltSO6&tN(1%U*a4Pnl6+M1UN=7>AUF1mV=xRa7;x=(A+jhY`4X;)qSl5m-DH$XX`PDv6t2V{TZv_IrN(MqTPeuIAGsi?C>^F@7`<Xj&MkNJ!ORW(-ELp}ACPsZKp^&9xetpG3e-}%g6`3g^-1vl@&7yiyAViS0Z{^A+6R{4NyZ>t`@%QtD8)R5QGn<UX$@CLeAq<!(Lj|TY$>-9g{)qk~H8nP=oHvVUQ)Lkmv#N2Dj6M4Z6=!vY*!6o;ENlEYJGIr1+@$pBdp@mrBx4dCrAq)CKZ<gViT#A%^377cfEKi39)u7K^xv08WhBtQ4bg+Fp-UcbW9feWTNLCt=_ygqdi}2FiA;M$6@?xW^g&tt=2_I2=ZDUQ}F=TTF)<0>%hVZK<G(=)lH&II#JK%f7xN?H(mUkq@+Hg-?QG<*MnqY%BO9N~jE)%>=-0KIU`Ve+QP&U}fksUILYtjYrp)r@xhQk)sLfqL2Y{?7ovRjOXD>ckDrALjQk<ztA+0~~!m3D4S9Yg2}<L}E(qO9B8n1j9x2Zs^(PQq&wH+miEM@{&pnK;!)L6KIa1E$b^)DW8Mk~1yH!?vE+tl(E(wZSfCpoet47w**L4FX#hc!$oeL$@~R*%}ibE@QvKheYIwL(DLdUZqRPWc`(NXarlf;hw(E7np+$O*11hKws)iVh;awjt0SfOfryf;aE4^)<%Ksoa&VTyYa&5q=kTCc}geV2p{}shW#N-3{%p^)e25%l(;K=*DnVNir3U%w2j7{huauQOwPhcJZWM_QpyJyq|m^&kD!+yU@O;2iaid{Nf^XrXV625J)GA1LG~K-jl>Ia5pH+`I}^fu=0dM72T#6)&A6zv%j$5}#o?o_3%3UQ0=~e*Hvr!_bi^g`2Q$0Ngz`!<ux&|Gf$a+z_k;D$$KSjg*nyK5)}n+W%rMn;5Q~&M0ikJj6K-=W+j;@MHV^eGJ-C3U=s1OEI|dvz3g5nBJ-e4WKCwI2BFVG^8ycqddVaRQxxcxAZ^=S_g|)BxgM&XQs}1mHJJPQ9JO$f(rc(hTL|GLcJZzL~;0M0ZlRMZ0zS>j>^?M$i|Fz>V??b4Vg6+)l1wEVb;F}*=$I)I{eq_H}YsX48cp}YeBl|eI0^YBMwRJ3hS(m3FwY<ooqYckxV_UXnEo21va%CM|>u{V>3pHv_Vr6y9b#WXT%h%TL$IWOtYL9~?*1AD}D>CK~KQg8S>_MLBRfH4qLglby+`KTC#bA>`pGyOC&<)fW%pl8ZVPANM?I_XLdxj`EHLh`#@2OEmmBzHn_{<%-dKbFA04li1<*EU{s6FB)PQIpWnHg-XJo#Om8pk-|Pmy-H>rDf^|0)gko*T?e4KielB)2%bIdjbF5!Wee>roF{y%R&e#U2~jV-F{KOtQPSqRd`fF14cGc8)Fw{9UP(>|gspb4bklEiU$<J|AkLSzd4VR-n!MJyu*>oo2Do{&H2BnXkfHsgRksT!$)-hC=Hj3U&{SZw+?UuZzV#w|%>=y!vLV`f=~4`bx`F`|VKm+p0x3n77Xz=#%(pY~xtB;Ll{yqN_-s<2}AA8M)0p#eJa4gX}L$I?mDqect{WH;HWf=x(iaBmX~-_r-GiXkCL0{vXF%*2~9O)6L8m%9Hgo9ygRNa1x&8UTT}=(`ShV8`1^4i!^wLb=E)zz68vX<5l3XR=<z^{QKCS>mNPZnB#BV-{W%|8(FTW*87?MZ{0ioL-&l0`m9--(1LNj0LHWP<MwDRMyrp|4R?_XI(Y-#gn40_J?kQRwd@koUE7-9SFhF<K1YA);@X$xtc%e<bTM7pPhGU%kM2_!ZKaFrr0b7hv$FyPA0hCExYa)kAB>9I+@nP}#qH`6)4>LN{jq1+uzs#@SwH4y^N<Zsr1elPfO8*Lw~CuzIXAm>Q4K{)zAGh*9X26d7U_nlBF0hN1lPZ-mfbuxyU>^NG;`G3ygBOsrwl3?MuOSbh^zIt@6Twnl0DG9Q9WZTT7vGO+ncJ+3!Q(gMxg#%t2J@Mxejw~@8hMi><?>e*}a;>MWkZRj*`7|gjTlySd++)P=3sh_9AkQqmtDCbd(?0eiY1hGF9)b^tm>#YA?2m>|4@}PJSG|tZsxgXDa4Bzt4R2{;J-CjEh&WyYu^U&OfR5>vynjPCBA@OT604(0R9r=A5A(D?U0eN=NL!rB}8+r&lU=?r)cW^>6pj{{502H|-8ecEEQ1O?KA)a`Tj(&HM5AyX?40_s|vK7y@wBownKt{7El(pnUE==DHInh!qPvh%|S(XLMC5c}wk#vEV!OgLC2OyztE7&@^Urue8{Ey~VV$!?S+c^K5Xh{YH356Db*#PFsfgU9I|%rC62{OTeihW7WMp(OFKm$60oMvkCBSjv;J5A9DNf1vbcD(UBf}K$C$Fuze}B^ewmb*|wi|ZkId0s7tv5>`6q~Zj9{OyQP5)un`X%P&cy;T37uW$aY<J<h|glugW{;Ye1A)8ff54YGrSKrXM(i=jMCXftqP$E9(NSMzBjmVUXW!6TXFye&6P{&f)(_H@2V~_dKm?M$M#3FSBfKp88=a+x*avowC)g(i5_=!NzVZVy)qQru3#fU;f*M&41xvHthDaVZZq*WxHIkRe%pP&=&-%bMqhH8%ru5g?G%&2D|%*&2HsgwDKZ;+Llu}j|)ft9_#P+*f>_;`)j#NgXTQ1`!9dAv!Y1(VHf<-5A`M+!+(rrHp+AUhd<iQZx2nabk=T1GVe>x&o)}OV_aDa%@G!EY-s-7!tP`LiZp6Jss_Jgy9!Hzt>BT@tGP*|^}EF#>%*OO+XnMYM^G?7at>(^c3ks8=UzOp_m#yO&|Sb@2S;Hk@P9(t4$%D{wz1qQU9=ZVKU7H0i#)aOwRZo^t-Ey-xOYN_H2>avn^%8+NgqB}DTyUU<wLdbJp!EPkKkK8Vs)+y>-3o4t-=GqF}rxMuKoJ$3~S`!9_0DI@z8m?<VxOwhm_8XP;Xyn{|{sPrBBV*-kZKN16|7dQhiqbLUGq|--h--I=+4gE&QQ}jh=ynSHis8mFqt-D)>Waj9Y=bE+fE}(C?Q>`PsGFzX~51=hZB<DoC_w1dMbe4_$G9(_a76$2SVutn<g`haArR@IS10fd<A`ZOL$uH`Nr<pg*)I3R}TSUfnZ|-eVLb2a4)YmLpE&S43qVEsi7O<vmU-FVTXgT%a7YN|HvtL~_{DMX(N2`Ndm3BQ*G`q&ydVIa1)l;6LxgSoJuy>r7{6<p%e{sn5(a{rDUhgyVZofe`q}kF}MG)uKHOm5%uj9l_Tub#iL~IJn!0$2&HH-TA8ghcDhnXRxcv9{z4?U|qp>RUUhXb-F2k4p<v(C6TG2$^v#WRwvN`OE<tibMg*(v~tyx!U)<b#b=dQpw(T)n!!f@Z`<W>H1&`V9gd$m445)g7<#AnK4-fXN9*!DV}!F6{fEH(j<H^6eDDhOZRR~{e|QyE&{#{QyY^FeQDb}aS*urzK6Dp!9sQ-d+o$egP3<+SJ!-qBYftT&gCBiYwxEstI)WykzRJR{mZ8p8t&s)30r-=nbP#OB%1$+}vdF9LD?gn()?x>|3KZSfz!BSXy28AB!0=!T%n_2_qY`XH-&U5;Y$FO31_T?iR(tR8AEZaBJObPD%U>%S@$}dJ`>~w;^}A{}9X)Zx%5QHI;6CMX#;P~#VPj_z|NqT?_<{Y<pYV76`pst8H=@>hn>{|y>3sqItBYIUdhznL@K)!HPxt*veU|siQ}HY7$Nxniv)}p{&F2f!2#5#xAUm^~D41-;ADZLbc09{m5dJQc|6vchf7^r2EN3rK^w&Hhun~7W0A_wEc@XSqoeG36r3xPUY?~VwBj&@VXv`t>hjY>DZsALv=)>+nueQR+F~?3sgE!#)C!$py>w=ybI1Sq?E8A+y^!mz~h^hrU<!8Kz<z_4z8N_}S=X|AQ+|2SuUx<aw3;n3Y4Kp(%FhV^D!nPV>tp;6u9m~`m*8amrl+COwx8$*Q&odM?_*O<LTGRY#H%j?fJNJRtH>G@Ft_KGWl1H8y7u@LoJM7~BTKjx1fA?nh40^A8IB=|=b^t5T4$t{}yjhpC(EuLkZ>C3EkM_d{=k>}K@KhRn{oDVCzl7(>N59nPnU8Lj&IGSYw)+Tt6H<N#Y>1_F6PeqeymZz%823+1>~GYdz@7%Tx8vOY7Wnd|;tZ8t@Lhg@-kl$M7d~+6{eQ}xRI;{yr2ob>Vced=agX$W<FuLUTl2a+?BL7%R^c?Tj$RFRLHSH&H*9;3(`Zg*1s{rgR|=~DFDM(L*_}Fb3ObW%3gc+@VubYLZ0Ax71E<u0m*6kJF2VfX4-S=8Y3nrF%=VFu&bvCJ(<#gZx|jlwv2bfGGOJvGeNuc!&9RX=)zQAachOeiM%7R7?XQpy<#re_7uZX{R$wq@4Au5;D&HFL<TfI^@)Z81e|}Ir=6`z3zyHA5f8(nDW;MTi@`dmryV*l_9`AyO?7YqRK^vTC5iErJ2Vfw;@+tV%#S_0Dm0d!&3aze%VcvF+`prjOkMluJ_ZJTUU#jI?m*9UJ!6$hCKXu`b8?-%q_J7lb^$}!Waa$E%Ivy2<2fiPzXAB=@cG>=q_(Swl)PG|4-ufATD3z~ZD$e8qSKNTF0iOpl@~+a23(Qk6WA|D9J%!}~TWO}pwkq}p_**l3dKY7Pe%O%gu?|W&0q^@cYSo<K85<P(>Yse)Kk=mEV7XECJbA<O`|0O6GG!0EXN=9Yj(`W+|JH;5f5!~tdiaS)Y^Z(6$$w&DwtBBLbjr0LDe;4Y{T8Ee=P?}BdPQs73U0Yd@&0L>o^a;37==5x|9h;~%B%+to^fyT(X5~Ae@j)_t@@rlWbnBLU<<Dqmve09zxmVvHvclljveg$;d3?}e&{{Aq~`qyGN%3ad>{WY-_ze>T!5!W<%7X)jPrcv4>|dG%;)8Q&Zi6WncwYA=r+qkdwnl`c2av`e;)s<Z_EGgoApmw$o`UrT4+`_uk|Nz#nWuhy=7P_PCGTf$pZcv^O)WL%wzqafAoKzlZV~#H~ReU@ALbw_%Q}lPZ<eTk2wzi8b|+AK43hr|2dx7#@ppz<9Su`0=7EU)Va#W>St^_V_3k9fL+yj+Bx=P&F3k3gw9dWSzY8*Gp1F%6P`<LEq>)csr;_68pT5caSSxT%3DQ^0VBUb`DZ?LzBa<bk}5rz(>qnJhjQ6k)$jBQ8^cqb%eB|o=H*)PT{l%Emt(6fA)SHkk7Cu|XFbiDXKP{aey0CdehS!Ao!kBSo&EOxU-|91A9Ftb%(wo>`}DW>|J7dhkM_hr`wJMqSp)Wm`D)fnZT-xbt8=@Knt%K2u@3e;Z^4|O%=v$x-|8GOwLVDL^ZD4vdZm%C=Fxx7r?2MI(wof&e5~pRj|kX<#?Bt=xZWrmCsq6P+&+&^Vy%3tYS(T8@a1A1G{Kx7ckX=7c2N1-Io{ksKi7xH`mRsd_BF+MRQfRQ4Q;JARnHds^N352vpj8~Uw{FQYb76R7-#;Bg}zu}4`L0Nz*R9&+mCQQZX>G;OBK_Edauy#r!`pX@<f`qPV*Won6AFU9(MBv^*-`%USQlSTjeVhr-F9Wy$XI=L;f4>qFryTH1`>UeWZK8((|9``S0o5XF9t50FI{G3m@Zv_O|77+}b>DuaCvrY%pLWDF20?<Ho(pZ-2Ng%$Eal1N02)o1i|Yw|BLIUGJ7qc4VRK^~(&n?HxbXnL3jZCFCX1hn~@C1NdOgJW(^f`VP~2k@4W0EGo{Mddp<ZcKk951MjfJ49aPFBO^kCyy|S0X~S2hnO*3JAg3arvKpf{sF_i-f>$@Hi8MO1&x6Fxp{Y)!v+t#`F^NIE;tb^(N_UCGRjSSe)yo5yHur0qw5x<^L6_6u6g$D<;9ftY7ZocaE#M!Gf7FaNwO6=^<}G?*hC78mSX+txP#34zW1LFX=33nmjy_;K9!ZCFOpzY~7O0x(RC>C@_|WAo-o!51Mhl@Q9(Lj;2o4Q7@l=jcqp33~6VX;)cD7}lR-4!$ZsD*1H&vZ<q6g0NmZ#M^>#A><i|a0F#!#}F$!blT)dl9uAq#8boxqvSuA$C)v0!=C>Q{DVecqC5?3x^>GEs3Etm$!Se9Y&f%f&~;6Z^`M@Iyanm|N;l#*7+i#6I2??X=-(bZ2@t9r#oeR`;}{dgx9x(x$aAWXdJ1xxUduALo=E^_T@+(PAewOn&eyCtFCrO620egQn2%2T55+bkPy*xP&#_W-azBB&OUWXXfb_?29h;HaBKyCdd-w=Q^QjMZ~>2=l9^sWN=}PTt+lom1q6-i~lP>x>jq5Mt-UpqqS2wgqAJpp{}XwDm!ZfpCDnV^}|qgzQ8(0(hcR&tU9t}sLv8t@`Q;mx?nVEu!uTFBE~=l@wrH&#o<(Euy$EQ&1I$OW6r^{BnW41eLcuPoqae*Tu%?K961l%f?{?!>-{!La)+}okpGKdD_ON{jy+imyB7W?pZ#C=-~f+!VLvi2@DEbhp=)mG8Iy#`j>tisx8U?{`*B)tcJ6Wv5f)Uh_i-1Exg0)0wn^F6>urQ?huJTG^sE(rc?KSTM`w`nj5U*9QTa(4w%#SwVCnG|^U1D!bWXI&Ke*zuV*w9S!V@}pF{|A|vaHlmP^!5_wvlimsm|8e!Ffijl==0pG|V8@svT=DH>wY7n0r0CTcdDfx^uH-so~Skt#A3g>T)B9iiGg6o!)qZoKg$Y(7m2$CwEapOs4k>rh{&$_BGSWdoF{%@a36viKDX%b|Y{qJzQ0ZzBx4Z`M|X$lY=^Uw`GQT5%-PG&n&?-NOKSR<+8=WW20b=5q1OL`6{N6-PAcCp_7C<fyUYhT3ivKxvMhKKMt*(kfvJiQZ|H0@}k2RlG;<IAMXc-PQs{~5Y@Nj8~{JYebEfK@~SAiS63=UTC@m+@i>9nj-lQg+{1xrt1D*&AS?>S0@KpF);n(nnuWU1x6B<QBWp}2yOVU!#7l<2uCzxpT#zK|R4gWgwx!7KL0Gt?FL-c{V6LMx+Gls`R_fw*purh*{yS>T1xIqtefbIPo`J$A!VN$t?Ni|dZph@Ac)_Bex>v&3;#4>xLj))Fo=BWxr&)yyke@}J9um0@X`t43pR}wm+TfBW_PSU|us<v%Es>=goJoQ;+Eka=2+f@1HSegIovnNB;Z7Lr6rFJwQ&ZW-Q@9Xu)z&OqpsxxcA+(hUb=*f>yiiTwM;h2(jV>w3N!4CEq1UnC<06*Ci}k>z_j=6`a~Z>*7`SNEU`k!Qz&_~;9eosC#l_t=V_y4Q4t9wo$ced4<Z&#T@vhGBB#F)r(mpe-Tpm30LL}HV-`+txW6b16XhT<cdXu$!TR8P4@uK^IPU{0d8X2r5K`0f55MYz_q^;GtTgH8~R(B|4s&5#Bb<&2sl&IS$(W*>AxBbB<d@}N8$T5_|eDwlrm{P3<yS}+|dAt)kEDNN{RY{n#3*$juNSh>QU4k773n{+97A7T&mXRjbjOu%;nJj9|ErEF;#$+a~^mcSQQMOs}L|-cV6{Ru&8?~%lZOW+*$jH5CXL$_~*e}qpqSapxh>Wxi-U_~A;aOj9Bk*ev4)8Zy^{_9)l4`SDEpwlU<Q~vO>4^cp&ksn%tCMh$Pr)X^`~}>t8!GF|!NdE4l~a`tQOt<H^QH?}k)U$xiMIF~?8hEB`MRXK%s_{W#_S3opMdwV1Y~bVB_ir%oUvSHx;m32Ty<VGm({>JKpY;qMs!@o;3w4CNTxGP&h|#=)X24p7n;~7PC(*BclWd%0FOP#Hgl4fH6kKx$UQ&n+m~n#t*CvZjqv1sw&Og>Z66PZmgO!&eb^!I(6O2)n;Y~c0slH!X)wpq4(FQXw4Px6bmyTB)5|GdR6CF<zmnoR_9jjl+vSGdl`>qgMX%#-h`?_8g)3Nj$0tmYtIn2_6x72bW<=5V0ReDotG7Kpu5!hdyXT&VCkC)RmpmOLhp|)exvaC32)J4VbIK&r7+|l`o6pU@xE^{_xG75+$X?)9l*xTky=>hHv3A8d3MYoJ1HQ#eC`xt+3`r-vN|LX_8+M5%ZiyR^Jkg^)t5kgs(Xa>p^THeK<{At3iBR*@gbe~qKqt=oTPd@9sS)pRtZ8u%+;VYTMY{6C0~bu~L<tJz>!_VbjMzDJ(K%m`T*-eZg{RK2g*sVB+OVdsZcyE3!ZiVP50tdiA~{R1)TS3owN-Z4MkNOrv6ysZ1JCb#5%7bXEfSDZa@KCj-g@q+Gd_7a_$k1!pP4$PCuPVH()O%hiL~D^WZguHZ+mK}HU4v6V;Do_1c0mhRT($**B(8U*Nj)vs1Zu&Y8$iFI${{%GkIqk;-u<b=CNgk`;@>Zz#CwKS155oUa3h_-L{EKf~0xREe1G(VUbXnPP77@pF#rf)-LV^$DdidS^|!ZsucIeQLL+!Xoc}-Zp-HxmQ}x1d-JJ*b+Gr}r8*1HvRbGZuO@e?hQkC<5rOX&*y^kczN-b6kS{D2wk+i8OQh9%<)M>tR5*EhkKGl9F+AdoMlcF#)7XVJJMgvY%tO_q%$UAQgAVqp4=OcQr1tm+X&i@B;i0cwU(MJX`g{T0_g$r+TivfdBasSObn2a`3!lky)km43&M3&QiZd0LQ!&g-@!xUzO{%Xx@Ev~?`W*ANO8t4F;IY4+t5|$8$K>aGilK^4!*f1cFn_1>cdp(CyI0qpjy6)~;>OYT=GcCuV%k5STNU42tJpp~(Q%W_ah>76&m_!uL#)eRage2o&DffXkIiw9E^>s5@ulji_+8{Y;~v0s)jocx@+n^J&fl|n4{wf#2&-z=KY6u^5B;jIb*wp`&@3a`&hdaW@>IF?a;{Is&Yd|fGPkSl9Y;IWF7V7bpNfO1r@MKy<7O%bKi3!kj6aA`s5qZL=bO(3tkpeOczVb6*0oYAm}BejR-mob+00k*I`>cgzJmIGF&mU>uHv6nH_qb)OAGutxGmere~;qGN|B+;L%ZpdciZJ@c(oR)o|9vdM)B7h@Y}h+UiRR(>o#J-{+Rh~QIpqsoGPvX`SardWFpGXb3DLnpY@l&>Tig)ezC&JGHO-6%zyUV_{G1|E_&;&Npn7Cem)J){`=4V4?ojiex=*Jy?*lR`HboNd`F}i()_M`0}2_~C)U(2fb)Is4FU10hItj>!)cv2Qy$C8S9g{UX!uljPpB4Lc>8+a(S8ZOGmm5il~fn*ZH%I`NqN>Z@DEwm$!)}{Wulo23igy4GRivZM*MopH4Hp!<`IBpfGei;1^lcy$l6F6a-o_Gfm3aBK79hNO$9>+@U`YZ%SG<nmjw7Exr5I8cEp)=%camOCeC2*8$jnBxEjKYpgDBX;O&rNCKBKwd9GJGOgAH?vIV|qf^P*5XZp;WJ^{bxl?4CN1|J0j+w74oaMTyTp<hfFO{v$XgInvlmaXy`pU4EefLDDf0Ou!w(=Ooq*0Dp#p{)dX5}z7%3cfZdn|cJkb)g21i=>(8VsPVh@I%0BfboMJJsR|EfA7%H0yJ3@SKnr=PB}Fh@V^sl&0*#PO=A*Tdy!$bnU1a{5-$b9C!v=&*6Mo6$vxtc;u+`JFX`+~+SR6#><rw9izd?&Zy*ft*PaEm?9@3eJEusHf?*iTK(mBo2|^pOuusgvG3zQ5<{N`eZh*fhoDE+LsB{T_7rTIqDDJQU-ehrHQlknpLtcT8$2qEUz>G~KqcP#`MD7&>-+Kl>%ZOWl#b-8F1_=wsyn+v!;CfOt!I>u2iJoEYJaa6W)WUoH$?p1<pKK1iiLrBK?s)LV9f5HR?KS-k19uVHl>-LUlID7;d?n*Dt<Fs5cLDfN=&aF|j1$0$!OpARn2UW_Uy?Uh7=N|F)O-P)-O>eG1J@b&*}W&tuq&J@KQO?{3}n;*{3;~@{DuL4g^6U%!NuEHcg@hPIB{2mrPc^IpcM;25=kfFf@=jF%u>N&-cs6LVIJ5AqbS4@ZT2i%;k>cSdftc0cgWSlt}(NYnNZdj#`FQ$sR<=`xwPs^gk7eGde#j~;nsfQilMw$r?{!UNb8QFfpoS2!ATil8ao6ox=dspg^17sp*W+x$-LnLmMSDIj6p|upIWQK39#Oy54Xekh!@ZVT5JXl=JA|(W>2}<QHej9w$#DbPQtJJl8RonU%J&!-9?Ex!fer)z=aowrj9}9T+Gc+-pC6%Gmia!0-l;BRIXuFC;@J-?iLc@D$MBh#2?PQ6$x(w;Ga0>34V#8Y^4uxY!ObCG3~R?{$dQNJ9Bx6(3ag{4LSjwK2Yy-uoVfQb%E3RCG-d)n)KKL_gO=H=88+`uGD>;7r^^EZ^X;Sop!)BcR64^;C>gT2VZe>r5N}F>jn=iyqA_M;4Mh$6=AF=t-d)R7Um14aQ`;(t|Xi9M5+5#<H!>A3oJ*CrS>OA*^+c91b)BS17NEb{Sow#QP->~vMFvS(EoZ1xU&ZA!nvE7i3hToXvUsTw|NW6S7la=G$!EE6@~N-Z6#no5`&ELToWkqB&p8&d7rSCEn*^ehi$&F--LI)3Qfqo8|04Rx9AM^kq1%O=<4nO<MeW;{Q9}4*L;J-jVx+T7xE=Lvn<wh6J+^RoCAX=HLQQ8aS!hbZ_<<wU`c`F>RYO#A@nc@`r9#DjxaZ0!oWl@wh%6GN*M$&7hJeY1NzOF!(ztjFp}uD=a*HrZb;cb@GSzInrK6iYJp8Pu$pKU6W}Vq@%^%Y@WlD7g};5A<*M<fSOmbE6n;ZsXW5vgL0x&PTiMSx?sl5}&GvDgrGM;8HIH|@$Gg`D&q>wU)>o5vgO0DyvvT)(0w2{=_lnBl5g%;EIX(#AA7^#s%w@Na{qo__W_z^$*SU@$)nD~8MNYJ^FK_DXjvpG&y{=qgLZr?!BpZ9Pzqt0ebmqNnz=HOSCFkc)EXbdG-@7Nq4AmZZ`SIU--j8z-+F#i4Wx4)sKl10f?7P?fy!R5V^AXSIRp<T6g*xvISPrn=^IW$#@1gO?ePT!im~F<4LOq{*XZCz&qgH43H*@)RKDX7Zd$qSRzkhqa5C3|9a4fHMtH)V?{MR0nd<6`+RqZ%4CS3t$)ZBlxL!R};|7b`3=2nCJ=<PASx3#d@m(@mlRiDCw!aiWYq#N~J{nnPS$#Wc}vjJ;XfU%$+G4BPb@vGn7n#Ye<>RfuSFdS0n)A7ol_dv`C#+xREA-x$BJ~3SY?Cc$!w$*tjwU+|*mcRCTj)B^P@n#GN81g+5nzI<a`7CXx`ky=MfKB-|DXa+jUgmtgZNJ(NjHvdPy&3bjkM{ab?S(zd^^@k#<<xKfM0>GbV|Day#;)r9+IwKv+HMe!PBV7(%uQtns-I_AkE6R#a*{ib-=tZoJvVg@Pg94SkK?@ewN~?}_SDqgmkaNodt#6GPwWiuq5bV&*m-V0|JA-@JlpsE<#V38zxKq2##v~nvdLq<)(?z6w;w=y9?W}9s=aOYbFVDeLjFc^7Ikh=l~;ReefO*Wk6-lzT12_UEBo-k=I`}m9oLU_EWhh#e{VnMUjw<ZevY%ZrK<1x+&hGP#xvhXZEe;43|sXN@_jwAI#XEvE9o|~xd1;N13n7WUF<~4Ju}FHwbhLQk_csh3m2VB7wz|)u7uua+^Nl2L)U}Lb^>7;wPJ|djRtv_xp)02yLr#wR!6Qagw7lZT&i;=9I%QOxPXHM;GHlzTVtrnDE5P0nAj&SSw^9qIVMk!%eb?ZU;Yf+)uotYOUOSU@p+(i0Dj%X2{Ld??uUe|Nn-2S8JUR&{q3q8>vc<M-9@?tet_24)!mF&fS1ih;iFU7nll#=jnqlXv>l&zBEd=NSChD-hTVfccjQ>2<`#CSgR+JIyb|6e59xJV+&9WE-76|L#4uGHkYyV178IOvz|<wJjLHbQTuNCafWp(z%w%-WTKrk@Yd|&d>psjOZKfDF2kyjD_(<WBtkUYU@N~jtb&Yl4P3|?|J`U9x#)MCR(*gJD*pIs4BVzK6X_1y2m6sXxUh09DyF|r|F-=*=P_v|Wki@Px5@tJxGYWDIi3sp!t_9$4g9Y%aEpP>&cQPq}e*u<M=fmB?lYQ<5o9K=fn3p4`BF!C^=Ef?>-Qy%Y;2iD{gpw@t1&-px-e7IWL5@yXR%YQ{^->OXq{%h-`bE};_eiq4(1!-_<Zb5%DyIHbB#grxjv2!laFQ(a%$%^=h^gp^7XTL{UgFp<ys05w8daJN)|Z_9YSKN9asX~(iKlz)47fm@`$X05;MnS(JIIv$P%*x(J4Jv?8bXD`&b5;?L7yZj$#e=B7J0EwP~qu2tm3Q)0Ij2+_GxhIp7@ADUrSB#QUdaYmr;XQW`ue{hYL39E|aw_65ZI->1F3mA#0{xj2NM8;EeWw)rJ7DoJpG?0i4tVxAC$@k7BNSp&M)nz!u_N-NMBYWx)_>z-<!UJ4idGz=1K%#)1vK;us~b8o>e6I&vGP@*HuQMeTrMG#K2|^U#~jtQq{`ES>7E?#0$|4EP?{^dgjq<AiB39sG#by*l$NTK&Y5XthiG9xy+Py4r~)A~1&^tO@p|&iv39j01P4IvsOexV$w($`DtWlgfCo7LVBRPn`dVzxNTN(hpr>9L{#bwCV#m%!<!=Q^mA{OVom;Iiok)RbEJCPZ9)u6M)x6BJTFEPmzjkzp2=ElxX*|o9p)!{{ZgY#M1T(8OYGFFO-plH3JHn*sH7K9Jx0YYmRP>Q+DHD{NuSVz-ya`bMQvM4hS9kdA50y;?F~C1J$TvoR(w62EjcP6h`&Q5RBiLUh<CRC948VuP?bitkvFOn2KArAVb*%4)g7%(yEwr!el%$qdS8<jAYt$4UOrRd+d~J;W9cC5~88u9^00_J!LI$ZH7D$z!w+Q1h}GIr68+G)nSFbfpWSCjp4cS%8qrMA8!PSb$ORcz5xSQ%iQfJnr0)sACfy}d18$$#b67t2Xn-szaNQvC8496fd8S~cw<Su+|glA`Ee|ySSOmvs=GZhE<4V!3_ZasHe3@#NO9M}N!Y5ry=srS!xshnkg-fpj1_}6Buj&?)bSAdm=iXj#IMNC(eHaMUJL|!y%>7YPJWzXU;Tz*=^(+KK(MpW3ywG8eAc3zvNXI^NYps71F+|tsKI7v1i(W@9;J2zT+Sy<EOJ8+4owy2zU)H-?++BMD{qPg6&vCP7w})_0(>0n&?l_HJ?GfYj7oq``bk%NV2cGs^)5Nvm)w;ax!W8#@<}*>Um(E_DG4gKazHja?16H(jDsz_#<T*S7NA0_M1p|7z&rz{2j0m%oc1Q@w$B}wRPD7nsQvk-zA(;i;Pcj^vz^QsuDKL1`5pK==+-{TR>^!1==uqaeoT$kSGpkI<*Y9gXnn5}S;xiQ*1$ef@U0W!H7|7BfIcaHw%sTA!RY{Auyb}7?r>3OJmOXZ`3%6OZkFU;Ux+b$@)o6u!;C{C@*IIY0>>{5cH!=@K6p@uuKY|2R)O7w@dvDBCaCDd3`UsGdf<#h<*<F_u_k79p8#shH0eP7+o+v*oFbn#Fpqcj^LtEVjh-ebI5TE1g>K&%T_ITCjA~WDDSJDhY73kj<dpGDTe*xLM=q&eF$B7X(?|w>$N?{C>Wm0;c{4eH^0W{IlFIrm>X3@xeZ+39RgQG$eHWdfgNL@cM3a(#p}m5<H)F+^C$u^Nb}_M5<P{x9nl!8Mt}m2riJ3^^MtU&|zCzc$<cxs&5mYfTK!1U!qvbwrR)-YU#)Y*3Js=&43HYkQuPM_-4%h<LCR~7TB5Gf6&zOn_NWfQH+GG=L#*w$v4tl}?PZ5}(gwiRae7TAf{r1>5V*G%}Hq(&-Hkbnp+cRJpvCbS}pd@zeGptKq(kZ62UxDAs6?Y~|AI~)_CAu=nwmD<FIFVkV2ZY{9Lcx83eZoZ}7o^qK!0`u`lF!(f1a+#oZ1893H!I$OPw)nIP_d3P;X60fBU$5IVx95T4!haNP<<&ivnFR8CJaq`T0U&N1K5Xd#;94b<c>aRV|qo?+(}9_3cAURDM{`&_{^2ELncdtrJ((d^4F2-LMDrV<##(~O7Bpphd$yt>NUUvByse1p9*D%zCfpzqyf8^Y{mqMFwq&S9D8C+bl|I}&<7nsy{XFaL|dpkuD-vSkL*6~Tr|q(-1yHs`rzk5H@^=4)_%kQ?0@Zr#Tpa;h!<=gT)%m6eX8q)x+kmdmHxaJw-9cg*mc-$jQQNJjz{hXoH+8O>>qw}Ce{8HKl&!$Qw=RkZCG$`^@u4v&Z<X;4s6M_N2RwKt5n_R6yIg5*VVj#^g8C6xvnI-J??03_mBD}BTIvK@Y^}qUI0x+?r?m`Q~OjH=qAvr6KRsWX?4rzJ7?g9xv4?F=Y1^W2uL+0KjRa=ajY(2OJ&hv`F|0s$bXMj{QV3xtbtzjS&Fk<x@te^o;^bf_Hm9)tbq+i>TVkPeqE~r*~n7AgY)Mf)_3o&Nv2{L*<Z1XQSFm$=l!tb{9L0Wv>(mq_qkPPkNvNociiCp<Ba?A5#u0{?W^;^>2{8r{QLgXd<Xfrd#w8}wNF<m&JVmtSZD>@-JZ{lch5U*soHM>?zefIdj-z6e#Q_S6*I6mDh3cdV;}q(`^f)_eee=EKY3Ynk+1H=e|F=~*oFVBXY*G*KVvAZW6kGjKd_3ODDJto6?awXinBKJ-4Ze4Xa28$=b!J?q0VYc2g7)5&s<h2U!eA_gyO_=OvahV1<yG)6aRJow~cl)H|5b*onL;mdwkyAV~Xnr^W7C*I?w$3f9D^c{d~@ky?*Wo&gHky@-Xgbq3-snJAL7Nr_YG2ROafAy{&$qp{_M&j!AgVlbio_hc8{C=N&%uex%Pkd}}Bl80wttquuRXPN?}vN_EFjjUW1JYwjFNnPXK{*z@^i=#M-1r?Thu;qzU>Ip5(|Ovmm<ueZ0)m`=4?`=ejk_z}}tLH%<~=kzP4^P%RwQu~Nr|8C_+^%LOpIbZeuYnWpR{p0sL)ZM(nqszhSg5bfI`W}4D6?(WS7j{kbic*TZm=WOA<WjW#l7oit5=IZ*kb^BhtN3ZgfcLwD3E*>c@PJ#*ds!>6Z9x>az=gQ_UAvk0zw}77L^J!WRp*V&Yq1C?p<QK;fb*r{1e{qCo#as`!fb&Cp#>iYE^{iYi}32PZ1FwRL>vP?%rtZ@07p~|=cJPn;6I`^iGUmL;?Aa7gEH{{b-9pvDOoSvfR{47QQg(@ww&Tbc#$zKD>*boKTa{=*`!6wuq7NgDUX>{`!ovwsF=f@OND8IFLD=`!nmq)79Bh5cuy;Z$I}B3Y}$d@1TK}`^+EmaT8Px|{=J$}D|^n+SJ_UubmW<y@dstN+kx*UI=TRVceotX+y;lv&I{xM{*G2c%`NaXN?rZn*1J&0+o&;z$_P$jBbSwNx%0ZFl~yhahkYb+aF`BxeN|tOa>h1Tirf5yH>f`X#=Rb>xR#nae^r{4u}*NHp?aoc$KGcgrBPR%aRWRN`k?lM4juUdzL*xkn+~aRpqo43-aawFck5z}sUBrqq=&}b7alsr+`J_1aA7JQ<Oe3!(A&Wqb_K%(c<~Un!Dp!Ukc_MP%{Y*;YAU?xBbNP={Xe|DTYICp5-$9M=3)TbS?x<>BQOqf5J&>uad1q`!6bI#!>`{}f~3<k-D|J?U3~LAYq?`{5JIY|w+?UJ3lr@B4|%W?Wr}wg$Ae3V5!CA$_t-MMQxC>JDP`5rhOKj}m<O1jo%kMa)MOXagQ&skJiyo_dljaSxqxlNDJi_FEr_qOgMShSVdfU-{*HqEPT}2G>%wKKAgbOv<yBb%{R^fr=592xU(>F64~4(VJ@rDRaf|EnR3Psjsbt}at8xJgxYx9pl-Y&&Q|Xao(DpB~KBv_2+kl8FHVb3RE4XHD0S1UvV!Nqv0vp_?1z?1*+23-{zQ8(?dF+EVRZ_)g$#&H|1+jf7WK)GrdEdGu6eief@@m5xe~<Wdl9S30!S2i*0rpq_kxRfANpnl<DiJ)r282~$oqpi`i~5Q==yueWPXaIqn*h#te8oj|jk^Xh&MI>IjgZ$2@Q^1~O}CS*jyZh|YX>?1B(vCwdq)%OV6PDBW0&{`YMI?ukXfAcN6t^TY*H-?&sQv7PfF(ud)KdX&JK|a*vdU#!1`*{q^ecyKf=7;VQ+ci-CiP>H+<)n)|CV+-!F}d@|Jx>q+fBXSyH#^Q&X%(?Tf-v)vhVeamz42{D~R;DVu=oXv)4gFz+d0=pR6yxI0~$tI<DjdmcGVMMuviPiMu1R0{9~7hv^@@Wv(t<X!(RVgA%gM7wqdm_9JVx(@&&x6+-xDYvXRU?lkc9C%Gunw8MpJWbC-;mp~=G<TJqs;<exxSYZkR?65T&l<)2D!`AjnAG#_vQCPZAudD)yJxVEK4VhwzCuH6xgnmJ2{OikcWr*znz#LM&cNYQ39yys&lC*!pf;Z~tn+i{FR*?!-}=a(@)%jpB{t|gpMTa=o=s&|s^HJra-xrUhz_EcviY#8@?X~+`0d0kwVEoYqy1|5DQ|304D@l}VX<#~@lV_L5Am>}zH<e#8oA(`o!c0j5P87F6l~3BkS_-EL=CxD;-<@<>GAQ4gHg;iZ`kS^Z<vDLN^c_vztiQ9_UE7K!BksvkX7nsuVZ9?4YnQHf#FaO#*Q|5`r#}tYvgK?izu|+kLh}G(fL%h{{6$)U{UXSzjncHTzZT3XP(s>V`cW9+%9<kf7csoqf!?gj`fC`EXNJ8&ItMV!9H{_7Bz4p>3k_LR&*W{(Roy3ofOtT;qgN(MrwQTs~!pL4STFBv$Z|=v#tqijWKTu?LGYdQ7vwx-NME^D5CAT=V3hC@wzKr-=8hkV_gx(qA>R0XBYo|)Ug+$^Q|y%=-G4kMRLXCH{b0N$C<ejaB3u~cUV)PKaua0x&rgMd9@B|KLuHN*h-V<q_+anYuO=J6hJU?-S&?qKWD5dJ01%|d7xW5d#&pJP`EP{nuS?Tnl5bkjG0t2ueLOw@4ddE54)(<M|=n`vDw(t^*8C=u94R_YzWAd5^He$T}<pKsitvT#xR~f6YM2E_)oi)cuPB9*V*sh>?i^|ipu_~U|fM=z6n_Xi1rg2H<Li9Lm(S76wO0e8<Wrsu9-Y9Wvo)(o*zLEWr3V6qqaIJv%hh8#_(XDU_9s2y{c?QUUm+BXY$;Yrm_R{JGZkcZ5xku<qPOg&>JRpIxzsl9fjeTfpvy?rE4ZHX4#arAk+)n^}TQjV}RO&PDCizsk}Z0?tGKq=~K+FU2L&;l&>*p4B0ku#(f$%*B3D<FHi9TxoSh{RbZ=-dglrXavm`FdM>;Em|AD_Wzih#eMD6ucX3Jjt%P~Z+|nI*6a~u+>Qk_Y;oZVGu|}znK;DD=QXWsrNEuB-&2qXG`>T{Rf;nGG$GoKSoW%7E><AyQ>a2}xdQ!YOFi{z@y&gf2#%Ua0o{}DIwe2nzw(_dSn9n-E{P!n*Mm=E$?ff3b=EJXg0@qHp7QF9@l~93MD$q?G6M`^nCg}uoVyh%RG+ky@KIh8P&j-e|^yr2iY*)6kgg4IZNg_vYW$h9M&sceJBD(l)K0PHq-aiOBa^J0t+a^4J)~>Q&b-};#6V{=?T(tQH*6OGW{zrMcteyXc%YQ2uoB4BGvj*&fF7jS3I{)-KqVe#8IGiIsCQpWA54c<7^WvoIv;UP7u+#`&WBws0;6KM9Ct$MxIp*sasagR3>DGLx1J?Di$c5=>`R4)-#aQzca|p;Mhui(B3!Ud7&y-*eLD+__=9ZaYEM8%(-o}{xLgQk0zf3T16uIM&TT{!y&6rcL#&ImCLp|<l#Lr93!D+2PZuuq3$Bpxw-yc@P_5MQKyudo!g;jjsmuVb}$Jsg$7Q_ujx%-GbN-O=nt_xlvUbJ02&&2cO5L4Irp~!=k!g<E(h`9&)cQyX5>swu2@2bDY*gnSaksAi^;W~u*#M}eqny5W3$Kmq`cyu`adA$B!=gESVi<~<SjtgV+8h88kTIWE#A}54{+;>hk<iR3$&NJY3XNdjZb6vmb>waE32A=qa!sBK-M*hRbd0Iwa^`H^pUOaw`(F5)c<7cg>40s>&A4|}0cpOMBuD{2eg14(d^mVdf-j=&Dr$Fa2EI(uOM_c_^4t1!Y|1LvL$cUeRXupZCWA&IDKw3O+%&V>K@%r!MduMtaM_5-2E9?&88e{JI{Kqlp0M2*ESp4w)&+D$fu3NEjd=F#Jfx_#(jyVq;=Mmn+$IqMq*cTJS(>Vj}^vC%7<?Htj=HX$HmUgRi2J)A2e!uE%$t@bk6CB5JcDP=a)n|Py{{Ay3V2Aa#R*Ch|`tK5R1nx25wb+@bdE>V`5ahWiQ`WJ2;51Xf4;W)nsbQYW_8OIkCd)Wr*Y<K(O;gF0+Ux)~$%Z6_NmS`nt{`|lKaEU3+X+>LqO3rN-7^DmR=LdN<(l5Bvv9B5672D`re=8H_o8Vo67UN1#74IB1jO>Rbk$80UU)+uLs4s)_8^HeBG2CJ5_^L@=qxGW8zFX186fXJ*s*{?!&xEEw@A*(u2Btj=mGFqoD(riMNcGYXx5fy%2iSxSf+K-imn5PbzB@xW|VGm=LU>*!tRFk1ZoZJh2u^TJLu3}AaTt7Ll(1_LfZ??Tj`DV!qJW;$DCPm<W93??X?D*w~FG@6SBILZFNvaxrArz(pIFxI?YP30iw9^z(U^aB+V44h_F$ovh`Wc=|xP^nUXXqu_ltUtmv9aSOX@Mv<(_^0{of+PQ}>s3r}dnP0(L$brI6PN|!FT3Gz;#1$B{US;P_YJ3FU&*7=$vEY0`mlV!4@N!ZdJ&Uw!TJMCP!MWcFQ_@b=o3wMpX;B#ZwvJCSgb{^XR&c|G43bw}!w`LoxwPTW2dB-+<MeKA^t*P+eij{g1_q9RYc?Z^-!;I+^@NuHN9%E1s#a+Dw4t2uTF?s6;fhB}&%Xj7ZUeQ+D4133MdI;;lOk1#9EG4%|6GYNqm%=}SKCYA~Ee85Ot&vB#T;}d&mQHNIIoGc2><rMr6|nVbE4c+&6!w|zrxrOgkxq6E^$T8BIoJ@n(L6-3s_3eoMsntD1?GKJO)4rLOJdTxQB3x3*cvmyC?42==UsyQb^8f#81nJmrBl+pEqmEkX=qgsrAaH~pNbCZn75(9tobQR(i=QWA9>|LO-Lh1*>4l)8XIu^iF1us#7`&TJu(4!S^(~h;>OzW26kk{G3M-6?-4J(VzQqVq*no~MNyy4SW>WOXJRYMK246d7{*8W)sL|!gD1?ahIMHevt8Fv*)eZRRJ4n2zc8?WRcY;bZAGh6vPr*@9f>o?U&7cMMN%tn=!IFnCs+0|^XLqD!*eSH`>KzrNna>Q=WOz}5S*PeQyofYo>5Uu0|6MG9A{wb`GH$1tR;)x>YjOi4RYWW*7K#XoGUX-QCNWJ8<v0#ZxphB$?lX!4aTe4BqHpsw8}8;_^mLTwK5xwO$Ko%PN_x1{LoPN-Aj!sg>?mhvU&-P@+o)1i)zJ*Pe86&W}0^Udu-G<H7ONqf_r!X+flBqU0h$Iwtr8%5Z2M`7I?NFIpxF7BbSIYk3qv^*nw=AEN-$9VBga!xciQ1xtST)l`{A|SeXgdF@%%m8YccUGE6&*t7R@5D?Oxe&q`*NfqvV8i>lMMRkkNI5EG#a7uEwOi8|DmAgTPQ1{vzmBkW(1gZYiQ@{()&{jsplV2_t?aZ{c$%m2t*f->hN;%6`SSeO&lqz$!73$T(UJYk$>!GWBk#P>=*n`Ewnece0(E}CRbeUr|48y)OQb~G*xxV~4_fPS`N=YK?C%L6_@zY;~iNZd8IFs`Q5F<+InpNo}QAs=Kp@X+XI)3u>OY<4TQ$v{s4-oO~`L?q5d0gzCZ4|e_HCR&=6fJJzc&cnO8EnYQdesBrD<-(UmJL^(Gu+}{Q{gf5W-iYF0$Z7Eya>%b(EhJ#6C~U7Vku(!=wPkfW5l(ZG&g=}bArSDKPtuw5&Ci^5O`M9kEQ#&KPI}ojq?Wvt0<N#)oJ3)q(+X=L3XF5Mpq-os-UetMt^#4q;vlv+Ps0ApCrUvECv+w1U0c@NDQB!EcaT+aD2sUnctyvc8`VY!0(#TOy7^NmU?0_lY(;8vlLVP?W=|rVm&kF}4SYWCz?n4EaqcS~9(=nnYZ&L4D^*ug@oEDy{vsOWcsD0yTQU&~tnG|;QdO{4tZmHRsL{kslrmT`2KdektSjIumTg7l#tFt&`8B9PmwM_gtp#Xu(1i&@{Bzn#(+(z87V|mm6u@6`3HT?R1`P%LV}9U!2W)Qcoa;ss$HLhBuAWat5?-VbzPi&`-0hiY`Ydv;6Q02Oxtl4TCxqDUoPHAuVg*=xS^u~QQR8`38S|JQ7I)G3S!7%(j|=qE*}F6BDWg1KjZawDH)i@%3jdZo#TuWajOl@`{H5UM4s0DiXs?nV#0>M=MD2(0JTG}nZQ0TbHTy?)_a&7l3u|qdTY(HDhkVjtpNkXhqdEfl$0rLjos`%cWtqXAEI}89l5~m)hfT_9Ze6Z2sZ!WyPVV)-s!QxsV}fL@LH^6AYph6Kz0wd@HKA3x@?%jOsDIWG5mDaGTgh3<8{(tP4~$|0Yxn_halp*IsXVn&uD~1#v~3zyS7uoI$YHX{C6RG^KE*CrU<cED;_TKBYx5X8AY+p%06E7%e|IpKPg^2nfHeZLH26KlxWG}?W&rlZ><RYdZjARcz|gFNb#$<=IkEYUU><}mQ!_AQ7Xa|VTt7+jGe@O9-czG*%Z|MSmMOrV>~d>81s!q<+TO-K9`Q;Xcb&+<{;<L}1zS*1=~PQDuh&Q_FC!{0c~uv62{UibB67TniDIG?kFi_!(LubGj#;N>b&I?3BI@SOOtt~LwU3h0qg=eJi66oKeHCq!P_Z@zpH1V&j=+K>us&>VmOih=Y3Ed%l8^**5m-HMg-9>38?7>K{9R2iVM{!2f!%#q5-d6*TYn`S|07uWO(gbUm(5N&Z!VF0HpIQbnx!B!#mmlZFh?a0h%eK6E<^&?6$15o%vUxM^)(9&j1#SqL&8M)poEH|u5?q=?*p$o6=rCFekU;JH_-q1ZjMjVn1>y{8!AKIgN!>z+t_~39k>+eeJ1C!Fas-g8V391@)S1@Yv%%T24pf<C*GtN=3X~~P?>=igE<9z?y9&<=QK8>F-K*J@=i7C5xG{FV}^VJBE^_(0WWX?c2<0#F6h4}4gw*%n;gdv_XoXNE<+)nf<#2rP$ZHj5tv8QmC2R_M&P7#rPm}Z_(`=w9}->JXUt37Vve%wivXU0-#O;I!T#(6w4I+sF_+7_{N%MhFTVL&s^PnS@SAi${V(=yKYTa%Dqe?Ng?z~G=!fqHo$&HK=i~MCM?Z}A>3W;<aNNMx_wU*e`*s?xH*k0MLte>c;Dz>!e&9Pj;|D#Gw9|F`w}HENlMLq!+^X$xoosl{;~)Jz$oE%bPdBey4K>Ci-z8i8tOMD9)`hHJ@Ou|)iZKUcL3V%b!!_9lx(0dR3)Q(3YvfW}BF}lX9(r+9$6s?ULj9>Z72U;pJ#h1p+wJ#0avir`edFZYBd44@){Crv^$B^puEhPSD_H}!N1xC_`-FbUy>P~y38H=4$M3lpyTO;Uc=?{gpm~7dzUxolIp#Vn2M)K-`V#aF4YkXYi#^tZQ2l)yZgp<NCl{N(Zu8GN67<EOkH}aa2M#g#o{zr^U00&(O!W8Y8#0#K*F$cG8v;c0>mj#6=X@-&R@nBCb4=-;?b`RFeOChOOjcu^NvZEU8S6V_=pKf;66a@~iNG8M@>OSYyZ#t*A^!UEHPALppF{K^kYkQHA^7`p`Lnjz4Y#_V!UTOjs$Od!3H+{o5&kvPz9Xf5O(WOX@fm%1x()>U;TY@EwzV(jIjr!x*V@O`ts|YA(PHm-&5g#M7cbh!Q7(u+zFhdjxX-=ebmMu+qf^?t4x<_0Ppf@9?v#($>qgEortGTTtOw39+J*6ForhY?YX7L~QO3HE*U|R`>+SW6<7}wo&^{l1pX1>3`MS^P>ppP3&-*-$^YQqzo@80t(VirsJPzl-JP+&g{j0`%Uyb+s>vJ3inT~ZLm>Uwp@0&%cV=&$YeM`4z4}FQl-x!k#oY`-EDxgog2y6+~*+fe0rC2^Gl<!VC6^ClJb;&E%g%<K;0<Iun8${G&hkyf~Bx1HDSl2sexmA+bYvRc8H?cIUR1_xW5yY)O16;PnT#QH(5+tFSI|6Zu3R@9}SO?+xF4)#?8kfkoG0RtWR&ery`6)TUJcM#4II(sf-4=x2!n*2H%oT3Ml(*;0n4gmENIC(GCWKW?Qqa)FsyUYv3g6Q>JS<Em{UDftPO(ZVYaeUbjY80uGzOc=F;77QcBf%3!&u0)Tiihh1GcDqu;^GUuakgZkHWY{Ojah?Vdw_}T+0r;HT#^fBL&+aG{`aryHFljN{#-hSkad<USt2vBiJE>&*d4Z_-zT;z}k9Emz#|pw8bn<#1?d|hq;p_Z)#4;3iBLU%Z@?kpOCjR<+BxYe1{7k=1@8D!M=pjKS+lz1CPGRrbk~7SnMi>=f0G8f&5lxP|wg`Bc<?@w7p=*MnB}G$E50F%je9*yqKejxf?|+;$7WmrJ!K*Ha8)9SFXx8u!K?>`|rE<bX8WL71Dg&f+ZhI|B87s+f{H$6Pknvz-=w_(;9n%(GLOGpIh*Zu)YM?DPT)Dc~@42sLZ&lFL~1w<fDqLCW>O_h4s-2WLYz#I`Dc9|Ms1XSIg9DR`Q^d9B^pal{H|{h7!Mv`T3E_({<NY5$04d3+q<TbttMsT$}J*fswaoD%^6LPE-oGc$JanCFbQM_xv+&h0BfEGH%WHv<~la-9*Z&lxo1Ps!bEHTeOSU*R1XDY0K}WGc^Jic~A;#=aP#u>l@53SgT@{8i4UlusQFfieq1hrZ5ZRnq-2){1srIDleARDtBjoU{o?}>{-<Mk3myzWs5#nxV~Xb(B{u!8^xS;0qGlI2{-KeC-e_yHOvRr_q)c73s^rcqs*FtweLH~gSX>mtS0@7Joprm))r7E_Rb4D7Ntp_s93Cmq^YyI>_t;O<n`qO)*9NL9}>)Rz)I6>#ZIF2b&RgiG10{xusla!RK$x5>lU{Zd6A4}8O6d$+xlJzMR!Ot#mmdiQy1PeK>)ZM*7X{FCM8(j>Rwhn_8Iz2Xnn0ilVA<e6n!pI0CF~&3S&QJfR(_Oe~6sfGQ;<32KThVTodB&(3j<emmKX{t2&m}HABup)rh2&y1rrs<FLVQUdJ4)+LZ~ozrS7gpBShStOE?xF&5ozA=>K`)to-C+uCx%&EO)4iX<%A+$7g0v6zS24@?fh!I{CkZIQ1amDh7lszYWq$51*3V0H3Yi!x&M3GR1mUo|_=u3%3*?>>DaRV8+=8DpP7xNs-EeyiezC0mg)-khF<uKS=OQFU&pcL4~N8S85-NDMRM#GMZ|IeW{U>o%*^drV5kV{`K)>FxSipM(BOuGYJT)v#7gA^AMS8gfU-*zpPA6_Lf{#t+y>qv=@O7=@vZSf3Ne_6y?1FQ3N5PGBvq0S94!*Ng$ym(u?T<$j(WOoJf~0ldzf;|%6DD(?1EPJCFNDnX1Gfz*vX!FI99pQN~HW0)L6&YfFcrv_jw1?$3s<L~0rpK++*dX*KmbHHKEn=q<LYyo1971nM%?1r4G&6bll&YLOBo7}|=`=)rby?*R?lkFP7wDBIF8(xu^WwmqNttf@}Y$ASQ4UXY-qYfZ+St@b&ui`-N*vBgdTvQtU13Q$FIN<YOZjfqOY|Egb@3ChyxiTxP-QQsCexjx!KN=ixqav`3jb8BBzKGcGlu5fl^L6$v;2oB)ke^Dw<CEa!l+}I5<He;Qs*OSOh?UKSBwZ}14LC@~;%LSz!sy-fpQNsN+kjl22E6aN02zw@S*sD{YB57DlYr23;F_{%`djQ#R;<k1lQi+XsSxE<@*d`lUxG%}v0;i3eE}eAGVCQxO36w87P|~NEBKSBu(l^*rhVMC7|&=t+ErEIRZ6V<Rx~}JWEudb7chr!X@dSy^-2?k^@P)~_GhYHUjyr$6^VV7hsui@^qXA$l$UYl(PJ*@%Z~TUt-J!drfZOK+rpz*uXu(v@s{)JDHA?ScwxcwdB_8pdrIv{<;6AN;~HfFLoUU;a^_xYsyq6%nNeOCcARp_8r~VmHa?Byd>xs7np<bJCHp()s>9q#X7q06^+Ck19_Y16*@3jin#@CWiY@UTxy=$R>@8sOb0*SjW~zY8@_>D~ieys{K2N~z@N7|gMP5J;bn<B{0K2y{QZyjl4ZyGj`vVvAvK!hf?fNQ#b)0VF^tyGLEOM(QZ7b}CeW%UZ03C(#vTImhkF0L4u%Du>hj}EyJtqEi$7xlPl0-G?DCRH=?&+oX^g#Qd_Eqf8L6=u`Hfc;|G%TFhOJ+Kg^sdhFsy2hhuc%o@{Lq{NjBl8Pq-`<bb%S-eE3k{QyutpM%93t?F#uU6%_)*IB0P2n+o#zzBzWRK=FtS@s}OOwH=~-dU}Z0H@1#O}1YU{$>lbcaF1b*iZ2ce?#C{U{IYqhTl``TzcDaebuDOGq$a7dnEb*l<=`D6=EY~@^SM+1dL_6Q4JiYL?xa{2PgIE!naxoDtjZ=PQ=#K!Ictt-3HN{$y$^{K`39b2(8YbZ&`?Gomdv6YU?YfE&#O3w%gM-mQV^jNSb5kW@jXZS%V{TDgt2Bx$l1*5^4ow1U>Lpk?^8oeA3UmqR9FSKG<Y%J&7(_e;D}_A48$RKvSHSipLE4Zr)`W#oo&7hT#p~jm&!QT?8~gwR*ZXIl$Z*`ylkGS4CWZdx%V!Y{K8w+h@&Dqp@E$d8|8uPeJp^Xu=6|1bt%n$}{!oL#!oi=wj@Tzn*L-*jQv7xK#owT7HEjHS;4llYhGRMQAsqY<DfVcH;QS@okNg$7-x}uR!THIfewKgNc4$9{c0>%d9n?j>-m#`*G4N6Vj>di*6U@~c`VVSO_w~RLKJZgyV{RVB9FT?fD`<S}kKAXPqg>Z)EakurzSOxE@5t3YaGklDuLAoUQC$n6`6u-ETb%>q>RJipr&x~PGkrbHb-vL#9LVK9aG=>WLHvwdXzAz&z}f`NRnZ*oWZ>ksb#8?}@KhKC@UO=I$3^>Vjl!aTTXavm=SBI+$qs)%z9638bQjH;?vC7He|>U?4cy<?kI&z~az)m=axwd{^hS>M@B9i;|8>0giHDQN_vc~UyU{=3>zonHaS0p4@h<*|^V8>Ho}YjE2Zo%9()RW7U$qvmwn4tm+qk8z&)bjhryBhOpVxc&?jKlBHExG_H{AT7Fo$F@<hsB-E?u3YGM?9bjsrBC9>@6oPk+Or`Me%-oNG?>&3fdq(AV4QoRT7+VQmQ9r~S&Qf%(((OkRJT=gs&YKDzOGBUikWpdV?-3DMWfzWf8o0e=g-P~mtU2fsv(ec?8dxh=Hxv9l$qddzv)CCAC9uYeQw!7O#kWPg=lYXgp0V!cB|XdgB#*fjtiNcl$F@&Rn9Gc}Y^ShFe?<p=MYV}@}$>wJn(H+5BCIDXG2y(*jXF(>rCBRxh)(8lpFhFW?}9L8wZ%`D{CqHS};7-})8yv&-7TyV!d=f*9%H?u&_56Uv8xdT|%rC}yZyPQ;yam+fvHV<QMGZ#rS1#CV+`==zzjPJ+-XGdU9b%6Qqf!oN8^aSf}a~<DmIE;q@o_gQP@EWwp!HszNdQ43QI@X!dm3_MpwsOcV<&~zI7KV8!II*5$tR?;AGq6SB6eer@2hlRcz}72Qrh~c$&bfyjTO#jTz|Dx)DvLNFY{FhxJxhe3Ua$)0S+^-h3=xN-OsVdn&2G$?xq$~bsjloiHs79Nd(e{|+eA)k@(#JYuazK;<h8f}zKe6?0`ss(zx_*b(tc*FL*E89bAt&tqzG?Cqa-{Fy#MgZOw0}G1F+!|dJxeL`%MeF3=d@hw&q#771)hnM>owmaE4l>+$=rbsbge?H+FAMJOO*F!CG72VP>ULQJ!*#+%;b|nB?%TB*vJf*Ce5!)2KE*Wdc40o4M$;pWVg!etKVDS$#DDXTApw;MNJ<!g(>{*yoGh!!|I(B*dKk?J&RTEb4j}Ii;{axk7&H76Fw4{4X#*OrGF)ZNsd5u}dl^0=qJgu|K{21lG$eAhy7WIyd$gNfh==4`|~|kc%MbhV!;y7e`G6Hn;r>lK6?40@l=32njaTeU0_>7g=A?4h%8JHpe)&dlq?89io;puzftyHBX#~DsU^o+!E~T9~ZEx71~UckPX^QJAFSUc(=br^_&%GbF>Y>3Xy@`iT%xb^f{CbjI(7yL>vokG~vCaqAR`9svh%|@^`#UcdPPJn#}`px|g0fq-K5N0`|BG8!`4@#DSZs(L~Y8U-G1$q&2_CW<M$1GAj{VHVtC1j@{W2#vG>xn{n>H=gzqajLHiedf7@!a<JuSdp^WO^?^ZLb!UR|@@+@NiIQd}-PsnfTZTCbfl$+u&ya871~%kOIn4u`R0M2DnM%NoL<N*HpYh5@Khush8LU4Bzq3>{9yiqM?$G!g&Zh~ra=<g;ge{qM1ym~5WsSK@@T``37j^Yk7?+!}!ufV((n1?qxPPt_v@>a~TI_FMxYwm{O4tvg5_K6%eoZi5R^H9mLYo)%Lrcn6VHGpBA|~<(aAQ5o9C3*6)Zul1Qq6H18nDkTu#sb%2;r{^w?AYn>VgeE1Kjr@tl1`Ckx;oMV%Zc{^h;?qGnBKb06FW<-r|XPjbgD99AK2N4@GOPw)}VtB&mf#qDWrBVD-I-i>;clD6LB_+WH1~EfNzpjS_WE0c}g60>EB=&P7~0^u$}?p-ceG$aO5=<P+p83>s2ny>(H~0kd8%$Q=UfBi<dr#&2n+knc{^ItOOxov!Dv2Nbn||IK(;Ut*L$D<;!gEWtjGg>yY}S<JVwsc?@5W{UgW<-`vI4`hvCh`kB?eB+jhc)@*=)4|?$O`%}dGeGVzJ{lex${Xsy{B4z?T)6g$I<pPyC_DqKeHmcQJKzjoO2A5CqlApf6K{MMblimr+laX`g`whXWqVJ8qQ0<@3nN4<FGlVS<0{z7-Xiw~6Tu|#Y#BBEDt1sum=lm8J=iDO;@q(Qvxa==;rKel^2S{6KgS(^XTu+d7~^56x6yp=iNT&iz(%LxxYKaGA!a$oBHQ7+0b{%k_jn&L!GI@D!*N5u!IL(R`{h~p`l||S{{9)GZ1lO0n*kGi%RL`@yMbN6p0TF9=$czQjA!U`_<xC22BbH_?)Z+jcwvr>NI&}xR~jp1SfArR{aF4ThMv1vJ6MN9bZqi6aM*p-d;g|B95F?;_#Uea2ClpzM!DRRn}Kui?--?i7vFoEn`7Uw<3i_YqwR*D*u%71bl5M7zS^4w*kWJ<CPA(HT<LlnWxzo?HVL1fvB}lpTIn8M+6MQGrNAD6x*6hfwYXq@@!|?NC55}&x~vFGdUPJIU)xvRFR@;%v4^TX2Q0BZE_&Vb959LQnR?W{){k|$c;BzEZw~&Q;P_398Euak%StYA9Gzpmy6%1IPLJ5bd^PDpU0;2{`s%?3{;z$M!M4<Wl<V1NA5>ieCA{Mr`APWQm_5bn!ExEEBqS28X@KozhcWD#xWHa8Ygj*r+`=B@&;8%{-(-kav6niu_ViX*UbYmrnYPzHHO|fMlh?uOUrT=O^2u*{l@GkzZ6>cxVq)LH`33GX>`Qv|HSf54g?oy7u`l$xTuOgdy4YLX$A06U>imyfR?Utc-Le(8Osbi+S54m150ErBckJP5?fXk9edJDf&MYy*UOsqV5cTlgtSQWSpEvW*@9touzNZN@VGPfiE2h>SpWnpZ0@&+!IA;!Hw3;q&3HIKE^BN2L{i&{b&aLzRtq-UIU3cPEinSScZ&=r`ch))&z+E^k?j6`0ON{S3x>wrNc41G<e!nM%|1LlG1X&DwBHO!r<er8#c6Z#LeaZ_huyjw+-}I4xOuvu&PclMyG*0hys%6CGt7gTv7ckD>=NIU``#ry4iu*_R{KMM+r=lG9@Q5>qeuaR;vkSdHdf`yRavXbB!STBn!08+GS`U5q)FME<r)wST&su^j@-6zfhfcVM>`C*0duXBe5X1Ws-50qjupK&b60Dy0^nKalo}zy(?&zSf#~PGutU=k0pD(LlYg`!m8@_5>@N?j5@JFtOhtHaodNskCl!2F1b0laEbzQTvR)Cim{RzwbaD4GtgTi(E{5a%2fPfL@qRo*W9j{N0!+pqjU(I*9cpYn9s(;q9;Aj5J^*S8KZ5)p^evUOa1Fz(Me7;9rdy)?K(KRcGle^*jq34>ep=ihZAipEV+Z}cByQTJnT=Dx}`#}Jw>lzV#op<dA0i6E2l3)!iZ*(Eh528S(4K*x}Km8J+uGJjZ#Uq^mgnd+TUdOonxSlRUZPOIq%d8GYo=9H=faf(o<1KD5Z<PuGwrqIt1z(Xhay2kQUNX~nw~mM->65^!y0E>9-O6^9F#{~tuVaF_jx%4>LS(fv!q$uf;cMOmVKO)mY{+`HVjTe-K^_J69l|~yO%(w?w<0-r0WYeszKX~_-N1g{qz!w>EOm$ywi)|aJuIDz5hlePWb@0ewIyJ9MMZxUX4B_<HdXQ(M6y|@&H4uN*Dvbws9gUfUDk)Dy)5nvBW;U&i98O*74xuXqFvt#(Z|9Plh`WmV529&L6AHqFMJh%-PahZX<X@$DD4(z+SRvh%wmjN06ut)Ty-iNmZe~G=XWv%d-x^br75tt8Bs)V^DRZ&KWUKPdbVpSpVy_&+x}GOzVE(d$Qe$UCmLmB_tICqtQqPJi(ZgFFShzX5kD=QzA2FVs;)Mfsk%V)Gk9({NbF^L0GnR-KB}^UP@lm(2?09JIP1LkY+|F1^8&!U!n5y~?@k*LKFRZgL-x0woZD&FEMv)Rid+-o*e|e;L`x2tRo?Q6cn8@Jdf<wEF*akLisA1uZ(N?LBr{9Qle-ocoo2FHQme1iW^w1W|3MRmH4XMQDbKmn+*wmC`CUvzQr{wZxtE?g#7<f7JbH?W9|ZC&Rozz@`v^b@WzP8^bgfC>7o@j^;Y;BO3G32>wW!Ljd6A^rhV6Vt-Ss8t)>oC-Z|P)z%ZS=!#vJ=Ian{*pZuTOy*fQ_fqvQbh+w(?Q<Ph>Q+VUCp8+zdrd&%2s6(#*z*0a}qRjM!!3~?Z{OcGx@eZ*G+FpXNr{CF)$bqMZ0*r%mg5}f<yTnM$ztOn;E`{f+rJw(c*o)Cf~FVv!Y9QupC5B@CI5U`G^S-Q<f{$d}~B-p2|XyD&3$ejrKyMAoo+Gcqc@V>K&wp|{Ax;b*sCd#GAnP^~q%rn_Xv9tr-A7p8VMLX|`mYmm4^RC+YEtkZ|<otcR@3W;#ueqosw@w$ds{m80Y*k&DWG*vHL09H^xA(2JelCjfF9Pox@BJQh)e+_yx!=4@h<e~J*-v+|ZD*6JjzOwW<l{^FhmiOkvo2HKmUqQ5?%(u5Lj7G`G3AhBWUZ~d5eyjsv6f{USB|<<wT*qc<#RJ~*_4^|6nJ8#9F=fb!;dDx@pqV)uVBsK_~AWxnWrvs8;*Sa=2X5_QRI~I))TO|{9`V{S$41=q6B1}F}>ynec2tTpIQw20JLnP@O`n=tY%T|S0(8)1$!l~&kvbsEWoohtp7_CSKdxuuBEX3psr^8AU;&npSjg9l{72mHEC&rw2ke<t~E@-n@&jrmK{^vEt#x?+m@(%;Pu#F!9c%3<~md9`Bcg>m7SfIF4i>zIK0!4OV&jet%F9mfJfhCQ^uV85}sd`q;&I@eNS6vN<ueaL)vm*9U{xDMMnXjA4BEw+pg8I(i&vdlMvd!biw|9r7<((6^$iHuc4e{toJH-VF<TOvF}4}VlS<$<c(^ggYTBk^%Z>$`Q5l~LV6qe2|sEKY3<3Ie5n%j2Z{scO*99P!$;VMH?dk@w}RMeA_TkJ6~kVKrl0XiPe7hI^2M%;yMIPr+_+_&S&aa@beq=u+jhmC)C6=xYl678-=Z6G7+zn7em*ngk~rlPKMM%#@0d?RS+dBOxv?=@hV3kp?wJaZuv?+L(4xzL*nvo}kKg(db(Hg!y`m1ifJ}baxS<);*P}=lcSU+n5_q@w@}-RZfO@1u9?x9RsdV?I<m+2Hp)XHKh4~)lPAZ#w)iJIKD^`a2Btn#_1oqycOkl3GT{-4nG`7f{O6D%%(j{O$@M{1VKRx(fEEMQPB1OYz*+g_15m(G%iL4&Sloq^yD?D0<bp?CU?;_#fGlRK7-QR`VyYS9TnAeDzj*0ydIO+w9VNbA0W(3%`i+=U(5+Kvv`CTQ0T*5wy_0U7%C@h+QPCM<I(oZ?%nQJ~V!A=3Z!n7^df*Tj^z?IDk?nP53L4KHER}l0+?!hh~BD<3tPx=n~pkx+xDHoF{Rs?X28+MHd?)F(3jUhc)k8UHWF?)?YKZdcshcW54gx&<m;2q{**RxXra!AOT%$wAVTIGTsUU7Mx=dnp-T?HUTwy=IABcfqVvkXmY@fveYW~T6b(8Vf<>zP}aWF5!`+b3SQ(aVDPjXVgS8p>9rT&4}!Hb!7Zb-xszdfU2zS+1I1eN6uT`&K^{?}P8*dyPHzj!&(sNv$*Bs6)0)*e#W`(K>a03_fLWGNA^1|7Pt0>jCB~z4hRuIPw8&OjJ{Jw8vgmi<&NBUoHRPi}`zaSBGpRuT?Q&&v1`Av0#r|@ZEUd#9~e9l0NsIvQ-PZ$(`S@N0b_I=ohESAM?Eb)IaLStu(Hus1|=|EOh_uABFv*u)ouK=pzLf&f7bC&0~Un?V~kdI`}*K&&*!bDf&ZJ=r3XEQu|qwM|3XzCT6Oy?+kDY#}#NF(=&QSH2;Xk63b)gkA4izC!%@p7O&27<P%wbVkYzt*v<^>%ib-`#XPzj)~By<=`>WC#eBOmtWEd?@4^Qg>{_Lk_{8c2=KGc<i?1Ge@ZMn$i3%|Fn@XDB;KwoMz0p0r??WT_#SniE_sil{zlZ;!-@P8=Kl>frh&OTpdY7T+dAHu9PXzzQzU<!64|Zu)v**Mr!_p8&Y4y+ApCIO4j{H9I`iwpduyerfNHPL=SDE&NC2W#4^A>E0GpyUDM9xXj<*%Wa+3xj^&#QTeHhcZNtMPe<9_Z=dQ%eSZ%=GfFr`E@Qd)FFhYwkmDy#aiKzN{s36vA__IC9Jo!1t|Aed+Dw@yGB^&YFud=M*4<Z^e_x`S`B%_v|iW(LRnnGv*G9{ikyB>w5nsub{GjnY+T8n?*~TQ@F-44oNgWxqTdX2fFUz-_I8gE8*+;wweQScwfjVNM08@P7k=;4ecrfd=JYc;n#6(Q$q(=FKz{Mcq&-+u+dzK1bdz@bl(XNd$n(MzX|LOZ_DG_*4Ibh9>!n67P;70SNrndZ`dXU+g}!*gK5F{Q+M2zi{^Eyd%nxDe}io-C-`^vliTpqN9VPdpZ*2yPgwl)(b2yaqmOPenXX13o#yDVjoHn_hxd+q(8ueYdrgGLs#2785I5K#`;}S9)mwF<ZA9UoXITHYC8Cd3?8Hs>kaCfTJ8{4Qf63~y5uI9tt@0o^J29z30X8a?7qI)POc3PMo<A_rOYDJ|txWe5Yr-|%h*YOgFgxY*gdPYlC+dY7Wh=UJo#QnnIc;5Kr3dAy_WF{wCYXiAl_t%D5`D#EXP&Q2kw&_n{jso`r`+nVvOWiypv$e;Pr#Owpi|bdA!4v)Cp4z(v~D)x#QsnT=_0f5w{m_{)-1}M(#u!XTV6NsU_+Z(mty>BMfrM`OOQ99r>J0WrPK7-TPIp^Lx>b?z3aBbnr^4GcV2VKiN6i_Sr*Q5CcW^+JLIY(m}l6E12eg#RnY2s_bXzf5GEG(epcSs_nli=C28Jr(Ysr)+p$l8Z2E`HB?o1hm)xaCYBo+DS5uIa1avoY-v=2#V_(w`E=WgB{{?J=)2_xq3iSZPp9@F46w<t7AA!gsOX-v>1|2UGkz#$9GD{VZVyf%)8;0ENlv<^bb)Up{@ebGudoKe{J0IhgZgUCG=~gSr$+_sNYwid?Zph||uaTdf7JFUeeES$VZgV-WOVokb19HNuq65@mHAeQO%X`@Gqs}DrXKP=6%E>$SWdy8Vp<Z=N8}rKHxNC#GlM~~MKkViWaS2b!nUy6VYdb$2WaKETyvM(Xd#Q5{Rut%v+cHG|;JWye94bCE@y>(RySGn~qJ5}a)VmARui<f&wITkk;}W1}v&ASI|1FcW-;(^4Np$m5<{G-zWua?hK5L=KjbVSjp%38Dm(dz!67qGy_qKal7PZoP7yJAnuNcT8_}zCE_6Tu9ca#ASYr+g>!QN|o6Jz?@SfsmypCLCm2mC}^8Z(oLGB#(s+UB8A_Bo-iThd>J@x!EG>&ki_=iE007fmVl_weAK0$xv9ax__|K9p0fwwUX2XIN_yih5>p^Js=iI#;pzv8yVUgN?sMo;XQs<XF!=egS-myyvf&yFK(GXYM8xzw+$84Y8>)#-_7Z5E~8o*Xw+E$JZ||<7C2S1-$D&@y1C(Z_%WAy)U$G34iLAJ=#fJ^9&C<l>T1FIA8xa>d<0*pZmdgtL>$QwwGX$7T2mCeb49{Tq2KaOnSkS>Kb)E0~>uQ4g~YlH<+KkljVWmgCT#iZm<vAE7r*{tP}rTJ><u9@q53zefwM6RQrG0MY?xr@u71A4~y{Er_=9Yq3!R%E;9D^r(IMa$1eIgF`rIieIBgQ6zwI7d2V{`a_<6j5FmFh`jLO&+AJCyV^$8;oXYq+*T1WULcO~v>gx}TBRp&S;{wND$LoP@=b^2M`t7m;J!dYG4cD=;J97B?$Pt9LC>)2^-T!*s<Lu{kb^ezRFF>DH+qyTXeS3xTz|Q%B&xQGQ3y<5ynQ87~xbEH5*FFAv-Lw6Dyu-MV<EZKlyTkJ|hf}8asx|blTDoDN`%_{57Vdpkz$r$uSbZN4#v#`78M(APw54rbPly~%TRm?Nd$1D%<o;WwSRc0jWn5UV$G$z!CY*1@SP!<VF6XtQK1w;O*KUbD3#)u-qrKK^tQy&1Z`PY#m3})8FitB@*pIh(8Go-?x^_T5x3iCOY2VAlzT{rLPb1sWzA=owCF^};iP;+P(AstO4DfL2!F@WRePnCr-0ULzfLw5yEWy?rd}qsAJvcXG&)T_}x8c6P{t2ysalr9m|KOATo`3%?viss@zvq+ixA$Lm$3!meZGN+ZPx&z3yVX9}MgKsW{XVqjx1tjlc%EO63;Qe}WrY6j$T9siDU*!PF1e##1on1sDd^qifhDD6hj5zS8!vOOPdh0xf%(>;pF!v8Ew$SpVIIf~#%n9<$2gCy*LX+zpFT>Q<2}Y7!M?%2|MMK#b#96K+ST)YP7?;;*A90AFl=I<6fZ>-*%&Xp>$&yL^W{suEvg~+S1Z8*S6V5bUS&*1xu9c*RNSdmbYouem@hoYT7Tr7M;?1|+&N|(9)?(547wvs#O>|!b?r%BlgDlRtbeBo2)MfLZ7^TpU13b~JprtjCiEjeA01`QKa}@4>gzw{4%jyh+^OzEcW3)SJlSLK;~|fDk9cQ2eqycwY^-0u*PQbE{ZJPTnE3NJvOryq`N!+^khe^R`~5r4Xn+0RKjNXsulOPu`5VN-u<tO>GW55a8-R$19q~62_I+6~8PxMPu(&UQ5O;+(>V0t$b(L+ge}()p=Ld6J?5DPVZ-4F)xPkZ9!@3JaT&}iZy}~isU-F%R{&es;?0-DRpaQ<dO9vf_xEAD>x8DBNCJ{gJAK<R!YfVhlHEpM6z$5g#54kU=^&j7*t8YGCeb+_H@m&?we(^tHbj@Y>h0(Ex9rD}Xoc7<bXg${OGgoHWgWfQ|&*iUq?P!mZo|?ydai{Mj3{bC+j+bGKxIWz9&+GrPK7Ne--0JV^gA?(J94g!-1apk2@#BvDL2@D-H4$;KvJFwIOgYyjPuAEU<Q;7v|C5i`62@oEfU9|Mf3se^jh+y1p`U4-dNSk_{rg$;JnKH;<FjnXXBm1TqK+bij(oY+V1L>=KV^!)!)kiPwhT+%^AB{I){&om!}a^o&n~vs-r4-y5B1Yd=7U|e!+$H(WyFxWe|LiRubXS^yVzi?dR2%1)z;S~4~yGkz8>cQ=Sdq#-s9`=j*0bKo4?j(W{vp{MXl|t2d|kw2a=k)hY%0mpWG|*ew~W@6#tDf8*?}=PtEbjtv)GM;x%Y06*uK!hrVvntMJ||>4eHOQAy;?PS}q*ld~3N=ZPb?=dk8)_V6wV_Uy<LI>_E7*m`dRrn(H6ihcSwv0qPO{lr0k;sO0O{=I&-%g7Ni*tx0Z{e02=I{sw?4vR#~<ze4Vv=7ZdS)p?qbZ&%}8C+=_==cMDB!e#la}18l<3jTaJG$l~L)l2j?<M9zInN9BV{zTX@uG(7k!+u)@V)!IPzkP+F}K3{%1_$Qe)fBqOg(+y&pf3er=lKg9=iSXJGjnqDkl8GJH?}eNFtN4vTHV~Nw3-6nTuP!{(KMb!#utZYo$Va<pMhS47S8zXTJ<<CmDRVYFJ~{!0X{XE{F5ZSO?l;u8(qwp)lVGKgIkbZQn9GVIK-@0G&Mdb*(?+(F)(s;#I%D>(~1mb(r=8N1C$(^Wg?=j&y<J4gcup)#Ds-ix%qT!q&3B*kASh{R59KvkSYeKXZLdoL{zO-C)y*CGu?PT6b8tj`o8N>voknEvt43eFi%cY`g2TN~#Os^hW(&Mrla19pvt)fCr4d96v|f<X>y`-+o;E?=S!Ds>6IB?f?7Mx7OEvYyYJ)CWC$}UWfQY|JiRY{KNa%|FCuG)35srZ4{k*HU9qp<Cs7D6wf<hvUS}3m$47;&Hv-rhu{A__WeJ{9{xJ^VXgd5R_w<;i}>W04t{gg{d)bl;UD#vwoUos``W;~&T#p2ZJd6)HU|FUZ*uJK=|9JcKKuvz=X_7Zh$Ci&d7qAXm=pY)e&uD_q*&xHsRQq8wUeoheP}>#J*<A_fRX3D(E9JQU(MjFJ+|c{+5^^fblzr%<4`{q4+{@-y2hNdA2#}fFn`m;`|OAN<UjA@XrATrzxKny@0Xf8#J>I29lx;Xb6BCT`4#2uVg@+ndH?;o3;p|l?Xy#%U&D<@nNaNY+UOTg_rL$f`1neswDDywuNd0Qlo8HFo%YM_QI`%D=V9F<Zpci`honQUrT3T*zYlS=$?)B7Si1w?Hu`fik8NqUzHY+ib{US*If!7>VeaPhkXI>cYY(`teadW)_R5-#IhBuE1{Uvw%v#F+jxq0{H^J}LBF5hq3whCN@%8&!T#S56D;;;z{75?A($l%i$K`-m*2C}c_qgu=y}vHQYX7;vw0`=7?zOd_K(E~{Txs8v*0qD}rR~hBlAM$tm1n?|{$nocS+t_}v@JWp8{JdPF>g~p*WhbgjeRJ7+~{3=gza?}bb}5=o9gn5zN;`s^;~)lV(#DVU9IVM!`}Uj<9y;Wtku)M{||90ZLa>;I2HP*s+nPH9hTv7#}c`ay>N~4CL8Q3zt9cMKA&-}b^NZLKV_c(F+9@{!zw5JM_!+AE0jz0v$tG@ytibBGBo^oY?P3$Y$u=BJY@|xV@p{<@?T<J`|>%t3tPlK-4A*%8t3O{oD2E2hQF7^f&X^B*#DGq^Y6NZ++>Hj;r6Fa$Ji}$jPF6F*(K(;diWWt0l)fRaVI-z_%Cs%PUo)wx46?%zlS5dhwd{*tn-CEU8ktu%L}|0`k=Yuz2j?%d9FHt)Ba)q9G~;Qjjs#--^aJ;Z9W6JCi=kIU$$=9DOun1yUm~YdGtZ|sglNB9qdNkSyb?H!)nKjTiWlWxs1)=g1tAR*fBH5tahZdsGMV8Ad$=Y0rpjr3Of;ZW-1eT`>NNdh5cbRKJs<O68rjGk>BDK>-t$!PPV*!%M*~5NqCP|i-|Jrri_DW;1y`2Za!_)(Fd;AY4JAHg})Def+5GD9gZ6~@BBfw>DqIQ-Htu{G)4z`>&`0d5i`ia|AvhlT&I)Bn5DwmP;D>VK5IDk7z0@^*ky=;z&f?D*WVu3Ey_O~k1js*&FSy)v&MYiYcQ_g{St|vVqW%l`ByFgR`{odmUCTj{Om>WeSIt@P4xe1{h}Oc71{vk|3&$My;knUV7EMMJnYp1x=>@{=o1rb?9-0^?P8|J9tcAo_?ONuFg|RoM%_BB=TW!fI7Z#Ndfo@4ZuL>OlDIowxJA79-n?a;sob4C<}SIU7R7!SZ08o1a?a_F&o(&`KC8vkHu0bGh9#_}Z{fkbf97B~B)vo~L5}qo><g~CGQ%F80ihRW9B0gJHd4~}sJ)89Wrtl%YvdpbB=e+u-cos05$}mQG`H9)xiD0n8GN2awfDJBKL%Vg@-+_YR4=~&+nTiKN1oVK-ZlTjx&--Y9jE1eeeDPNc^c*Cdc;PXQ6HoJ#r3FTJX)^q*JBLtIPxV9>vJ1Af3Ao4wmzM)MhN}zSifEDXJcFh<=R@u0YUfP=wQ<tzp=r8@r`NF87u}r-stCC;y9Ddn6vZS5q-yUT6YZkG1T?qtKa*?Og)yv+WyyAe%0Ih8Lq>;y5qd+`7GZ4kWZs;@l6kzzxe9DZ0^xlr{hM&b-<jv{Z;qc(6+VswqJzaFUxVipnmwdU%KgX+%L=L{d(LlxL?=1VgA|RbNtfPz1G#S+Z#FWUq9o-i^*Wi6d!}{@{hGP-a5wX+y`5Rk8|Sw>_4jG!C!01x%_r5*<W)tt|e_04QuJX{5Cg7?5m>Vh9DUyC`+*a$-4fIq4Xd@K73+uve34Qn|stKK<5;DK49~U#^yHIz!)d^?HY8@XF>;G^0%BK2lvQoh=)eM_bceBaDT2vDu=abk20BP*;_7#+96$o<7(Srg<Ol-o{fKNP7LR>|CNp@8ek%_9yu+SAZv4!#Tp-Fj@@Fbs)LT5U1>M!_Imd4N}5`j{zkgJE9;rJ6X`Thnk=~cADJsILF>$NSsFVpn5K=L1hKf5U2}+d)v|*<D_i;z-0dhk5KnpZy=YlP-KL4f-YAGz7KFTK_huU)EBt|o%<SFBoyD0UUUO1Ds)lX@*PJpwHN=X(<@ZMNn2NGdR&-!IBkIBqR7OonMD1LQwlc97WbXC>lm0B_X0q#gwq22H-1M)3MKkJ}PnbIsYEJaec%EGcqMGoUo>SxcAY6w1E|*~MW4-fCH1-7S{eYRin_|E4&SufdJU__@>+oD$2l>RmZ^Cl4E7saU1p5Ak9@tmin?2YUo8dQgOXaN2tx0CL^q5=CK}E3sbg?VoC(qX$XlN^2d(mcchW+QfvF5K)^k}D(KjuAN;(ERcjJO$m5~I)?_E(FaF2*<azqKKpugx{?t7zO;zxb`C=71rKyN+?xfV0t`jD3Yxn9Bw0RmZfk2J9L4pFFzSf30hi;8W+0?I^5gSjQA~Gx}Ht`LQ23bo3a!Bi41NapSLYJ_~k)`D()F9Bn*DrL6JITsDCsY^5w`9(l(!HPo4sbXHpPm(nP0*3egG_6F8zvx9jp4hCMjw<l{d+;8wv+28w6?Faq441d0}Vn5Uh|H)5Wn)X{HO*12J=YRTwbblzY?TWe>u*d!%v#wu}e(n*g>bLL%`xg!Q5Eosax@f1);79rDr@S0u+`i6j*SVlBV(<TCwqz#Q0QaI!_46*~#|^BbOPR0%m&1C(9)|-)_nklax3t}A(mU2uNU}12eKxcUU>{-ZslNR7+5UyAjDPsRJDiv5Vbz70tMdb88OW^f_UBUjt{2+=1bnl$f7+kyFWVh!YrUy6+Mg>Ow{O1XTYA2ypRYz=0oX_K`jJX@|H^SHkN)S}U>v!qPlH|`Vg`@-L>Pr9jKpGn3cvps-PYrM{@w@Qb7FqxIBA`xbwK}n9iYeaO$Tf@IG^y&UqOf2IyMArA=__8eqXBbsP6HE_V%p@``}1Gx1nESsxaTO`Qd52xWF1|HU93y@BUUH{%d~t3iB)Uaq4wB=1yhsevXUYfIIuJ_p8OgTZFvBXdmExSGwo2dxY^^@sp|nXTslRZQE#H$dUKQeg!+qMLy~e?Pr-AV25}EpY(D2^Ss$`-hM3?L+>ig&0;zy8hv-R*5#=CULBp+qWO=D@o#<o|8#JjiegVj=Q$MbJ1^vFq23lV<OlW*qWPQH+y?oJ^GUL?ceL&qZO^rj(B9#FJe}ua13p5YYxs2aI>S7beU5y=`qS327px8U2(CNp<Y4{?hvS|XMXG&#3--eXTOF?VW+M-A3-6)3xa0L;yj5+trxl)e=q|X&UtQ4U@N|<Q#v^c^Qib?k=eY>1&-{G;2!7YGMC2=Sx-cAio`-6{Rro1a3yB<H+INZb|J57JO)k3D9zL<&wuNyml579@y?(#R_5At!`1kb>=b1Q<V&qTyexIM;yEFIOyyN*W-w&1Ug$|1lj(a|8UhMTkzo!J}Lwt_whn}y!{p?OIMDGjoqtNpU&j)`$dr7$0x=QblXr=kHjylJ$()WFJbc~feIGFeI)r)gk&p7+V_qxCu6sK@Wy`$r2R4-$&jU1<Mq(ioB#Xh2jrG;U>JjM2HG1R1lku{qILOm5L@|b&#C0f9kxB3P2K945;M?Q%$hSirY*0u|tCG4ciBa7q=zH6%7#avy#DJJ4ndUU{i^yrrs!Tzvku)p7iS_`D-olnw)HAQPyMSFfOU2!hRyak)&pkzGsGIY;0N^BK3kNEeu<39i^l3I~D*f7tTBkU@*&MusLhOrpAfp&`7=-Pp=9HS(&4LrB(^A7Zln8#Vt!!cE-<ov7>cH1SNeR|0RW3{<Czo!$w0s961W=2MjQEBOVzvsfDHzmb8*p$7pDg&+)VBV_E<2fG_<_I?wA`oPrM11DNX89aD^A*@}er)_FbG-l4+n2Prs&iTYpgVYJ>{L9cfw2*d12zIA&<ulPY#NheCvJZIx3`3Ia=WS;efN3JC14?hB&6N0#jc}oa1hX+l|vqdxhWPVw67Ci861U6PsaZCY|BaTwlCbISn7TY`oC6WqD`FHQ9iTxl})y$&v$-@GLMSP&Oh2^!JM#m)hQq2axvfFUA~huGc(irDltx%&ptuFem-~d<L{|a`|n$Lf2dE}I_!Wt6~-Y{8S3vk^eyrmq{AXxjj<vE#yy1be=C-5cq}ph62@}u&+yrgnNhdU<`c$=$vv+-S<0VP4L{1Su&v)^agXCO1Nu<Lm%+RIvz)_b?@{Jwi4od-j=+o7V>@p1%HOp|yg_HgA%tVTSV%k86*+-dm|LTKO;`LqP&^6VGwvuFV}K>D!b0LMOfaq}MZ80WYbY^H;<5e}#v?g+RQIpGV^4eE_~)2Yxxf0~GM5{E;QsoTm{ZKrc@WUCK&QID{q||eTpep=FUq6PEY!OnqCx#Sy9()(`dtsMw~?)4S7kjCH*u`Tk@dXTD(-XS0F}7@$RXK93*<47&oOI|0sYr%ULl92<fi;CpR4lC&+=2)hqINm<1Hlaz#io&Xiqhh+>7%kr{nOkFwl1;kKuS+OW)Y<b_OF(KqzCTPmRP+SVFyrNNCGRgEIYx?P^YiI0?9~9i~`*Gu{`CN4me-OZ0UfqP0Kw8d4!HBbILl{5^*HeZ>*F2Hl}qZtL3<R{@V~Jo3NSvsU#eJ7YGM%b^@hpJs80$mhaApq7;n?MI!%w@kD{VtnZ8EUZBz{&_B}&uVT)tU}yJ7zc8-MlMl1gL+&QPr3;}S9!H8+{aVAZf_4Dj}A{x&Z~p(0rF_{j&ke`%S9RNgD7(N(EnLcANEcbt%~{sbS2HLtm?yA%|(SAl$qwe&#Tvkn`3~_{SSA<d&m(lfvbJ2hWQ|m2iH24u7GiOyXd_}90~o^*)~%-FHsJlJ;t&64|*!+_0@6br*c_eW7o<{r@rpog_HYYVKwdqaWTSotDEfQd-h>h<L8=}i~72DEw3c?weBn<s)hB3z4$TTSFtbg;-Ew--1d|>kwHz1i@x3D{g6eP&~~X_i@v!BWIw|gEYH4$d?}i|!`$kbTd-W)vEjhmYE7GJns7pQN5*(hKNvx*Y(1w&WE8H|Z0!p4aWO4B-)A~#hJAa;nf0<}EUbul3GAD}?O9Xs`b9W{8xpbFCDuW(a!Q+eT5@9USi6WHR?nL@&v^~)5&>*3%S{r^Sg&jXT=KEinjpie?C64;Er(~_@=nhJ&^vdTh3{lUU2qTeVc-t)1D9gHco4GvL)bp_1zl5v@X&3W{3x;{6<@ogt@Er+qYn0H9=>c7-vNE1=RHAe!b#QLj!~yCO5@f?Ji2aK#q+);iAyMKR@Nq|iiO?&qQ^Q8GJgeq@8^wRQRA7E3nzVedbq4Q(fP?PVKmfk-Hwp;hVN$rbE%gV^d<c)h~Fe>6|wF%O*+408gY<c0osQAn9Vi~58=blL*`w>=4xW@Dm&`eU0vriYbH_Z=`?MoRJ*OJKG*WTcGH$14mxsxdb^~uVz;&uCWc+=TcBqi_|kWG&gB>4s>fOA#QN}y_BAW{+1T0_w<KY~VAw^<Uf_4DI_fLLFJ3t`L=LCCpWg+PV=ZICv<`IX`=LGUX*(POJzS;6ZGe8v;v@aqFduWJRzcVDxWjy8l2`W0ESGH)rgc;37R+*bqq+~{I{Xq2U2bhZs~)Wor1q0z_yTiMXU2^3L@!`IG{wWe7dE-Fjs}?LQSypl-glMIjd;{(_sUr_OqmgGs3s;Azg^%ypQbDfc^&1g$dDI`vuc&5IxF4UiCYn~6l&~ltUzoMUemHG9~{OtZbY7dL>08D5oBbMXs2n)ZRDZqQxbBf=T{iwKG9EmK~8u0s?*X5k*gqQS=CpLuLsAymO534yyR3DpM_pyzjQ%!<J=i0Xj`e$!7E+b<W1cbdex_xm;4C%)*Q})uw~MClWjVPEl8tV!XAi0#*7L%%pz##8+BS5wY8TLss)Zt6Q}xO&Xgs~Hl&$|lQuj>e7G?N?R0~CWz>_BkS0pY3CpZLcKmhFmzwCRX>N*3+6uieY_ze<Z!zglAtSyYrPqCGvp7y?w&$LF&tacX-@f3J{q9)%EUkvLnVmqEf_EcfV5XBerOw(OCeZF8K7w51%w7VABJUjMeG4)%ap600s^-#gw>^f-d{&avNs#$H?)G}QwD3DYUO?<mFX(bjVkT<3M~S%YczrAp6Vma|3IFGKR%t`Blr2pP9w1K~=8pHB6P)2ua$_Uc^ys&hwp&-A-wb0y5L-i|mr56#!bIGT$P9WAKF#?}kjkYxb2bS}cSnovmVUiM+bC;E(9*}wDW`(8Zk5yvfjWVqhpf4M79G*JE7tK6*TP#)wZ`0JhrxRCZ7S@K5j#QgGpHDI%>AZcTjQq5{9^Mb<~GQPru5y5%D%*<YnvYtQP_8w+q)moo?dTJKQX4-k8_Y~YwfSL%#Cxax7=^?WQxJuzvD{DPo2j5Yh3B`o_~oKleQ~`;b)G%6&Q=deCJvHC<96v?l~sm(+Bw+ld*j4Eu=0=B|cq+V>;P;hxx*@c;re<rqg~=wy-zn`^8~?@Sr|VVo7n3$v~Z*J0-?NeSj|SOH6EDF8*{b<1mLcVr3MD9<#Pq{%t$B!`yo-9nrx2!wC3UqSKcEzN?_46M=jSd~#2-a3u`ZfL772ZM~;XNVa^+lWyANS(O*sv_PKFw5^kvm&kQ&Vjm$tX{j*GN4$klorfo9#IbmkJ=)S1KloW+)%iC@1L%oO__cM}W!wK5mwl&VK{nA(93LCXI+#CllJzVy|3Av#H0!qpeaBo#i31_AeKy6CS6`sFVooCFs<k`R=S&OgqAl#H1I8aoJRs2B<<a#gQXlG-ZSP(Ac-B94>dX+J|It6k_w{HmwqAbBzkium```0Q`#G;b=|P*+9)0WI^MoAcg@^v9?|E{h<2)&Fo-F@qp5Q$EJule0>?g{$Yd+si+0Nh5uIR30yULS2mRT*-xhk`lW&9VshQ5pO9-_+RvX5$Y%~N%&_`<`__`=cW^)9brVe3xSw_g5Zj@^h4!PK)A#!%ZR{S>+Qp7}cM?A@qIhqyo@tG=XN<M~_vjN6#Z$M~ZWhhq9Jb?ey)<~aG-ns0^0L67cc=tH?+JRJP?CgYEEHVBtx>GG{0<S+J<ENo%@QtQ!(pD|VQp~B}HHFB5hupi&vV|&KZrV1h!CS~)JC-KkteZI0Iub@ttn@p2=VwuA8TSa|g_f-vZ6ywtGg%0v-7S?%pLqCs$@#?vOad($1==@!g)z5kDVV^wbzTGKXO=Zlm4)jkx%WX=x)e2|!nIUG!_-@9&)iLh<$G0=BoErOnfN$WvM7sz)qjbYQGc9OeJ$@G}<trG+p5u39Poynibmm%bqaRn=0w@N@+UGf)AP%WF#$?G@7i9}LfwF<;7>622UxK?IxeZXaSNI#sRxtP0BVOqqV`9p7jQ#t|f6Dj&!{_iKebO(b#9kyH=s&G6&_w#9*nm3!QR(Uun-RZP>2Hx(2D=(`Zcmn<$T-rOipP&7$6&RGK5(y#6LJztyi(AWB{m-D(#`~P5JxUS`MV>3hy6kN=w%%06@B!pow$C-ixP>Aa9E-b-`YQY9qbQ_{Wb0teI4^*kz#(bm~fY_8NW^Q2gs5M$)lz%_|ad$ey<k}WfAfuAN5w^Vju<#r}*ulJn;avD=xTxNt_ns$g0_J@v^XIUeS;*e$<`azTQ;MU~ctvR%ItIu`8M$waF$O?(>l^3Uq+HXod)6{sYL+QJnZaYe6pTkk@YLgzM*VI%vqBEcEi0vUC=HG;hWp&N|FJep6T`83SoEDJ=c>--}+#6(Be2ea_n_&Pkx+39HH0u2ZJ@y|G6dCF~I(AC@N-^D1Ma+_#%rvrw*C4A$kegzxEwSg9gIzZv41!k%SJ+e&^vxPFLF{HC55H2;RViCFj|HKf3&a;tDp@G##!kn<I7Qv1k~92|6lSStUwc{`O?U$XxH`@FT~yd^*8XMXz2{4D-2^V9yFKQAb^+jR;$Zmze(Zb|y6^NalGgH9Fd0jEurc{BRZc{!*(7v`nGoi?sI-A!DUf{xH`vI^&=T^!jLU+NLgOXduxt!5(+Im|(km)g+pvf)rILC;KSzt!n6IFfbAPj`@wK-N9M927;ss(Z@Mv(#O^s~ord@9{i8e7tFEPesR^M0?q&v5x*_toOJ^?dJXJ^3QfiNpC2zs>isaHGV_8#+NdK^ozPrS@b%`v0CBSDp_>#d#t2Sm_K9d$KRLZ8e@OQ0UaY8LwlFy-*I!Ui~Oy=^vS;?4$I#D3m%G$>Hkw4-L95=q!<^xw~WX+MUKQyevc^H86%0)GDp9Qm>~t|7UPNB2sT46!?}aJt!T%TF)Lj0zrwlqmvjHe`KyKYx%o#W@n$gp8|HQg?OIGV=m&zhr@olq#&Sj_F&wa*#F@EZeQSxQYD5w8$1KcmT-Ocq&_3}|?GdNdmi)9a^48emT463hAn{veKZ%BPQ6~9e&8z#HAGV%BySyj9Yc-#C^FEh(<a-yN)BX+L73wL4WrWtq|2prcf4nO^*xfgu>4$|pE<{+OaVHqRh4wjnv27(!%;G1%Yy@kBw8Lf^Oy-Yhp823leC+3PoX8B`J4U`&;$GkOR~b7HR2F+(bWtsH0ikQ)Ij>7MO5f2=%=5()M^+xOUlwr)dosS)E$ZR@t)j;977CN01zp`sjM+!g&DI;v;5&W26+QV19{LA-r-5MPWs?OnG2&hCdMnOZ9T$%O!N_pp&TJu;mX{;{<q~vOQ2e)A-NfDXRyzJ<%g=g%eDY0u361b99wF!ibsqKXGcv-rE$H%F<Fe++^`80(><z`vX|GW`(9}qE)(`7EvzGZW%oEMKm1b2`B)tk}hCFq*G%aWGQcucStv{Z9Sr+`VD9HYvrUQ@d!AndlDfD!L9DilgzC;@R5{aJhi<PBq<*hUC7NzZmK3YeZE$G%X32o0PmaQncZbRd4ThP%E<8QmPth^V~pz*sP^N)pA-Gn2i5$Ns=^u2&1zXSD3(6y_kZ5Z26V;1%WV?OBZ=a^8A*s%O)U#kZ>1X}gRT8Z&GWl8;uJLLp<3#cukqGfe>^xx>Q`pg-K3|hS?%<7u!;U(2Y9W<oQ+X_1GbYnbpf@3uikJOC0?#9M#S#fqOAK^7^Zl}QTZ`AN7iF3<%6E1Vje+k;QhMiYOPLVYa&(zS*A&lVeR5#nS`n7h4zU(4{8naW?-A;&~n)LOxaE1o%8CXwVpkGL2vPEo9GtOC7bT_X8T|U&RD`KIr7W%-r>eM)0c}Ekf`LONQMain$&Th|P+kSE));YiR$Z5Y$+IXAzK5c{<wWS{GEC`O`yvt|;GLl<n`{~xc#MP0Ukb5DtuUBDsvog`c-J#hRS+EDWxAnetjLCk-XS(N*yNIo0mHBtX@kiW-66WBxYd?i~+Ivp>@LYNlf5H=JzpB_W3w}Ezo&)*~x6bWlWy`vzTQl94Cj0&y^wQ62VQJgD^@VbNW%@(qr1JUY!FpN57CifgSOD!tKY2{28ATr6qkm_LQ&Vm-@ZF_Jr?1z`e8%+Cl_kwR=xV2GX;Zi@e8(&)+o55PdIGXzz!N_&(y6^AmCqZdg<K#X$dx{79=j*W^%gK#30kOw&_nbfiz0o!vgQ6piNB$p&bEE?z?geJ^6&80;#-g~qOSgoIq3N;bU@d7aCmm2`4^b02ky3U)R8rVL1t!srl6k*o4T={Uy<{YA+B-~egyh(PaoBSv0%cxSr%ut4($^ms}tm~O&Gn)U?>;*#P%=rSid2kk)I;gM%Y51w_;)GAmiRq{#`WFFBoHx{mT7TVj5QWBBL6NE8@4_w@Jk*SNO9@f_$&mwKS*;^PAD7exrxRE<aVg*o(?5Xr-RGzkN#F&kk)<7xbwX3sT*fNqA@u=?Y}<r6Il$pA9h`KzDsq4moe#(>_^Z4*SWVElp_?Xvk+9GCII|5C^IFWLZ7kF6RcWvC9^H*vLPT?voC6yI>DvM9ZcBwoWHE!NY8uk#peO?zvVCYuh$<goH_I-_Yl=>m?p@59?mIN%n)4`H7N+RNk~yWJf$uqo&_@rbW-7y=@12wepD{5ZaM^3K?HEGq;_Lv3eI>3%c&=sB}hU|9Sn9`)kz0b!)<SkQwy7|5c)oI-@7hOMl~1ns0a2rwsa$BDa9A^!V1HZ7_Y>G!(bro1FLm#0z57;qzIyinmA5lP@9*A33jDqrS8|hru_E_9Sb7GU$T`UHx`O{TIft7Do2eLpD-hLhMUJuXnD$R_%j5iT_uz?5(fTW!KC^KmF_s<I^Z^!1=JuR?08`agws;$MrXs7U(Xxrbt@{@*@<P^{#MDrv0CIMBJ6abQ&5dn=Z5G9AFqzprJmqKwKGzJut^z>QdNFGCL!m!@prVt$EcauCMo)oHpWX!T!GZj$wT2FweX^nkyZBzh5rriYsI}VtIv|#$MFkQu^!Z>6>#z9rx-!sON3(->>t3&lmU^i@F-~1)lr~W1gN>9>mBuuo$nep4VlrwV2aq{zsIzmP`5VtxCfN*05ff4RUJcxuJWZbNkpHg(%z72oib@(_4|Iud`&S+sw`ft6%-0#;Lwy+=#>y$UO3UZi7D9hxom>7*in(hISYDPE?N2zvc-j-VHmjHEqjWA$5x<cSGz+%#7Rrv5)+*kDk7TV(%O9%)@WK6-#n8fJ}JzI+^p=SR<YUtQ&0STo`L8Ef^)Vxq>WW!QObjqP|5N*kOzc)}3;eWYCw#%7y(btkPM-Nv&f}Dy+ZGDiY6FXk`c6tGWKA^l(eXnx_AA?gV_}&?kPbwSN2{U#6Us-#HXJnL}|-|51+~%gler(>`NP15f38N-R>$p_t1&0nD|#O(myAdGN<rj(GVk+kVH_X3yM2KPDB(d)|YNcER!-$@jTQTd2Z_{olAclC07g*|ciBC#u=sm^{&#FYxC65BO>F{l-{PnQQXQ?fmhc7|SAaJe}wJPJ(Anm?z)U^*+b)px1-qcG4`wg|Q?qj14+t<VdVe8B>SYo$HgzL0qRY_Yf3K%t<-A(Q1!6W0u1DOSJ{|XD_s+7htU4?a*T^3C0GZPKHM(mN};IE@dHP&LfulbTNiR)?<~wYScNGvK^pfR+h}op~aQlp<FEM8Dsb?dzvCPG?Dp7U4c6FiiUSr<=QH{rJ6G%Hr|*=bx}DhU+S8&OCJ>;T&LDsLyevC9VmWR@4wWzt9|mJWG-p$e&V_YDZ3^Q8i(22o0>o5E;pxt$0NF|L1tmvtHIW<(xy6o@na4N^0;`bF`xAr_v9#UCWT$G81u6hm`}Zz@l`9BLq5Lyu0h}TUXS|v6ZTfIO+rUFmzsBe1~T#|$eeXd!c&+Ky5lTln1kV3UwKb+(fFUG<`<F9-h`urJQto)BiDoO1o~Kd2bm?<fPQD&6P-CEEFMHl($Gwg`gOwu@|(S|rdr31a2OxXxjwwnp0L1aNpx&inClyXT%SwXyAD9)TPMfX2?%Spwq7tz5RemxH1($`V`=)ZA8`}1(!Mdod<qi%1@99ryChA>q0A{r!k97(J-iI`f+p2&e$p^^>r6?mT_=+7JkevkFJNquG#AcV<_0W`1K1~+6S6H4Bz^dPkum~nK1n6U)Cu{L4Uh=~O4wq}+Ei$_7BT0GM8i0VAR#PTGb<HM>wz3sRCYdPnKe`otJ$P_A^9d7<ggs>tY-xDm^_8*p+CZ?Z?lT|HaoUH==B=LqtKQ$FiuI;l269>x4;IG_qe~t&_}6OC6OuRXS~m4o$!mEnjG38bm2waG+i@)v&;NNNGdyR2hN&SRL<pP!)vW_t;hQC`c;{g`PN(0a>NQ1CL7*hj}!M<yFJX#(obSWU!L);zo6WFDcu%y9K=~=J<3({zpPc(Uvt`CNB@{J+Pcgkmw8QvjkYA@+d}{A7~{TPDju(RkFmcM#zG@!&lm$QulJFAn%6RSK=Ol)F~?93tb^-%Ud-Q43U9(b&F|7?!LHUPd@xX-K0RRl5v&XDDSDqXX_x<jH!*S!u|HsiM0^~~Re<MBU*|8FtMG#dEbHeoS0R$Q3IpQs{I;pV{d~+-_-!9`zHz=m_6*Db^eF8ip8aRhc@fEleps5L5AEzJe_21`TyyqSWl6Cx<==OS+n)Iv%90?be}eq4mCcwJ>LPXny~mQ@$(L(Fd6|sA`E72B(N;ck+>JS>iNd6DjlDmVG8TGv2l*zDxg%tzVSF#hl?}+Ocad4=9h)^USL(7?Yon{yHy`74bB6I*q4w{&sEl&P&VH2Qem`cD1Y<5LtY!Ngxwk+ToqXq{{?4r+cm1E`BpG_K{DH^yz!>i_UvT-92b^(#{Fr~++2uU!J*}FrWd5MStd_BzkMJ+$73a0YkKO++FS(>)W+C3J<huSfH~sy%-!4Y1Z2xym=<oUz7xqr#r~Iz(^I4zF0~+rSe%~Lys&WR}2AAb8Ym{dg?ypc!h2<r8w)KNMTU?=ic%QT(;!(ywNSmp;zQ)*5Pv&#U-{a@+Jz^7Jdx`W*P|0~U+E(3n)xPY{&%vB@*&jJxcXGvb1=p?ddhzr6LOxHv_X6v8k;}?5M$WDQ%kQMkI8*I#CxOKKmF-?E)cY*P_gcvJIv%5N{9Wd&S>j52%R~%?3)a_;99RpnD8jjkwrkq>i1RYH3>kBJhILBTcaYfQ$T<z=2Wfkk>lT&VS?_bA%74~l`Olx_&(HE=p-YZ&%$<4bqOW5_Fo(r`kLp+1&ZT^hwLp0uV?ba1SCETt1;(=WUWqp3Yk!sgp5V#F*88h!{)dVk)rJORfaUKK$;s8={K50k`{w9^=kRYX?H$U4%VP9F$oeKAe~m|HZ%coZl*`WVYF?S6?RrsuP&}W=oRKV-F{y(aMdJ~^TK{#-DN_Bi>{P#4;j8sAUWfNv<9dm<@ZAl$xl@%xqU61GGksaZJ_@=x=Y93Yo6{rEKyS8hMVMAC<DyRu(l9g9*N$f9%?)j>RB|!5RnL$`JH1^I6ObJ>osnUlxK<u9ajdjUA&%iG?rtaA4nBQYY-?1%a$aZgG1ayyJ<z@#qLyHcsJ`XCLy_01Yu&;Yn}XGcT~ke1;%k8>UQ+w!b7$b(tpeVi9%VY53lNjGX#31WUm79EQtZS`(F<Fjrkek#j{ZS#eYLYAy-eGJYVDf2%{0%fJYoK=B)$la-W|TUN1Wc`Gzk#feX%<thjaZaX>RAjpkkZOc+s~a=R?k!{}N_{FPe(%9C1z@T5L0m@7z!%q^1dSBBj%3{$-vf-lIV75x2%zxM1swk5X@QX0&GVfVLg$U=3m;I}$T&hnK*tSCrQSZ>dWedl7nlV63uO=f8+9Tm{|KNu245cbBAW$YDpSpkm~{$;z3?PLpIw^GFwVr4#J`EbiH<Vnara8|t2M-jJ+pg}v*<F<AO5&`Cdqe$vxNYvpDeCALn}haPRRu!!v2lrMe0%PPT}E4;_)QMjTA>}n-r`nvFC%R*i_gOzvMJzbJ}<-qT4wF-IoE7n^V<i<ERtyO*m8TUbNmCZ2D*yK*Tu8iA3*zCe&oN-kPQm5&$!Ld41Lrg;Fwh$oCr@GKf9c4n2Y(RG8vR{M8IvtYIo;CvHx2@BDM0#7WM{9-;-P|=67y5n@HT7p;gx76CovJ%Oc&8^q^CRX=3r6Zb?#eqgY?EpJy6mn-ocg3ZlFin>9mO(uBru0}?eK-z`PD-w$QQoL+7{;cglbbiLjUJcKb5_TkysP<Yn$Hq+Bq3{x4(;{J*k!i<o+rS)61_!AEwYojPvYRTVL{4yzSEVm@fTxyR3}T@yr6AR~_|ie3lh4YZ9dsGvfAad(^w#zHWERunU~?EYVLnC;l|BNx!p6nDh1)b!?~{?-3m7q%ba^4_Jv{l^0~xj2&-+bBsN#PtJ#I`(Q)S=*5oF#nwR1_fy14JuOla?m(8_x>da4%`C;|IMZp8k{afExb4~|YC@2id^2c=3FDVHv~3qC|MSqP2#bTHT65cfNt^syFs2Km4x=^<1A9LU@6Dp@RgBY%ihtNcpD=o~AG8e_OGuyeWRVhRuPu3^mPtAcBC%HJ!`=~pL5*m#b*eOPhYKu7TClAADy=_2fBE8$Kft&n%lHBDC)dv2kX&xK<{WD+WCP(#wx-$e;QW%6oHl5)FYW3^K}X10`vrY;E=|_PoVlrS`>6QE-`Vvk?a5cF4_|O?kvO_3>@bJ+v@k)ByH4*go^YF;t_i7l)lB`wo+Xu@n^8vlgoIbdJPq1?PrK>4XobbHn#Zm9fPW6mod*4AEJ1FXx5C1F^^WLUmp=O`N|X5=?zvX2b%Zr8U{F4A2ak2Sn|5_ty47)=wRO}t59*LNrqA`byTo~yKVlv{gzk&5tv^|xUX#ubcByxRZ`jARmn~au*M~*IU@c3LH-`93&o!9i1m<0sm_r?<SB!^;@w&0FnZ6|{O`{`OCCAEPTDzj%G~N+dYrA$C9j#=OwS|W<x7`If<zlg{+_+^m=tqb2=v_mC+-%|3mJ?oemjhy!sCQK{jEE&rCO%_L{ZV!PXVBz2=-u!(wON54xk>2@C#fD2f<C<{Pe{h$8?Lnaz|+cON6QOIeq~Aci}6aN8jSamJp#LiX;~V(W&H>^SuvA<=6f~sj(t{ym;%=Aysd5YyKG@jqrRUymn&~>bhp$Go3t6`7-u<`I0(=$dlTn6?ZQ0D;9Gj=C;TQtot=Y}Iop=8AYp4*W1v6NYt*u<(57M4BKKW03(OO?-3_$dsFJpbQ~E};XcnQ}HS@hh_fG+6wKOHu4P2)g`Z_2J9>kzMW3U0GNgpm!9o7TTy_2pYNn#D#rM28J`eHlwl|G15_AKK~Z9`r5COr<4JILuzsCS}Y#WJ6I5!^%UNzjFp6!xuLKiy-(ybY_LF-tJV2`|&>4fOQ{_8k(X1GFU6Skh>)-%nF`x4g}7EWPls73cUUoLzIhr)-bw=888~082{GI@r1O;WIGV3g&ReJK}CZq7aX|-s)8rrs5(TpY0M@6L@_V%l1N3@hENm0DEx^b8ZL?-=ap%L>8I2uja64u!fi^8&-jKgLzqh@TPT3o!!NQ)v!-p!;D>UP243Q$-2WC_J=Ij^GTJ2LC6Tqt^KStC6_xxE>PMLmSaCR(?!AjRj_0%=2e^|brL65xJelFGx1`37N;Ob<OTs@Lw7fc<fwl@FToxtT9)l^JA2BaMvr&LxrXcAF4gTKJzv>TXE>h%t<KZ#dSynSMX5cLabz%`Vx2u;Y{RsrU69V!MI$g4-(keNbFTBa2}xjUGZ8oJ&vsQ$@>cwX%R-7OMtvjjy{}?6TSP1*uyVe~HVh|e-<e&*lIACw&LYKMW+}{d_f5qvf2sNoO81qvx@YXzQN@{UzWuxU3}e<m3xjD!O-;f5L)pzt8B1vp1NN`8itk*lRXs}2ZGPz081uPs^tLp^S{Uig*w^2FsNix+%8nr}@&$Ej!RhbV*UM=Q&yk$gmD|2=9r&By{=|)D>~Elp!&=l)^!>D=r+?;{|2Mr`vv16-gAL-)xZxAK05MD#9@?Q}#1HXgj;7=U+oLTqE#~pn@-R1(dgvRP{IQQbTk)l#FNn|g5$1%J3L{?SeuCb9z@xVx`R73=nEbQeF75q``ER{l*-yXy8*}OFkw?_a^CjrdFHMi!!<NMT1pR8`Jh2ln_gi9{je$xE!{F0i+VfKLuJa#UQ!-~A^l*VV%bCO}vFAizjrJ*9)<61Dc#n3a5bas+7<=U*{gox#)r~mb3^^^xSZ*cDNn9Uz4&uNfR~2%EfvgMq)Zuq5l{Io!TO((+r8uki;cWgLW2LyNmd&*A2<RnRbq+GLn6^25XH#JgajI4E)+R4SN1NCgR@+R(h-tZF6|581J?=bno2Aoo8GzhJda=~sHW_)zNn~s@Z?ZMYN#0SHbs$HiRgviRTf$i%!}hvOf+?)weco3WsuL~@S{J0chfC6Ln;YBl^Az^lNVvjHY;96?dJutLvChN`$f+OPmHAtJ-ujrccQ2gk7(V<vL#`@zIwf{~r$qFDJqVBsigh*^6%YMgV&ArI`-?Xs+nP1oI-v-4ke~YMyhFbX?!5<#!Fsid8`w8mL1<gYF~gj_^EH34ENVm=w#;OyHlyyzONpRK0{TPxy+?RZzK@Q&y<r%8*q9in$P?|(4^|p9)q1<6dfG*I?pnP7$uVuFZqnVRyM{JAt&6zR4bV|wEv)jbQGXUaD?mR4IXAyX9U;sNrn{bzU0=t7)yudO)2M^B*#JGwz!)9>!eRd}oVKX6D%>txowldxjt7%nCW2gJUf!I{s%r(viVu)mUUCE0&<^&4o=tf-o9<FFRNX8{j-JkrbC74-W|u}27?Vxj??G?YgNh8ti0hxM(H~nfoM8qz!X4hA4jLwUw@E$3%~5v9i?R(W|N0nPJNoqgQ1R}ha@lq3q!??v+9IbTn`sqtZB!>qAb$ng1FI8}zh&Y5W5fs@%RYH0|IIhpCR|_AE}fLhR#=Q{7MJ+2d&D}DnBHrQHMcPjJ<2T?)|#pGxt~1HXED$4jPW50ThGuA0Qzr$a$?a{ADg6^6|&sSgbB|;FNSi{G-Bxt<R|BEJ~>N;^yB}=xK4=)(aggaOW7LlPXEmNLhPg!;&xiwu2#Osqs04MJmWtlb~T^I%14L3I?^btVN0`$xg%}beDb1va{dl~SNNaGr}-X{Pv1qGqjj(3bNTpOzF$aNJNaD7JhVby$2@UZOIPx_ee^bB3@xkq4fDrCT*H>#DR{^H@0WR0Swyq<XXI$oY{WN-s*!I<^7dTc=j**K>p!5)%}1N%!o4m}mVD0@+V~a{XSYSH<_O!b);c2BI$6HIt|}{3@sPFnE+^MOw2jK^mPTCdZM&x$$>3Pi*F_(3#YgXTFv_!qF|jMFhGXQvN4L+78wr&M?x(UowADp}=JeW|n76Y9$8xpiOt2qspN@QwKV*F6pMG~$`K3Dq@AFUOREXZ^-FQ5V#~sF3y6=&$xvP0qS<}}g=KZ0qH4hf2$l1H*crNz}`2AzP$9CDjZNO{kv)DubF0g<51Ns`4BQB?9%HKy{!|adch|9S&CmZE!hz=tLIvkzxSd7P5<sqVtSDy3n_=4k>_AoDC9FNt4YJPT&_SbM`XIDCoBm1^JQ~wpwOR?SLce|5!v=w6iS-WrBHF3Z1&wt;~B+emxFAtb+og5!CfW7vQ@&4|4|Ep~vUXK5`yU}K>r}(bNqKNmiC|_$ePoX`|<k_BUTwK@Dyx(}g>%D*1OE}gW-YqAps`(7--R-aTE9|k!c>X?~r{np4JdelodOT<2`9Yrl#x}2^{^^_aIlZFKDfl19ZM1cI+VsUC!UFwem1c7-Z>AS&QfKSTnl;99Wv5xvpK_LkzY<-XQhrM-EtrJau!?nYjzGsQq)n#g>%=#=_Eaz0!KB818YH2}wGi!2Z=0kAor#{QaXA-mYDk<lr-HS=Ef$0}?19fb=`iQgVj1XZ%f8a~G~qIDTK{<Bqk4ppz$BcRu!oV*rH{6+oT}igKE%Dh3Uz-G@yU!W^<w0iC>%m5=y&I>GbEs+W;|h=U0)SJ%Z#nvk`VMoMu?jmH>2o9QL*wGru7SJPa127m@m@_{N_fC85=%(i3q*W2Rlaw?Dy@E?Ut~|c45It@Q98fi#oR8HeKwx+Yo1hln-WBEo(w8{EE5|WF7x2&?pxfb9on9Y^hC<N82G}74+p4-fGCTn_Fn&1>}(y^!H)|dQJ#3OZxD$<Vb6wf!=7>UvWQNX^U~a73d1(6trD81if;{L><C=tkcV{sy|&B2`@a^8<^w1YhbT;*vFa;5B8YrMSr^UjwMCvJwSdtgpXj#j+Gwj!%M`y8SK%8v9~{QJz(vAk{;_zVc!mHN&8)*A7NjMB1S$pSvo7sQ;xaAp&MOGmmPRFJ)~`Yj=S(v7}r_((1%s@URcd6NiYwuI{Aqn@@G7&vDc$rMo(K~`s3OVft>lXjPoOhZ!NKeYU}5<A7!g#mxW%Qg{R%oVj>A`)=WPGGGJ^rkIcal$djrIuXt1(^u!5kt!ZL}S<toTq!;i_&>r^bFWk>zF6GP&d72Hsa>KhbkT$lkoyRTxplOb>Ue26419>mowe2xE`jj5S&#gWzm>v3MqPM$4&4Qy}us*#f(8qk)uC}g4g){TE##IBkph(;OgM*y4>-=ey*)#FbL)6_tzH_1dreK2~Jp5H`)H!c3BATs)HXNv4URmS6gk4C3W^i_VO8Ai^NkhV&>!a@eKwI(FJxvm~&Wjf2yEZG5Whg+NJVC$wqPk##QGMn|j2968?&u%+(vN9VeXiNbfUnnzv-UHw8GKjzX_F3U6Tfi>aSy6BZ@fndGIinBMW9tFOF+iP9AP%_iVs=dUGGIgFg~Ct8O-;D{z^#u#@#xmruCV3&@TynRD_^S{0%X&0^=46x4p1dyzH1&!<-t@W3EF-1ypM%p>s7s3csXGtU#v?C?jl><(R*WZR<FUci5K`-n>4x+JJHM1?U@7Y#Zg|$TSdCJ3Y+%VG26ESrDtK9Q{JO;aVErgKE&1U7O`SbGL-?$`LPX`zE*(a_Id7KbDU;J?ZEpf_~aCPWrg>Q>L}NG>1w4i0&*Ei*1j2(P0wtYLeR5Ys#8geAMqawkfFx*6AiCLj>=;3Y{9}K<iQh60>nRRIK{Nj`W3f;W21yC+wyZnUkQA>n`<?i?Z9WXhzZBv~2T|2wrJ=L6Z>lFnWsgVM9TmNkPlWAN3_>;-hHDfgXJkaH5suWH1BPUVe#rRwE8(Q#$pbTKd;;*=jl3Zk;NRv}v}rMH6<q&H51Z1#;#Ni}{f;<hV`Uda)&>**W@+HSHrxZ>Ka(;e&^7Kdw~F;WKylvy^cM%ih<w-BjXTl^x3WtyUgXtnF3F?>=Hn!JHrCSoM3wr=J+Zim|BMo=uGX<;OL>&S%JVOO7%>b>v2SVqm{MZ8Fg_=l98HztWWLLU9KOGkgizH~zpN($<6Z{#t&ZjsE-k0@hgq>xS`+(aJR{U=@4`Gq3;2ML?a>$kVT9yzdYs_7vvf6N^pd5gYVTn6)Sgz2|?yeuek{N9@<~OX*F{4{pHn5?MdE6l%1X=f<E_muH-F{VRv{K*g@j2XcY_GQ;<+T9+OCTiS?54nSw*^i{dL(5IJED0&}bP|dCB{~E8Y{*)JdImM;fJ`g`HlUQOBQ%x%*{@dkPWudk;^j7w*($S8BPahI@%|)y(iTCzEuA%}l*ofpHQJfYMC#`*CMqQUi{VutibeU)TmC5*Kaz?JG?|Z{jFxK(x!$##`Vjr=qF#Q^?jo77cv5I4nIXibl>UMAC7~Asi`Fv#dE*|p-=+oLk+Pv0>QGc{YynXL4$JO7?B_HC5hd$nCW4xWRk)^1A+L+6{&lMipe$0JVSiH94W%9f+<`d5`53f+U(r9ZtEiHwkW_=&O8fOt*l@0D`i=*(|uUC6szx`p&gZMvDWPitF<L@<MUtSmg9xE$lwx8IuQVvIa#yLMNR7@z^vXFyLTbwYa>UZ83NxFZ*ddF&svfEj|vEF~g(-IK8y}!jn{vCf|Iatwe{11oC-Z>YnI{uAQ?uq@8O5amY5vLGiu^pIm?H1$=#514F$92l7ah^B04k0#UfiX}Vu^Cki)&Ca1tJ<*XW!tXLT+kf!QSX1~>mPB+@}4K(nvWc_|I`nEdv4BiV@=-A>bWDmV&)}iulkob;hz}ya<G2mivQr+Z0dDIf?K#G7%Ooq8i9UZoAJwK+X}6Ggay2@p#AU?uz|2gO}9p6Bw3gQN76+tJ0^C0i#f<*n(h}Jv!cG`NjF&WL;u*Mufsfha^R40ZU09c-4y4}tFr5iAi40}Wa>KqvfjAUOt%l~Ceq7Gk%>jFiJobURK_i3tW7}9vcrsev}xVQ5MN<N^4P3CQy10~14L}Qg0*irS9bdq+oae!w~rit-)hrENow3{4cOQF9S=>AvEp3@G6l*+uy<}d&~>y@OIzO%1ay@p4MDeA<V|$}S?m@#pz~<eBjEK(aL_@tdJTG-9;YGZ(xnx{c+y&=efUM$>6+?nk%FF-gKWY<@`Zg`h{QiIKJ)<(vv^sZ#nKA%#7FLmqT;%rq@YW6?X~DYZUr5qaECl`!y(kjSv*L}NG(`jza$1tB7-a_*AaIj2T8*(Nc#f&+ILRdCbnLd@nm0`Kd;S)xi(!VhsL7tPw91VEzRNI<nRAjB>%O&+5?}tJ~zduDKSKNP5;cdo1~Z{^HpX3QDh^J)f3mFXLpP*%@5PN$cQfBn=C)(3cp#!J>GToeVi0#iQ4<P^b`4tvviQWjL$v%DAMv4WaRGQydxtQkwI$c&o<ScdpZj#YqTV@?otqO-xU5yqwv3X$`AFa<Pmjk<hSb;Cxps%_*A~B7xhkx4|uNRsWJb-Q*Bc`bL;%U-pXtxxv<Kk@_7Z=cVxskc(k|NWKE>E%krpr3If%ZhwR%?Zpj~nR+@jGsXPQjwMqHB8u|Q{%E^#Vf@`XsYOOu1Z}6<HH7ZXjuoRAqyw_B@F6w=JCG*IYsXVA_Yt<KjjPIewME2u|tGcI$tuZ^7t%{vca+5FpdVGJA?~rP@YodjVB)vWPPGnqt*(v#NtK>h$Yxbe$*+u1+sC9LW$-gTfpYp?vG5%9kPWchPl#KaHtvO2W+^hHfkGdwg>qm}v#cS-2e7K{0>L`qytLg*$H;3cM#W->o!n!7}DSqgYt8Y;2-^e8*vEdbWimUiaMvf50JK-wc2!-d4I6HElOS!8&H1b*{zcpWRkSUCb`!6*Q6c*5*b5s;2`dQtpVuHuqoU`IJ`Hw31hninXUf#9d1a!)eoQ>a)PNyN)8(7CiS=H~WrFBv=t)=!_>~GnR>b+-5Mw_Z@=h0^%-!Z^FY}`NLy}j?fK=F#896#pP86fX=vwQhV%~}5+@`(QI<J`X@hE&CG?MB&~9&5QbVh%-VE6mx*`@wm=ur{x@6(#?%=IJPdc~8#lA2Qp1@q;`2ACK1D`}=jprH#ksQx+VL_Rn%45W3JlZyBAE#e9$Fl)$-t#fj>{^}Vy0=Xm{VvGBZgbm|sX;H~HT$KnVL-ox*39qxq>u)*^H%CA<}Jz4Ba&${m6c_(jq-Fu7ueg)@m3rq7B5tOU<D+kNT=i_})W`6P)`zvhX`}<=43LUb4!RK3W?_!bue!nXoJwA_7HcmZq-Rtnj&wf}g$g5{XSbr3tkH*?ZAp1rj^MXu$%@^wU-~avp06f_SH~".encode())).decode())))
elif sys.version_info[0] == 3 and sys.version_info[1] == 10 and platform.python_implementation() == "CPython":
    exec(marshal.loads(base64.b64decode(zlib.decompress(base64.b85decode("c$~DnS$Cs46E^yT_C*68I=%#hz&KzdkOaD8aEvW6Bz6M!uRkS7_a5K#ee0}s`l1Pv&`>H>Jx@vUaxnkv-%kA(ssFryS?~upEn%|3WM_CbkzJcsZnDT>XJ5h-od+b%Wnflk^gt|v^899@=+}3MovAS0$STx#u1ZHYOLp#ezQ@k>cfQQGEb_Qnx2Ej&+>~PLmRokd`6{1B<D1Q*{q$_2*Xe0Q7OO2`qYgv8xziAfn}%)DF5%`XM{aavH5Cr(7>|%}vH;3gs^2m6J9k|uZyi*5uJX}N<@YL|PWgt)&sBao<u6sfuJSXL@2U2zM&-Y$e7A%Ai>2}lmA_*u|Dp0PD&JG>Uqa!@PE7Brz6(|5&#Jty>f5@ie5>+zQ+>6{zpDJbs&5;s{CAb_PxakZexveV-Kb@ksej${KGiq%?~8ByJaD5Ac17Y9bq~JP^T3Ec*%gadz0*~Ffg1mntM5nkeW=E7@74FqDPQ&XDn;l<y3&I~6B*n-IVS3Ua=R9XEHc@36p;Q?<sVs6a(fiV4Cd*&62~U`F{K;W<c<s9_3-pXw1n>j64<3%?ob&u*yY3**q}BC{fJ%c*Cx)fi}&35RNo=)j3QC(2`;hhJ?^YTGSyQH;$p1Yi5ZSLI;iq{j<BFp`MaPEPE~&5;*6t4<%b;gf=%DA#Dd|HBf~Lif8=N-Qk5<(k-4~5-w}o{+@0!;dAJhX#j*zdBL;4`tK`uW?$#n#?MW)~27jpUpxqmH4V9mAcO{Cc-ddC{9#uYL_`$uY-kf__RMYo&Q8jp>@>4gdxL1pllBd+gslk(+(<XW2-YDLt^o@9H@FeHVjZMCr<XrQeFV3pH#uv34qbc8rUA~+8D|omO7dQ6RI5>m)cD=YPp}vNTs~d-^JU8M4-~FM=cigvxQ2lG95KWw@{9N_J$3m)pG<UHuV#fWGlH-m0wP>dDx@elXQ00pzF1bI+<BR(%(W?HnmgwAgl5@%83*S%jc<_TIdN-crTpG!l@44tz|5_~G-MClfD;B@={iGiT-;d%$wbxeSqlv#%{>hC8{yNEH#b14Ko7(He-Hj)GJ{hsWUnhCI@Yh;=PT%XZeezcMTk}u*HU41jX3pPP`B~YM*LPSi@0MCGpK85y%1*{FlbvMo=KJ{vJX=$Lw^g|>D5svo?)#a2KfCYecmAmI2cFk%f>=kz*d(6ncikjA9w<G2_ju5YhZ<L>>_!r(b$n5FBT#nneXr_yD!bAtyOA7K{#Erm+^YPLhe&9h`hF!eBO$8(tC3J1=BoaPhm|mPkl!OI8ivn<^<l2eZP~!PvKJxP8<ymp?+epS3eLfv`8TtTz;2x#lXG~Q>Ph7*h)|gR^W@U?dDuo~8!mbJ3FV=_MGba<_?_9*rW$vwWv0t0kB1l2r65n!g6C#_vg7=WoY_B6<JUX*DPhvU+@HLD@^H@TIy<;O|5@fQuV>lnukv|Te`}^Um>{2xnGWDrkecUh9R(ZH1Ak;5&SpDU9mvz#1>3jC*UYu)yqWvj%uU42xHePGelx?w+zOO@im91(q+G0>n_h>i6gRKQxwr0}Q@HY3g&oRTsqyrfTW<fAv!A)u_;qOzBMdt~yJi}9>9sJhG|pUb7JhM;^%i`Wv(-?gNp2asUb*N}xb(4A!w5U?*Ef7G%<}xA+F$RC&4tU24dv>hp(53-6*1(!bVrGG>W7K-RvH_<Y(n|kS}WsRUouu{+z9*ftj1tHr~1t^2+fI1Y+9Cy9*z<t!t2-#pRv2SkwqV82~K%}oJy}QC8@yv^3T$Up7iP8a+kN<qgg>#&}aS1n(=x_=sKqTf*~5?#IiHS)5@k=A*ySVRv$;Y+u)0^jI;AzSUZrb#qmKH?W47~C*AsBm)6;K@~HLN>)PLfN7=>8VXqrMx@fVgeYeKpY1JLKyBj&zx6yhYXzv@W9oj>(EZ*$n&UD4j@tSg{>6)GVe6ReMMZJCbW4jKxtydAw&*P_HlDufAr_>CBB`FM(6sZWR#d_zZ<wtMWBL94GUeQ)Z_4vB3ukP#Ja#w~{5OG`S=3^0e*mp@QUaRxHJ(JB_?(6O78kybQFdlzc59_ChmzH;1otGY6p3eSlptmTnMk^BU_1@8gpW7y}aeukC;vHqn`zsk-^s!9GbMZxQ+U;ULPvm7~mkWHU+{nE-p`Chqm^V@6#JG~<b$tw1uMvCO?P~pFrMYQR%lDV)BD`+(wn+|~xA*gQZERcHle>*`Z@JW0f7H95dlQd4^u8$9=aOAx^B9-wuVjqg9(d74p`FWN{gZlv(YyV0&xXBpuI@QHn;zBr_@1X1WIInyM7jThhqt4>^}m)*9^zMS7Hs{Nox(^CU!^6-lil<eJY<@&_@jt^yxelMj}E@64GrK^edX~69S)C|kHJY-J5LjD=<pie{MALo(c4RS+}f+qYd{X3-*|`m>ooQ|d&9rJ5`vr(y@CJgBXhL|P5T*F;&e=V64qFIdHyi6PdW_VSFznM@j%Spl0owt+r8J;W%xLs-Yl~Iuz&vWTQnGERUd`6AGg<!Xp71_dVf2Xj@_SsNK`p45zeQl-@IJIU-t9maIZhNM@jBGGYXDgRK|~Ia9HmG*LndPrtF4e&U$XYx&B7$<wekw$PVd6<UdRuFy(d|S>bMRNUhHoS4QUJfGQndz18v2@l$)Zv#;f)eY{y|xmj0+zB|5j#@>5^3clpUpmWdd+8}-N<A8{t%~C(EySqK;HP44uTnwIXc8O>2>6>R78GH1J_p-y++je^)Pxtu~mTZ_G%wrV(?4A$pZbjBc{^7Rd=q?>CHN3;B+wPwEIk)@ZhuQwX`KEu<`2#0A?b`4*v$Q`d=k<;qZEZiwvXmnIqF-^Mcc*pRUBcJ`mSIGJb6(iulzPU?!6L&Zi>RJy<0t#v#P9I|r3KDM@7<^l{P7WoSNnK-JjVS`mMuTic<|mXWBP1|f!JYi(JxIF_>Q~X{BVNJrFO4hq#LyNn(oVCV`$FDPp7!2^>*jJw)LeyuM6*C89#)FaWm9!^7@Q9NkP`x_THDtRUD#Auz3^VY4_Rf)928z3toWjwNYK}hK3)uXKfhIyk~DB>Ahoy`tq?9o6r5_+#Igrt8C62!!_5zBG8exzU+0hb0r;dyQ&x3A3vEvbVj!6HVT*5M60*9JT{MQV<qM#bNU;KHrExRkK^adX?3-_{f|2EMH5invEF0;L09HaJMC%kAx?+nXY8TnQzsjfe$n-2_|f`u^&?Mq)myRo%440FtLn{iJ^FgEs%QN$vKFv*8x*hpPOjW@c`^oD3~%Qn8-Dy)pfF+1YSiT)r09N%vsK12a60?)>c%VMX8-W8`%?UHx|Z3NA3D%C8EwmRW|<CuOb*iP82Fnf*Ed?($httAfv0|709VP|@T+M1Gqc4=h@XW_r-#IU2Op-LSg^v+YDw9!B62rY;O*i@X2~_&Ce7+rvFI5CUN1fCD--;lF|3`gGApkBEBK#h)%b33rF+KeW7hO;XxFb5MKx#3A!$P+as4$n$mU?{&KgfXw6_$8J_w|`eG+w6U6FqPz#k*J%Qbl`G=HQXa2Utm6I#Ww&P9C1`$%FMpb%phyjmL#q2LK6C@xi>#pX~_G*IYE>5NNeXXC-Hony+^JMgP`(cdb!ubCLr)0KKB!Sev|1G#28Ho`4_VtP`G=3>Q}s4Og<fuep*$(@x~445B#q#3s-(&r4-e!|L4PP>d;YmZ6}GLSj+H9I+@f!(mfI%fGo+Q4h$+^P132Xb(6AKUdlUsygP=o9+=43J+lS*;Igub*gdQs?d+*ogC%<^`&PFyZSH>N#a7&WsV(?8XE1dV_hAfnKqIjkkmA>qUd&5LE*cVOEO%cxq`)^eQ{BP%rc@qln)F!L7=Zd5LJins5kNxG%)&kX)_Dsjdk%bQ@o#7VCXTS-3nkHO=(k8N$a$Hm+TS`~dtfZt;7jVULMys1htOLdlUho5bq|VrY*9aT>CXPaSS0z(xZWJ(!L6rQ5sgY9#^j@5Ht!V76V<RBqt<+d_;yNc2z8ha|9lj{?dMgn+iH1BE#R*=1Pk9=WLVNQPr1FkuZ%8IlLUT)>-98az#%Yc;K|KCt0(NQ`KOb$MegJ+c<Y;poYc(mY0?9>|`BPx=u9<1ESQwE})iKyBlz|Bm&(Ba3hwkqytJToK2=BxI~9=wi~0x6trmJ>dfeeTYegLfXsfiUmW}H6)u4PP>jYt1M!5T|NCgM70(Re;`ychIpK})-G$#kN8O$W<3vNZ4go4!dPqp?@qBKn2&@y<q{l3f07axt#t!0^_m&tSxD!3Bo*kjqXnW|@f2UP)=F~;tTCx;te1<VkzL&QQN&(0_^CgXUYE2w5*dv#$Si1p&Dz#8BYuh#z|fTQfL4CB*lm)ui)icbfGHkJmvcs|uWE7LM2oJYvf7oTmnE_|=;x)<d0XhP96YNF7u7SPG7Cxn0eN{MobkxC4M*LXG?iDfaX7WUh(!H}+j<CeF%&Ig^s4&Nry<ytDh+cN@tlIa#_SH*5~m69?9!_*L8CvZs6J@hWr-VRSo%ic@k=Oc6s2;Ni1A3sZj(KAEze9-G<5Ac<2!Tum>Q$ZnmP*z5<qE!Oh@d<cAFg526L)a;GoM1)nO>Zuc)p14EO`+$TBzX`%}H@Di05b%gYyFpuTF*^%Sq76Ak+!wQihLG>%um74)^|)>`G6>(|Ey_=tZmAOE9V^Sj(FXQ3=w;0yBaT;jC>yPbAL?qRL8yRTQH{wf&xB%VxirVn7hJxYLX8=L#7zW?qccQ@Dn*)IFt?lWiAXO)`&SznZ#6+a*tRrHVs#)+XVeaa<Wgbt&15?w)-sTBlnPa{HGunS9^b|W$Bkg?k%Vxv_tUldve21c$U1KqGwKSQHj5=~E&gnkBIn8&ipz(KZPFRyd~487^~m?0D=vZl!LOTrCU(=Bs!hq`i`8Qe)&Pfn8eT%tpk%FkS<ZH^FP4&DOK8MCYJamgcQhj}F{<r{*~MKS0BCJUY<LXrgVe_+%>V)V--$sU;|gJ>Z;N`?i|d$&Zp2lziiweVSKW1BGF#=3t?JpY|ZKRFP87kd<JQFTw6`y(^_`-$}*fm?ZmMvuy^A18t@(3e|4ty}1f>r+#qs+A&PcRRMRS3PA=fzOP{sK<_OMaE_uNL;gor(i>j+_tVKrayB{H@H|D)RSTH4Bf=`->IW714-AVi;UQoarrdI?8$e9qi12mgKQzifrN{^p*nNML%4u7CN^27`9`U2@{m@9JHZHc6KtKM=L;}Sl4hAiQ6+$DKK(97{Fcam2Ww|Z(>_m}^8>r%r6OS-X;n+5&~h?fimMe98xP#}ttipGV~W<yMV{(ceg)j1fvg;GDk2QxRPqBuxG-o&TYliJ^~i({K5M6y3z~;IS#i5!39Lh+cY3uTD|W?Mh|sl?y*MTQGPkQ+srO(bKn9C`o46~ORb3oOy?%EQ@MjbkiS?0bbVoJ)HEd~cNaf=|I3^8QQ1B^WFW1?XXC+{ba)EM==mPKt!!mS;?&y_ASF8mcm(EJH8-N|pk##F&f2T&Z1b&VZ*Lma!e6O<-xuF9;Up<S)w*#%;p1eq7t)BumN&}Z?4DeFikn!N6l<Ihyu$uuG<pKQtqtNbP@G3VX`X`JF<jt2^%5B!%SKy=W0kR|`H7M<Q6F0#>_a3I$%M?>^f+@a0&l4U@D|2g`o@Q1idQq{Uw+NnTwB@F2n^-`)FU&5m^1*)~TAEzNT#$O=M8$O~GhFS@j`<b=hw?g)s&I}Q!Mp#5*+dQ*ECKaz-_HKROiObg(F3?VQiy6SJPX!IKhQ;{6R*>m<TM67!r;qY7wJ^f^wZVX7zxubtv^b4l@rZb99giT61)2-$+vX##&v6fQ@qIU-67RCE%9ItdDVMr;67X6Ic^emK2GZ^Pc1EHzzL#bZW?!as=BCf<(0G5lT+}^seI$`UWJ{-)7^23Sxs>r>*1JFJv(T_%YjmICdrgPPQjY38D-YibclMIUoVao{oHKNj$@uLrun5mJk<~PUvo1-bL%g2v!Aj0Yh_yRW^QgP^8j-cIbGy$l<eP3U?jj>LHsHX2Xh88_Xd*;+ujtb8S8HaGS2>2x#=8O|61<tJe6#mtG9H4`_j3ujB{^fssF}}+p5%f^B#Hm*5y6e_|J^#^4GX+g~h#HG=DGE_bf~6F|j8tGGB&a9zWh$mKnG|fODvLmH+>Jyk~3gm|cYa5975S-gzEtS<ijlnZM$4@&S1F&Z~}>o_v1$uC`+G4e*03<>m>P2y|i9f{X%gP@vL(8T%#p>)2;KsLi>JX<X&>w?D0;-ISC4Yu|6`%{07dsweE!-@n$}sn#`<b=%GiU(CH@mGw%qb^)}*H5KQqOfJj})}(2sD&LGOmF~Tn+uDpAld83ag5OWew6v`!o=|S1@=s^*+(@YX!i||OL1-YyX>FoEU@cnJU@Cn9j40R4rtvAUE?|f6v>Asy4gF9H$AF@*N=UHTfP<de2n1`MS8w+=$>cJbm)vUT628$umdCQCpG6}-foCp2zM=rkXPo)-1o@olzt*E$HuPRBxGZa-D(TI3CuTVh|3miBj=p)rj79};qj~LR>fxGTe{9onl@2=a{1Gi3`|Rw_=If90vQ+h5&40|#cG74yCEu~>Kc>IeSsI!78LVZl>{_UqZDgO7j57^%56^RSu{4WyZf91S+M@+seeAplb!M$?S+qS5Xi7)JJXddOPs1bdUG-ub-M%=3o%J;IrY1<GUoDmXI;E$Y`=;#flrB|zFr~MeSDE^Yl@5@9vdzWdROS-u8Jy1iqgHF=@A*+Q=SL3o|B)_!_s{-k|NcvtoK$K`m%yg|O_#Rba`&e$)qiZgS(hwl_1H~w)}0v(vr78w0D;YAdRMq%e{f_L8RbZg%~wo(tGsH%F}0Nb0q)Y{AhAM)kuo;ud4l|i1W(}OU+`TRrR63{G-Hon!A9Y_aw)7`T^i@`vsk?4Hlnbe{p9zWUhL$opSMYuyjhpdbJ{e|kJriW?C@;YKo^abmWQ3qT?DofuQ)@G$zE!J^`EtGoX5#tQjKdY^)F%bnp<92R}Fp4HVnj~7JSs^+eN5BS+FU(;(;C5O&AM$RA?iz6!P2e{DqY8d<3)Iq7`t5jE!%lOCR8;M7jtiVD`Rfs%Lqf_68ooJQnT$v{trq^Hv&ikx_a8MDugXdt|e%j=FihL`w^qPCTufGpx+$JgpzI?kwx;<zSwd)^=xZe=K${|83)@fA*g?F1XA#?k~Pe*|xKs_KGSK)(=*DC7bD;n|@;Mg`G_Pod0c}z-IL2Y?FW4oXLKc*X-Y8{=1L%z(;pHkq^F`*8cZ?$`bsNvooV;@=r(gy&Ks77|Ud||B98~W~?NpHOz0$v}UI#tkM4Fv{AS*jmYL^?7&*Iv9j-}=5Uh=3!KH9iJci+!TY<C4XnL(K<8m!&ug8hzt)_&5PzsOXANr2fj<D7!qr+%2k$%p#sYuHq6t%ZZ|6!_GMLt+wOD%9fEM5jcgel81KStIIT%70|7%aqoMbWW$tCKqmvQ>LRX#P1IQR<HXTX2l*_IK^&$o;fJ}?dWS?$HvIPX4#uyZn_uFLj6=U{(y$G%)(#VLnluS~oBoZ7Y`@O}5+>+1D7-U=hE3orOX{jL0n;+LiU@BPGo_I<`)zxrNJ`-zqEmtdRFd5g`~*-p6VB=*0?V0*j<|NnJh8!sjsCxG#kBAeEXX{_|(zi^-DPkPa)=8nNu{p~{D99Mle<3-r#&1P4UyB}*60>9bu#?b<xsHIWWfN-A?_3<gSpzZP*lKztkuxpw&Bu%x9lgdpT|6VS_9B@9uvR<ELUjx_Ql2*2?*<_{T^Qytugsm=w`fb5*r{Yl2!s;_)wSw<S;mK=kEFW=$jM4~6PHHRm&}Xd69>%*kl3Q=Jzp!9<&r%pO*eaMqKBv*41m9hK+r@o!1(_%twtLQNFPh}EH6|PU2J`z+_7?0L*flIur61lgx78kKOP`s6z~|#PD5J0ea5}#M{B>1jIodpxy#w3!m^$=dYuVfB>LI5!7_eCf9H#7+J=v>FJu_I-+sRI)bNOs={!4NGg2j#p^*5~Prv;c2u;lvKDBg2WYuNl=!+@E<SS{6hK;LWF7gqjz4R62Kuw5w(XQ(p_IWhsyO#XE-fKA}ST9U0Bsrn+dXDuu!S4SXksLvcgmlm1>wqawn5!e(w`S0@(J|m_`6|8Mj`B})9rCHQ3(7y<s7~ny$0bncE&LVOvvl810E1u@F0O~(abEfaX#{9|4sy{4aiT-9Y06)B$^u=m2n}8qRie+yucGf%>&NLV1jODF=2z6QqQzDx2a&-R7Jc>CDNB?VX=QY(&-}t`zd$J2gwa*hy|9`Lx+28Gg^@!)TgSo$xulP^QA5YpdV}3I0r8AF5eQNi!9hhatI_s4%nHNtv#zLxCvLMZ%XXzAo4|0S0rB=Tu*I;07@F-}1J9$)NvR*NP65y_WLR5^g$Gq_`*Z{=a)LFKO9)YAeH>zvSv?Uewg0bBYJgt41n5&rZU9S6nv5+;`oqdwvHqtwddDXsX<!jb-&qBx*H~4G9q$o5#h8M9b&)?&k=E;v|S$wZ^1pJyJJx2I_#_3RQme03+s2^;e%XIoq&c2z>b<O<vI_p6=%c%UT9{inKR=?-Io7ek!)-T}D3g4fdgE|WlD#siRmbEhv$_}{Zg!BK{p7Ddt^*#R8?#wr|D)m3J;h&szdY{i{&KTx>(#3PHDT@JqUSVvjivnwoeW35y2U?+DymZ3G%2$@q?gY&gpZS`{)ic0!Iw$l|Hk-$L6h4A^o&3e7{<q#SRql1hAu~{!<ls)@KRbZS{9L8}8<$ODMt_d!FeOa5Y;VF?fD^i^<BBUz@tO_rg>8NY?(M0wr@#x+-32(PW@QRvxS_%{U}s(+e>d4PI@oWDqqmw}oONxRs&v5BiwJm%)V9`S2TQPT)>OYS*-_vzU>DD!0dn4OCEIk^f?aIPMFz6iXj>V~{REj$vIlH+1&jrD5xyrG*foWj-nV)H`iBp{xVky(+-cU!@$ov#bC~7%m-v9U`(sMGkSQ&gzbodsnDuu*>&$D_phv3pcC_#p-1(7Pz&%cB&|8bS-oM~_#UCDr+19P+x^B}NvVUQH<FCAh3eHAI|DX8v849#NeN0^C=}vPxVfKTXd!%q|y|X;EHo#eJ6=qL;@!z^I)w=zy3&&Z%=QzX;P5SIbmg0!uOTedrPJrD6pZ1~F`J~sgkDM?&=<fl`Se=bh{XFC-FiLOtV;V;@>vF2v*@LUAIp6~MoN$4=dHW~7`QLWn-sVU=p3&6bDcw@BH1PNE{KoKLgIoXO|7y&hKl8z6o?kwv^?#N9zvEn$l{NP*S=h5~G&9#K{yVNUwPpV14ffNS)_7#j@{Cj*N9is+k>Wg7@(#H3@A888Zq}Jb=~?)uVk8-ppA)D3&wlnGtJ@IUmVfa2k4f>4f%`45Nls-ut&i(JJ3RZ$iBrz;k7o9N#Vnh7-L#JR-?qul9lCkTpVlsL#PZbK-%5{OR4n!9>{Dlc+LHfn+x$n{kMDDVDz<VSHFL5#=mTuf{#*Y5n^;pUM%fq#u-c@LzihyaQwY8Yr);#T&*j|b|69(uOZAsU=y6P)cJBM2<e_3qoi+KO;rhq)OnpOT{12Nu`N40S`=VqF<52St&;5icC+ye-@C-FIt_dr;Dn^5Zm1$c(fb13%mQ=hCo~O`k%3tMosytv;ALJmmECY^>#TI-sKl@_4)VAN{)cI6lv&f(F@szK=+rxJa$PwyYD@+Q{KWreC(KVtiq$6&Djb;(LMt%$V2yC%%rv84{W6H*CqU2Zpf0b9~{ik!dzuvPy-~U}+jq|%)_g$|2NBZ*5^#5wl{YQIl_K*Gow&rFBZY%?g{~6BpThqM)Zt6;2#rHgvN^aoGpuCvM|5d(TrXe*y7K^Zo1I+UU^P%R;`j)3P$us2JZD<;5-l%Y<bFS=r9xp1M@2mEA+0?$+HPID(obsXObPs_=7rvd!+k6Dy*+zR+-tQE~_f<dJ@A>Vn5#A`Sq4M`oANc0;R`qB5ZkzcOH-4G)Y5O_t>2&5@eSbR-?iBmms{FMX046BGmn$x!e0-P>`^Zd#BXAN`{toSZ0IIRd+83{_<`#mha!{`t?`<ng^zhs$e2e(!(NnQWYr6L^*R$&?bA7fKQPf3>yL{(ozw@>4eEhfk?pMB_0!LB(c%BEC8Xx*0^m$x%JdG<?{c0lps=jxZ`?q-=7*lz-i<O+iOjGh0f24!mS%)cR3Rps&BVH(byiO(?e_-c2!@#8@8m_VIJ4)+a)r>85QC-n057@XkFn@<No#mo_rL9kk=Dz0(c?f7IBHC*ak!wtGUV2uRY5iy5tdhW~{77UA(u707e2?lDrA?)iXO$*b%1<H`l$1IaiaYxrUU2thTWyy1DNCeXF`Ppe#uKI1$*bd}2@~r0aZdD0p7{O=d_b0~^SiiF@l5t!(^Ax;uo2-5J?XO?saGwsEAk4IJ!3~_B_hjQuiMZ?uh@`o>~)Vg#U3^APzk8l(4Un0ZNdUAcJKQj<#pn&?2`D|sR=I!Px45JA!Fzh>%JR4t$Pge%HjLMqkbi-CXrQFx&A#*{cVz#V`k`gdX*>;sE+gs_|fKeaO8lEVJuRfW=3_dC|PoCl^2bEq*8Vn!(XvGvM?1RlVDLC9hF+%n^k9(i}#38|9(=ZksKtrR<5W-EAUNY?5++48&`}4&zN#c#bB^rzmmq$i5MP{QEiDU7EJmXrn^Oe`aGm{9J9Wy+^`FD&PZB)sPkRrQ|2eeMNC2qr(v5>uHi+t%vklz+R8hi?2$YC3ggQ{m$w=7GrBNWNh?#<;)E}%53b8Az4{?-=`9!1j#9BHZGHUBwdXx8m_szMOHC`S-W47uv4KA5GaAFTTxQqGD`*B|+pt0>2FO~^bh!?MwxTWGQ>4zn^emv<Aiz9`7QROf$5<!Jz^kr-7a6BZosm|)M`^tbg#O4$wJj19K;8F50*`d=SKesa3DM!y_`p*UjS@Xk`>r-q`(*x&(~YbeI>mg<g;jHJm(PBGj<L_Nfo`B42YusKVDo)qhfP8&z;~Syw3tPS<;P6lg<^FG9L_naU*oGe0585!J;V{K@B0Wn-X@>=-cd=t@L8|;qP|w{Dxu9vKRNOpi_JDk=sP9DBW}jH^5~T~RdaGzw@mt8kX9_wI^fAGC(&tN8XKRIvkq&+;4VmJ!MBwij2Y|GtgWx*BJ@uL5c{=!Fj&vjh;+a^SMJ=?Nbt{c(O&|sZt^E@fu}bG3t4Fl18ZtK*T7P{`Xy@RS9Gmb2imQuK}8HQ%AUdVgnVAu*0pGa7Rg{pm_Jk+*(A1pI0;C1b(=Qy9n(Ie#{E{={wr%}k`RB)9o;Vod7L~xfG&yPTC=RBJTuM@PU#0X{3N*UG}?4}sBK==*~;A3@2AE}Lalln601K@sTU2uB@6SJY3FC4qktQ|fOY#!M0h)}z$lt944UdaTYx^GY$)0a)@nT@k_@Hnx6EDnSyL`qLbDS>4S#ab(R+OGaGU4|=JK|R5r$E7`(Wc#o%zTR`h>o%xQF}fD$`Qu^pw_|C;kA~5oG4ak%qQaf<7~?175|w6QNfQ93m3cB1DofmwqIydN8t5wr^h%|599cLy%fS;_i%sR&JFBi<rS|BBX`1KgN3a4DD<aw4gs4PLo9L16upa9w!oYW#eZ#>$f<SFn?f+o9J00d4(F5qz!MC5#~9$ZwrqsvL<*Q-0;dZbm7<VuIxl<gztfd<C9yj03v*b($V-r>2labjITpY&!WX{EHuzb;)AB#bG|@vV2rz1`fjQFA<_6Yko1$X@FQx*&q$0UBB2+0R!ga46m89l#9G8O^f2ma>G)S_tY{*gfr;@D5p5GD`uZfTE77VN*6po8G6Q)XSTja(QtwVqZ-Cwj?CP%t<Z}b;0Id6p)ijgx9wNu!n$JrFGLZPaRCh(Zep^1R_n6ULL3fYhS?7iB4C)+4wNPuj@)CDg=8en~RCyuA>wxwy(e!QL_**8kC)Iiiz946)3IejafxLatKU^fb06P?Lnho@7B`1o5NUOGqrYA(NDR)*|e67KE4bP;l-P{>JNfM~@dv|5O!c?vzrY|wry*%x=rz^T<vc3m&2fnAjR)(G``&GF9SP)9Ft;fI@9`l~g-)+@wU-~6k_(|dHhTI*MUcRdJP_l3p+Z8U2Duq6InNg30gZxaZKZvYu6$@egcVoWj4Un^UaL2q-H}pu|lh*p8;8Va3Z$qKKD*IBB)w*z2m!eq(3FsGfWQ~)`&5Tu)>GYncGn2@_M6w!bbJt5Zf^j;V{Hc$px(;GWJ1l(A9h&D_&p6?`#KAauYL8>eRP5<{Y!jzjZxMC_aepRH-C0M|9$;_YyB&AsbF$+sQG1#FsiC=pP!zP5n|t(&k>CM7byaHby_xPOu6DZC^d#!2uq8P)Xic?lJb9Ib_3UMmx3R0U0z{n~oA!VLoi2!8dffnRc?IFiav?8~K-Q7mHq?XV;qnz04)~cq1V4H>rn^nC1}@yrTzEQ@(x4m6uVgUxP=bW6C@J(vkDhW{>d=QY8*me@D|cKwF3Pa6amxi+g3ongLZ8PJulLUQpaRw&4H0!KJ0m+ip*$go21&DV1ByXM@gWpkB%Z|aQ%{d<rRsYsT*EvXvIaY#N70e!N>1CL;V#(Tk)`Jcmf27)D))4*3A_4n`E)jw4u06H*a>g}(S5>2xQ(QRV?@0Gh1XLHHUspZ>RbXQNCJt6NTb_C=xef|l#A6nZZP4-s3o#@u{N#=+ihr~FO?psvv9brc3eV-be{nxzW_GFSps@MxjNf=p)_;@QjavPKPci0ENMV=<R8^J*tXkI`}|0}0A!S_IiBJeY7E(RH<r(G6U2g)wKL6yMdTgkNE$Ul3EAvpy4eCohLPYmsv(A}&Y><{R$-T7_$#6`plE{<hlZG}NUB>FcCep_x7?(FBWMT{;2#sT*-|nF7}B;**m1CdS+iLJj*Y4`?2I$`<`ip%@iVt%1^R%$s!g{qr*k`@Ubf*^dGCPx)0&6fo@(-tYGIJ*A;R!p8T691{ug)<3FU%fVaY;nK6zTbsXKkfxu!&nZ?UrpVGMKJ&+rE>EfPD>W=lbTk;bbIWybhb8l<;2onNW3qRmt3rg82sg^NCOeKTQi=<_X0<=1p~u>IX<#8WPdR;BS8Y@#eTU6dJ{&&rjb6{BjeOvMy$#s7>`Y~I0}y@L&&wmeFGTF;K!yLZ)|7#UQYFjH|t`#V<doSk@nN7FkxLwX!p*5M^{#!S6$RiMiKGuHm=xmPjvt%|*?vjS&_nCI7FYpFQM{_@{(kSXl{`ez&@T&jLnD!w!Ea^SCqiZ>$lRA*&`x%`fMw9`Jit;$Wj+Eedr+B=)#A=B>|T)ufVq`T#>`h4KCs+?Pyq1euG1kIZ2`?TkFxhfZYw;N9Uxl`@p?{a_4?O5Bn9m@^P#ay5BD=yKL?ptIjzHd*zZ;+~ctiaDBq4vzr+dYWI^rx7(;^|x9#ifB?rg2&E#FNXW5-8Q2LTtX%^Eth>gtbuV{5$<Lr}w_%x$u6Ocy8HMFLOVenfIQ1fmoD(^WM)la~faq&3pIUtc2T5y!Ugr7*u>nc)R&bXWK@vojGdu94Gihzw)y=|NU3~`<%c1mH&Mv6p-+ozn=1eTMkxdZNGUnR=oNxY5N`U-4sxOpKEnc=-Glc{W_tY#=sVUEq;Rk^I~K4^DECQy|Tm9Ul)46Cx*Wzn*YfJdFD>f3%AO#tP<cgH{$wBkQJs+T?4<6;e|{i;xCz4?TFrQc_Ztr$<#f9AlK33G{xrMca-QJV5v)iDz5g~lcvArj@-ql-Y3QwF#`2S^u@JaFsHiZo^{JLdBujl1T3~@)O;K$*DJEQlEeqYA=_M+V2Nr$JSl-krj^cbmFMTNUNs>(4~38c)?QZCf;x&Pmd$vt5(zje3?snUk(87<t3B}4PuBFGSn_B2^e>pyz`u7J(gH3qcmjCJ$`R*P;sZXbZma=Z;)Xads-7du<E-`zxAse?ekaZ97PIhJuxQNFPT^sXxFgt6<cC^~NsGS#-@Pl|Qxg44-310*QWq}2RLv?+guHPg33wluu$9Q3_>OhHE)c$OS&qQ3b?}G4-^2!R+)DYQQl|ooewR=xCR`%;n7A7pUG)R_Oj1tKSSu%pX9dN;Kl&s~tc)RN#f{a4*nk&gxB_0RgO3#8_tuQnF#jv3bfv(Ky6c15sKG02M9Z)N-0}49h0fF5#(Cj{%Sd#9_s|t<;3luYAAm!1?YxQ`eJGUwPAfNe`xtyo5@~)!QVi|-(aGThbXyBF^pPhzW)}<iVufkzuL8p#nOB8?|MnU1!9thdlL1TU^(VBUu*r@Ho`wlo<l4p$1doBgts}j!6;Fx`V56w^a(5W=7UzJk0r20~A%gF;ej94OWG#8dn(F&T-RlD91v<|B*Wzm7;t9O)s@4wmPA=Z(6g>my&JNCoE9{d<+CqOYk@Uhno+QXmDA}+|TeYM?G*5^IXd=iY>W`_|9CBfm^@Mx#19C=nhCNYu!$w|Y46BN51VJ#zY1qbk0QkMsvDZfm`(iCKO2fY-0z5Kc9&VtF>e(t^Q0;WFf&|e+(yXE!;kIyTT!{{}KD@ykbr{wnrs(}hvrV-Hj5qh;aX!y+0zxX#!ERNx_*${mf-u}N6u#4i(8IQ`xvP7Gfc9zqC3h;QFB?J^`E*gPut!tCrEx?n6ejrNBxHxLAv>l067X1t9kJw3Nh(p*g(KfHz4xi+sBtCiiW5%!74WW{JVPUv=mwa*rg}Ms?qFnM^9eZf{g_%gaLRXT_$m$tJV5_E0jT1dOe#6st=z>1eqxumz&M+Y#~pqMys$3y@_9(G4!W`4IpYY#?NEU&p{|6sd>RW%VEylCgWQ6QBT31ovVkAf%6`!u7UM2Q^gUm2R%jeBTaOc4-yK<{a9&4Q?^fb$P$oY($`)8`0(D36NX-pTyK`bI;J3oWtqE-g9q`Vc!5S=_n#F`a73PKd0^sS7`uiMb;%wA6F+qqV?ii4^+Q$;Fzy`2DQ=G%c(Npgg*4!g9#;D&%3k&pQa|cf1=AxD*3PsfTIAMMh2)T?s>&jU644d2YnE3fl^%Z)}7ZUUnXTXsz+z2lx+ut+LzZ2z4hWH_4qo&qCrPKAvuJ@G${_JkpNo+KloCn~}U)-p1tkX}m1`2)mpbW9lS*?lmX?~?4O|9Srwq0=y@({S34jR}w0(_ciy`O5nMKofBXcJ?CfIF<bvYT~uI=AfYr*lI_9qx*S4}3}CHgqEf9kSG~D|hoKr(H$sA?EV)d6a(M=WFIPI;YKN&bFyKkM^=+ZLf!bO(*R6tj8d&JL23?IUSIJZ-1S2@8|ukcH*%6`5gB9+-CQ`&f0{XpXx7qnIaqJ=k}`3M|r`tUFa$-h^KwkhZ&oeb-W#{VFw^c-DQX@Q|14DPS}wttoRFC!V@s!>*v;r6ejHcU-rhrzwC{bD$e=qEd1~D(Sxqdm<ljVbF-&&qN%!{5~_38YA;2zn)!S+Jnd=EY&T;^3$WjW6`6Ye+A}+;y_TIiOTV4I=hHbUZoaEMpgDaxr`x;V=^hNPRp%h4^gs8m{5N&RzE$<FRXaz(ilOEHy&Y%9niFRHYdenmtr-hzfT7g*9vO>haRv+u7<0yeQF@Ia-&5}w^-jLW0iJ0(ml>#f-07UxH2(a1{PtV4^G$EqcA%N+Q1_cUFX5>@q1A`k9zwMj0_BTo52xKn+@c$ct(V{F<(&TdQ|<M@do^K4PXp|`d9l=<Q^ZxjUDfXwPhmhlVL-Ll<amQS@7bt5?rG0%tFYl?q4vns`>R=5zN+_a!rVr5zN({b?%Gor8Pe--tg8AYcHda_&5L5y&JN_(S)tMkciOX3a#wq6X9w!V(;bOvk4w$VcHRr>EYPQ4dtXyJ``#n6RQs11E3eY;_M6}Bo15S5CzJfR@Rz^$s6xo!fS!?WId#)_yQ%%p!(uMK|8q~P_)Gs_o;6flradcn+MD~{GuwL+?JTaL8AE@1zv}tjuK!C;x2Zi?ZI#lG{rC9ZO|HtnX7k=4l)HbI%ex4$ILN7l#Si6*P96F22BgmUz5co@1a=;9!yT}1Trr&=Xmza?R(nA7BUqp~XJe8rB(M?PIkJ`7e<CMBt<tMya-~Tj{2KteOJVz~lPf<k;H7Dum+EMsg)_Z&k|b<PBvvX02AF~{T4f<wiNM9`EL@t*cj-rlEGufm036OP6aAy`tUS8<ec{P9@F<2CH6yM3h)M6oPhwOp6-6s=ktm0<*)3HplQt`hwP6-gBvmXk)5Aq1)tytY@=x%&#<<Ev^_e@X&qDoHf<}2|TQ|;VPZss!<W`b9%SY+f7;qX__X)X*@iVfd+HFN`^brHE$QJc``Q(12RSn=Ay=37!F#5P)b))W=mT3j}wdT0dKY;H%bHk4VEd)eL!QXCB;ErLzd;o2=TX@`{4UQCVNz&?|Vt|0PlY-%#q4QJ4utFmD;5%<wn~mJ76GC>&yiqacDhi#t&D~H7o)+NRI?op2XQHDU*J@tL5JwdFl%{u)CPwbwAB<HQXLq0LI0oGP8MpYxrHXx`ZA@vF>D4`V$0cyCOF+U4Ftip+z$u2K2kf?tsoaGu(gA1hak3jus0WNFUt_o4pWKmVElLx$2gCZDh;S8&rB0jOGcZDWQ1W%LN3QjQ>-81nbD&rBnKbB=+48`ymZ$D>=D<B5{}OA}J8rrmM}Xr{?emuC`{=b#rn5GyM?LFsMk%^il>5b%)_}ElNgE7>>_g`2ewgTLzbgQ2(1ZM4CV2?h9Jr-!6TMP#<{NG+5*Xvh6bp1lL;$0L&VQ8e)A^b84*9HT<estd$gWjV5I>*{Uoq1i&?CTK{wI*fO_1nh!YRNy)D>mGDUvqho+6sXY3*{|Ul47T!0?_h_AnFD#?5^T);^=8{)n1EBVHdLoG=R9o8o>E5i~v6WD$5(PG#N4fQw5;1=Y_he09cb!F#~362tneP>n%`H{dJ?8v)?@>IytDD~VikLr;Rl&*)X{G0O+ms_wwX0J!-b_*Sd#<Lp(;FhR>)>qbJdp`d)5ENWU_ElL?}2?`#8U9*7pt-^n0qOXrhNYuH;^YGWW`W$<9fPP?Y<ub1`xTj*o^mrs#Vc<J$>n$UGOv!B|)F)W_{)xbhILM`_)X5WYU7|NC9?6s4ST3ARwAfE(3%7tz-JX@ATVYA#;%aJz=aWqG9iVv@0Ga~)ikYpA>fF1znB&)FH{YXiXU-9kBzVMvcU4;RDDfo~)f1=v8TfNr*g%>bKL<UmV~X1VVUX!~V{Wgpt4vQejZO{90~uP8SQ!BefIxtallZ}14qS=9pBPs6tn)|$zjDL4pw%rj>MoPgPQ-3SV7=y4@l!Np%(sK)j`<bzwYIVf>|R9f%SzKRH?qya)|RXWn|j?nflKLJmojKWhP_bn+<-|koIJV*yuJ)vp8;<HekcYda}GLJU9FL}D9_2bBWa-cg+1-RNa~y%w2vto0^kFn#wn#H@L}2j2T$^+xuCMox%zn+a^CPn&!_JYU7VcF9#iKTxQg#@J}HS{-O&W>N)la7uxnM0#qcDo+yqzsc)Hinuj-b&^{o)%fpxj8TFYih_Q)w8D+1i_>QA~B8|WUi7Aq4vs`JgT=Asj$mjmb<Ycce%&(#@>*u8&%-SWz&1|$_;!&I`ULAM0T##7A0(lcYcCz3C7Lk1C3v7)hsZ*Ewl%c>bQmeyG=R$Aez_;lq`Y3bCBbXEUJ`5cNo=Fl70!#c2ipI&!*powMd0LN`MPnO`UM9!0In>ul-6>j-D7ZPJ#=qHb_xsB}u@p*xy%$?ecgjBz;l7o$BfpNDJ&uWvW&W|)!XBu8}g93Njd=+w|6$?wPmyU{lPXw3b8o{?C@M_62LLaoP5-Nb7C1i8DYR|Hp&UEL4`b`%N@A-l+vzFdVBOJgdUYICXg<HMHisLSb;?@E9%%l{+Ydv3bT0f&^bz_c9@RNhzr3dbWUZrQxQ;PCJR+6MhPspHROFC^M(07@Y+UgQGE8x}TBW}T`YQVu4A&QN1MVdPbDfl@<#vu0;{6qw}LxBHdxeRHXaFlp8iLV$qrNyc6k0(To097<>=>fQyooN0Z*!2bG7<jU-N3_2KpV{)K`Q(5plr1UTjSqg$tsJt7+O7j$OUnhUFG0ap0pD)X5%l&ousNk}Maa_`a>;EbagbAIbxh4ou562vt>_!z-7!(;5!?;oi1%RcS%Jbw;@mNL>Wd?Aewdph*s?tq{ELWgsN6B34hP#r7tl}e)#HOuwQr;8Dn?SmG{@@KO?Cf0aI0G>qmecnL=ZocCsO+}@i8qorxf}RQp0KO$H1WvHuS#<k7`#<$%Psf_>$cKSONM!{bq@KWW(l=cFV+}tRyRg5*=rh-{YpDrI2?lR&k8NlxQ2uoNSR$-zS7?k-%=Q;&ukV<+`bpmfPUhnqwL&p8%+36eqzysX#U+{!{Ip1&BNov2lU7zZdR!0NY1Fk8zY}&m#$yTqM2LTR_n}nq*_F`vObub3xY?s$7ODooK_5T(y<5CxIktFL57Au&JJ8V83sQ+gFHQxuz%39}o0AFUhDAGT9S%-an%)*kTnESOrecPGrMqQo_8_oIm}9C)01l=7lyGgq=4@qF?rSe4yd?o=P7&(k-RBn>pPN+aKKUy=d#lW#-QjCOXWSe2WB1aFS`Mc1JATPe;Y){W0rto&4Ya*BRolVxtE5xi6aZ*S#|XyI_wK{{mcp5A7x;svlHDt5dtjb6j9P&n|!S_KkJ&!hNOJU*&v{Zn_5z7-3nUBDYfOtMuq#oOx3${Ck!r)4h$ry&s~M<FcR6xy$)CE9dxvjxZDQ34p^e&ib`*<&ZU-x@_>9x(jdAXi+v&`+dF#ZH(y-L)F<Tzw9TPulB&a-@l)b?yI@~^Eu*nmc@MM_TBl@=l<_~trW<`6MQS4_O*;jjIN2*S#KvdYjci0M6W+=b4SeNtoEn2KZazD&SKiXLcjK}rr5+;{T{=#?=?Mfwsp_Dox1Bf$1tY*pwag}*X}#UF`cis)jk&<Ec3qH?S{xIKc<+=zwRCV`wn?z{W{02INyBU*HtkN;LQGuIdSPwo$qy~7{(N{*iZXbT-}vrku#lZZRgm7^&LyFrdUEe#WeWf1Gn!#=a_>!7m2^?Iepi2`LmvMu4ld*hQzj0{h*42?!ND&Ar%8q=VYfC$Kt#E@?YimQ+ZZy`4BAB-Lm3(*PxuK_NRWwO1@((cJ^m~zhgEBs9&Ai-9x{izl!6YC+_@RzyDpo{aya}@AAV`{&%cL?bBtyzyC}BqN#s$us+@Co{qkHAJkobqJE<!sLYkBA5Z&*^WFFFyK(dni+$gXOPA>TZk$<u)W65~dmoUMRybHH#^O|J-_TQc?SIF31e(urw`NkB>Nf+N^gG6rs`7j~&pgRzp}Fe(t@Uok-{)_=w+Px>L`gpQ&t*G!zhXWrrm{4aR$2L~Jo)DGX8C1lC^uO*|2~FEzVGnwaevrH{v#eHp0wU0t`~&6hcx_9zok`ClyRK{m#;+Ogzp%sGio=z@Os3q2vb|XgAG@F-#?|;0v~iwTAGByf96Sb0UH*a-1?(TXTE=Ww^$^qZSK%6X?BZ()X#ubN8qFB=?dV4ap2mO$69H`EIi~X-3G0E2QHO{4c1GSUr*OCBTaP+n((0Zhr*N|fvc?&@E?R)GN;)Cu-Om+muBt?xN^8=ZAJ42V=7Tnq3|{Icv}f!0H3?XEiiY$B{7jOdcRJteojRIm`)ma;orhVA5G_)^!^HX^pa>*R5;@Y(Z+ZF3^w6amkNg`t>l0;mL>Qgu4Nl?)w7fOojOsa2O#YUl1b6{w}WRcvIX#5gfRFkz{-_XIOx5AZ>dr0aSI$)^x((!=W+TSv${SJZk4IJ4;Use&PK^Lw|#oD`A3d`*Sge8-0?G)R*q4*3{$k`6!^Arr}2|N%69sVgM5ehx?p!VO9MS)I3*Mbt|L)QdrdEDPwbU0s>SKbKY$-%lK9qv^xDDoU8(~HO~nEn?n9kD%RO`{N%#t!CJbFiQ*jg0jIWujJ~Oe(3THL<o!zY>t?i__tFwuhJmD91^{*$-|DftO1%c-u-0@xYo$6H=0`H@GPpCm@_~fsr`u`#A%i0^owXT0qUo?ZA6JHt|fpNe=APIEG;Fy@fBzEHA*MEBpoJw_7^?T0q^?6RGJ%B+-TWjrM?TWIc*Wq<+o#2BSm9ueq2m3WEjYlBbO_mWpLBCItG$b{2*XQ!;+q91KG6oKNqnJ0$ImQ*<MY6gAmU}2gwGVFatdr^nMEgB*y&67W00wuNC{OZMz0#(*()x6cTkk2a8`Ms$;NDJ|HvP=q#tZ8TFy>6(2>J;a_y~J26GtnG^xZjgW^aMsOJRG9VreZ>c1hBG!%Eh8nFh$S?a$N+j=otfvMxA@I7ofx@?O9k%Y~k#x3a?;D6X+7T>|ejIr4W3^Q-dp;u`PEBR4!V-#42QbN5&e`|M>^#zD4m^!E+pQ)+mEYrV6Hty9Vf=7)d6@B3*B+=n+ECHw)oRcKt^MNCprPf1QJ%t?EX>KW!VUZ{a_hvp*f(=xNYi@&rgW|u4Y-b1c6D>z;-6R?3+VZ7RgV;?d?gx}Cfm{_%7N6Zy(3w!oT4PB-;uZu{i`^36QqXa|`yr8{wg+^X;7GOTxF>m>bYV;`MxgK$EmFcTnZdAyjAHr51iq<zH`?4sKAWD-!#iTRR)F~^0J4r(bkANM}a^Onn7ud$0Q5b9%Cxc(0P(cvuA%gGbvE@WvaK`-kZ9}erUD$?|Zf>96N_c+UNcD{i&k^`4aEDcF_gU8LjO+%CrdeGu?wIba2jB+j*6u%Z!ZYB>6O5q(?+JwyO!L~lZXFs>r#L_J!)(JT=G!G;!){@$U)Hp|J`K2MsFAIPc+Q9`VaYXsr>8OHGndsQjNtWG9LoKUFPE?sW-l1W2|2sQeAXBG?2sGY>sBa@^8wpwr>8Wwo<rc@#_psvOCpnZf;1O88*`h?ejR{e&BWgs(SJE7YBro?;_Wj*j(6RYu&E;E0Ljo!S7)f19AaCC0mrH0L-#ir)?H@<9u9yzqW(H+1%>^hJcKf-dcc;I>?mq70S-l7rgc7i|MaDMm<(E7{x_|z8a~tRv9LiuV7(oFd$=BjQ2&fITd9ZFv}xB0Yifr9Yhqm?VnKRPSn}`lYH96O0&}Gtc>nKRx&-W4tIv0+GZf92yD*)HsPXk^&o80n&f)vJd;Dx=%|Er31?OGj`OGKvJb#UkDIoc+26?0OjU?vsC{298h%we=dZ^ojwN2XmuHz$qt{t<~_f;ImQkd{ZtrTDnGRDEk7zex8BniYYj(T5V%@bg`0mE2IAFjmT2^1z%=YJT_8~l6jlcsW<tRbfgUN_dqJhA^)-$zam-mwbV&;~fGQ>6v>9=0N=%BFm#`|<{RwH6V&h>goCy#*)QUYxR~S!4&7aG&0`yy?ZVS{Eh{MLkO>C)3g)4;xtjkzKB1)0&F7Ofs{C{m|nK_ITcS)4(7tzuD8&K;Mycd^YWThsu;!e$*b%8P+Y_IOZrHFuy1?Q3orS<n}~odbJR3eM#%pbpv}$b}R4sMP~+hCXG2OSoIq2gL7u+-4^CN?1$6fW}B(TdtuwK4_g7%{E5%|cS;&dIOTf;7(sO8BeQ#+FRKj9xe@N!IRsmhi^~!4R+YA3t80Fh+Ehfh)s?g92NRw{jf+`0<q7k2wv7~}(<q(SfH#;6;Y2P!<}Pq=QpQ~K9(+Tu0#?5BhGPB1h8okOA6suxH^2F|?n-S|1HM7uwnp{dWrn_pZ*wheq#5n?!!xfQY*NAaS61m(T`XjmFZKO1J3VAhK=Xu)tevg_Yo>6mj&I8>1=|{lQ<pW(3bAI{o}5TX)HD9Xe5&9UXsm7yx$q)tQgbVcn~X`q_cdb4eF-)z?8<-}fMs-VleT9gZK{vRo*wcg^(f;QgFnVCyE21m(NZUf-?naJgu<JI4D6bw%{J(x$2{Gomln5l7Ir`H9UGFKBb%?Y&UzKBOaM!+rO|MhPp`ZVrrVaRxQRL0r!eBw0X)?E4wt~?Bb+-0=~rC0D80e&!0%@X;EANfI-8}`R`~lpcQN<Yzs6kvI0x*ZIo7I<zJ&Y!@T=dUvKX;sqV>;T{)hk424n7f7yeJS5`7dK>hOK+l&kHNis{`HkDs5xCISx!ey(gKO$pdNA79UrmxpIk9MALL)&CB>`SAyDemE=?Z(h$Wr8%i=)4G~>Kk9!~{%DJ~&VGc~1oJRa!%S&b3gCI6b#qPBP*HiHBs&M!l?a^|>?2|#kCmFGY-fe%SpomsEs}6OXdR&T3-(u0e6t&3_TI>Yt<e?|jLk1pAFOQdmGd_hgZ=e$RR_8l@=4Eg%n=y!Rn_m((S|OhwZ`9z!G@x3e!`gkQoXP0KbO)HV{U<t$B7{)B23irZJ1)c=<<MC3F>n>ey(x?990Lb-pAO!wlvSkTd$Q7E->c+wH~Bp;Pt`ZhXCt6@qS%(zh1pk_rp6Fw`FOmaj(?x;&F@hI8MRLnxpNHc6K({eoN_Dam{YQ*8c~!Z1DS=!S=tGHS*gW{RQg%=qm=ka?cL_zNhL}QDZKQU(k<{Xe-P?z&#7UM^x+`-+#(Vi{o{*Du37ryCJ7w;;DModu)C^7w~;m=L&n~<FNN}%yrPl@AYHsU%))8*JJFTyCKKx!5I8u-oT!EUX8g2OS#yp+=KD>drTgV&ql33_5SI{d4sR>`bx9UtDjWvg!M*RJl|V@$K|ipI4(cxY1i=iOITt~0KwzF)zg}#wcR;xC=Wy4FIDxit?Dl})almBZ?RB)##By()SLrq6=JT2Q{!`U9@HNEXiee!O`y4h-|ErAy81ZSh<)XQeW$EFfvqF3hk+&Nf-p*&)wcHbs5ceD{+8R+*zm(OG){|P8R!^aF4@7rTG?$=E*QILnJpQfkE!!{)6B5X+@uaejb~0)o56PvJX~MoOKxPO{|JqK;qQY;#9k`x{-I1NIA1YkG10c2XAbsi$gPTo`kj>5%_^#UQMg1(UYez*cY)3WY6gNQ4F-yn&9XV7#(v27i8qA?ctfCe^VY2m(ekv^w28ctDribGuumOt(Q9CzfjeRyC*X7mXQTUVSDv1EI4iI`b?HqxYJ}TzBVa7UJ?S&C()>N0!1x74r}T3kb|lzP=Dn9jrErIA!%0r47r@?<*)yYX0*l@Po`b!Wj3znyP8h*j#2ekqX+(O=H(LblrA?duBu&dLTiL+AE^<52ftP0R%obvA8>vxTg>yNTLS{kIu&@hgVDK33XA>kA@LlAEo?hrp=EE3C8~C0cyfN74<D2e}zJ=-o^)v{nnRdav>Sbz7Polk~`I2OTgL^VDw(v}IQF7YRS7}qXFfL7Lms#8d6>x_$cf3=+ml18xfPu;nQTHD1>5;wDSl6Fp!?S#N7MWAN!LxR^%Sw}mUgve8^R~G$I6gGx!oTsSw4U5b!fp~UUCdzITp$x|c*WYWY|r$xeZ=@gz2(FUwdw&d#WZZmp5Foo=7ALnZ^f7w0LB8&p-pqQGB%`_p)MDhxYRN(S4>+?furw%Z^QGK4-u<x^hS=c$;~JxtF0SOHcWb9T{f&i-pVs!Ujo2cbtEY9Yq`%wU&nPhLCjFpO&qy2qR!03x?mV+U+S3eUVUcv#pHk~1fgr+sHV~`-3)cKTk;Bgeo>lzmkW4qdO8ha62tGi`Hj?oS@*%xH(A2Fv?cHKRylI%QPFv^tbr#l121Cb2jIqYM4BV4C6RaBPEG%sHQbk4Rc)~rxjpL}*0faXkEzK4lT~iKgf-6ktYBq}cv)&q9}z1GJNXvH&8pB-eY@uw<-teT5DFL<o>PUo*+JTts3ZPVXcW^pOq`qB#s^H6YVxLA+oQ#~qZz!NX?X)YT;<s|SYMR}c4J9X)`At+%xMnPp{vj!3lUpp%4Y7C^CzkE*O-))?)inc-qqLiHFK?t#JHeyykXu5jlFjv8o=JvMSb(gxmfAV`|xY+B5!;Tc4!69^$@h4qy|5RH_MlC00_&=axr`LZ-E{qRkz{Ik=?3AX!0a&t7){i^{lI2MI3l>lb&I2?WtK!O4s@nY<FcOy_8A6m$9dF;bC1p%mq(?O{0LJ5F?+SS%v<y)0Ryw->e>DLHj`S)>$09#<7=e34a%hdkvg*RY{)YZH_tt8Q^(oRLzE$i;Xy61Zz5KkV6E|Slavq<MS#ttZfMFu%6uthh$tMo7A}UY2$rRm@~OsdQn}n(x%7K;T*8NxoyiBxOKvp&Du{akJaUEsM}vnvjl9oSza(ko@>+4xBHCh0Sg;?-Uuo}<FY7P^d$u;aF;dukANH4Fn`duIgP~y@B8-5HvPQwl$PjtZx3txeC9EoZ0vr)P|pm;G}bE4Zx-WX+NHWb#aJM$&pKXK6tJ`X99P%3L6<Y-f}9waB;S`6BQTcT>RdKG7t6-;Z~6`6gQ<=kSab(#(8C*Dq_zGE&y*Ly8)yyNiE(+2_mz`smzIgiEQ<Aqx6m8oRb$;_W${cad)fhD67-ec8eZOjU%XnrAW{oEZ-LLv7d(=hl#!Sc*-?!)GyxkJ`^(jA+pYJ*xvF?eiYeIS2We0p>lM?)pQQE0l6&QM$JnXhdv6^ud1meE4EFS$JG#g;-oPFl2ikecl48bh`a$L1e6MLe3^_{+LaE;cw`{Lz-~3`Ca<JbF^5Q0eXZs23fdkjmVEtm9smTq7@p>m>J)ye11j}X*cBBV8Ic2<`2!{lPP&4PcUBWoj@-+~p^~~!TRerH%Dj8XBi4|l<X+Fo{jG4f9T>Ba%!4vk1S=$#lT%WMI*BE=m7<LeAlC!<#b6$2E5`;dXf|LFllZJ+|u00DKk6Z9qP9*EkEDp~l<|o}so-M5i=21sUKrn};1kM`U5|4X(j)Mn-NU(3f<=e{>a5k4FJ6IdAckR6k@4%vnAoJ^<hp>mGfMvj@KLp(KU@ks@jh}|b>gt<3+jdqh>Z!XS@|@|7C&0dE%jyt_z}d2DA;l$vdtYI#Y2jM?*wA5En)legJY`I`e6RsLDP3+>Zf;AtC6&Y)Bx%=Y%(W2M*N9Xu>_z7-{C-iF4;043H|z`M!o+*-MWR{d+%s~mlAKga#;T6Cq@t$h$fVcMUo7`LF6(K%t-(I;gJUK*aN2$WsD6>&s#B^<o*CSSb$@+M(iu0`N=pmZOVDs_3;Z|bWa^Vj2>Wr$g?)}1{)YKLGzR;PeRk@L&SD#N3)U*HfdhMKxs!2k@7uGZuTz+-70DWzFw^r(PA1P{Hv`_PTz2AUiR>19L|tG=$4hdd?*Ti;u!p!{GZtB+`hS?P1|CY%KQQgI$Zpn6vLH=sz#ES4ZS3NVnQ*XoQ0%FcCruBSCXs|3N*16${1Py(F<{cd?Kfp?-J;lXbHJy$bMbt;m{KOYl6wthM5G+-NK^8-+g%veKWIF_dSi((BOXiun*@w$=R%jOSetTSF%z&;dagBqPr!!RCEydVG6Z(<SZ28v&~P7~w}M*&ux-$uwJ4UWO+u5+P?wBF{1dMA9!qLm2X<^oUfkve+CN5um2XQyd7s3~fP!t}L(a+B<ejn)4cq%?+G5TL7iG;ej#?w^(lJ<%a;b;-Y)V+iQCGn(z0xt~B!#=>^^|Oh#9l_Q=7{sm*(^}GFP<pv{)sju%J-I+yFK$^ebTrQ0jw{~`=d)ue-?bGt4??gHt);<jl}gzi{moRbT+}<kg}l^_M6SdPNy;Hsf=|8>#D)Nz44YVIP)HOGQWhn7tuZOBAZ=Gw|4@)ggG-m`+NNp=OiUO+`7$ri#?5$9h^OJR$y*hEN>O&s2RKiJi;y&)<{Q7ovo=pYICpu^WC>XhTMdcdhc!W!{6ery}^DC`|fGbG8=Rn)#|XW$H9LRe)qc^cYpM|jK>Zf<un{ChwpvM%W&6|;d_I|rmFRDpGM8%=GqR|tM*M}$6pHr_Kp9)d<)d>(=%;)+!ns_=_D#FfxSkDdJk(i)PKP1SIoU|=C;5(5rQI^A?94{e$KhrjX4*}e~x<MD^*wG>{gLFZnxU}l4B7*H495~l&&A}T@A0{S8YA@OqSm?xeIia54|8%uElpB(9*;@1ZS*62(GpW7w7|;n}asmw>lDgtRo@He}4F0N3tEY*IvKpFnG!b;)JW8ax0W3mxZ4{srrVMwj4CU&dTQl?+>-cZMadn5h_Pu5m@TH&6tazt|J<KJF(INQ@$PbIU7I6-sv?_IT`AG^aWvEhVt!XPME5C60CQ?+F<3|c|+fhr*a5J-;R6t?R2PHd>QLK$WWJHDZjq+-M6#+hi_+zzMUz59C9%J8f%oR+HujhLx=Ylqrd;Hf$PD(1+zy>)nN>MWp-!uSv)LXhH-uU@>%Tk@p~Kfy_c}kY~_0)=o5NUz8{I-Q#mK!>OIKg;@%@8QQyb<p+)f_HM>)<uZ9`Ms-8pn7N@lb<A^>P<_<X-Sm%L08JI7rT)YlGnVM_1s@G7y!40s(FW(Pb_uJ_Ep~_boe!c%b`hF<>&U!WYe%52|$J6TTcQ#+YQ%%QlGroL3P8YI+1;~A@y|$CHnr}~EnrN%{@%KLO*HL24_%IHa3V!cky^gimTl~IJ;=E9=ORUX4$G`WX0AD4mnDuGla><+0DsNVo>wH2rf^m4v{Yd1p(K2J|<u>2*{Z0#7^jla*YBo}|O_CGxAaAA5fcJ%a2{@1#+>o1~y*TMU_+a)_%U$ASHGeLNJPN^=%qSPI$NHk{Q^0PYzMxgitB0ta9dpvZg@99F|G>6+DMOz=r+}HKZ|Dz!-we_wyl&j;32@mEk0Ed`@E#y$Pa3C+YNfFey&3a90z3kok~?X;y1~6&Bw#z>ly88^FTUfozCn&zdjY5=msDHn0S{iIWpL*0Wh(0WLR}dEC(;0$CX{;?@Sese!8zR5=gbJYJeJ4YsMhJ;TT12~O49@QSM8(5I&U5C)2}%No}Ju%ERV{^B769)N#2%kn2X`x8oOkq2K>o#XR4Qio`7WoUn}?0_OHHidGJXIgAwe*wxodZHhga(2ft!3yTbM~?1M!Ka`0Yo9y~C;H-%G9(^|Whtlz+1Ds#O&<V&K*8f?}ECxC(9(x!4t=OVJ&%L-mz1K6`8-rtznEV9JYM14vl=j33GOJq#D>_$4y`+Y7Z)6xwNX(!!$*<`*ktMaDQ0->Yky&c(Ql#1C|w6i#<?P&(chPQeH4DBNoBo+2-103KYYK}D^@LLt;4ecYqV?u<N$Oe3!pzccFmzvjSoMr(j4_jwy<bt|eVDNw;lSm_EyC)=brmxJIO4PUmo{c@=Hq5y2RMS7Gt)Hc)?_+%j+^0DR$6H|>3~;5831AA_gXhSB>jiO?@Xm*M#ehF%37Y`!m~NKjA#0k~9OF3k>KtJ|O3j;y&T557uTqz%Qp^Aqd4vnpgCjS;rh>-YiXGZ-+tY(I;k8|^v!!>8StBAhSOji!O84_C?9Wl|@IB1C=NNScS|Ei>F9?kCL$o@guF19qjLqTs?;GGCo`5l+ep_D9hsK!9ikhN7P>V6&9r<;8)XOe#B<C^UxTn$vyu`~%z_beoj7&|ykY>M%-LhjhJ;j=@nn=^H<$;Qe2Xm{Z_R0v@?3KnrhT4GCurWsHz&+eVJB<tGopHVR%iw``4Xl^Oq&G5wV?&XISD#B4@HXn;wOG#|3G(5$RK!c}#mffPn|A{4^}5{$F=w>fHqE==l}?y&J!0M}x4jiS*L{2oT<nWkFsvisN8o^F6m!>as|41|o*6pjqR|87r1oqoYoc#SiT<ex=6T2NQ*h@zDc066gEipbqrWT#*Ji*8wR6Og9hPw%TL#z><UA|J80LnhsI$kgZsFEUd~w;wt#-)?J#O3Jknz%D%TRv{`ETlCP}hi03Wt11GMn6eAr9enF1Ya9={{v;3O4e|cl)eps<%iSXVk=e@SZcQF>l}+SrCR@5NwG*;q0`@HMs^3a17W~(ysKghVbWjKJ(3|&6f`Y)*o&42i8)KerA8E8Dmbm7dF5R8*cbw8g1=Vi+DwHm!`BmCCGhz0*f>G;ln8O@;PAT12^a%p05)Dx5wVNIq<<}K^&zApr^NJ?>UTkw(pW-+=M1PcM@?qVOoRNc)`B&e)ptsD%Q97Fpp?G!}^w!U(W>V0`o^~RzATRS<}SQMbab;W|A~L9>RF>eKYk1IdEeKe@|h=kgZ5PAk99<ng_R^2E2dcCZ{ykO;ux)G|Mois3CU78k=pbUGN&>y|<uU028R$`+Fi_oRzO9Y~&{DEGH%_tj9WTIIVa`2!plGjF}IF+<s>1jA8D+-NWpuo}!LZxwKMV>(ASU-TY<6VU_8ayC3WFU3A2U$<#k5Y?i9yI4_cF6*WE0_SO={>p5?D;@eZ63)oZ5@XWcSU}yX-{+>`;T5w#&^JI64>I!QpTHcc9fbfG)2#*b{bzo<|k&UP?z}10^!?;ISBLUVxnpGRsGaAO|#<@JlI=lMLl&7M6V7K&K>M7d%K|>;DaNK*!ThH~KDn%Y0)a7w&PtRZvCw{AA2I4K%4_8<}XQ}s94w!*ADVzmt+%i~jv$>`1<R+T_R5-A8*;w0FzWZ8}!5(z*MHQ#FYRc`EnUk_9SQUgdIkPsn=3JtN9*NzimyDc&|M9>so2?TZQ@wcyp1q00*?>9bQVuqlRkdX04aQ@dY0W1!E`+t^DaG0^^z$UWSJagQ=l+a&V+*&UvMr`*!d+@hy6uR^>#~9G8HGVfc;gG$8<#R^R$N=%3Rmt!p=&Vz-UYijQnwMO#KoK1+mY*Tz>2KPT7Ix@cMjXj6DI_040n*LZ|zIUgf`3fdNkJVJhTLTM2Bg9BRt~43V3ptIXYNGf5P_sNI7aPR0|GZ2=*o-iDwjcxeso>!RqNWZpnt<$hwHhRJz24-}K75dPN<!u<re!>3y+m-Wk@TigFp&Ue5qWq(Y|~USCUt#N4c+!nwFnQo36k(3?r4NP}_Q*D!7e6Z=$_t~{kWbptNXTiB}w13b5+$53z!YbZ0U-vj$vaCX5OGnk7${9gp@QG;2I_SHho${@DhczepW^<~M#88s`<xZYsB!+PUR+^nX)8ypLr!aV5-Lrpb9_kB(boc|2{7OoTp>kY7P5nxutmyF^ZNGj|Xx`-W*`g>iDb&hXX)52<5!}*r9_Ow`#ctf}yw<jlWs0SE!Q)p6)?UDwu{`o9sLmgJDbcqr!b{E+H&a|Dv{D3)OHx4Dmm1&P>9uK}}PT;;Bvfg4%i+vLC*%Xe$8o3Xw$%FO1hq-|@c|O*rq_I9-)BfLl6rbOH6r(Q1px6FB@cuCmWZ?bpL%rkg^e9f}Z$65C@I9P{WA*>VM^T&x-^g$KkdfI7GyIzXJpY%{od}d*nWg&mg@d*_Jz(Fl5d8%1;9vO9FaCw0*TI+nV1c?5RJ}jebgV+`iEyv&P`wf`7v&>dxkKLoAhJ(Nd*j#sKq>=9IUdFyAd@fc_T)>ueIe%o_Q?R=u4*=v=Jw!EuvD#voM-4SSg3wLO7nd?^67j29lvY1*9$RdfDie0AAu!`L8ENYZpXeCfvSC&pdUcJzZo^ku{NT%S3^z<yr!dO`CR3cBxlqnL*DP)wb-%m&@vr)zl(i5Dm)JT34@0Bpg-YBYYWF|L|WC%+9CfJyTzUVo7xI^qqaa^ZCa0m=6O46mywSy!CHkuQyps+UXq`+#cFr_d@_8#cf-xga2>^W9fe&teDAJ7_6Yo6y*`Y&AxZfBg1I`0=9QN9h<S{~hw?`Z+Us|J!0@}s|Iu%w*#=zavC)XDUSB^|j)zsRl<r4UuhP*Upm;XCfB5bX*eIS3-<w(O)K<ACPFRo6u~NAw?r@wpYOup`?Wkowy#K?$;N8zR=6uZM;&s%gQ0Lo^T5ctdH~daN>T^7n^N-!q4aJX~5B2%mPyUnSo7THUG%~s8e2^VJPiH;md?+pVUUSs-T*v#f&@XVh`vp)3ecLswkT(y3=_yUWZDX-gE0f%=-T+Hgm?O=S{seq27J$oR=ad0%e8^1F!ES%aS>T}N1Lj~e?ircW)XXmJ+^LM%Sz(XyMaYV?U^GdM%MvhUR`T+V@xv@vz1N%Rwzk2B&Ng`ye1tXcfuHYzKTjg#)ZFtbRzUUqE}Z&H%zJ1~aeG<hcE8^`%{gSv1h5yAdNJGXabE$v&-r@0Bx^|s)^&@#p0!*&o{NT8fIG2f5H&e7ikh>4=i<GtE4-ih81rf|_8vQ$kpt$)4PVO=Zbi4yC{9D{%_hMsa3WEd!8z4RE57L;&oRI26@<V`T)^w$wyBWczwxA)4K?jt6q>gWo1VwOsaZ#yQfr<7t!tqsdwv7<xU>Mf(d%K*X-WZiCS}Y&w>7U-o=6+qxZ!P3TU;)67x&Se$SB%3PCz`<x5+VU=!w@20sOgOH|gh`RG7;We#hZ^Zx1{|_etaXbuUoe7oR`Z%CqX<O!}B>OwYSMz~`UWUId&ni%9j6=@?Uy>s&~Oo53RG7Wzp<=6W^L${6-mBR0GiW6PYCN0C%X?40#N!@Sq>%(y?xJK$|Dod&RKx2_lDZ3%mQIxD-i>TN`uL&!vU-PSSzj3<E`+q|9KeBgUbo52c~?*(dZ)FgZsz%fkJ!3spK^#R>m5pX&St^+Z`l!}?)x<666T6_KNnX9_jCocMl&-#$D@az*wV?-@CtKtdmavmhUgGw0vVT@4%Usf?43A}c~?S2A#`gu#_0`8T=ULWw7bVcJ&05@YyyNC5ci<`c9P9z=&{Ij0~TK~$}<cz+jSOfeQTNLnq7Xp*<mw+3aUc`t|_xi&#BY0d0Flr*~{>WngOq=u?8!%(`R?h_i{v5zFFGbm4Oq5XIXXodHV@&i)Z}Jcsmk4u8WKumBq?dH*>A>6dKm?lKBHt{NR2;5wJvQKOFGMW9$DA6#WPsPV-FzzA#)bRTGqd*qFBzHJAN)2rZWF#>;-bkoSb=>w7EXXUUN>HQ?>W0<S>jp1F=AW~fM;30Br<NmHgw)GtN~AHRBT<Iz$|jhMvARyu*V{$Lho{eJRv`nd%nS15}4a>xlSe69~k!lKR;8z*rC}U5yM6|elDA)=33yu`a*pG8QG^r-dQZwrY9KVI5SIs>y#2T!hXa=EuV48quO&~9c+(7j<liABkv2CUimR67S?}+-4NT{_7%+cvfm`drKp=Wa+*ciR!>+T2AJ_ZcVreb^o<4w#%i4k8pYTv!T`R^y?84~1-u71V0zgIN~lJ#p6!}~{R?W(j-6>Hn%ynaJ$+l(Q;a?OI;m5goWfi4={Hp+oALwo%O&=rFna<xzXsj|j5*c)F31=!f#+WgU{e+~W`ep+5HX#k35|g(H?$$osPmm6N3<KB!<>uugceJ<Rk;7C;TPWqo8Z9j+;(RP^Fy@6F9^|}lf!H~_Q_McS(h^EFs|o)_=Fz=^aIos^9x#LNIxLt{LCi98nvYewO*rbA8nRalP@b46Zr<~RB#eFN_S+hO`l^A=RS~IT7zxmfWeoj=?EMS><d2thj)N4T=J#0!H!!o2`JcM?OF7Q<9pz1i!JjQXWFF%ibwa-i))7dODELJJ!%64cmC3FeY>>Qq9GRWVv)1QD{5;<!q?KEak`&tz+W?}ov&akP@~+zz6BSw(Th6!DX;q<82&iCcNsAEfThP;^54Z2f7Xvf^FU^HtOarLKJ@ZC4#!@<<NEgj{||k$e~w4~5!bK7_sr_NCQX9Ryc_Crihk&Wr47e^i$TJ*n6k=Ye@_hT3E@rukzbyv@BXRh*UidG+k1H0t-f;vRhR7`wg-;j&FvcNzpZC2wa($<TfX^Si!S_g{dc&qP#^h=Bb>i+1b^k8Q;c0AN00+Y_y<M!wTGx`eOO|*V3qHUnrZlV1$4n)sMw@&un!pHdb6$K;;DXBSW9Dd*Z?#_4zapx*6qX1^HTK(a}?%&3B6?K(KpB5qf4c~yR_%U^<pAcyZ0Sb8enbcVm~POJM<QHwWXZD?iSq{uE)CfAjMv#_O=SN#lzfxnQ!nl!RudQtZ4pFAy!rW<xR~&u7f>CReu~+M?ITn82btftfTf67H)p(NBsDke#GmzyY~`RJQV9L_JL6n^uIFLrzL4pU-wSA=$~P4YM;eqMkDNhQZ;!Sd`hSJkbiZ5<3D4Z%2`wFTkGA@^5C(t?^tB;sj=%-ty<RhdSsNJ|LFVoHq5o^B^mlkza+DRt+c?qdmr%TDg~)?{LLh|T7y1>mv)VY{lJSBdxMv4(auhp!zad08Zz;E*>#!K@{iP*0TQ|Q0pDkf&eGHN(x>|DT_*4y)UtPyY^gLMxax~HTnoIH1idt-Rq67p<g<fJ_Sq8dKNr{|m&2MGj=`RTfSEtQM(ahJpnhaiv`xF^v(L=@Kl*FxO;d_XEY%wGm79RzTG@pd-v>T@`x_=(gllM_G{Z42?{EGdv=UUG&EjL!Lip`J%1#Y69YbGf;3o&`fOTsRum;Z6kG|jTYBr1${cV4C^EbWPe!U-hL*K%7uI@+my;FVy?0fey`R#QMjrt}(u5)(&(rhUHx@f~%cE<R#g*<)<rs92W`b_n1Q~Hy*)}N2tifGmvRirG{V^+?6jKiv02J{OYFz?_}k861%u*bJ$*8jmC-*eUDyT|ik{=sbiV=XOTcEN`wP?I3|Yi<@+dA7#dl5DIk*^Yl-mp|98Q1ml=)vn;*L6gB7H5nf6wJ4}Nxlna^c)aDP`1V+fvXYkfIPZ`1F7)vF;<2`bjhg8yzX1#i@aHziQa?ODISju;#@}^DJ<XwprTS-$3jWQ1I$wv^aUHM682^s7G(%6d-FSabc>dL(C9in8;?v#mzK6fN_^J)Tzp7W-dZpP|&$v+jkIPv5K^}pWH>%b{o##XOKVIhiZ7IS=@nVj8ni6c<P^0oR`X#2Fnis=-Sv;uvOvT6V@pw11?ll|F$p1Oo{;BGDhINnl8m<%h_BC$M2TwWRUmgP9rZHKt*y{qF7{H^P!sa^WloxHKp^jL1o1djpW$st8eG=53cD$~5TBo<L4r0JE&zR#c8>(Y{TE?auT3;x=p&y&aF$aFwl~G3eLljGA>rm8L<Qs8fLENkZLV2c5_o&P}_N97Q*ynQym`=uevTZHk5~Us_4f38UkIP9cF8e5<E6KgrvXvfi{8zcOjuG}Q(VImP1IBJvx3UJ#txaEn^J%=*u0_+Ix!#ymlrl}4B-rz}Tuf2pNknZAs188CYen3&rfC~q)0nbnP9C;|KSz!{ay^`+j3?WekkTNpg<SyGpRJIqadCOiMaj^QU(`~fAAehyKHHaYUG##w!?|-XU=MOjU0Rtj18!3;X<~KK2$<iVMA`ONjNNSQ!?Yk}ooN-z%%EeWf6o)kVTnc4x>;fTXUk3*_B^40nJGD}Qq4O7?)`x8KiKem{e5%D63dkK$<1_*TFaOx%~408Fq?gh{o0qnJz3q)u`fhR_L)&$bCYA7aGzuEiPK>{_MI4Bcb?Mm6-U(3EZYqOzTo(iEG`$qIZRVPv9Y$o_`8R?UrH~aZq~GgRTFcE$M%&O7gE~&KDW!$)((y#_jF%00{H7I=1PWbm1d6I13!3%|L%R#Q+}(2pD;6G)Q#EnQtqqQys7lC3#O6bHU2)mP}6EtlU-qK+DtFKSSz1tNA;K=&VcV1(xg+7@RT{HlhhjE>1Dc!g9jhA8I8*#GpaUX)ymhVH{eS$je`*8@3eruShzGQmz-iQrL6nDaQQyHt+YZr>7@>1Z(66Kk;m*taqMHi^$sGj)^b_8lCbGBTlMqqX~5y?-`0bp@d<Dty>yz-{M9<7iN8x*-oSsqs@f!j*G~<c+h|U#k?Txv@Z1l;r4D6cCDPX2n6T?Jrw^`9KZ}Lst9~B~D+J8Y0e(2GY`_-n?3xRrWn%WR+4b2%=>ie~>+fw_Sv9+Pm(0O_cys~0jkBe$ZFior!Z~&GP60`^OjGxz`FraC{Pjb+)C~wfq5om1%e7FmC5Yq7<V)Rq7T!Zhyicm{CV-8eWNanbzMlAT<!$Y10do>-A>zEND6AQnquiCt>RlSWjAL)J5wOx)`l@(n!twJYCj9+LyWsVUJPt(ZoE*IVeCfSq#5$LPzEPv(n<XrX_bP(t|G8PxE;PJr&W_VGwj%8Pma>VNYvpTt^YzrIx&q_d8a-s4Wv9k;N^S2@+S5$(-6d|PFh3fd1J)|qiybAfcH7IM<kU-9b!2t*8SA}d+H_GG`bD}j^&4;DgJqGeW@5jF7@h++0$Docy8xTAZKUOs26f}Ge)|(R?5nV=VB3~dG<_=Ds?J;@qkZtnnBGMqIQboQ0E5+{m2p^mEEiH{q<qSWcMFa1DxB$>iVG8fce$fiFmK<b3wYNJuYss&;Y{noF3%h|Z_pjivD*m7CPwVaxFE6#ld21Nu;lCrJh(iwraFR+0=p?i)W~Vn5r?wNkuk6}H~qX0gX@13K6)B^Q<Hb`S|xBzlDFl<)^4uh%{xRGf3lC44Iw9K5WbD)R|+fJC*B*=N>aGilX$gie)E=@9h@VBhE%(7hB-l<e+^=4${XNqM`yg1Sf>J5{qj2W=b63$20rGdm-z&EH%lk1Exkx1&W26TVMn6EIK{kcSggxQsOgKCTSwRnoPc{IYJeZa)*@KaGt=qA+M(3n^8?tCgT$UmoC8L#UZb1mVP7=Cn@!I232m!aA?z!6gUK`JIR7`>gj)>j(z}3Wdz~u{Q0%|c&QNja`Z(nFD%-hjEbiOYEnix2Pb9!TnUPzf?muQ1h-m4-Pq8W3unzNP{B|l*(Ql+%rGedtg-z;>UG<sKbZO&}%s4r*-7h&Q9oWBJruR|E3D$Yfa%DfJr$U#9%v622g0DVY{H}p9*d_EIw1ZCRf$KD(TzcCk@ccSBW^VtS>h$EZfNq>p@VGvwOxDyOQKknW74jT%#1$S7%*uf|3U-97ndrNWkV$4rhueG+2}yFNdI<LoNB;&qTP?@==txm$(_`#3aoD70C_Jpmc;E@sq*3l!M~>LPkMl~1M!Hc;ov6NCu|FG(_f6E55AziG9~Ik%8MGsdlm{Eul_J%qV3Ryg)^ZZ>i33~rtDkrxZ-RGbmVmsxi>OO4x8+8n-;D5crXO?|YX`>k9e80>I+tF4nt%U&t)E9uGUj@Jak(4Vk|s4yFPQ^eETPv_1dZBLX9xdogA+5*;Qe=F2TvW&S-Jy%E0lA6nZa(|6kX6`@2PnmEMQ$Nihhi<4(rXi^F82oRbkQ>_zmD|RaF@9-uSx-X6!hm&)sL>b<L@8W>@U_B=uRFiAz&dgJ0!;tk1{3)z?zH9HW~5g)WNXrf8HiX!WlaV_zuc=UA-fi@&e)g@gVNdbU<OJ44O?r=4y8MRy)L8dRUBq2Kl2L%-`M)!Y5on5kmb>di4`s@zyF=nqjEA&OHh4xy*G(E&NupjlGS-_Soo9_QJ7apz8`Np9Iwz?r>Q>hoE+*H<IohxeLi)NLqZ-B^du@Jzf0o>i3^e29Ms2Lj`M&64?7?>l(@u$Fk0H^{x4-^8XzKiL{7p><Qd5D1z*_?#BS`ycwIe@V66dzX(qSLLBwm>-UL=vUw~*3kR?JoGZ}Rw4RE@HIPIS9j>=urR9WOJbBEpkb{v`WM-GpE;j(U<Y1Pad|<#o=lKe^bw#|kJK#_EP<IdGv$YX`P-B(?en(0y@hUOIhQ})ugWP{@6`ROi=U_H8*^}u49|MdDEig+H6KRj$Fo-cxuJi<ij>&X-bG%l?pyV0w+Qg*R+TLDR<c^+xZU-Lau!6Q@r>A9*~9yddY|5~Hu-7ni7~Tj>^+y}zxV(u>!-0RjG11vL30e1KR}rS757(u4EWovl-|!D^mo4b_BP6QIy^7*eUZ1hiqiu>cS5TQf#<`-OQQSS4m1_?MU8-DC5rI!V4J9|NHk03@vHt2_Mq`tp!VO=5{H$g&aW-_8MXT+WInq4L}*=>sO_hh54Ib6*{;X)ld&%YobQCMoo^b3kEo-A{)Hvrh#&ri2K@=&G!D_9a2_-Q2S0;3PteDw;=XR&Jt-gW_SNEmyJ61tEO!tq+1URmOY4)Ha%o3)ATq+&ndxKx*n~5_lE%g0uqKP9ggxnG!oCv$ZV-`OS-fdD1FR<7DGRk?3K$9SVc($kFvcxJ!|8UZvu8HFsz>3%ITLFooQuWnSrviJ_XX@3ut!p@#B+AMg@cUClibVK5O_mQD8?gQZanIN+pk31W35#D%*$$xX39QIGA=*4Nv4rr^#Sv4nCF!P;*2`)nUbL8@lMa|N{f<e85y&%h{+R*gXJdew%kjo0erJPodC1CdCVzr*}8<e9Jc(V@}+L6F51&3ic6=^ydE$OU|;W&6RB+-;Dv@h*@}zK+Tv1>RFAqUjc=aB9;G2~09RBZG<lyI>>BB~&q|DCRWV0hwS(@r<wPVh6}&t}wv>g@V6QJOfCEq?@Zg$`(y3yRkQ1ES1J2|ZcJLY2uvdz3BJ2wV9JfI&=Au0VqJRqo3@SS7EQR-)vkS%C;#9~~V*do4$_=UBV%~QVZ=N{tD*<=LNqyPYnklssV@P_yi>qHZVPw-Rc6PVaB&QrT3yCFjp*LISq<XBeIGl;SF4m!bwbXNdB7?0iPq{&Lu-7+Z*JJ;~Yv~4Nme9jp`)tw7UNWJd0b6Q`{&!{><uNzB3ing1y?mwy;E~xOW^NO!?>XEBtp5^!>C>)W#@}l4PWE6sKZ<6Et0+CQMQs<m)KYtXtA9!t#xemrgZg0O-uye8itB9tr1WcU>%o?wFLk4|zjpR+e$PGns(qUL;#0Ne-f*5@YoC;vR%12RK1B+*hVx->!CEKu;b}^*b?!2&cn#FPihcS9eN^~+Kwl(kb7AimihI!>;|xQ;#X)x#KEJMvkf3cqKmIx_H(&=a*Q3r!@Rl|G2R8w6CjC)#jYzq-4tT$ptX%V?p7~ur=T74W&gGD`C#>6i4OoLU152hi3#oHUa+xyQGjiASLXE!yzrn5^dT7W6{LXW_4{sTfyo{|(Frs=412;-p5?-Tyb0~?o&uU<Lb)W+;Ut)eCa^n#vF#1}Pq8egg3Y7h$?(corbC>tNW6t2;|E?>iZ4;~cy}!9a|9M>0r)hRPtLJV1*h5$ID#X9xP%}raWd7UdX?^``e4c}LT{u4szGX|{qal9u2z!|S12X`&sizq4eCKg6De8XDlEWFjlvw`^d_Kf}ZIYnYWQqM5%y{Y1VyVBX-mZ6jsdtr=I_3?oh??KOxnCGlTnnkfl;_>BNrvGaC)mS2`cF(aYBqoEqyAq*@6Q1zNW=-MZjYcA&|=g^USfXQFn24AWi3%#7v|>T1?Oh6I$+(JwL~pl4?idB^Hym)!5FRD7Zp!H3<+bFtUku`&5K5k8c_k}(*Z6c*GR?03Ukn8rjMwnSJVxjclGmmRo|Wac|Tx3hU02=oSb7nCfJ`FI3Cu@i^4x=SWA{ZPrNs!NsQ+;dOYv?ALl*%biLzsy>{@qy5IF$_3<%OJt6wp{c_%@^Eo(<v;bV9CG%lCYOBMwZ(U#E`qcT9pZN{Obt7@ymT&W?a(+ep5h$&z{m;jB$&cgK;cUb2G5hL#TG{fm6w`X;jJ9@RAx`TRSB)&dne}>GrQg0sQ7`<6F}31#{Jf^=$_}c$oqm=J>sBV#Id|(_8d<jTjXAS3*x4P%?^eKvR*t=+z=um0ey8KgN4Bz0%{H?3xiJN<R075ud}oVVKG;`nN86d6x8V*rz-Q5NxDNP!*gtq=w`1Smi>$u5S|7O?{`U75-60VRYm;9s|E@hb{&uT;u=D<bG`n4B%&tYp&u~9Ke=qDapOhi$(BztaPQ^3{wdoS<%d0e|pK*OT#;l%D)EipT&(sWD=A6%44%mv9H^yQ8nnS#FyF0)*kSScRC5^{%9BHq3j_~e2N*v=IjQJI?0KWduOJvo#0Xwy$#`}~e6v(d?ZaHw+#5#h#=22u}-14Tz);-M@ul1&=v>*G~z$=ZEO)erPS8HzHYlZ`U3yh*0a|^~ig29$}(O@T=mqg=-t*yu5e$c9q8_C0j5B1c;xy`&LPn-BfeI6vF=XKp%!6ATWrIm^Ik(guN!RcU2V+Q;2)2N?%_~Txj;h$ilY;!c)W^0TGDqYVZCtx-59n2Y6{QSPs>0JCB?uh!F&KC=H{26#5Y}Lc(4%&M4dE)({-<|#Suh9;wrpP~X1r#@)t3CN=+wO7hVc(^I#Wu`~^cHIY%#67Sc)0U<@QzvlQa@Z#3ng3X2KH+tm=EwTwj3}O@Fd)eEgoq8bP@V^P2)u>d%pd>Jy#rm@$Ej;5P$XS+m(0Td+*yfa(U~T4|y+(VLt}^#%C{O2RwEUAaf1x9|s-W>z{fSx+}#ompgT><AvP0DjD|oKkTpbZ?)p&w|Hsgje8N=zUy;%zt)NMRnNb!t>XPpxNpFtsi;k%DlR5`e*W4gzw_zW-;e8mF+X5D4@%Q6{60S-o_LdOjlEJIF|RO<jS6OoWpmZf#-I4Mj+!ZNn8&z@_2=g#{o4CcgI6Z>zV}yu-22~$G=kxt)X+27m&{?V|MOndGa%pYMH}t~_7u!L|EkT0c?$UEfH)QQ_zFKC{6FY+!dSV&r|3I?JrQg3k&}}6bg&k!Z~fy(f8b&=;wYsZptx+g&@pDK&S$lX>z)@aLf@&qC_)d<Yi)P_?l~Io8!=&>s&RN6{7F{X{ccWrYB0RHnv-f>xI62?g}LC1K$lC;&6)r4?2LTmHo^Z!n~j>v=jY~dU|@OWp1%UuliQ}eYza97RwLofTW~iZX&fZdo>sX%eJzZs6W6n&9|1QRb)(0e6aw6+$&+AsmU#W+T)ht0Pw)QC(iw6`QiFdK2LIz+{&xMl;km0RgSK%o^o8Foir1Yr|6Lyp_3v+eFidr=8rrtIO;Fg#MLkc%N{6lLQ?7C>FvsAqIAG00hdz?^a-Jdn4aWCHh5Z~}5UX8w*r%a}^O0<qrr4wMWiFGu@8h0ZVJY87nc!5r=Oc~l9gZ*mvQ$n5tSRlw-;hRKpYWS?F6+yhH|2yS(h#hF=PiFv_xjU1tVT}pq;9u(eH_Nl4YZ=O0FUU+ooD#NTp99NDwSr_FGl^2;yCnhSr}OV*<h|u4SRG0{6hUrjM-~;I*`)A_nWKQTfWZqXCCUHIawT*Uz}pD_B2&HGvvV?hMF1Rqf5m@QL}nB9OwM9zJ^Eo&5kM&4zQ!6{d9)s_z(Ws9$}tZV~$UN>&%X8IgBw0(Knk6d>ZEw`f5i_lgh(;y(NIL0M{Io``8Hj+j~{zM$3Bn!;h)#?dpf!T`L>(2fO=YKYR97I_AIZXM>Ie_M!bHZz=d~jn-<|i+{JD3B30Z_ul8hH#zKQ=lfnE{$;QDwg<01)EMs7Euw87aM7DK|Itr))^VM#;_hE;d{y9D_S9N`eY6Ju@c%Lw(66o5^nEVO|KW?6|CkFnZeBZ#8@alw4h-?spY|W+Uk?X6q`=h*bJP~|)#}c#kAqgsKd)6?+Tz=_{=NI>wOVL@vOni-B1h8}$emDk_?}OxUK?Nem8!pteMaAKF!g`*mvMjYCllU%t>k6Lm9G`^FEMBAWgcPvrGwXDb?4;)YpWdG_t1xY2D|299wwgegUpBD5kGzhE`rZ2{VQh-&p+mj!S5z2XAIxRnyu?ga&Ye)@+GVi7>^ZT3LA6VwqTp_c(9uf3w3<;!)_)MxXvp6x}V{^j|<dn59Mae4Z5ni;nefLpa1?F<Nr}p5w@qNqP}EY_4Cjd^tE0Wr@?-i!ybiv;$7`c<`{GP7-|(KLtL#M-WzHV$2bpa_a91oVibG3UnEbf;X7k4H0EIHGnF4HMV!rH&r4?q8@N%IcVlkk$Kd}^j-lY-WnF+h_J)1}zg;J4ZRBb$-VR@LagN&810M*{r-wbHcJrsd=Q~*2ROuUqUwr}2%J&DhH?)_Z8tNb|R4gtGm*e?=*;D6g+N*mX<4pgyr&`LNpnOQmr{|1&sHglB>(JY5t4dJ4v;rPngBJ5I(&;7+4k=dn#Cq_Y%zMj)=@Q<3M9Z;f+2b|1@z1cmO#LxW7Hyv*fbNr8Z?Jb^%;}|c8|2czv3-M$+zz<uZu`_)9{9)b`F|02QZdGVjXPl;=WeE1$`6v^_gIN~H*UE4#!I}S)xO>1><s(PX<N^pGuJbQdm3U=rP+Vx^=a_u1&8&}W20KLB_UgP*w60YjS|w8t$9D^F>9C}8`AKT|09p}2E;7(g5AK&6m|U;x4QSGuvJ`gKl$x^vHsbMY^K)I7>^{^r{oZS!{iu?wNL{cF>;A{t1kWxM;qv&jaZB}f@~vYBbK9$7(O3u#N3=LUj~i#pYl~P?p5roG3Kj$&93r4sps+v&&8h&`@%t#n7^v>GOb7J$MxC&_4SF}|9E{c*V**Jc6j99c4y&~iRANJvA62yq#XKUlRlN)zZEy@APrUb-qUWSOA(N5QZ90iy{D=qh>4Lcy(-m91J>4=8{RQze4jbx2K_%-OsCQ~iQKLhQG3GrqgSq7Ow6v}iFBFLDXyxJV=t-xy)+M@WXGG_Tb9&G!<WI6@2qAr0{b~~fU)LV&C^1y2<v(tINe}J+rgJp4A^n(E1=9D#$vPKxUrX@16)J!dk>YzKhM(!=cyTK)0ErmV6cbt!5$76GlTiLTz*cJ&YQAtyA&oZ%-_LYI%6&Z*u($)wN&#N?c)?E%WrXq;*{U_a_#$Go~%B%75~W|mbjOD$H7nB`N_SPz>oQ2eV;eWZ8Z7c=QY}wy+mLAQgKul<FeLmV<=z3gX3ac7JI`X9*XXGNO7H3`L)lBLMLM{gCXx*{SF!bj(dHEI$fbZ)>?S~%nw&~{eGQetp$m@!<p&arEzU$*r3yyoUylK<OBy_<FqgeP1;RLHF$qnVIR(J!|5~UbPxY~4{y4A&$+OP>`^C{C-bx5RpNK0d=|}vPl5&2wCT2Oh!DX?B+e$*^r2od6IE9VN`=#JWP8aXaUwKsNNik~v}KYRyIC65?tLDsf~PTGXW&U-pTqxR&Kj_1Csvhr&3`d(!M+-YNqJjcdSzdg<PYvYi&3x8Ms8%y{l(vN+@F7*zl(p&-+%pn=PiDpUoigU{EK%e8$ax0p~@$>jL=e8vGIRk`)>8ui1n>sc;C<atIE+i&lR_DhIKR6LA<N){h?mtTOLcTbRd8D!iIh3x;g*KXMVy*M_ijrqU=Gf`d?lZWdB1f^ZR<{Kl$dqFuHf=mbk8#ts0jH%f$Xi3VU08j8`D%pPTiY%6Hg}`3{Nte8k}1U$}pa7<}=v^ArXzs>v{~MjzwAg_if;uYT6iQ`GkNxbSkAch>c<!N&fv#-^wacphJk#pT{pYWKB=j~MW08;SW!znwGo*O-mi=kR0B_~geJ!HB-uL+;UfzAVw^tZl0RPW>xq<palaSNVWj<Z;NG!omxCsL>1Ydu}#Yd2hevu~Hp7U={U{t#M6!)!tO~zhIQ~$DGsEf1`$hrEK9~gS9b!J!)udu+Qh>5Ry0R{#t2rMEBlSU<1!fI=9MYf_@_J(SkjooD1Yt)**CMjmi*Hv~y)+7qt_2ZwDbRiKzRxtmB!~$}6vDC)xCGsCDL>b3JA96m--s%<?tTOYFIAur{zGmpa?7HdAeKqo_+0liGKtZ_=r?jo=@`nVo69(pgO3Ih$rQmQl=kC-&tk<bj|GJ*M@kMqQ=Ctirg#{Na<oi6t!?{?2Q;_8Xe<+H(Y#*tb!ndvXM9ngPyu&zc6XXLE>S`Vi|x_j$kBIDL|uVBhQ6g4?}CZ$I+qY=^!H+l%s6zhaMVD#{Jke><4Boiri<%#&hWa4plUon|E=?sII<vNz1_#d+X;7M<T)=4h*x*f^{gu`&YZtM1JiK0Bz-tj??QmVV~t!AXtk6XRq!|I~vA9#^zV`wVdNQ)UU-=PmY{E618YUK=~I|6?5fW^H24ztIi*rw^!A7(;OikN!)H`kU`PSPkpyCx7*j>vdqu=WxhdJYfIc%vSjnh*5WE%%=#kzVi{*pOx(-`mKrb85xKHNNr8Dg^E36Kb5fBj5Uzg`EWmDoYkr`f_zz?GVOff4(;ICwJMKZuNu}iCuv`NPMVJ2v>WiaePrm8?<+GjR%d!E;VJevv6mPRdU$62HB!Dn*k^YGceVx{V0W-l17{zc*DLSGGlTd3w7(2}piJhRygcCt@u8`4SGF9+UG=)7XXTe+JB8&I{}}Y)5vg9ZgY6$`GS61At5n}7Rd<?bi+txj{@gEl;IQ{x!a4AH#o12>B3*te+~CSWb-znv*Y|m6=_MKXJj^HTXE<>C`tjF2^zQ%WvlnLi*R4~f?3sPLx1n#}d^g0L`1!Z@_6tsZ9{07;AGQGecXgA)s#G~Q=Y@)O=!o}%FTCd}ycZ(ggYQR+x$?!(zbtp~xqKf33uCQ_3mSjOR}z=cRM6Yq*KCysFB8*qna~%s??sai_ddj5pK_CHh0C?XpnVFT4;bpVwqE&e{~ls+Dn_;VuEzv8e#~L|+nNVgfA?D)ujZKbZG3jB{`5T0cGj3biMq;%#h_CYF4efHo=p+%b^K*+VRvB*^J=lsxtz-v%S0U|l{fh`e!jrZJ<O+o&k@g$-*YmR2g$5rPjQc2m+;FA6<>44-cYAUoQvvr(Z>eogX{6}?-JI&qw;zWfkgi4;GU!Oe&8(A+G>x>qM2eW>$$YB)>`R7zX5K!AGaBfOBZCf7<Gaj)iX=Y?M(H4#yxDFRYM*O>i;gf;k7z{SK@hMrNiWEB;Pk0ap1nr!FA_`?8o~mrpCwK(AL4qsv$<=?8pQDUa9h29GFj*`a4gD*h)|@tRvPhs=to%{b4P5fqZG1o$0mj&hT7{RQVd`^wFvmUwOCO^;zw?6~<;LUS}%j@_lYTEmh1$y$1fS@>NhD8t)4L0^FtQp`Bn-E8sq*>&zc56)SX5ubAL?qP|mUHOeob{$d>~_T*H)O=q_>&#Q6X$boO+U#zK5VI5g7PIrG_&9@iF96ujlyMH*&#d&FoQ9t?n@BDZ_A9C%+@y6qwoeNkD_W(y7|5v4St#-rnQRDV?U1wX(Gx7+SgyT5Plgs7Na?eDf4J40cxfu2&)UiU|iSy#wg!3*`?z}jJ>Uk#ztnJ@@={K$8hB`m_W--rvN6%m*Cga~J`UHV5hEY?czBZW#wp`0*XU0i5<K{})Yf)KG%xpe*9h@0E8e67|%(a?z1bcQvpNe+&Sq2!ZYBbDGw>a%f=h7Gz@$$COuzzfp^stBVTPZGDVS38XXY3jiV_ik7S4DdowCRF_NX)V-9gcC!Yo^aMDfDw<$WP4amct(8XPWL6q}i|&y#D_E*};YTsuR=uEN2JG9J0?eJXZJej($?aBO(FJ0((a*|6gP8)}E}cy$^q&d9c`MS3P(SL<k!T3X%kJ2E<BbBdxZmpZ?8Au<hKf|8G9myeP;fBq14N<R14uFq7OEKY1wyUEub!TAWa(N5dX+>Rn-n7<wx?EGGP^lW}3Au&>OFjuqqt_IzMoax&_`6k}~y>Wh1B1}&rW6QgZkcxkb6<T|j#Dj79*63i@uuQ-ET$VT|x;(byrvWU}e)5|I5nKi8ewoU00EzhEl3N(8SnKSq*whecWh3!pcG3vIU{3P07E9&?xt{r$s!qSN3Gb>rKc7fdKo%Mw{ClcfSuW}ub=o4se)V0Fhs+<&fr=~RdYvnHPg}5)|zgXs@4vxS6?hB_~e2Vwi#Cc~%1Mr~$XP{Tn$t$U-ThJ@mHNk@?#DaD=Mf+b)VP!-&CTwQWma0Av`lB9S3s>fQX;rWMN*>D?YykD~bN&Ej{XW+?TrQ>XT_CTg>cqR4|7gzyqAyuh%eT3f<SVd~y+}pUCLIH3`R(sZeS#Hmki_H4Tl(wen?K=&M)>_l_uz0)7|>*?cnKdog@>8aJE#v6uY%+r*-h82<r=%%PHVKVmFo+u>f~7e<i9Ho&F0&-s*LzwG&I8(VP6Q}$)`VSUO$*$F&@hJl`H4X=vB-MONqgl?xT1Ocj7*fcL4X%te^Wx-at=bi@!0fzT_{=LR0vjpVM>hTd?(xbImel;(i=>6d&g+U4<+PexIKT->qt;mf~9CAgyW%`UaM%IS+mV&}Lk9r<dYzowoY4eS)<!^i$4>S3qiaI;*!>@)2wfqZ?R#ynTzoc0a|hV(a9>&Ke|tz;@yfh^K9G7#(3B`1V`836_2%=BKr=Pu3X9;|N>zEw(1U1UFb3vyJ3KnD`ga#8&`33CmH~kh4bIXBAi(oNwLEQu}k_b+F!q{o{*ru7f3=IShzaPL0?HpQ7=UUh_-BtU*J<*Jaix7xhUv@HmR+q0ySOKb=gJ(|d*3sR#3S4D&fcqj;`6+rBQ@&G2GjUy1AT#wic=v#?KX1onXi^E-y?9d7Y=cfDkMIlQ~V*AaGvhKy5wvRci3g8lm067wTJpxffX-;g&;S<V3Fb@r^bV)i&yo|xYnuZv%6;Dykir!`sVhbx%(_pi{qvv6O-=ayHidfa%HU!i&w*Uu`S346|W|9brh^W#1At7Sd9-ttu0^|<q_9M0#BPycfMgsbu!sYP?AcGN^&eP^Edr{~6=L~o^D&68s^$F8IA({PMa-A`KJnI(Blldr;MO`&n&uLIw15E00;%-U;?7f(4MH;!6Nfm<8ZlsTZ$mZXUh(Ouun@?(+}4NLZTQRn7xBskDw6Y_wAJTVfZa4x`;CuSNpk7@8ljH{cPEy-~--{9aQgj@@~CWWhwaWl>^))x8k8w+2ooohmc9~~K>3&%iD%HEUVEou2B>7#ih=H`9cuGl^BK;Itn@3~t)?VRfib)qIT>XbP(aOmy!Y4jE${*-hKw6!U4x=~mE%r$lqb6P9r;G%46m$?fgHNtC|CU@HLE%;}^JGdt-taN7voM5GX@^^UQ<|J^do{73|+oaQ1<j4tYQHt;65^1C>NMu9=n~BR1#{MEcYR3KueB$*+-1k%%$qaIVc-GRq39_WgHCRUp&31?za^YRT!s9_FcMGL1OPCGZeCWwVwYR5<MQ!5lF!G9KFnGt_xWiAt>mDNDoQ&orM(e%PMq$^QaZd)(23FYCGi+QyPbr8o%V;xq2_ab68E38mPj*7E&bA5VLD`^gn^g<!olXobZ)H~xl~Xs7!@o!x^_&Lt@aStX<u}^r_XH1q=>lCc&m+fQ&<ygbnj0a^EsmtYkhgzK#)u}{oy|UC(11YPD|Au6EorzD&Eg|7F={jFh%V9(0c|c>M4aoEw8h$uuVK$lyti7=2H=E1ZvPu-B1X=<&%1Ek*@VVso8?C9rQX3Pok8@Y)=aWWPj%};n%d@?54_JwtdsY>P1d9h;si%-LP&wzf#fanm>CqJUEh+1ZBoQSf)Cfd6VP2(CuwS}OSg_`%WBdkQR#9U^3BUM&<kfiGMaRWHYbvwyLE2WJ+VbOk5Q+IUJ-n7$PI&hBf>UCKQt++Z@W$(s}3~b(Z?QiQ{9WlS~lA^&?~}Q++8kd+uq5YoM|7uh<3{ua>gy@qMR4AAZQh7^_@7{xIyT|^cGiyJZ&<Lay<y~y|tp=xk5QZJ3xhV9V0i^64N4u!B=^QZ{!$jOizx9q35KFKGL^lHGPYl{XxgLX{~f+#fj9Eix2xla}YL8Q{Akge6yZ5PGcncup_k28L>nk)K{X91YBb;yOy2BcQXt7`pnGX#N4Zw>g+DQ-yp?&72$;ucc7Pk(%4bY>08}YcJL&|kP#b+u*6yd+Vc5P)aNmIXLo+wJ9S5THs85Xp6Fy&y4Uz$ut(B=cT@~o8XRI?^_Tep@*<}kBh;w;$O!NU)=zAf_bRV|ZGZ<Mq52!?<{v5WAfQ~dOC44&Z+60}C3IY*dh!$^<U*d?##<T`JGZnCN2XnyeZwysukJ(8Rw0D$jJX&?hP=RY&<hYvSl2t^Ea<v%AG(<`TH;L{AHBk7xhe+Yad+`mddW~heE&C>b|ma=SmW1QZKnrgmF|aSrt-1Z@k_Dl0e_Fq;Fpwr`m-<W*}a$iC02QOhWyFAOX_V84w-dV{#d-+*VorfyMCm&9VwpgUXItZu-og>3;%$>b5U2!b^iF5Hd+6)No1%t5p#Zi@ZOf}kw-LfRY|>X`@u=YmNc>?2b4S?#J#}xbR>7R8C!45jlc2_%eN(g_@%?fwZH8BGhe#?@^tXuL|d<v#+9(us->_MdgV(e!dI6%=>4+))Bfa>0`I|ap@e-D_W)wjjcDgnm{~_=Tb`INqixn=F~%p+F%V-5hn&b;*j(<p!LgWIJZ#rr!fylq(1!HwXCdZgIo8=0qDPdA@!HrD>vn*uUjOK){`Z0L?Wfo@@T$3sTV<|gUNUHX?iI)RTJ599HOM$HyELwPN$0mW6-QMu@RQ7sDr_yNbK}xiG6yBG6(`Rcsr$6z8tJoanXzaxLx<S*gCpZEe4V~DlGl<h8pu6k8Tc;?F_wYvt9&@suhPQuRR222^_#UT<9{c$Ze{m>@|(NTm}`GoAN1k;z4UWb{E{F30dpkxW#Cis#B0;~j0gQ<=UcK}!M6bIFwq}o2lTcqe8AC5Zm!c|1)S2NU#;YE8rzanj0&57TxLtRlCd#Z`<9&Oa%>=*>eMJa=+qvMc9V7ItzXo;j*oL9wXe=Os&kN9x8jd$RNm$weWzQaj-~24wa(ctoxj9^ftwSKjX&S1lP}lF^&d3^6`y_}@%<0H1ydNI7vWoe=hr~4szcdLe9tX67SKN5zf~U!bADChPWYY2(=McMZ5+rYrvq?4A@HM16V^)fLHNgCk6d~}+lCV!hnExnOZ-F!y!T^V`mf5jRs5f|!ag}DVkr)`DO&icP9R^~!g_SWzjY7)%%Rw;acyY#uCUm$q|Upm@Z(indc{vWZXnT*gNrEJ2gH{v1Go!dJ%@Fo&mRGow=zXtQ8w(+qtDk+C$Ey%Dmv|$jMWfRod1!*I%NCvZS1q;1UxfPSC4OFm67|e>$jEHYK1H6-e^BLT8w!Hae{iR42WkSt$4KiNv#P?*nasvq$(C5xjkQ|bz6yHNdPSCoR^8@$M7dimMhmirW_*S&{oSsu6{qnwm80j<P;s2G5GrNq)i~tw<U&f20R=t+}GMJZuvjw0Z(iC%kLPvq>1%T|K;#K(Ua0PRO_gkMH}$_BjvM;-;1R?t*=OaQR~SOMXlj{Tj5P*E~K0vUYCIZ7~@wUipT(uPr+xlAjT|wYDccU>yYyZF-_nNZ690&HN*mdqyNuq8^avdXC~b08lJNf&mp6Dr(ZbJzv5)qaSQp!l%x8T9<4L)qGLhvRoMEUw9Ri6F^f~uq!?ve94@e2tK=u(?}YCQ*3WWMuW;X9_Re@Cj<6k4J=`DaZDI^od0&E_lAqq&_mD0U;1XUr;}vKA0;k%2TC00nqadR0b<NF2&%48&Xf5cA<0uWZ^oZVtANWF1uughmcejvHh}K*BKCBiemuJBla{olRZY)DO%jBBW?&ojCSIXc+G|=#fHBR_JZ|`1xg7}IpguMdyl3b;ehR3vK_lNo}CGP7zE`b-dt@z2VBv)v1F6g`!&-`Q=m*0#SQ@XN47nc1$xIzt<it!_oAZ;&{=PnOoK!jX4h<Qovj>`Gt3fp+|p9jB;xi<e9&mf@|zd1G}24;T@BuA*2S2SUNI4bukMg`;upESjzD>+2jGvFE~-WXv)t`4gQr$zzC1L%j2j3xE?vU;08FW;Ae?AN)>FRH}%V86x*#6TRG^V+NaY)$zitG@MR{z$C2IaR+#8I=7O&iXHS=;dH(^CurMLY>QoxZ^c9q9Hn>ZQP?Gxd#JqsSBU8i1G7+q<UYy%RCyefwsV7C+wMP>ToRVp|!AIL_b`-6)pdY@462Cl^dtA)WZc6z9jB0d8G|sd&=H6b~xYBwvXDx3y*A*xP$P)^<4OO{yr7{m<~Mp`6B7p?+VxJ{QDYcyLiQ|GiM!fQ|)OBlkJ3ISuK;p6t7fzEY_iX{!5$B{<+O1jw$+S^X-$gL*9_4uq$Yxu=gt8P1qzi1nY9(M|2aP3Yl`bI=Rj#@pIGf_B7@=a?BysvaC;l>vQ($`5V_~_n_0N;+QhO`r!PT55<W8#)q;$TtHV7@WThoh}~1{qGb)aN(u0|x(}WfzGMpvL7YoWlCT~Y6K(b2XN9;a#4R5@t$*6@e(jGA<fyF%4QzGbHx0xXU5fI(^zmBq#qed@*q%DiW|}>nw+8;v74Wz&rEcpMbY&krsE&-=E+(Cr3)I(c@(EI@BP(@alio5R2SM_oDm|Dkrl11@xd$uI33(EhNo>Kl<G;r3v*e+*B=78o9bm3lKXdUMSH}I`r}*V3lt<j>+IYFlE%@9(d=T_!Cw-V(7RRr`$3R{DD%Vrp+2^a`i9JkuCkFT^j>K;c&nvP2x_mz@WqY87c<&vzKpA3uIgC=DC*&4+UUhLT>n{-RXR&A7i}CC7Q?Bbh_+sT2ba+?0NX*g8s*vwV<vQLJ7Ys0PQ9T>Qk$vrs`U`xAg*)V>mM?_=>Zk5C3GceIO>4Er<_#n6SiYlmQ*>hZY7b`IRbxfb7cs(l-jmgiB>n~uVTjwelIrJ3_<kGLzm}LCbIRYCH-N7BwQQp!b@hAFT|bCE^w^lM_C3>S*ABP|0!(?Ev<#=+eB9F@qqeoGyvU_JA*Gw#$uUazE$DgVi`euV_03r?*lpKwQ|BQ;J~@(g=sb@g`<SO#+c|BJG|@+CE*AuS#Ka_7m9|Altbl8LmULuJ^wUg?DXYAzca*l5<k)B-D2_J~1KraN4T3$stm4$sa-Dmui_Lw?Sfuk0+>$fFZMbtUXDn<wX0trUkQcuorBj=r!x4*#l$iN-*K<=m!`l%S@7$UeEpZDi>i0DA6CJsGI_No_-D2^SvPA_$Q4qJtBwZAilv6S0=6NQ|?}r#2%VY4icSMOA(3Tv|QBQDg#`jA1bzua*6%KFqs6I#JWX2|66?b3Q>%eG8T4u6i+VHkSt(lnbKIo?v$J%EaYl?=Og>yM4PRkNeM|)TJrw##hp1*I}X6J;rxV1J3YCTb(=g<`QbGWxbpeUIDU*tTZ`a5e+bF2&VS&vfM2U(ugZs~GX3Ogfh=D?jp6TO=6U7hY|;u0r_BYGvw4!%m8Xt5FD<ZjJU<Lcs0yY2}ycO3}}mmjyZT9oE#@ZI+Ad&!CYDfhqq;ybIZI(*1Y;d^wDe|MexULbtgIdF<S`76npAna-Un`dBNnquE*&!zai?14k?dfva)7Tjx37rO67`p@6IF8lbv-RDCoafSQ_`K$8znJ;5u;@M|myWLs3C{~Eyh$h;xKWSB~u$OzKb>kD8T;h9OZ=r7@vJ1QR6!rO?+0mTi-~;QV5H`~wY^QUC+L+n|u*hPb3=p;P$osm%4PTLFcv6~i7A>{YE$QaCXrwO4wnDKUrpb;rOe2)d<D)fh2~&DIXo!jU&MPhW6n4}RcRJ|Se^4|4f95JeqHlH4oZ=u%#doo9c~~N@CvFlY=0J;#_>}6I_)1@jzAi9{!nm)~TptXg4G@R>pd`o(XMQW~1V1zcS16g6Sexxr{kVT4c24KQm%55N6ZM)|z%ARbc-WL?auPOQ@4M2^G^?(K9N<rgzeT`*+FKtx;NAD|t?Ul-3f2fPPYJ0O8z&zu?@ye#Hz|Mu9625MQvt-NKH&c1ep%HD3$aO_;y19p7s|gQ3*p<fpOu-^;$2{E<(>3=O`3d8Tx3U1@RsUg2(uj%cMF#xGVDn>mUsQKKg@UHoq+eD^_}^bD7Wadrvt{?ZGUVxVaku((7VzZ&U+eO3qq_YtDO|MK5gy3rI)9b8+|dOS%`Yd0B@Kn-~X)qJ;nF5S1~{g{32ZXiGwc6JFu=j=5nojHlW2RDLaXg`r@DoYyhXD)D5_O$a_w4pf81Gca;xcRPJIF?eQw={wC@J*6g)H__?Bej<7bK8yAHmh8%7>Z-D22%GqQ|!_rN*UQfQMvhV**2P8VBk7rdGaE4u8h0lB!{&vs!sTBTlE52z>w8vP8bHuY?eg9m7KTM+!F}}4A|05OSjIb*|jYA~-_WFiZ`E2p7;@Er?eurKmiEsE4ZQ3$#T}Wd-)^8UXGg<4(zEn6fPnFMuF-7|Cm(#j(+wo^j{<m(3b?enT9+dB)-yVG+GgKcC<@_uGFQ6~Zh4P`GoUc&6f5(WnJ=3l?&YopFM~bE_<+}akyMWHYZfQ@PTng{+JLs|A4~f9zq!A*1cb1N}jMKSuI7wYXN9Macv_>W!!dUwFo8|6gEx*FhHeX);M?S!B{s*Z|G5PA>++D)Xxj80aOlb`~l|Niw;<zF6-5Lw27@F{R-y%(nH7?VOE(xfO`r@e10WVrOH3m(KJ!#kE9$sU5Wm41fuERJAyjgB_#>x-yEWnY#w|uD%qxCB;?pB86zy^#(&mayX+H>+H|3`kCXbUYK(=@qY-pIC)SiqG(<vqV_|BrRlO?C8Gb9k42UX8wWR+c{;jET%Y7yclga=m;+ib5M`sykO=2X1_Cb?ns?+sk{D5jWCF1LH<|)DhHWj=8X<YMlscg1U3aVYLX1kNqQGWs0xLd~d~LSDjUT*}r3p|CURowZ|Q9UqbqySLthw(m&om@|(4P<_}Z<{o;d@qI_N~u1^}^K~S7pkV9cTawG4yDYXi2j><=tSTfKcSpMed<Pd*^+{V@?I^W@A<UBZm?lR{5qGGCFe|n#P!q!NhAZ{iY|AA$D+Y^@dkq4pj1Ws0U@&6IqqT<lMv_zieIH5E;4&>K+0=5M(7=ARpFTCf(C6=gMt(s5gi~6Aur<Oh^`oWm82J)gM#%?Cg*Du-%uG8k)Du?_Dq%XZ7kephs!k{J|aC2F=tp{4251+x(>|EBXW}klQSLUEDCv2X~4f}QeY`T9IuwUhn*G=cg;Nv;;YymHl^XtA7*3U`XcvwO#N7PxtfQN87IHs@0*RzUmYN|gfo`6oxSB8oQE6n~Bzuu~GSaKp%AL^Jd=ekMf^{Dc<WnkD-TB=naE+5)YRr`ERGHV+lUl(mF`<3{<vw!~%fR{*{#hsp|cZUBv#^3xgDyKwpBdj5&YJKCP9(XLpWg+odhZEql#CfL`^sWDlCmZsg{$svi>H9Qw6Qa6{oB3y9L~kXj-NLxM(`LvBW^Y{Qb*M*fL`aev!~pG#$h2m8)8?@jG?f_?yH=d(B3hBC#=0Zy<I^?o4!4bMC0iUkInMk{+)IS-XqIAPR!8s+Bd~uma;!J|Cclw1IH%|&{JNG93OI#!UFu{L>&}?o^#pXrb|{~v9dU)fv@V^Xh%mbnVO&<iW5rpG6C2HU&4TQl>l*M1`BDFZ>k>pZ!XKnni;WO3cDWd?gsn_MoiX9F1ra88i3m#Yc*7)KM5(U9brg}Wv`Hufo$w6pII=#87m$ju9X1Bgb2dtcpj5kNIQ17H;4o?{WQ2?xjPM4JSDfNS0p+jju+oXYp>Vt%lQt^y1~|fpp|UNy#dRU-gODazh3#o1osNXRJi}<fk<rF+kFo>>U*dQW^~sTn@@)t<XtziU9Swx|*RWwd>79|^TMcU{C0TP7HhUK7K}(J(5MJAgigLs{yTo0Dg{`UWX)Sy!zQ$cmBd7i3p7pe)wI;Ur&D--AH@W%JTXW&tTq>|{OftN5!j8Qy+VTxBlfw2e<1gR%wrhoNR9z|$w3sB<XwPYTT>fPalUzN&bF!cRlJ8`m&N3%JV!@MVOU&^SvnR);jjgc9yMyIH?i+cQF{8tJ!jOyOee9he_Vn&pr)5_|d{k<?u9s^D`d-EIWx|$=`SB((%RhV)`aD_w@JYNbiHzI-4?c;fl?Tt8KQATbi$NUKopNcTJ@tR_NI<NN{e?$@{XK39eBUnl3XOOawn)St^=Bo^LM8<-2m6t8bk?REy@~Id65%_-T9W+xCVAYm0Bl3x3H)R-=R@INEiY=zF1cYjj|Fl}P`ncGTOjOYc3Y|S-$FiX%0;D99*uDbhAKKalCxd-Ld<QCT-fx0`2`Gz7{_ibv(9_P<x^L^8Yd?^I1uB8mXm+ym{9R{l2Ag<L5#oc!PPRHa#Vd+>ehiRdiWE!gtSHfrqOkI{vVi8?N@(1tiI>fk!ef7J|606-V*lsBOb4K+;46luO_Z*$>VOVomF)m{&GJ3#+HWO_xUOx>d9F>)_)*(A)MyH<vZjpCKBt<miq~7`nccw55_e6zTeB^ellNhy59D`uLn+1I4_d1L^H@A7(=c!v^;sfj0K7<!~!99Dz&>gT$jjoG*`w<rx>a{4%p7a%9A-fu#X?VvoX*tD6a*%1+bOa*jQ?Ko1-ir`tx&un?crx)XK8DNt=s9{+T*{`h8rkvq{Y?$&&?UCXM-|*(KN2Ahs&YEz9wTt?Xo3?!)vx^|XD1`}i|h$Ctl1l1rRc4jVb-uD`(j0vR)h#Pzrn&k^6TxbJHJ9jl*7t?Z;(`%3fLhV__LC)Z=7J*Bj%pO=}i)4zgeb^WAGy}ZKjXKAm4_Vh}hG{>d()+by2F==n{#Y$?2CsIp`FXtWD{ebmcnWM{W(Y_K}di}&b#F)i-QoCDXNsoN_hr*!VqDH)ztk-a+G`WCd7WN~h(e*6r&8AY*9C9r-P|tQTy|29A6Sp2)_u%y7a?;|auc{u+Z!PXtzW?m;{%}7m?73+RYL?GaJ*j%JyGgS<dIr5ndAy6S8yG)(PY3O8q_n%`_qI-l&Hh-2QCkyoOw7C;cA;6XSy#W%KJgMlOm-J`4dT}*4KBFzjXgmtZk{yS)LBm0jnhQf8_ry=pXx~wJJ$_$5?XoHoi?-k-Z|Y0)E246FNA<5mNOD<)Dx<o^R}KRI9L@fZz8H&$&ruP2woDic2lG6@+0%gmZaQn-F+)DuxHW+W{HM0)YuyEkhIY~VSmh+*&gF#;1`G(+(?2w30Ayk?|CQ6-Pcw`=K;rDOS^WycTqr{Xh-_xjAr<@$GKkVZMbXE$Che~Fazz9OP)BhTj}Txq57H}+c`E+M^Ut6N0RKY?(K!|SGq`y$=aOs<j%FLj<e;0ANAuSZ`MV~2u-pkrm%Nx?iI#p6g_7Z;%9DRz;@13yUr<MPh7hc={>sc8g$}h7!!?wF77<<gx%EU_dV#2+=C?P=ARoh%tT#TMPJWScadOW!)>$ZY2#cC>IO9JxlbE>$IgHYgbLE|Bj`r&-QY=-g%VTPp7;EgHo0CNNl}u>j0v05=4xVGfo&(+&k7@S7)cwMDH>2{4(o&-ge^7qHVBK+o*gOG?&Qd!o_%4DT?;cg17;N4WLB6Ft4Mvt4aAFrFzm3l2Q3%C;F9{Dc7RtCwor;_=rxd2l=C)NMcEJ#jibHOo+*v*WopqPi;hyW_pZmF-6raF73%f6%q*WF%PZ-X7TtwWQi=8-7cp>&cSP9UzEL&-;0E85zW%7laK{E;2`e_CO_G<6c(0>X3)?P9yX3sV%{_qy4N<mS3-7yTzA5as*x13E&<fU1V=C<DLKy3!e4Eli%{FruxDVzqAByjZgjDy0{rMi#U>mmL`^%Dd;CYEtG8S4=(3b0%lD^Q{dr21*XYD+{`?uJ*e(+=PmKcMuKO}E?Oi?>e9cL!`tg!!)xy6S?nVo##n&GKcZ!sxcRJZ%gvO@DPPct%9P5^mRZ`=;LJ&Hb}>~z3JlodAexfZ;UH2U22@wg-Hm1t)@rh{nrIgZ?gD{NZOJ_`4kSj;<&Db~#rG|5Q|&ly1zjP>=93g07i0uP?EKL*X-xqj@$b5ax#;lDJ=F(CAa`m__HJ@RLv3t9`@0!op>w%)e%d06&=gdS91N*_?z^=~9wUd0TeleD^0XRgO>vg1c90bcT=(c6ONBer$6@9W*J;dJ95(W3&Vq|fvGXq|Ui?I+EgihlJL9wX7mqdo@xDI)+4C_mThIoJF<w^_kJbNd)PQPSqb&>PVozW~pjYq?Rj7GpZUln&P!ZjXr;oQs}pcVqyKaHrJfMcjs3d?aFAOnmYE?&#6cgdKP(bn>;O(NpML=cK7OMRV=2aiLLzJf<zu5Rp*$5It^vVfS-Ng)2w;n&RekO}a&xwn&brsm!_K4Wq1<xo=ZFIS8G@KABY>+vInAs}QL{2XKd&m*~+cH?4JUkU7D=85%<!w)_;4_JbM0Td0%c#^rZ-=MBm4p`E<#vi2#Y^LOqBZDP#kNk4qh?vn2v{U-Hf3C|+CS`b*X%=i<-=w+KG&|V{<ff(=gPvU6T7|%~h-v&D;H*v?=PG@GUg(I=`HQ=7pqi+`OWh`iX1x>fo;9lOxxBMR8m>C^0)iF6*AG=$#n%;H7;+^u`nB6#N0JhOvp8B90`GLF0=7uPjE&N6?hm}qJCF&E_0BvH7*SzOL-Vx9n$#-JN&k6Y|w6;(6Xe469-`%Y@7^|wRK2-*)3!UGYSDzDC%rSkE5XwJEhjKAT#bu9<rK>~U!$(L4g6Z=jP4y1A2qhJb7#H#^@^j+fLlhmW#<@!Ua#$a-8R2*5nj9HnwsTGUb`|RZ3*80bE}x|-PsNz{2EM-IqA<}DH#NzO_JM=3Xj{VJcqIJw-6pl}xe-~Zt<x=m+=pvU@a$ST?46KUY-iWFOLoao`0i=cGfkfrG#tab4!VH#zTrvICOX!KIPnHl*qZi~$k^EM1o1Md#l|HUDdc#IYZ7t~>b)}<qyycs1qoA4dtjSHANR;H*zECDjH`&27&*)!Dbw*ha_4;o--<J*5yDq;B;p$w3emrWZw(ly^CE1AWooy1)Uuf0g94{fvTNB%d}pcX%Y=9QBgb_{Z9>X4c-wew5_h7X8HrV9%-ws|G4CUfHTkW;i?_7lFXAbhn8Rl&N^;z?4L91NI7VN)Mn5I`a8K?vsVFz{G|2cJ>m?>{o2;dAJ3Ntgcq8|gZZeXkHiCIo*1xFdGok*KYwVL`hbt3fOx*IF7;{Fb=djV|SeuQZtskMDi>79{KaI?YP@Gi@QU4KW*b_uP!>o0M&0>W#+U&5e<K7vImgr)<iNrYRgy;lzL7dCAYGFa!qUJPbwk2ZhhyLUcl4x@`O%cX6`b=BqR$43iSG!9|dm_ikF4Lv9CE<Xk*m!kW$~fLX;ZWa{k69&H-|m|BHEvLvq`8)9wS|$zGClDL)>l|x5bUi(728v|(?68fySm>)(@gon3S%}X|JgRb*Mnbym%r>Tt?+{}H^^Jw2VdNb0Hay+4h_Pl0=(y~RUBnh-RGCK{Hh6zLw#XcbcZ#lke~eTb*uEHaDeySSX{)hPv8N`e(A5-;QMz3){f_yag|yF)u7^(y;{=?D}#Xl-@sat7<;w<gN7Q!t3~6AZ`mHv&svd;JsyDjX$|q}WVv#_b31*pe?l)y=WUtzfQO^Y^k7-r({8l{-8EQaf|#Yhg7ZDeH8oRfPqEZp3jt28azPJ|wW5#zft!=T)Cohifxmy&K`gl@B)8yS9-_t48`e^*TJebrKkzyHlipej8WKw>B7Yb|@L&8ew(fpbSw9+7l0yLe?Z%S$y6AbSf#wyNaGwd>U*SHpU<dIi$mx{WCviSo9zY8lLAh3HEerfd7yKA?-n%?cVZcU!om;?xhDYoALMBbB<)m{jd4E19-k;mFH2~9Nze2jn#G!9D^TJ2TAZ)NR;4PRF<iZ9gOpkUU=AhyFwCj@39jezGk6nNhQ;Y*fgom53$A^+ub8bg=-dq7Int?r)qvW%s+Kh@hG4Gg{8rKs~5#*b6X&Ur9;%jB<%-J19c{9HVA8Rh=!+M7*EkdGC<160d!<-n`9di?pH=4$qB&^b4x1qt)244p%%2T>mzzBIn&*z25k45U=2*#inc}mgYCg#CYh!~5!_I;BL#*T)@9{X43H5%<%ChW(tM4TmUeNDT|x%k2Th}*FBt{dDGu`X#XVLA>vwZoB$F+FYr$aQ)rcwAuf<YUiD*j+cabeM2WkgwPFNveliJUp$OW{hdG5Mw3eHe%jXx6*5MVHez~&3iF6KjG%$F=L$Vd#j<iwuNtIu=bSWZl0&KZi_Z3xL#XvH;$1oK*&9uW0PFKE-Z!5vFn-e*L)+?+W^`m*U_awEG{4(uJLt=0)5{O{+{@=suvcYHuqCJjQrR#b`NsWCr>GjjIbNdEF;2Km_t5a${S%D+kr{iP}Eg>h3iX`3ER`TGhqjDj|pEx(@7WH2^zk{-04>4=?+?A#ZkX*vG&7(B$4#r8jv$JuBi3DrOH!B+#|w9#DjG?tzrEYay&R_aPX7GK-U7|g8YQ!Z&{?)(xdNlA9|GkmcQPnRJW53&ngu&lv9Bid(>ESaH{`|C(y6h07l)B>m@G>;G<nF%Z21f>R)auFQkt44tm>?O8O@$T_nj}zkz1(O4JK8odr`ExQKhahVxi2&g)x9$fVn>{adV2>Ms0_ecunZj6i1Z?!@03J@UsS#`grg+vqb=Yj`(TYDh|4-%_pdX;%5xsx`g0<e?=g*YZwF$#Y_rwXW9i-WC&osKS>@emOeZDc({4zwlgZdahM0134zrnJbS=&LIo(%q^v(Bk_|H7g40ylBZOMv20Tut_#Q?KUtRMWbtkV{HA@pL%?fdKJ<Xr_;tBCIP!hoAZ8apEOX_JHe4t6A-}y@Nxt6pdHJ-Ap&XFk4qMw-+Fh%DTyrb>SoUlG=YGZ`HhL2tDt?VGpEl%ki|s0d^BJ7K<rZJ8jM<7?wb;hNYkd9mvY0_V4;kF&3F=v#KTN;3%_`G;4meIv3(Lb5$_e@Ki&gjg_wV~X1^xH}_*BOmgK6teTMx7sM14lwx*f!G_peJG?w8293Dz#G#bY0G5jL;Or-Kjg2l@3=?ALAq-y6ePL%rWieD7ASHMp_&8qdGi8f<g6En$sV{Qi1aNIWlJ1(HWaZgaJTc9vUT)w463_NU)%8GGGTqTDfGMOxs+?W-mFt*Iri5c`wmqu=Fo`Z1Z>lYYmhljs>xB5;2h`&F@N{B!-=_w^`)xfs5W=s$c_sF>v}(Cn!{xZknyF)hXooVVx8Kc@S9$H<?Nd$u7qnoa#u9527iV+9|}xwx-B|GuyH9Wx(^y6+k>OV?}@?koC5Ixb(WXxjf{+E3K}YBlW#)4n_HlWBh~_sOVYmjAW|?7c4<Z_j?(^%u7}wBuvVTek1ScX~|wQ!ac?A3LXO<+X2=>L>0j&N)q<Vme!hIja|QyzoQL25E&aL=rC+K11FNHt8b^r#jiD5Rb}dVN1?CllZh3e*V3E2{m%WCLh6<XW1zRZM&3?S1x9eQm+km&leQ}JR-{WnE6GAgm0e|q1Ntp#$qe{zno~T7%OYVC#-O6_mHq*-vyA{Uu<xz@piaThp%_daK>$73BMF=F`6_J#QV7muQIM*MaPQ>@mZ8vPpK}-Pv>XskUMDf(T01aJG_TzaEO8RA{%Vl)s&LpGfK&kV;&RiEQHUvB#zYR`z)HENC_9eCr`i&fOR5#1mZJ_V9nbU_X~0j-=efON+ZFshE_?#>%6J%dz6DlQ;|9-*y7Wo%Ea7`{abWzpSUv|3yps!U8{!%x#BEdRCnE`Z*?l{lc&fIdW_iT&bHQNZ&8YQ#!Swb&d3h)JLDwC9kPiY&SQEx3Evu5u1+_0)NkBin`reJcSA4c<g5^W<^EU~yEeSXeS3+!Knw4T7CreA_L@ageZ3{eVz~pZ=VVSDw#%tbQWW60<JlH4-pCp;trqEBUx~ibU|eb3MZn`6mkrv{?z+qGbzh{q@ZtQyTAbWek2a9cXB^rs)_?gY#F}%r{wmv_W2@E@zVNSe@UL7zZ7w;99Orj_;Lo|19?dHabfoL25Rr9wM|9uK324@nHU~^3V2~;479WwG&&n*IN#B0vMtBo_b<VrwO}wYMC3wM2(U%-OBM^)3qhoXr>ZBu|r9R9>-$tpzia|7eF21QJ?1p1_tlh+&o3ul?z^#l~tPyz$#WUm77xp8|lV&g~Z)ik0*QFOl6%u{VtqVf0dEPCoy{-FOsy}U<@h1FcTK1JryYoGChQ4qv1;*SZ8R|nLNQlu=(RWX|>E9@3x~RvZXrp^fk{Q9*2y(N+qke;R4`DN}NK4E}AH+A8tSh%3<#zym*g$W>A9qO`JQaqp{d?g_x^qf9@ik!du}_8lO%U2bt``}WDXMe8T?l`+DAQ=z_3er2gO&(Wkh<K?4RnchHWtm|4X431%!pQzfe|wle(~jt(j+G+7%LRKh4(<%{Y1mS<>AzMi07pAf+lpK?%6zXQA$0wBR0A3(!?tz&qB};R}Y2Vdgsnn$HEpTsqP6IRF+NH{x&y;B2A-i*GH#_40WOpB!#l!OIF;;y2Sb$HrrL)Tuv2D?2;gtcvb*DMWwM#A%0JB1sb|q0r3@^<wR#&Zd{8njr?8Lo??CYOibY~b)fYtEN8^d`!+g;c912l_-4@%U|o!xW}T-tPvWDn{lJHDt_aqRg!M1{q{AKKffeph#2SAm+0e&EphMdxrWjKU?Zz?7#J69BdbExypI7)wVcmk?^%q#TV0vwmW^PvGbQOJmUC@I@8!-dx#1&)35xctR|L9$e2RJ-7*ThR!qAzBflz4@au&Awj+z;>#U&1EWSe9t8ZV~IXn|AXvGm@_oa~gVWngiBa^plA2pu#-dyU95<5>jTIVlVPjG$a*_BltW7<`j>aVlU4sw|i6d;ydajZ<fRX6j^dxE59I|^a0F*&hB9gnCzFr&VJ%4VC!?h0RM`yloTB$#+61gXYbFNrZ009Q&CvktKua7rS18n0V8}D9Y6RCjJDn38s-nBgZenG`SYDd#JiRghHG(5P^-bU)p2S4x}U@Dtlljq4FsdPhH0xO-<)nLADMa4#~!sK5q)0yE#F+R_ptjXu2|tODSVpZu5T4bs;P7c6(-RTeYs=DqEC#6)&g}eH5NXTrZ5^*)Yn&~FFw_{%;0apzbn26;5(LO<T3|X<w5FQC9$jGy6!R^8~&7EY}CPhpGCk!_nJ#R!lcb4-XtqlMg*AgFNr-dTEKvuA6k&GU)746)5*jbt}jk`7M-NliLNwefp1OR`?YY<y+8}4e+2o;?n1`ca(V}Csqbrz!*#mHREIQq;7h`9{Qm=Ea#4KYPqJQLI)!(s)UkilCsNufeP~B!V(xt4YObE76Xz&AG~k>6v|ayw|FDu6Psx|+%j+D-jjoq~m&S@$P2%@f3da|(WDfO1w<(U*{SNW>{_+qOQ_l4U?jv#9WA0cJPWyZN)r6}=K1asr#Fjz~4nb^A@vViA+||Vhx&+m?1{MO1yMMvj{?_VMIq+bo%b1iUxezFjFIu1t<Q#=7w|x4wMjw;S|I#$U3fJtac%HDOf8lYLnV(7R-NQfNZGZC>Y#Q{<SFp^5CEtQhaYwTJ{%@QjM6OLSz)STkOAD(@YSG8P%D2X;KF`xPpPZ_W)C^(~!sa1veS_R;<3J{T?*E6T$yA2<C}R_{i;1=>#Cvfl>;FOPMP4I$&P93CHu*=)@!xS&sEdwu_TMG`=DGkpwRiZ(HvXGlq&>B<%1PB!91@=24}RJtX=*0}H?43-hbyM6=Q_TX8KcaM9NLLF-Vt_Ln-mmrSJ*av(r9;VjMvBsl3ds(6>dH5p(yEwr#MCPxS7r43@-{>H(@<$((|*bujXId-G#An>&SMWUO;JL!g2I5?(Sp=>4H|2zYwD_<A%Fj7iCGs+yp#LW<+*JqU{_Oq)qf$3OhY?E_T_Idu~*B(hgo^)Tk8meW8i2(Id#eH_GO^5%1pTM`52G;~CSUBeo+OchOuJWG)eNMr6#dJ3RNqoI3DE*l*-uqy+V;8`Nc*&+*;T;rG-A9)`LRW%JXv{@Oe3EV)PLxX0QqMLtHsy1Yk4f}&I0*H4if6vDQm!q0n=yg*2J3Z`{Tacz~z87tw$CB`@pO)}eI;)U&yRvvky7~aPce#!NvAl%A3Q77&-XN0BuW7Jemq{T<;BJ47cdTr0T+S?z7pBy<`JM0hIr!Q*c_px;xZPI2oEO9<aJ#1*7$G1!3q3wO8O*PpH+GE^}fmb#8vmS4XAvfkr_*BA*c~N=!Q$B{>lN;bo^SAjohd}kNzEMlzAaACc<E|6u$?}_v<iSre$hhP~-{8n_C2Ux9^Wi%5n9oto#oUSYhrK|egfv<z?1fC(GKxQ?QR^+WnzLoDe|1)K_J=CRsLsPm3qpQRFP3^IiL1F;N`t^x`frUYo3b%B`JKE}*;-12JajLl1_hdIfqQ$+g>@L~tz8`(^}EW)dX{xN*$4R@C0q+`a_PkLEjgAR)w)-wICNw_N%gL5E4kyX6;}PC&ihoyzGOMyl^({I%7s`dJ5bd{plmStbyjaGr%8UWp8p^99*T#ZDm@-YjaA88X)MlFdz#uy{wCAy=;12g0c+PW)uL63uMb@m#mUmE`*F2ar||mk3fKRoaQzCee^xkDrJFP1^)G5%`4b<^l+$rmW6gxuKdD%@YAc1AJt!X5LcQC5(sEq><OwK^*hwc;X-j%ai?OQnAB{n8(vMc!XSWYke@g45QEQ#Cx}U1Qv&wsO50jlJxz81sf#jR_0;MZ?l=&pLgZ$PMpG)<j?4D0$3n?z4KjlTdC@%GjdN+j;R(89>90OOr>_Y+cAv)Q)`_`ZBvi3bE)Ayq%kjvX7<P@m=py#%Any|RHCw1SOsz;cYfSXy~*HQC)E{|EUuiD@s`<FcCsq;#ee>3Tan%0*X-$wDB-l}eKtIn#=sx{*OHAfzvfp3b_Yr9n((f6%{S|230yEV#nO88)YX=VG)f5sSD+vnAC%qN>IUMU;xueRIIb^oxHI<kL1?mOSx@yGVF{!$L{aNima-s+(F&Uo;}e&NJo-wGXj3HQ}}>u_-4yqEFtwmLR`a5$tZ`>+nj!)#^w@cY|JRQxJF1h8)}Pwr}UUR!XVWd+Y$ua?i^|C0~<tMR~B%VsUk6EA-D)p?q@PTb=l&W%N5I<X%f4qH(n{zg7Ohu_+ta)-XKMOSO3C4g2|<wx-${!=}S_3LVh#r;RelYB!bF~N(itZ!i>9>8V}|G)nqFyF1U".encode())).decode())))
elif sys.version_info[0] == 3 and sys.version_info[1] == 11 and platform.python_implementation() == "CPython":
    exec(marshal.loads(base64.b64decode(zlib.decompress(base64.b85decode("c$~bwTbrUd)F}Le`l103U0xC(927KxB#=7<3*;nKT7~-SzXa`>I@mMwzI*S_e$pv{Br7W`>r9*u`j=1f*I!RRbw}5YShtbRb$Ha_LDWl2)PU<jsu!-#5v;*70pht=9ewNuH2OTz$Lk+Hc>ynA?2jG+lr^YzHb7R;T8sm>I!J$y2bzO@zwfZ3yx(t9gCTJ}@AT%d<a${HEi+hg^yGbx&d=rtIJn+4CVX1|eFfA;OZ<3v`umb-$4YTsJzz0zYTf5$KA0CPgW9AA!u44S8QQQiF?5>%4vbbl_cB<2KMW7?hzEvnUx@3=BlrMEYU{Ugtd~dQ)c1bZkNQpT{gQ|M4!3?``l#RG-f#M--~8Th{HR~&ju-nOUY_p#wvYNP?)|2Z`gPI0-}!@n_wK#l%cFiP4%F1U<I#D9$33~X|M94Odxxud1ebTmqx%St`{LHGv3%5TfA6<?)bH|+NAD3H_s4s`>`}i*Zt!$<$CvjIU(<X0{iF8p+-OqYMlY;_^-?`txN%N>4V_qp>s515?{L3Af;+gw?LUIM%5LMD_M>s9_kJ&r`du@0EoI#zWvn%%%6elXZLC=sadT(s^zeh5d&z%(a<dh6uXFQ7)?(aKgIe^&iC1qJHMluzke0aI{9ysuTii0_bC6rMtZhzsiZyJ={zDs^W6iKN)-8r(tzlc%k&T_PX4oC;HYD5<<I{e_t#N$Btv6X?Ze3&@a*x(gBKS%Z)X@Rytig3Ol{Kx2D{EepMAmst#`|SW#`{f8$NPOv$NQ(6j`z=XW8=6K{3&KQk#NLq$T%F~c;;|~qu_9aqvUXeW6z-`>x#p<tZVM^I-Ux+T3R<PE@Xea#ii_zYj`i~)W+3VGhC0g9LHvIoLAYNA7uM;%_Y38TBj1;c2=hn-gZ%^65bBfsl4C8dModDUfpQ;B*)9NFy{7L_NQ?BhlESz&bU4rcgFRZa7W6Se#)J-tY_Q_Wj*H(ll3p|q_TeE&Q8{go18fRVBPF4CwL0ln;dyo`=7V_7o8pS8=X3j_Qwmj(J7uiqSN9||GNi#=HBkt_jbR>d%(Z!%wz}ueqZ~3|IXK*|2*E$KaS@<kVp6aiU<7c)?a8mn0E)77mK?=TC#B5A7vYk`=ivtaewUZ{g#jT(cvz~+=uvH-pBPG;d_7Qzxzjg{cx9K?%Sh&1MW)te_3-^(*MhbyORE25O*cLy<pCzTwy{k>vG%=hybtps1t$9$Y=R|eY^+wv_sL)ax3ak&O>Yf{j0vy4n{8YBV)W?e7J$+Ix+Hnd>x4El!pWVcrm+5c<KBByw|0~e=P8zOZYzAa{Qfy3ypN!yci$w_r0G-^CPESanSGZ+!Q9!-}CbOJa6-%i-+@(@FhRK!>3zfe+FOlv#}rTF<y|#3a{3wuP=Gk-@2GppXgXVIDYp<F|TL&r<duuZhd;@`O$nG1w89e@CnH`mQcScqMiS#9oN^zr*-`DdDb7uKO0%SSOYO1;{%iny+h8Y#`fVuBk-g@p!<VP{yg|N&bNKE&?kdQ2E7O5S3mZ(u17eu0?a{76~0%dOSDaaeeSbKlmh0>a+_YY0>5mv=1nX3K8b@Ss3M_zyINr5Ceao(&xL+&(`u{X<^{=i&0FSBMJw`C9^*1;&rMdy1vgWm-P<sH9f321^<bEDS6l3PvoN<dEw@4@#VVK)tvO}(xxp&+f(Sfk+Ct6RpjmZbrWNIkPl97=FAkaGhT|0FdN@IH`_s(La*2YZd9Ca>9WM&koJr;%BA@HlUZ3P9ULs%2w61nZu&^R`fg)F6LP5$&)s<6WZABjuF$F`*PuAKyAyKmRDtFhbwCof#)l_||71ncNoR@m^exniU^lqY@T-2UVJ0Vj;HM{t%nK0&6Sm{}APp{m8amvmSugZE$%Oq;g$F%h?Tl;AiIK9yN)C4u&)OVUPf_WdX;4N>1eXboA`BhPu$Vv6EKU#8~VPnms^m&>2-Y;UG(q)F0d-5~v(EFkG7}d*FrN748AEo)+T6GF7^;cUwx%+cy*jLN(XRPjc`fOygO?i6qp9(!i1={hUieeOO-g>3G?yS{yx;mWe4OIbrG3_}{X>`TE)^WtKP4RmI@M(w6ljlQ`=a;uGS>u;q13HowVUG3wV*AOPVr{!EK84}6Bjze!mR8Nf9Xe@-wgZv6ICSjU+VWz(KSRfPa$M&PuL^5-ZOtN&%emfO0Xyr1V?iT)u?`Wr9+%t?>~^`{g$G*gl~bfA?7e)p!P|me!;8BKX3@0{uDR_gTu%q21lcoDUpUaQ2esJV9G)ii3Gk<4@38j{@qBHw*R!!iyQ=xA`oGj4FZ${=5eVLqN(r^RjpJ@^RmTHxtb)Df*B5Y316N;o*O$cxf}ftV%XKAqiOts&*<sF<jh~vyrU?BMh+UV*VY5{GolE>^6Jl`a&JK8b^4<1lfe)&6s=;a7FUqNE#KvN<V>n%>t>=I$+CI-t=FiLdKze;zn~@=G<!xN&Z9=BMR+o1jKi9=`h@Z&xs104a#2)xLC{OODR(9Ju7_v6W=Jw*3T^Ad*{jmrT!2?~q@O7h`T_5B3lc(Y7Vkb0b=tS4ePrjeUroLMo-Ph6q$f#{{Nlxy%-tFKpS%TRUj9!kL_op_C%>-!Hj|jb5%k@cj=|y4v(_%pD*8D-Jf_R9+=`$PhS8P9RHp5)Ar|u6LDh1GoryQJDD}VTPD2Bulyfa0Dz7e?5dGM5Uldxq=Oy{_m?UwlU$)u^PxSnn)RW{4)UqecD)1A@@wf*P%=dx_(J0;lv+%KQKCzxL+{bWmupO-2*JZ}UEp8I!`)>*pG&iPa0p2O&ETalkHdu3xX*t{CMaK)QfrSvnur%##5%k8r9pNG<35AM>7{O#sA3y3Og8^K}Us?91?pzdh#G|kb|wuta^l8No+R>2E6tn2HO@w|YqTJw{39`vhl&D*?iqM3r;R4a-O8}EF+FuYr^g|}hlub184Rb8hTOs)^1nXU0Gd)^LH7@2A*_;wZ9v-Fp`?8U6}6MVIHuUwgR%ag15{*UWwWxbwwwV&lHJ^!(S&+BIsAYZwx*pe4Rjgr;m30<|Nm97_IWri=1^jCATMdAAqzo|RREt0pLy==|?`0P5{A1H_R)__0QCh!`ZO{rQewdTBDqnY7e)gMTm?&n4Syb(64=j89)@);Z|gV)og8JRX{8~y{Y>ugc5=DONP+Vo{<B=dE+xTNMJNzB7FyOKD1abF23QW``1xpkhSU#BgPC`VrA>63l12`zU`er(-k0)4|P!giphwyA0C{`htN)%tev`okL9FgeEr*}d1E;@Uh0yM|oe@N~90xmjFoXrutPh+ik>kF1TmMempD;$2(xD~ilUeX^3A9H(%yc2<196Z<SXACL7uu2XRSwbj=V_@OVh=FguQQG+Dv92U>;TlE&|@Vq2LSghS6Uv=rQdCINr`TZ%}=ZSCCN+@8Xx_1GBwsGg$Qg-ahM99vdizoP!GI)$9pvl@s*z2<wA^+ZXElBb!T%iuBKBb}GG{-c?tK`}^>7-P*4i1CJy3jgbMopplTE0f?oN_aF!^WFrR<O^QD(qA`k6?N5Yhkx_!F$qXm!v*iQ>Wi&3b)oK6tWg3+YYYjgfEjO=mJwE0$aT^jJm_9v&@myL%>{E0w<r68KJbNWbvA5=K<A}tV!^KDu|QD!?Xg+(CQru{ee*U$|sbim9F55(;Rv#ZRs*2Gfr5^GOHJKohLYg%G#<IWO68kTy=c=4AUB?L6g4+>@*KmVISACkVNz)5!NGWh`NdS+=cEHE4i>>!I?FHhALkLj#s5t?rlwP7N|XAHV#Ona;+>was8Ec<l@sFP%WRbn7=0)b+#~>?C5jqLJtUy<;dec;dbNZbsuIBbKK50w04KghVN7vW<f0Ur5cc2^tZM8mq^&kR8dsX&K9;X#X_cU1ynmLo9)a}BaF_d>Yf=pACm^ZVd#1E>ZOrdI$_J_xeYz4`m@}jmVlFlt!fIZT;Z@kP<Bf52{01{zWHP-bcJ$mL)>p8U}rH>SyR%rBj+acj%%<dak9v}LqZt3q*3#lTS1i)f#V8D+?RyZLbp(>T?L}lbQQrCRYIB$*XK3w_#3xoiBI}@T9xUx2^>^$ltJ3<$l1Vz)1=Mc*0fPJ<SghR82q|nNkms6gEmrT)4XkJF|R(XnwMM^WTGt$0`Xp~ej?V;^o8nznw<J3?Y0e_`)$uq1zxyAoj^OcLYGW4Gl(LVEYd~q5@mYHDW^g=@+jf^sB1L8#Ybl0CDFwCwzG&>-g~4h_9$*l)HFe)K}A><>z#cbl6LVX;HtL}dZZ=_>pU%JvCv#CHDV{A?FH_j#9uRsnm%MUUj`0XG6C-ndSzzK_PfY40ycw~HZ?P$c;<XsB5yrM#kenQ7!a(X8Pb}LvHs0(&p_a;N}?bn)LJCnp&;xa*Mo{R-iJ+2XzR^*3yGk^^_G=yN#_B-Qie_J3A*+sRKa0XL6;Hbk`NyFmLQBKo2_H220|C4iZ@}Ea^01Hv0BnhGx)SQ&?}y>NKJS9lF?dN@l7fAVbf4W%#Y<W(w>uqm1cgW<&Ksptn;Ja^gbf~BDtypA0QOh=36tEry4$lmbdgLKxHg{+X}5-?9GzFe6uDqHCP<Pnx13-N~83O1wCgoR^<cL-19cV47aClSC&47r9#@%F=XDF*(KOHO&>WWMpxC@5KowYM#$qs5;-v8(4B0pW-sVEL=m2b<a{EGEbvvGh`o_yPCY|0m~ItyLzLd|+onl6_d+HmPp@$9w55_e`h0a+2py==5*Ex>&1XAf)dug|_>iRzRx<POzM5dcf7R<Bp4<KPoObR7zj(_u@<yB{N|`zcTgIWJeiQc2X;+>Oxr2xG{^?!VEGHh$(2fTEHWoaE<TMOt!hTZcw)Pi{^;Qf1G;aPkd_m8(nVK1o`kR2Yw09wXr4xyNt|qjP1y2w=8*oJZ+1fgsQ|oM|RRFM-DWOVX7C|qy8!q^yzjdI>TC8Bzozbq}2%K5W2||8tBG%*}i1cA6eUu6o++6Hq(~ARzyJ<(g)S~7(!XzNg1=o2OYS}r8aw7N<=WP=R{;AQfYy&de><E61T0w)NkAQe?KB4<S%!Af25hBH*YQD?`UrCsx19;6lz9tP`MR9RO%6XO6WsqMzD~tk@+T}j7VdN|PK)QS#3ciXIItf_bB^`E%ea4yOVQMf%4RkT=g%0Db!_I4ymI@e7Gk%3Qtvn?)gBfbQ#_#m=u05m37PN0scNf9HuY)px{RGwLxfmZ1hn4~<CbK+59gl~CPq5ZI_-!B*bnuEg9z=CRB1KL8YvcRc;Sxp3MaZ=wi5fScUgrzmfa+3>B1=oi`E|$K8Jgrhmo}m`d&^93FL;uWt@(9J`#IHA$#+D1EN8CdBu{;{oD))Np@!f6c6Qjd=PMI>eLg9zT|M(r<n=-ZsbSNLHRo)5#b#um-mvP0fz4~5Sc2Ca7QWLb2`$|mx{7atDz8f?qJ@UZFx`=1hN-1+QZiJ}SO)Wb2FnVy^okm>UU5?gFu4%z6bXK!2-_`9)zT!f;A$EMe(g!PY9@3t8kcm}LZ8QZzlq6$PhJj5+_=2)kT3d7lroA4(IPSoJC@B5g^)9qZR?rf!F*4e(noD6@Nt-lzUqYXo?P>27m<nJrb3M>UkQ^lmH1d3m_1CHkS6}5>~|gY)2ru@Ha{i|ueQ`<{v@!H=5P%a&&ur}&6=DAq#g(?sbBLYy+W7>jWOuTReA+U7<n{my!WtaUZ~=$yq#TG<HcL2Jmeir{kVAz;%pE`auV7q=8?KdzQtQd=Z-1=dwO#9G2W`z-~3e%{C*4FLFT82go5_a{}T@&|Kc~|kNi}i{@A|)KKa$e%?JLdba2NylYTkX*SBR>3ApS}gBeKN?-zPg%XsfX@2199#&aFTcrLt&9%uSa54i4Rfa^HYjT%NLAxEsn!R+j%ZJ!dDT>_zlL~1{XwLW5nz6d!|=4yTj$l=1(h6_12-F9HlItW;$o`gO^@V>URqIr(B9Oa6jN9{E=o5eF%!34*6k~WJvWr32Favo-C5IPn7e8}zQeY>wstq5Lu+@+TNo6ifSP@}V0!+kP|Qk~K3=r5N3EXT!ix>`{_$4cIZO4+2bJNilKxIV$?LoIZ3(2E3`xw3}S(NE>-3uU`Zi%P-AHx(S;6!CzjAGaN;kQe>Lj%5;A48?&g0P8e>FwL<j?kdf7QHlu8bmd9+b<;k8A8WFL8%bV74hjI82q-NvX5pG{VeR$M1)~13sir?Rg8syF^6w`-(M@2xLF|vdwW796By^eq6-$H%bHEvt^*_?_WUBv7$DcoG@qyl!x}pE^Bk1qb7{&wtHgZ2TdEjS%M&Qi|ed$Z6^;prF_^wY1Q`Ca)2AvE>uh%nSi^(Bss1@FOwm4WquUAsX^=|8#KMT98&#co-D|#)7y=Sf+XTn};Uyzd;HWz%Az9md;vfF+tveLTI6J0##ke53L`a$d}^5*EMbo|-hwBSQ{QV8s^(<qlPT9WvH+uBamrGn8!6^pmm_pY(2#Iu%oR;+bWxc6(*A3?FQreKo|<0K3}Li$NZb6xxFyVmtPQ;|5_tVi56gYF4Dett^O&j-B!qrW@9&E~Jq;j1(L^ZMvt;|34;l|A*`Vf6O{v3`P8P0io@;aLZf?zpG1J47$5(f8}V%kN^H>NNJob<oOY*u{6fh~;WZ7pmC1mv|y9NJrR8ZGP2?bH`)+EOZj_%&gopdhy5p{1Kkt`&n=_3D;%Brk%;Zuj4EQ2A_1-1bCZUXGVfq_Oq^jQulflE8T^nU{`r3qF_t85=*(bhFiE|zZqh`F%9^1T*L8NH5L0kDy+qI+!U^>t&uSU=F@|{HuCb@Uc1V*5_`=-;L{@yaQ%$Nwf?;4?8AreVy(Z8^`ZU4n2ASnz5evv16g%hc3;L_>hRAa0mb|(dmh9r1ue{P<9&;Pf^YL&>YrmRpT~RBALTGfo&kL+vxH3Y_53r21v0_Km?(hB=Va`tfWMy?GIt8{0Zw%1&TGQjh=k3@;wHh3JM$f(SG6kNI=mMO?K@KHbHo<2Fc$i_u+=uq?TtIX$oA6_hby@@!NKNn*=G|h=y!3++3YQ4vo038;<m-_`DBxVPEew-U$*frKB5);BJ`&Byrma!lvTBnRsL;VZuEX5IRjiQG>+lK>H=~KPAGPN$a~xIxpgD|9%C%$y|<g5e-&2sTb8W^p-!sne7Wh1gMyBgsvj#MdrTvg&;P>a#U!FgITVn=$t|#q4eokfSRq%5v0ZP8D6Sn?DakEFPDm87Q%*t+JuJL^-J&$Gd}o0~(f=+oPi?4+`&iS3kXI&%Z}RS0|0n~6fVhlu?@#hCJC8aTLJ>3oGDYbPyVw{IQBeog*ZuJ^*7!@t_`FQC2FjPGUOs+1e9`Sb)9Isq8+_Hp{#`aM2k?lu0tb2jHeS|3#rVYY!3+5C{h()mhTr)T)BJBd{}Oa)`MI6`S+;-r0LA(=|Hry%{sqnleCZ$fhahV`f6}$X2e^dpAjs+&QK=?5&wB7;e1KzHz$c+&*v|rZFd59W_;Ayn3fbi?zyxhS0p$$vS?5n+o|q&2ADTStSoy-Vo^IE}!u$t5{V;a!{P%J5FIrjtnb`Er*#1AzQB{7SBcu2Sg-?w0E!O@(-uyd#?Z)~42YzmRCb2s|ckle%eU>)Lou3=d)cwNGt*CP^<9K_(16Zh}RtD4t>Q>k%k=8gN^UOSgZ`*6*Q3a9>Q5M@+$N<(P6uJ}N?kn7?=GNrBZ#4r_8U@===a8Miu2Q=VJNDM;;Bujh3O%LYvN+YX*?Yb?_%sfhtod7)$tpQfa9PWxa@@BO|NE!gwVRGK(#~%?2MBqv?eIa^H+3TH8{jle60cIAE}pU0RBNkCO^26RvxsqrdDgmGauRy61~neLlUx7e{_2hVuoCj7%sTwMWsA4mu2Lfo6rm?8!cHo8`C<9{{*F;md*fcyN~&aSQ*Pm6;IY?lHT*1eG)356Z+sG5&^Q-wT>Pva;|;&%)ku5pm_u+Yf9c!8w#&3;l2E!P6MBgxS{%6-z%`b1bko_8kOjF}Zi!j`jLrQf6a}06n3#JeZLwmtqWzJ*Dd|El(8&@7i6T@&A?NIqwQ>Tqa^yxR8m8yU#!AkUYBFCw_iEp=w=7*)o8<{@mQpiCs(c1nedg6gn=b>s!nu{=6H4(>;TQbw+Y2kDfrV&}MA1bl<a4>0soCf)GPdA#ug8fUu8<wRxXJX~?d{!QB!#JgW21oMY45E4om)<i=8Fpg<t^BP=1mxZUSPf91rkNT&())XidRi9a&;*7N+Aj=YE@Wz!se_ekvn@6>ZJ7qY9;bkswoO8%09ee!}!@4=T~f;uS66nUp-Pdxv9@LVbXgItB|8O7}hHy3S=4Fp5Z%&jfqX@5K+*FGU&tD{&zpq89I_rw(4DW3t0W%@_MXCnO({D;u-O`^V?P>9OEbbjGvY`LgqPqg0lWcTXj0xO!5Dj4fJnv=8@j)8eE6bHyhUZA_qVFWG;df02#!^#@Am^u%=ehgYM&g7kj&HuA@!!TYs!Zo8^Kf9+tJ>0XN<6gRXbrQFGyrH{!9n?J=ozj=CNgS}ULCKZ<TnQx0Dn`yC5yl-x8@VUGsI#+sJO1Z72!uj2ZzPuGQAgZ3u9j56EyKl`l2mGS@4CiRyRPdA%%kUpv{a0YO%1-_PB;3=lihiZL_gd7a4$NCbkfh+IhKisD^NcDgC2>tD|exZC;{lODRzxx^<>Ra7llR<y%6WixfANVXs9klw49b`Y~SIX@NIfW8cV%{kK0ko+r<rbJsolkO$AvorODZf(vs$Y0;Fntr($?#Pt9c|1={`YhljfPm-zQX3ptylry^XVS=6FtkQfG23&8|`T6E77&)Enn7#R=96|aIg}s6!PGU{joVLH)Aduma&mx(;c>gMxB)T(=ePqZS6&su=91Zmwz|c+?KHs{YN|UdVeST5_F3MbGVmX5qLCeL5La0Tqx6%-{rm+zUL5*|K0TZaYG8do)5xKgvv(rDD=E94V;5MZdT_Y*4e=NVL+pAX;&|Q&;2e>-`8y6gk)j)0uNau+nG|X3%%hB9vp9EEW7eF`V*6D>8+~sajOO8*71MHzf&n^wZ$nj=c#-)yNvdW*w=a*p6=zfh+1pitO6@rz3O{K2pt9V%irZUKNxj<=S2^%v`6it%7`aKM?UchJ#1UJ_d8BAJ6Dsdf923~cQL=`sO4{wQV&SAhKS`#NT3}l-agaLsjuc6T+w;Z^sho58%fukSyv`u?Je^vuV^b{_`KUOe8FmP$YMZ}Yd%Yf$7Q_SXR~=&pR}+IUQ*hC)PX^GZF-_DRvU&S@4Nfxf>RO;JWc{7>)h^kjmmi6TYk?IT%t<gS?WC>bqb*~2puK2>2o&bUd%eJXoOCLn^@ASvq?>vqu9}Fq6s~W;b-xTk}VE+t9fl62bFx5!^JgsJgJNQ)=}KsTK?8i{#sM}HulJu*!cI4<hEuT-2el9)=vd@0-Xi9D5+j4AW>y`F(U-4_+FT6ED91VbP~*qUn4#L<tywGyM9HY=teGSz!C+e;i1@QVAyraF2!?dzM}OZURd=eN1|BS=7dDiT{|x}ZlJsFrpk?TH1hIzSbeR9nV<!!)PX>m>hBVzi>>~S?zO0d85tKVnS$$y=aqXs{15Bt%`fc(K%b1ieAN2f^*jHT^I2OyLQndDo|e+|A8?(c=x7en5z6o1dE2<H?lBj1_n!@VHr#TH4XOVhr2GJXkRR|af8ZbPdo}nh#lL+1UA_o=_CLuNee%T~a%8#~s6j#u`y-2bU=MxOTZBBV0Yi3)+)ugZ561oCe-Q9$@|`>b>g7j$<zbGsE#&WaKZG+_&pLeqFW>FaY~VGR6hO%Jsj#o%GvaUSy|CZ(!>2B!{kDn~C)Yo_UvmBF(|4{vco)GLobNf>qYv8I=}^Ec#}{zlV^~tI-eXwKbCG|FVF|tC3B-fVi$KP*yl7vWne1EYZ#P?P9OM5FnVU5?-H+X5<Dcb=mM_zY(|?dJqmL;&kFlLmzM#du%nQ;*>m>K;S!Z^F?`-ZR_^tDO@toc!V%>DUaS@vVbaD^IXmO8Me*WCvLqMWV?sJrJ0B@A_*$5f9B#(TV|Fb!ca^r&xB|?7Q%By~@?R6dn7F#Y$L&4-t0eJble3qf^=-Zwn^!J(vLau6MA83nX#;_M!#UPmc5oxezPP0t4(=m*&o0D1W+d;Ks>V9jNst<d2$2br+_<I=lW+KRmP`FR(>`bfXuxo?CuVgNikjoQ#qAGvOh3pNlK^4}@fUSmxRuBrEqfH{5_(V~;(xeeB&tb!7x#l^(qI!(wLpb3*vll@|4!v=YeP!)!4*Z78k>8H-O^xE5lq9{&+N@2+=d4>C&CS};=DwsOKD_?+OmXY$&vyM|nR&BOy0EP^8hfM9<#2ocEa_je_`5v{p^#nBEmdLTdjL<8-?ZqHm8`KS#IDz_DP-quU5oc|4KZG-qL#7~miw5`ysl&G#+`$if~RK{OwS5VE-FYad;LAP@g-sNB78CIgVmp(6<nWGP@i7o^|1a`o(Eu0vjw`Mh4qdD^p1U6U5s}`8^J}IN)~^$fHpf}oAr9VhimC~*uYs~ws2ht#cSg&(8l{I=85W315bqz8pYn)Ak#3AI~#r1clqo>N7~8-$pxn~#JvAcWpiSmuSlR@z$C+9WmQ`t!XB`G*LS};lw;mxvRDQE2hwMN?9E>YfaW?XIxaUH%dK?Zt&G}F^(Xh_Dn8Ypd<uy8KJm;O9o*;)-`3mCTA4fIy(Pof80LrAm-aDV;`8UA|HDVvlFw3RrQc=E=pz(5fIA2o{n_Rhyxz6$HkKi5@V{-U*c)A<OXOWf@fsYKw1vl<QJ8h!d-fvue|_T*BU5&~kw0X&xqZ|P$JdpzPOg`69sgE7=!QC>6I38|D7aD-yfwlCq~I$3IjUZ~3V>fV{VCcz(R6~2bo8a*TO0)5d?{4iCwqsv`STd_pkvHq7-fy&7!q%XH+`;vm5g<K`FxCZ{FE$we6Q;BC;f=CrT&%gfA~C#=POdSN*NEN%+))^%)c0BY4L#`mj4t;0gCZSM|l(@`K}XX)#+>O@jvwQ$5_ke6G%eG`5Hs~HytgO_?EFn<Sle<s^;LcyXYVLbKL5y?(;ut|F7_jI`EU;37xYDG{KJ@u6x2ZmisGc^+}><MXr1f^h&w?#diK@UHRVM`lvsOk;qt#Gr&<lkh-PLKgDE5Uxzij$MtV|SJsVUtT&yT3YyiDjKHT{f^3X*f=eJP$Gf+?>2UbwV;_CsT5%flLBcvPvo5cr#lhk>oMo5Vx%F#)@P&`I=khk@O+JpwUT|3d_K$z`^#g{Rts|}vqYCrQ*DZbZ*_DH^>o3m|rK`~gaUEA&fI2~kP}L7xbvQgLg(&DyitlA%ZIWd;LBP=TP$-ovv1qOJ`Y(Py0)>&3yT(OLxA663za!ULVNr-ELRL)j<#mO8r3#z?UFpesr3)mA<u2XAtIak^`|@Rm>U|$wi4mDMJ5uy1+EHJ*2C-<zL^~$hv5)Oeg=5SFjAmP;C!sOsg3@H!0{mundYS{w7WzC6boEx0jV<liH^SXK<I9uFm#?}|J32(5u#3Z2Y}0pQ(>K>V708-_Hw6nBtjCFY4*i{M8@uDueD@uX`{$nLbl1`UL+(X(e{c2c`=pO@B^+Vi|6700NbHNRK1KW9&*)ngHh_Ki71Nuq7&l=LZo1Sug}#>E{k>VIjN^{V^s)w8$?GI;uA~3MUOY>`M#9d|nN2S#Thw23oFpBlT7F=WcPZr^U-oBS$N0@ihuOM_TWj}82E~Hj=3tlLnV?rF6x`em_oba8F67uw(~o6O-b3T^6N!>o=be~=9@(C*PCxsTzb??tej9CzTfSW*W%(zT^GNpm<&XdDpMJEKrTQfv|5%niOFQ{<9R1$U=*KsHugz`TQPb12!|i_YAP;HGW1Qq5X-@{3fJ-^%gWUK?IqDDpfo8AceEws;&{rKu(wvNk-*QSv|0bFDdM9LoguNS;fAM{3-r$|x=xE|KTL$}WE8}|Ka!r<k9$$T74~0=VPbbTf<&J@QxzqJq48jRR&iGl-21+NG6pG;sy_^Uw_?OWAJE?E}2YT=|`R9M52l?*zXIUxpjbuD~^#6)=%MSI3`~A39%h7M2-ST1o&IK)@u$7KOXaaBT^sn&*s7ZV7lgV;~;Mc9~`2PD}zUZ%?aSd*I*NBh@@3TMRBQXAVS{Af-m+ybk<QsI*=gz<KneQ>F8!fB8(1G##?&}zHZ?nVA|4`lN^A<O*Z`a5Nn*A$&3m4D96>EfIFYCux^(}^V{q1*9ggF6!mCn0ZEd*hptYA_<Rpuq}b9dzgx+ouVVZo#^!ez4wkmuj>VaZ)b7Ib5{!Jqj2ZR7sVv0L8H!2;u+_z!u}f=2$u$M?uL_SKj7Wslm(eB_J!3eThSxL$SEN;-NOKG3wC8DD*XU+IeL56+2l2GQT{QGejy`+MYj`w|1Sk@rat72kQ`DW7vkKy7^THG)=jx_WTV!dGAAH+(%h=ZouVZN&cuS0eED*+}I2;gj!F!u@T$hq+2$@$}%ls^x(Cg2?%O&<{W-)S9m`L;Nh1fk!b)KEN;b%y)b|I*;u8JnPT%)EkNa=mGvaJ^sH7AAGQ0kIt?6HtzTRM8CItbPkH7>reSqItM}qqyzj<^L5Z?q4dxf|GEEf^zi7swnub3c;E2%SqMDjJO75K2j{^(#FO!Vh^MdPCjZ;@`HsH_=hFQ@<~#pJ$M%DLCiu?x=N_D^^nHGh&X+>ozwX=rHoyG;2H!FN1s{*j@B2Q_2Yk^+!K)$YVvyHAY_<RSzQvy&exNUX%~AXYpYibgpMV?7qx&e=@?ZN4AN99?H6F@ylb=0#t`Pmy$@hKLKFTQ(?Y=(OJ$SA*)8Wt;NM8T=^4NIJ(0BMB?7L6;qfr>&?3KSi-}`&{Pkd09_VMJ~d|n^q`hMCEhcEQ<>GK_r$N$8i#2gF>&s_gzoP27hf3ZQ}VBGwO3Y59P_E%eS{0^?xWU#*D>A`t&_MP4x*W|`*0oq>^+3(kVxO%{E{(jFdsLfchw{P$Xe8<P|fL?yXd2uG_vvRo9Kl?{NeSq?rIX}khBl!IX?~42df4TUQQ*HcXF7?+O;XmYxf5*T1;9StZ@b4X-b^0Cd2YCPD&wY6o2GG}b!2|mL?8nu^KhIFC_sgI@oR>ZAACC8cPybKG6a3@xc%CqRjfLDN(VyEt*e4?$a2ac#L@%{5mmx77thJ&{u+!Lx;dy%M50rXt#?G8tc^Rnr#wYUKb@zg`o<&wMp%tKnom{R78x{rzqFkX?W8f%A0|y)vt$z!Z8Sx$9<u&(66%1?JTT(Tr+cw`2)r-lMzU|teCM3V$c6N<y4`MC1(G~2I*o(t!6Xo$LwPD%p*a@VQ(uvw2B8sP_B-qod2X|Kfx|V*p0=HXjrf4rEjg(@#g(b-}Yf81_c{|CIq@fO1`8u=~3^in$YC*>}c*TlmNAY0@W9s-VcJkKSr%ZKe1Um7|TWICWDCTZtL6g<)W!LumUECz7BSWM?U*N;uMIa7I;I0{VwszxXR(=q09^@GnDTM~^vTLH2CvG;0-|{kS@&l>qac$L8eAUl>mt2xbe&P*PxLT%bIex1iC_`#!0*1RLVU3rtTA5~7*6aBJWRn-fXn9I0H+(Cv#Xm+{I%A~i1kCHuJ`ap3*9`L0j_@)P<C7{;Bjp?-ZDyoxt+ECuDfAj2!Zd8kL&)+jV1eRa1C}}2IZ=8iuj<P#&g)1CJRI>3socR6eVVYGBo%Z5nw(RMS5d1bfqfD<b+2@i%)+>N5imz-mjkZk6~1~UZBNH7sjn!q7UZf%zw<n9XWYp(goCy(X;zo&7E<Cf>vk4~lY2=A9be^>&<q%DsGDB7>cfWkjXq-?HfV52A}bdd;}%gd@s)s~4&pVWXWu?mnS(F8eVHVa#zVxLQcF=&mK%8myQFJQ6nf>>1Qi!J+gayfXM5`{YiJUw^CgN>lgW2hy(6cKCU5DO>!wdY$sKp}LT3Fz|0|~<I1JRDNq8&YY?eDSs3M|vq1uOjT{04ZM&>VMWF}zqI91CeY>I)X{To#=My#xt2wrY+`<H{5uS3mp%C)je?b(GkK+Wpr4Y%B&CPkDMmz<q9xm{LbKcJmc9+B!PKBdgJ`X(fe6;U$F6xE|jp>A!le{6gvnrCEJ!J%j$Zzts?n*cAZGnKa4g*ClGm8lw40CTI1BZVI_t>61f83^2WA#-Qj7%<YFLsnrEDPHQ^c)yJs1-1E%(H>G|QL`8f$<@8))T_jrR-|n@RJj9cy;H90i*=-2b~UK5rd(*-yo9iSp&C4*$WvIWMr+GErPjj3gqk}@2VZRzzXB|E$R)Yzmyl9}D{90ekI_n3QN3`u;x4jEneAE-?drT=$G8{m%5B{o^BByNE4gkVbos=q87x6m;Ul+$VB3HoV)-=D#F#2a+XjohD)>oV3{>EVIlULz0yi;DvId^TdXUsU)oZKlG71wPX0xEdE85P?$i&em!t(^e7r#L>5+hCUpg4tz*iSvDroe{@4ha*uxB`P#@Fmg6g+fktkyk|%fv2XN;HF{B!LNknl#z2363@t^V84spsUPtn6+Btcsm+|AlP5o8Xq^Lc+R!FA2hd$4ouD7BkCUh#{Fr;#%EPGf4qMHerZh0<q=BrS#Z>UV%$`+I6}*%Bd=z{crUJKFOkb1Qx)K(g1&80GYj6l--sLPP1x~}HE!|{--*ydD`4#i92~<Q*^UP8!q@goas6k=@x_0uo)`VN_ya}7e_Nn(ul(VsG=z+%NYh<5KsG?*?f@5GUI>9&Jw(X4J3OFGVe3c$%nbTJ}o8hQShR8abh!l%$rIK9(M9bXYS^Y6pn<aDdHL=f^kOgi^`e^IWn%Szlb@(w8(q+faMxY6}8+;-ZQmzG@G?^CF_yslnf!WaTO(0LMb_41v0_IfAFOlbNY&)^H%|@QF^^!I)%~Y|2m^zOHeGm;Bxb}p#F<e8^AGg*b74lBtUC<Zvl5NYe;Cn>yAwLnkOzh)GU`s<vFWRY)OnMrU8NhW<a_#I1o@$5na3v&@^Q4l0MO|}1Q7{$weM=*5kO(G8m7jc7@GF~EzOBCQoM7-Z?{!N!%_22jB78aA{Kubo)s4UOQ=*j-A>LbR_wqa&BkI6$&4PJoLrmLT?EkZ~wgum?xW|=3BXxNU?4aL9`k6b2v*7g(Z_n>JJ9$Z6&Pa#fqo%iskTXb8CkZKq1evj|1NOUidX8Fp43*{uvxU87vnrXCr(MH^?9BH<*O=1^t5jeGvEu?&>PDV{B=)(KgD#`wEaWmH3dfP%;J{SX4PEzocc0tK7@wXSLX+^j{u)(^Hb=J@wm!Ze)?7zE&Y~1JLBDI`)Pj)vRcQw??HIK#m?o1<v3osUj`>=<s-)B^(bmdIs#y~{$<Es@50d)i(1r^g;l!xmuc_j7ISnwq>T2NhuiWY#r0_aZ8o@U$WkcLW&>ax7@hq<)-N7K(vHWEd>x+C|8@F{aZ)YU5@R-JZqlvjQnoMcOqd=a~qlx{bLP77-LGUa$w@!1*hG(pmcJ5Hd+TIFlT5cjbUs~syHkf5JxKLXa`ipmtA}DB%?xPOczKVpLZPtD*^_u|iDz(~>ndr|Nuu|ILgicxKS&7h9Hf$^LRQa`PrxPM|iwjlxOQs0@rzi=HJT05Ji`_}cVF*~L@}8(U36!8jjfWFTCq4`+++la5f66Is@(4F*f@Ii1zVxr;G_z()T+aw)=PIhHO_lSU5M_ZY^(yILN9i6nzzrK3r7C4Ri))d?ad1_%4dHVE`js-F(^=)3ve_%6+{JC<XAr(_XtoF@2bT&So;v~FkQceeqmC@+5DC7Uss3VX)a0*s|44HZx{g=}2qUsshIAox-9XOdnJSRs{9p+vr+ILQvG_{}W1qqWj4VM2M6i7o0Bm6|s-II`fNau$N5tDiaA62i_OZBTSiym_;5BI%Q=!MAJPr<8!Hqn|g7^GNL34j!eQ{XIcm856P_r(0&*VFXEiJjsp;DT4tOS0f1`vzyxkmR%=e_5Xpb^jc+X-m4&Ek#6`Ezc=z0mim;PcNy9}dJER(T6AvE~iD0VK4<m>nI){EGYl6Ycz-X`}~>gO|&>!o_u@&7$9LZTOa|i<|CU@M97;?|CftR`(aokjK2)cJdl81ut&0#Q`OneD|?=6I!c$N8l=8I&K|*G&ldsY5aIbjCPp#TK`Vs)$+F;qdV(~)VE|#qXk~{Fjuh6ix&l3jS8%$uwHWuZz;S~*a|yhh3zR=k@4lub&HHA!4rK(3>lCeYw>-nd&-#e=MW<rHfO<0j(Ve;@)>at=`!+coU#7Xy4UDlOSS_eeW75;=|PU+S_e~(0hQy}Ue@w@Gz7`*d5@3%j5WH~V?XJqejIm%6;AvS*0C1fcjyiev`kWL6wz>|H~u&VMFAV{IfX%ojVkVOeWH)|G8A0K@nCIc!$uf@V4`<uyk~V}gjv>$`*%53J_Nt?pJdFL$GS8c0R;AwC7%^`?*KMvyqDeX>43<<uT0RU0eBYetS86|nO_GwzzVn+@j!bZ^Bk-rOp92;cm%|^Wjm~M2xJbXJwRM+WxFLHnJr<75T{_w%S`M{-^w)#Kxf%wpNOBqyM(ilZ+FRd0BA=?!nxD=5y*Lqd)wQ+iLNQ*Ju$!2?OtYXk-VqlZSgGVN1lIOrV6kQg02p#tbyK71VuGbg&gY_wv?Yl6iV9(+O|Il?M#$)8${y>S+QUXaZE%(mb3l0{^Ynh9_daep)S{StmXGGMB{f^kMM=XM)pV7fu6-DD~cCL6bmN-5=BRe*bi2(Ut0KztWfTOO6-9OSw=UuldatxVWA|IJsHP-Bl?)<+7LA6xyo98uShX|m-RR{8CL(d`uKl>kFCJRR^Veh(rf}EB*z46y?z?^P+mZE%k6ayGUoCERcxAZU(v!ljrZ)Su^sb$0n<C(kaU^r@I2lF-et@c9&2>3<ygqb(Mr;?CeQAYZJr13JnnNRF|yk}75Ch6zo7!#U?ca(VA0#&p}@KAt4QnuAd}U^J*1EO!vW-J+*d@WbMP$sv@*CGVr9G+AIE!W;MTYYti+DdxOaA-c^dZzE_gBS9m};7w3U5UpgW9vZa46!+n)37=UY1fx~YAexAzms`HJ~H4_jr7Npw%+J&Wj$TrU|MW+xpl1F;H%2A6^cmm^PBMn2}j>Bz@y^|l6MExvQ~H@<Ic3mUzyNB$%3c{d(coAGU(!??Jue_Y(wU)1CJ$HV5I=!w=iC9qdmkM;-qWEDYxieObL7sEj|xnfa>C_#RrEIxtfEQc&R3H|8=X1f#E>=sZIEQ*evH+p5EnXVszy$BQCEJGRwdQKOXFqM!fAWZ_=ZATt#0W`=x01i4q<J?pEKGe7lPj~v$*Yvh;WUbulrH)U9WgL{L0??a+j_;~23mVh`{Zb0_>zz~x(`USa6%hpk*bz~XC<)MC0<jm!=47ol3nYt$g3JmRt`$D1t^#SNkn=&c&IbkIUe$50i1MT(B=|7UK(XtFx73)`L8oh;nG|sEY-KJ84NvaMIq56sMQ>gO9}KK5UMkN-l+dl8ktm6CiI54di3yxr8&9kYMq*9SK`D+0ML!-iFx@NqkZJmW<-5;~n2!@ZV`x@Hl+d_VNR-?J+t@TVp=qp}FtGepjzrN#DOQ#zj5MG+3dXJqu&Wd&SJ6-I1Px3bhDs@hsweN*G)*E366FSuSg$~=*IKOCI&fD4SE3XfDR&j{G*fUgSAi({(=T~mjyd8)XHC2>jFS~F7f2Sg3Nqv`T;%^Msi3v1f`KX2K2y1u=|8t2_cn%TV~FRCr_dVl|75tjSav6JJ-;AxD>{I+Jm*f)(e_XIPv(cb^SR9be~|z5HCOB5J8NI^y1(RwJUnCSYd#CtANci`gZVI?*nP?4{F>kM@b^0Y6yN@Q#@2VZ9{gU|_wgRROJ0Nd;Px`FetG<mD)1ma|0sWKfd7hD;{jeDt<TrI`)~a`h&%kR`gss%`QP;OC~xTdx;%)(Er<0ZdI1g!J~jTnew+XBE@o{#%xBsitq1SBe1BK+3;f^_y+6!5=|HD^d)M-Ne~-@ek>{2^_<bBy%Xb|A@ywtHd5@Vs=4g5{9&LPm-{G$~;5m5u{`)%*e^2qR_$3gQ@G}aL&ZehlVN-p@JN(D<QE?3>idF0I4R*t~ygLqd{}eAA<8WWcd-OYu-{Xbwd%Fkw@k{*fAKu6i^Gt^azvC$5g};o4<NaG)^Iygj{OJ$l&67v#;5@*~U+b_33jA^=)z<?_K7MlW`AxFNaLk&AaQsso`hN_^=OFbT;<cBDaQqWpmW%%(9MgY?L&kA!{v;Gar2p~rr#S9-{_k_t^)BgvjHg~x75f|}1MT{G*z^}>oxI%6uGCsMyY>vyTDtY+??TYIP==>Op+-d9DU-izp&Tw-vq>?{E`9`#0rQ4!*JBi^XL)u!>6!|WV9M*MMkd^d+6E`>^pbYvkgD`@J5%Jvr7UoEacOKJ<ZD<=qP9E+bv?+l@Tq;SSX9Olg)jUn<BGYGn&6m{hT&^D-E}}=RKJjhTY216dF62$l^ugkOEp?YlV-+h9OsnxxdYQg&6fdn2Tp2D{)Rx-QId4Mvu5WgkG+)BV1jD?;?pK#FkeR6*<fAswx)@iO@ckM%4K?W7ePGYB4WfHQWNv=>a|hDk4W>cq1|Al<t?`Y2e;*P3j;5$i!-SgN74rMHb&>|<S>M+cQSVNa<cFOtE@;pd#7r@Cd$e1Yjq>zY`!v`ZcVVy?b)0BJu6C@2(z=z>{*&j;3=ehy@lR>tL6t<0X5a|3bAD2S865wp9E43x76J=bed`>7AayKtTU#S8f<7ovKP4srZ9B4yJd@`z=fT}UXoEu{)oq(R{oTBU>4NPJhbzgXy-j+-djdyZDy%8BKe$B-enrDv2vWIcHSfkJaNcL3Y(PG{uQ;yfwa~IYaT^cj&}Q!QbqoT0v@(4wzs6T1uous4CHT1%m|}<Kk`mHJ0AkI3H^yDOa?X5_JE~zZqp9W0?pfq^$F58x04E8658}!TQCMoFREw9bRuZH;W3ZsG1YPpTgjESa2~*Z&YZv_ZH_1`oo#!5OPe6YO-_Q?n+NLQN;GIB#9Of@xrSCh-#U4kLiu}R`H{BXYFlyaU)9sDD*ZL3>CS{pUzPDZ&hmN@(byj{N-IIHm{GdoP8mhid!=#CcJ*vcx}K7XmXyu>tbx{s92R6=gKT`+!A#c>Dt@iZb{#o$lRANY-U}M3(<XOmguA>62vrL;>JC$G&zv>kPNwDiyv}>vp&`&Lm8$wIkLlZP5B#K|UeuHbH~4L9pTdar1~tnggUJkc)DKl?ZenYJ_qB0@0bKffT$)7EtK2tvt5%6Nn-BuKObr669n>T~T(}LLi12Hs%=SLX&$vkjc{n^(>e<erFT1)7b1GVp*(<ji4_AN*+E-Y6PKeS_KB0tJ`F?BRm%Qos^y;d_>EBqph$745sPR%}236QDj-h&(iTh{V4ws}pzp=*BHguc%5Kif}S!ND@PgL+G*5b$&FWS+3EykUP8eYqI$Jz-jnHRt;PJFW|8O@C~3sk@6bJsd+l$_UT1J=|!9|P(g!Wt4P#-dGWr`EYAalKeasv-B4V2UlSpu3}FnyNk9)?AD184e;f+>ml^Tjwi{avPJ<p=|MrDGzb&`KW>ZCUzItITR73)VF3Hv2!B$&z@9xiB)_RxL{P_)5!L4W-8}R<Xv9J_aa3b`%D9CIwLleF~2LR_%eX#B6ueYEY2dk$J|tx8|uxMkk+Atm#NTxxm}(Tg@<W-YBCzMsA_P=Jjd_wbm!;_W7!pHC%hqX>Oy|Tlb$iBc}c`NVMVq0wcMwb*DyvqpC*dngKMsx4{{HXh9)~l@WlpBe9L2NYjL4eA5ut5u3=0eop5^*g#xF7*E4L*W~A~cuBcB5_pu5EFY*^GtZ_D4KxPUp8bnI(#fk@rLbL!bLQJ3)l9`je-ts`K+xtD^dq-LsxZ8=>?^+orfJdUyLGZCMw-=Y}^+wZgqr6%E8fEi{P;eP;*KY4vy-xMpJEih0sizt1dNnv5{4v&XEzf>j9*A{<*{BkWw)b<*v*YcYh4To{YSeqP<893GrFF+2ZPhR5E_ku}q-HTR(F7c`)2JxCOR1jylIOUM@8e*2BEtT+@G3xfwN&fV&BwXGqkl+O!kh0$*3vh((VJ}aAu|2$Z?v9_?B<i)=$${_TTO1U3|TLJf0r6UoEXyY)v$4lBE6kq5T~~@3}ij}(YCiSWqtE|Bk7lI^QFu<H1O``=M-xE=;xF*k-v9pY;Qi*H@z;#n8D3ghsJw1pDd6m+PAnuGrh$XM7{X^UDou;6fo8bwptZftpfD!4l{Bl4u;)IaHtiw;tdgn=JC5a+B<}dbHs%=jPN-M$VPv&eBaI*@sSts=9_gAkQF076}>y$Vkd)Vj($Z8nSAsof?s-@jj)M(-OXQ%jCAxli*{`>#zE2|7;bS8%iP`OIM)>f<#-ti;OMUv_b?j$wJSjV(I-oFx*q+f))7WG|LF>loBvewiN<^O!6f>4??qSjn{Sm`w!lZ+p$fV59oz6KSjCkltt5DG)XB}KnhbEG-+Z?qy7{wHy}9|Ht>($N;r`}#9c$U9@D8`N6msIWmh%0yah+1+HMg~_4UR_q?DaMo@gv%`_c)cnlfD9I_M%ULy+G5y{Gfbcku*S}fR`+=f-FZt_WzOhhTW;^Y}e=y+8;KccGr&}1jG_0kOcA#h?Pn}T5VB({Yk*J_pW8FuKT&4cZ_r1;}}_46@erqS3<6N&6!%VPGMxlUg}y8&x_gNsSb_8PAm9g(j`CjdwDBucid{`aeG+M(;Au@J2`J`9?G<QVRKWa-FB(CtYH;6fA9Zke`*Msx`j+_cam@FC-d*U#qgJVi>ZC4B!lMjnmcrT3RT*yRsA|Wmz^jCEtzTyYoQ@->y}EEqo1uOt&|CnOtWN;tXzJdYqvD)`R)6-Z=h|kN{$mJj`I=86cW;eGDi-0!;bRL3@NqIsxM0<%M!`5M5iT;PNqy+08T})oG*jr1M#)6d)LkGUArYinv6S6(a6S6p-i9lPGjf<0S{#|Z)pdeR_%ArnTA-VTP)LddZw9r_KW?~vyYY_cvjRQxZgpKmtb8w4`wW%p*uHar~O%cZNKL+#0p++v4X!BU;Ah-o%B8?e4J<hE+*5x?bQu&%kz=g!Fz3t--tQ-ycaaO*LlB3H5!w+IF4yvkH#k5VT-MicV=d0$1%RkuQ4T~8X=!!I=+^F`5SwGqkEWd=IhrOjPLLF^gH((+gtp}{XS#pNB3yax9x8K-X5*m6aI|N_BxY)-T)ryM-O8$ESooLQLBr;cK_ZOQhVK>_Yg<+_%!EkZ}z@E&gfqLUAad0HoMhWEZ4X98`<Mx7Sg~yPu>{k%+9X>oyvv9{L6L6_7vZ&?bmkuzTb_+(y3U=G2T0?vE0H{G0g5a^&Z<xRC|D5em7PRGx{2{<!OsPR_4|GT>ej=pU29W6U|Y3rJs%Ar&t;LYd?7ZRjiD|EHal5XOSOgDyHbZU5lUZ881RJSuqu(a^D_fdxM|%ZZ(%%pU1)TXe_q+-93-v$nSj9D)z0~^S&?t_S=}KU$8jI@jv2I>h%WhwaLbOPxri+fA6(Zxj6id^Dj#;6rX?hrGC$&F>DXrZj|rQm(RH*W9?M_SMB76<ZUrxZ%oHjK7ohk+j{Ir=GmR|Wi9g0=j*!SH)Dv+KaR_h`P&RFZFSd=$9$%J?A_P)tNzRO8{ydMW3Lup#`9vt7kU?S_zU8&q5dQG$_(Xrrn8mWW4|BI{`WCazt{`!`{T>c_R{lmK4y2uVl)39KRyjN&mp;gUXNdVjBa@N?z#NL*VFr??%QGY%h)^rcl%FePc)Dp(OA7-e^qa34_-h0eq~bgryomu`t17{9iRDOwEah7N&hLw^Ju>uiP8QK`X#r&<9zv9jO1$P{-XDNE$4{OdbB<xzq_l?=a|*cpV9K)uWx(%xDKpIw>Vh8h|L{Y_bNMNk-%I<vvslS`AL<IGRkRr<PCYH7$!l(-<ftIc^q`OX^+T-A|%y3-s>ynABqxTg?K*YYCqF}i-?L-S{*Khx0_~~KKO?e#8>7xw$f13DbqOH3OEfL{|bRPQLkKQS4)dxxQw-F7kDI#KnX%zUIR^}kquXAeLm5qxD<7#ZTGwiad9PeIZKr$%(dv_Jeb!iJboE??aMk5FJZ;sxo82kIpQwYDFrH)W*TF^WP-=a*Ap1aSzgcA89jFq<p6o;H3wV-0H%Bb8%EJIXvza?EJ)+vqO|guCPXT@y^e!3a@u83wbNn(aYUep>vO{su*WvEaeX>4>TAd#6IgRV2{;kKtYTs*pUgGYm>ySxA<U1E>X#_-mxX(N;Pt%1AkaerC)kBq9zzOU-J+sQ<?mk$UHBN6`y7-;;Gz;w;9~8zCz|ktU(pl0ihUSES3WO=F~_ogNY?F4v69bqx^1QQWrJ%#;Tsa7qkz5Tv@r0#e5X$9=AM;70_{+=1lLd=gU3wmJy+b08~(tqC5r^#$TGiWl|Yd#DoW3KR2?r-Q-VSRe&&>MR1w*}O1B*y^MuIf2kp%9XAtWz_zEeZvnF@Z2^o*m)Zix-6B6mEkvE`>L0QFh&=sIPP|*6+<w;ukUWVCA;FTFByNj%o4j0wp0r&cE>*BTNn|g2oaq_sNF`eouW$D&Y8t_)O24xe)!8}Y3huHRsy!Qs}fovh@gtZP+9bQSo)@#h(h|Q0YGy9P36L131hF0_3d+OgMw=Y%{8?!}Jfny;K6ReX(DoBuO=oHg)mVxqxVeqzz(|I~MOk>ZdnKSbUB`78gMhzm7RvD-gQ3Qe+)>{%+sS(qe59PhX3c0Z$51EdRSXdieoo#Mg$%di_4E&fFl}@hKLbhiL9nmqv7m#p&ogB^?4Xzn&7Z4LbD?bfMYxllI6*Eh~gowkLy2#J#;*781g$kxYf_zeOk-4X%>@Rkn079;MsbV&eAm^>aR)m0M04$no^ODeI7YXvjjB~8~nxqj~R-KnPUe33+UXxX27q0_{RS#V7Rz2<AwzNp>6q;=Fhr*C;Z=6YV)&1VTr85!=wBUq@fU+oZ(n%EifG22=>M~&jUIS;Ubm5o8tuE^X;tlaHt+Fpp@B2BET3<yPd&Sjbm#R2s8&c+wx{tZS=RL;G9Pag(RR}L_?~57YKz{h_901mVfU>6%gOY=4o2r<whZOj)WU|yzY*n;IX|9Qbv|%{Yc$_=nmFX=e*PV_UdCuOCndbYvVS7Ra4XYDQDT-9ga5@pM%q2Fdln-UTFKXS-z4m}zKMRd^fdsJW9;JcSz8BJlL0g4D?&fTw;)mc2YL2mW5tL))to)4yJcO8rm!OiRk@XE@KOsv0+LQeo2qNuj6xAgPu2xNIwt<8k0*?_nmah03bSYts?#mz$;AunBd8E$s5JAmu8dW~p+7>3l-xPv4flCOY+{gN^ql8(sIt8h4t{XX?P=CLY@JZ=KHAFnNJW`b#42U1NvTwWmL-sY<XPBUk@-;c#Cf>=h@s^VM>@lOXa+~<FJttd$x<UvLG%XDivQG8lqO{l9m6gTbk4RnVg(Kwrz!oqOB&{B=p*R?YG&uzG3)zFW*bxcR_(9HNBGt-SfPE`>bx}CGbJ)O6mhqeuP6PLp#WrYh1>V?%kZr|}TRD$#UDVV@YiZLiQOvz9VV$f~RXBW2>XUp9qC-~>wr(*^li)%Kdw>b_1E)OWntVV}8Po+RpnRVu%)=GSwzcpX<}Qp&V=MbmsQHUj_J1bF718`e+PQr}HJ$9)Tjrb{c1`C+tS@@~T;n8IVm;@^?3ugsPK}p9usRaRjf9T^n;dh2K8WA|>g)p>Aiz4vlvX*OtOo7ZqeZtdJVy0N-rvVL_V;V$=ikdYOOE5LX)`MLJEUC2HHKK@i!8PRmasIar2X(pzo>X8%cn;))R4|8YvkO$2T2Y9;FJWBA(jx&HRgr}1!P_9twTglUZ@?exl{IWsEDwJ62C*zJZ%A=;%ZLT-tLUu6TuF7Cl!o~O3V-u)37=i7(aFaVe8mv<)mdfBx!Y`iMLQ%epqp&o<9UE;sj;e3NFK{>H<oZ)D?@Zw8arVFIj`wnw}n3PIo34PEplDoE*ALFgLzhB->j)p}e62o&yKbRBv_JFBAr*+u*aZEl;GHt!R}_aCPh=<GdhlOKC*{Ro=8Z2bfOhd8}#b*~Ee!rG0c6@h5V;9oGb{NG(e#*h03e8gJExg!8C5>|!}9z^bj$UPRm2oaU~N<s5O6^`~+T62&$`xvhH}DpYLWi?qX2rnMJLsxAl2h$kfpuU10{X^?;-un|Ri+r=(IIMz3t#CljeXIu6SY1@darUmA-4@8Y+jcKxP#xZ~wf=@2T`ZAKa?3)bjOCq10o!cm6x{pI?FX&#=)ttZtX&5NoElID+Ze>`1!<w`Ya-Kzd3kSye5?9Pc&e_E{oo{2^QSHLyIwRbZ1y*tXiL4uDX+&F)C(`CrFv$qi0<RkEkPVgnIz>&3*0yPo8f;>9o;xE&&24Oiom@-RRQU37gIM)-sOEK-6S)T2M2(N6y|zdNHUS|jPMz>t_BSI{=UvsaD+Dk$F`fsDswiG=S~p<+oW;mTjn95)Sx5VFpVhPJ55Kna)vx^|pV#F$@FNeLv2Vlt*9(uqgC8g4$X#*F=u8;9bAMf4p*C=xOS;c{T|PXq(n2t2owOr<?m;U%Ov-E2@HC%1_3u@^_O@<4Y~3?edOrEY(hH@5ThA{!1zI0RceUQ)$~Tl3dbr-;Bfse_$vLL=3j+{%I>@=@+!n6?A<I`K1{WM25TE$1(*GG^`p`4)x!aZ2qCD<B_4`As@Hw-Lzct`5=f3<;gO<;6Xp3H$z<culnRBgckH!0{XRu84d6K!{O5OJIsD1++OZ~pbxA&a6)8vJ|2ier}46|78yg&GAWll77c+;)J+gtJ$x%(!RDRs(dY5jpWKrV`W?ri*1xba^#=Z)+`DE8=yG*~8*y2@v6y{dSP-oF|GF!)y;3-!KIvqghHUFF&>@0n90^NHK%HHmsnf!WULWBf?j$CvfF{NCMp#Smu}7Q5&3E!S>&f1RRx=8hF1s}0>I%=i|Xhw$V)hx70`eAH68w0_jEnCp(1YgYM(hRQ#5nNPw;a_0+#3sn}dwBkO-#PUt7^}gUJ1aOFFvetv2U*+K~m+cG8#SoWbg{DaRbFk@Cd5&!&D>2{k#+mi;7atlzoo=B{3+HFuoS!vwc9CUCYilc>pJaI*|ER^{q}$@u$3^YH;&yNQc5nN3Z@d5AoIB=8+c;BU?7fWeRzGNqLTOAq=+^Y%9PY!2exT63Vwpl<Opr`iCX!DQ!kfSPSVXfr40wPJJPmk&!iokTd1Q(qmXfI$tv>E^x!CscYAPn-(AQTUdl+KHrVC{DKL4#*57>)j=kJF&9@Cb`l+S-<>O*W7?x5b|2%Lk>hqy1<E7Ktc(*%<NV_;gm>yLG2QrLe#yQ_S5d-?44tEt1y&3f+0)cd7vGklysnwn?tA58RtrHz^5-nX6nsrnHKhqybHtFqc=RrPh0&n+G5Q7s1ShkT}W_v4u!hc=&m3>p|J4~P8F`|V$prqusZOc47!CJ34w%^e)UP^RTm1Ra@nk?YI;vhV{<PGq{JlD~d&Hry%S({Sdzi^an-oNF7G?e;IpAHlP1OFR7JuU~11Kk1fAR-m7)SSw`$DAACW%I{K5rU?r2+F7Fw3+F9<i=4|}p-dc{AJSq59)+j0Qsk<`^tfvoyw?d?lnZO4`s>{8<6ir`w@VHQdqO2fcJcX^Yq$LV`<-h&^kX`bV>*&!TBbCHMT+N3nJk{3Oqn}rD!)(XrcCnxe_;G~Je`~NSPj=0a4UV@seEcb?uNXNY3|_U77J`|hnVIM#Xr}_G<WcEh(SKhhZtm)tNwg+;;t_<!De4(m20>B$M+mqmlU@k5Y8ox;SRg4CfgpZ<?HW8w^Tx*ewJ-s$^=yW7s};#xh9igg;^u}i7)$!EBlE`z}Y9j`7@F!q+}Ax90BkbmPuORztsPCj+GJFZc1x5k+x8!5Wymh=1Z9@xtuX&?u7Id%4Eu<{{J`5!O{?0=oVXOJAI*<`r-#pWD<6A`JZvwCq+DW3JgP)<g0`e;8Q4*Dbr42PJV@%kk?rG@$wwJI9J)<H-E>#{U){}(85mI&raIUA^if|A+I~cyP}g5qj{)O5Wymd<+b8D2@?*&WR7HVf)s`_nKH>b$ou(l8TczA$Js2^BEs|qVH!A<I`v;w|H@53dt2ZJ78x*Sdy^Esy+}+TZAqbgiE<KnlGC|Wn566NtUR{uZHGEG%#rY>n*(pUIVwM+(CKZ;qoek<zr&H-@Ame4rvr}U55>9tdpMF_v!>Sv`&L_E{xv48Tl}7`-2XjzlCR|&^NV%PXiOh17SCbm{|@e=cq^5^<(}jAzP{dX;ZH{KAkj}axW9W2V_dkM^%H!_UHLovKh=!6FOTvYIrp@*|N4yLPA1>B;~1_+alMY>ITrW0j7f+;UC;VP$IvYntb-5gIX#Ey{f{P0KAk_-AKuTu(;tH0!Uv7wk^ZOsVFaJ^|NZ_j7AyIm^oR7*^?sv2eA~{}$a%lnKA(;DZ?sQcINP13@F7mV50w6N_UQ_}{xq9gN%&d9>uWor-{rWaY93NtwL9{@=yj;cA66p!UuR8Cy;AQgkMdolRCt*0?DiN3{b)UDVg0D5x~}&<9<cnTzVT0RQe<>KsQ<Y?U)*y!-#`CREd}T6??z%l`}ycgjP~5xsTkR8=ln;0)*msle7^8Hk1sxV^?%36T3`L%>{otolTNL@%^%e+!_Q0fv)I30v*h#I#y!yQ&SOebO!haW_2pJmrAMO}c+9vt9LQdrXqC>22`@v!Uol2aAP_-UaAbA6rUE7TmB6hK83f>CL(@4t9a8G>S%`tP1??IOxCk4oh14fO?N13ky%p`?i#vc+@su65ZrP-QpMoTqGR+qh@b#KHXD&}hdYkcv#i;?>xLRskOtOG*!tAn34fqyZt%%X{Q);jiF*=RYQx;6bTi6Jse5<5EYuH#-TDNJ8{Z%mmS*#PEIW5fvTw~qTXw4@P_T8ACJ-%lZ6lEGw&}?0B4H}Dbn^X~=tG)1OTh06&mnm(m1FM&cFZLK4Co2Y`S*uu{1UxvPOtyqsMN$SaK~1XmT4VAMfZ&Yua2B~@Miclh?`IVr*rOQ67{jKJ?TIw~n7ge`_kIFnQg4MX>#O#JQ{~f1sa?*v1D>|dd0l|O2rJkYhJOfZHr=|XlTntKX#62}*=wL5bfPbHlC&$@z@z}=1nbkKC$WQv9jVy~YHU&%t$My!oUkTx(F-xAI<ZapA_tPK$1xO%iotpdL@)~{;W@2XLIsPqF=yQNX>PLvr+yh4{(?B#EKNWXXtPP~%wC{7y~Z^^A}-4g*bF*gvUT9P5bzXMpv`2T2<mc5>1nOXo@2hrZSb1viZAq_Z=1uF3YaiLAl#P^E&!9DKFq=d)v3{Xv|^>~4I&q4kzb2>%3I|>^9W(dHb(nE<B-%<7g01NI&et?*HKaeI4P^b5e)BpznC7;;1X0i$tEz0uvo%6oD`l_g&MyyLo|WmmqZutI<ew(Pu>IK*SQT}aIHIW?H`dQ^vFHY*dt5kGB2*>v(@9Q1HSSX9WZU*Xf;by&9?*3FLO{#)}+;AO+26pi{y3v)TpjS<xh$UVg!_SZj-K1e76|vgPKD|U_!34ED7JIwYY`?UAGjRi4NDqJ)hH>zvtC#pWDdC6|ZEjBXOAIB$)9;#pdd=f3Z~ncv%o$u1TpE_`JyI$%<<JL<sO$v(s~rvo+aiaf6Nwi-*W2tH6+BOhaC73!wOaGYy8}KJ7RK6QuKFFloyOb1x)pzr}2y)q1z4`iv#*0pr7kHRYwSea5f8$DMgs)cz@_?LMIL`8a6@8;Di>Z+`U`xr?sI@V)TL7F+jB7=~V0pEDIp7dvH#Yxu$Rc7yd&mc87k8ee9We=dw!$pCNS3LGd!HPU8BHeq@yM7x%4vWcPMf%N29xw5_96t6>ES05tlwM)`~6R((ETwxgjIUeMg<OF%hm>(%^UuoSYnT@a8O4=AXmgU$BQvGnIz<LWQ2e>*VYnzmT%`z;rsDei*+G9u@#apRwODkoGScFvCL97|f(3BtVNW8<6IN?Q(QBB&=7EG3Z^mE9|P(FW%gX=A~QL-Sy5X1t4MB`CNtfl<>S&pR`#i{lwb`Bm$qR*d`E3ruI!^BX!bmd2?c&HPo{qQwJ+Nlhjxt)tmwwUz${!g6plqSIYq0zXl4thpJo6ir)*K5L$oa&;eVVlzH58uIp0zb@Xb&V#Ub&gMif4vWeFWv?nu=nA+9<*B=2d+hP0%wKNgiOkoFDl<CEwOclmKdPsF1g729&^QKc<lLYvc*3>hUd&6Gg-f5Mxn?XX~7KCrW17YJuF{``wZnd_xFD4C+?!_*Q&b_9cATrsF@yKWPiH!XtU*^_dE2V`n}&FeA?mKiBiiqEVZy`)czz|&BC{x^TC~qyIakj_~{hJPX{ZQAcyLxIBCdv*DdG$6h=CQ<{ue!^o)lxk#4Krl)Zy>+jBpgWZ)+(LO}ZcS^Ksp)92wWSJeWkdHOf^;PS>j7~HrAgMKeC+QDex(~`Y*i0fLJ#t_#fkKN+BZt-t@9^Uf)9tX4Ef1b4}-s{m!)y9xL3y(W3Jih4W@#Rs4MJ9)Z;z??7BwT2|CeSGp9?C?jT-DE=TG3EHVd84oV-JBp)I(nlz5tbnw_JUHev<Xey$8J17Q)sd%h4B>b1|FH)t`_|SSD%G_93MSVa*e!$p#TG#xfD!^zm|!Cf@aX;Zf-0!57e3WZ3VYm}Ky8$hG&aO;5?c?)fC|8OVDE8nBpVoiYubGF|36Iqx(VoOC*y=`MKC$oVfFod43S_EFw&;ZCNOd=?8QnJN%xXnkPUG^aufwOTGmYT0Ja|7C4fELS+y7OkU20O$(<E>;tIV1s1BGAS2zNb8)i$p+IVMkGnFOrbl;xwlvdx8G+!k-lCFf9UId-q$m^)iW7<R7!sA>E@Ri;ybg>H-<gP>4Fcw4rVsHzN|F#r?>W*$=ox~r-%N!XYgRQru)Zcuge#gV9<dkMc?=TozJzUEhhps&Rj5XeA@cJ@u_n4_ks-j>neZz5A&N|xINsn|G(@nyR_G+CeFezcWZ$oKC}^pLz}cWzg>It<B=gAw9i#t(ZF|TK{WVx1TqghcWQ<!5&p}^xZ15W^mx^+$LqV|#j~$SCM;8EUnilx{|j06gNfcTy!rha4WWZ>p@ZhOou2SNdk(_TkB7M2oi*^;$@f|^#3kD*ra2t)`R(tWlXsSEa_6*5z4q~`-n}!Mb?_xLmR4FCL;U7jv^f72F3t}-Khvg1=MAl{e`1-U<^Io5CbiGrS)IJjhvLckvZw5U{u$zU67HV%=8L~LbgLKhb-6g~<YW|B7TWY$yUrx&_YJzT^-QPA&7jH`)#1r}tc2$rT=VhZT3G&Ve37Xcgpzv??z-O-5=!qexdRp7$9%Zq$lmf0+{N!+54rjI9dv9DY;hNhbf>RanWH*cpX<WR5j~~VPxPRg(Ep}>qcJV_<+4V~^%FhD5uUgE@{j5#-j~ZC-9!H^y}i*rlY3sW`}?iN_DmKJUGS4V6G!Q2e$fNF=T{qzEgSjWXlxlBi!HPI*s|=7Eb!Ck7qMlHW~<nb&wDMOV#^j^p4Zr(-#@WsR=#rsIO(i|`I%?x)8}VC9}t);1lH(un8t3er($j83k4R1hAMQ$n%GA!U&!~4Fx9~cx@W=VJ4mQW6Qnr!Np+zvUorXiNSiXr0C<w`H4kgR77<{pTybt-p0EjjVHzOvo!lmSI70?_CD(99jMGa*eK)LTL14@GXkGE;bX}$&3^L&;uysvg=(CA<4P!RN&TNGz^4&;jkcjXSdGg)I06#dEI=mMNjY(VJ*-Lzd%gmTHTS~6vYR<McSju&A%N+2wtp&^+sDM##xezb14sV6QC$j$UF>Zq#z$_pz3q{c76v}tB)3GqhR=)GwtRgd}>9n}|8HvTae0QJ7_uffS7hNhBK7^!aZkOd6@Cs7?w#7n3j(?1s^vYZk%l{t&1D3K~W~7quzK(cRdr8^ennWVF7LM+)2~t?fMedxnK(qi~`GQ}qI^E0n;=N8cvH#$Jop#gz*~CfNkXU|?PY;<3-xYQ<HD-Q_Pib0Br-9=ux|&H8TTP)0M2w@(=&4iKLr%{t9{UOpkFY2Ynd`S`A|}w~2BRWb$KoT1t-WlsB-}%|rU1$J?=_a^rFHo(uW#fo@gt2)xz`>egCy9{v?$hH^{xk#$_QgIMVfYHI-V0-z60(`9PWLmFz`H{topdMAJ}x+cSK}cvQL>8ibcYcV!{-*QIqYpFK37XO!Pwaogkvf&7D~nxGjrCd5Nm9Ta#8(dNI*n_tpJlPrQeTm=;*mnT8c-)M9wo#ES1e-XuZ0nA~)Q%i+DT-|2)0im<+kD)IMwWulc9mh0R^Yd17m^>D3EI5uxJ8@?MfwR`Bu-}o=|3(Qy05AM(W?(K7;%^XHyz_fB&>>ibk>U!>!hyMSvjAfn8vEwm?0pg{GW-q!md(lF)pZ(;$YAfHXw(`Ad+w+e*i)dIQuFM<vd#E@r)EY@1V*{q^%m#n8%C%eGbE0IX;zXfjz<<c4c>jLH<Kg{C<!T*zu+yH4*xH+ufk&P0pfPZ*_ZXm_znBkv*3p3b>GS>`TXXa8d)(Iae84RAIqvzYX<sHQH*2l02j2Pb!&-N_$cOSq`44WF?#Ash_}x)4)B}Mwqz%f%VztY($kgP5S9`bRdM}<JnXpWuWB;YrQtNQ%DxA^kZ=4Z%MgZ(FQ11=3O_=d#*T1XcpfAtBZLEMPI|~h*GV2?^jmotlU&(8lj@jYp_c28;U37BZHuF%X<;!Mn%CrldXSs%#*Ljrl!aZN^PObZzpXpZj|9;l3_U_hcEAtnTmS1>sM`QGQU;Y>0pyHzN)n2^)*{Sq(y*IiJ>lXxay_9HQctc0A3`uA0P<g*Dd>rTT{XD;Bw{?Mvy|)@ozDV);mzY&ATz~p|%vWdK^AO+Hb7Z}?GC!{?KYc6>e5%jLdSujRcz@p!AOASFfm-L@a|e8OH~!4GzWT}f?p{ar>-FGREc4>7oBsR5t<UxQt=Pw2r~ER$&i?kfjrqjC)MMPo-0O6Y@+p7UE+f8HdA+Z{i^kUX&WOIOTHk-+ph)g~+h4Cg#)B*0uaployw`nI^~%4w9{mkI?h1^&Cq2uP+|`(F?q{Fr7)OYE_kMAIzcKELFa5w8)0^$`F$}?X_Z#D-{mSt$q8~ii)pwIByLw-~@mSqA>tT!|<h$oI#+C3WFEYZFpfpbk?>U6p^6tI-zTV5x_c-|VccbrduVe3Vj(U%itBKF!>C@*Idb)|`D*e^ZM)=cv9Qe}CixJ-He{+PG{@j|Gi~L1@w309FI>LSMi6g{&Hrbc<@W1B>S@Oj__s7`&fc)K;em3$u#S!u%zHkPNVb2tA@amiXKE{c_%=OV9;c}Aiv+t`O3vu7>Bjvn{F$cfEK8)5=F46AyS;pHf{LD-J&+~p$Sd;tuj&UE{aX|cvi=dJ>AK^B*aX?h<x9z<ev7d*#dVczN_xoGj2p87a{zYiNEw-bv`eW_#^u0duFWbc$<>KhMEbhnI>3fcm&r{#s`LbRk_Fi#7ytQNZd;dRnzt$SFBOkxS-WZ|%9P;;PZ^VAtzubq~@x^Ce?}PP=LFI*)Pk)c=ufL-)J8F;2Z~v4-8|y#8_uMMK<oJO9gY|UJ^>R4Z&t|l9@87Zh_4&H)=s9V;VmH&)-`%$#FI@4RU*mockEgNjM_b~TR1{a#z-xe&j^J!T>+?Rnq7!k?Dc_3>V>k;%aOFZ&)JChYAsXGoBqiX5JHAVxydL1`8u*)S%*p^11`>(`Sww125W8oX8naVwoIiMd$|#2CP&n6shzIKMRql~B-Ioa!z~&ym^qV~1a@hM2YA&%JC}2k9f>oB76UBc{COlPK8rb3Qq?*mL8aQh24%Vk*ggIdH_s}MLj`<?@;EaRzjXDG}gX1)@lE6l<Y|@G_hEIX*H(azEq+2eJ$$P4SNfztP22YfB_Ukq-ttcrcaizz3<p&u)zodKL+j{bv$*LcN+k+KvF+rIw4pAjSREa8b&x?q14;iJ;1=~~1k0d6|)+HZATh4OZ(IaAc*h#xBAz7-!GOW1bdAQ`b?6wW-m?|qhX9}m4Cjy51<#|mZ4H|Id35lujXQ=YmIQ9k66{kGtNbOT<`-{wjAGA7=yjGgJe!K>70YNdR-m0I-(|o7=@n}n65(>~pHSF>P9Esaa=pMAh@%Ox%zXY|e5z4jLMHw>SF-lNH8?H1@)4~BS%$O~4#g4>)NnXQM96Ls8oR+eGk-`QqVeC&J@EcmA66wJ-qlKmdnB+6M78CRmJF<V(Q=J%o8fa&-t+~eB){EV8nt5$S9JmY{N6)Db0%J~#i9oX5mVxlamauXwI7R|qu~u~vXcvWhE>(YHYQIwPDLBv$8-ApeJVcIcBc-W45lW+YCEM5!wL(4%u2V;GNC2&fD<h(3FVy`*<_N*`@*Lx{E}v<N@Y&^to-p8hNTjoE;w!HDBNjlB%f3)sz})4v;x-8DvgF#S#H9R)_SONp2qFy~v6r6H8n!{gpV$>B{*#5`KMAo|BjfR$#~@SKrc?*Miq+rZLO$cii|oT#?P+IqNtE7t(UdQ;{TbRXr=%h}bs-7%KFKM+rWjvh!di&uep>NO?y3FbYKDwpmN()|8>nLOpSGC$A>L_t&y7qILF6DBPGrB9{UxiGQ;eC&2|L6M>0s^q6p%&KKp@8}$y^ogX~hwMPtZBe`Q*(c*jHM#l`Lz<b>0S)w2ZV@3WOim++dy@;l@tS98?7kbi+F6AO#+p$U4<LOzU&9tz^HTr<dXi-DnRxd7ne%kvHt}V_F|BjL2s)DXTRpX<W5OLSdZOI)pBNPjxFLdV0-l|Ak@R<#y3+Ytky6hP2i<=^kHkB`jtT1_3;Ud!|F`pSRdK=SI6vYkZaVL=ON|{bI6p<{bo;p)|AO3Av<`;*t|`l4q5<?FVEZ>N!3WHo<dl>$dVi@TAhhq?OM^f6Az|0kv4Bb$H2=-8Ivet=X)y-nO;sz0%Hh0IuX40t*bD^!w<xaDtfoTZcCpAO~WgG{>Can#YusF|3xdWTcFA-l_V_XI16GUlYX}LuayIgtOfB1qXr74b%`<>A)^$*%f#Zg<gSYe&&)FPDL9EG9jSqC;;pHYAJkR%q#z?0HWGf(jGPNBhcH5dgThb-KEE5dBO?_nqp1Q*tMFYSnFOx|I+k()<fM?Y`fB+-+E|O06+q_q)?l`5qjtfL2Py{V;)->Y5Xj#&aar5^Zcr}#YyY!y$gtzQ$PcEI!m!gc{OvToz4PKdQq~JeeH0F9YmPoKB-ztFkDF62_b=%w6W{VVHt6yjdW&>;++WzxF}3$mi>#<f8dZ031*)B{Yu)MD$saK@N~XT20j6417E}XOmGZ3+%R`rRTmWdT7lCU(fT^18(dzl!?jW@Z3EvEeOu2eY40Oc!)xUFP8e77%+_C3>^|1nK5Be7(ETQG=f^^znPLHeO7r&$0-}RtlcaOpbH5Cjs~h*rpr^bmaS;2fLf_5T-m2}tt4bQ-@*xti3w4pmxnLs43n6lB$@`t<99CkTgEbXz+!1F)b-Im_oO6Wi6X#}&{fvt;j<G5U)`P~GkqMiof;CyJX&Y%f9k9D@@!ZOiau&zDfwpFBl2%~^pMrXREn;nU<GHc7u2{+SK^7=YW#@55VzZ0n9LIDk4s7d{2rHAe9%6i)=eB-T=S4cX-uep*Y%be={z~X$m&!gW$9pWtU`_TUEAaV@lifU1+5@MOVvV0N7akE7F4Eyt+IL@e2x%`_BA?G*&W%e#SrgV^69_=j9-kvTTSksA>(jo_7~0aFb)jf=q@8Hto<7t#%8XLa6yCTIb*ONO2G%1-ENEj*QoTI|f*mrA2azkzVFDYblQ(JKr_zQ!P&qepZMM&ynd0iOlom;7ggP<+T_@EwBFv+hOxeUQBiq+WQ|KHEX-h?fjQNIAo^k;?W{47EF4q$$c}-Cvqtc@ZtEC;aq2r%(=PU}RJcm`;Aqtf(qLFb@oEr^}b+JjrrC)6;9tgK2v?=4L_EEOCn4B{<z2<`JOIyxE#pl3v_Cf^;wradkZQ#{#e9CdVLQNUPww2|MoQL%Ej4+^71bXa2#P)iyq3xi{0OdSTAFs%14|4u}p|uWDX@?@ikI;l2V|vhN0}>kJshqnrX{V-PbLeuHG}J{4g-=(S^%$@dPpm3-_(Ix=S*-Lhbb!zVYqCr&j>(1FWwn*_Yg`4LoWGXHXjjmXHdnT9<d7LN&QXC$NJJ~wt9~oT!?X}qL=plD!uEJ#`B209)-G4FZ^(6_kgJn<O7K#)1-Wt}=U@$HVJ+v|TCPv7h~^DBP*K{{@w>p8iwu;@P{{sQiA`h^ja<dy)}NP32SQ#0OS?tac)lXE>efK{g;5;E)`m1Ni>h;}G`fSm8b3X^hg?IR+)(%*f#)A%9hIbJK&~MLo{%8am1aiIF(hpir?GZ8qxuwa+fqDcm=floM9?*Xlh~Q7XERg!7fa_HkeaWU!*nd$i`Qp|xH^^n&?Z$I%f8cK9L~vJuT}XoodnF~ZY<Z*;e;&;tWEKRkz9@)x#q-}p3iY3T)7_pz)3MjSG~HGKMgB?5$fcu_@|&I?HvJtHz-Exy+J@N0J}MARG(xdo0Mr(afJ8ggzV8q-dEa1uDF#DHVQc|SuFcYkSZP?I-RF46)*OKPxNuXrw%+JH~jB(z^C?`5d+VNbvX`m)8L1FAG9v^gO7FKt$P3Dn;m?-??2bcco@zdaIx=$5BIBfhIRRC(7@>3y8}+w8nCdd${%pJvJM0G7^Dqs<yz&p`969d#^PVt+rRz6{5hGBx41sfin6nm^k(l1e$?EXj)u2{h3CVicZ**>Xc1}k1!*<+)M+6<>n1<<csZ1$_BmQ|Ue?)Z+<*K7yK9$QKbxN4cFuEZbr0tAOgkLxXXL(oVE5(yv^_1eH8*A2MPRw}46|GBoJ82?n1Cop_T?Gdm+c9x25jIO47%M<`k>q0=bg$A3)N;SS6D^bDL=GqQ*d0cA<jBC>j5M8WDJ<aJ`YvAzCRgwDs~IJyT$U0;1<j8$Adn3iwAvjm4~-nwd_1G=UUI#p~~mg=AbK1ok3Sz=IVPEDu1$iMApZRm*eBc%kgpJ<>-1|jvv<%yIw;Zkjm??qw-E&&-7G1Ro?4Og#4}NLUA204;9ymRa!UwZ9u2PxiathF?Rf~o+rh!9tZvum4~;yFT>pWTo?OR7yDM1L9fG9dL3r3$q{w&puwwk&Y-~ygMqifbm+j_5YmC4LFL*l?~#18i$8I?+%T5q4P#jj`o&oJ-*p8{H5+Zve%>jKc7=n)3*75f%VWYBv`@f*(N_8V$KPs2tq1o125-u}j&0AEl59}u#aN~rws&~ujx+RCmCtW~tM)^tzZ`UD!bQ|$A}mMosq{MRrXLNMgkV7jK9$0(2R#zp`9q(P$MWt=o9uqHN&2Hr>Y+{KHD3nKlx~p@oGF1>FZ*Z7O!(U4EZpM{-FnT`roC2n*1=8B#UYQyU99f6w_MHXc?@<)@A*1hMcokhJO-AR_Q&W>X>6-LaBz~I@50I~@Yo-F?)A5O9c>T~+VvYNaeA#6v?G^6n>z)?aBOBJ(_ZUEmh;bEo7)ZT=RuphGAEB<-eXRfH)wP3Tx|9l+sG0}S6wqQS<&ln%VWuKOs*Jr?trId?VumyxLMe1#8_5c^~Y>O>33_cT_4?@lk1K$J^uePHrG0WH2e>ATb`_y79Ic87so%fm*t<@V)>_GJyu`zSnx9f&R+3;L<?<?WJ;a#g}cyviJ>E3=0cUC_)yvtwCuTBp4#wTalzQ<I$ci1pL<X7-pJSR&g0JcH4SFYqp*A47L<e@2iD(OMt|J6PX4@co%}g)ooEgYZ=5E(8`sJ1#&xp$`}-gH4p^^z4b3V(Ie9z}Rl*p`RoZ+hla<oBgA*9aWXhz)?yR({*ua}iwow_pYgX|7J@?69H|~=^u}q;%>i^<jb*XQ4xy5LxyiobO`RDSMtFiKE5BMVaj3)y&ec*fv`(w|&-nyAT_v5h7)o-6HXBY#3n9g9^O=te&?_2&)9sZJa_!FxHfSmyF9LW??@FvUrA;0^O<^M>3v>TG`hGe_Rgd^E*v23?^ZpoJ&Q|7YmPO|Mz=8)da@AP-rO@Ako-zzPiKK+U_#d~@Be;+5y#+kUCoJXF`hi`D};Y;`$D7^Z&THyWu`Je^9*j2q2_)Y)jH}rO-DND!ncE)_}ztY?B=gJrV9DdPS)jn$#kLvh*$6GL>3I2P$CU1(z<SW+YdtL%_B;LHo&b<6@@{9Zz*BkMXDczYbzZ=o<=rKy8Se(!NEna8c^H_Yn{s`8>4cE+^edXsE!~83~o4)@4@(K1>r0;kGM*HV|zZt;<_1KMgr2gMy%)EP@pD*_t!w7xVuNmv7)<{47{(i~W{k~wEM((FDey*$Zb-q5Qas8Ur(S1$T%f{QkyTtd;X{7)4Se#J|8ekn$JWHSa#Uu6RqtEp#FT;qA%i?Ige#K4={6(E}xGVps&xrj@RM>>#_XwHtO@9WS{O!XHVuh{wqIWYg9{#P3?#fB0GX3`;Q9k2)oq=Eau50;R=hh^A{&bSpxnHj{GLF9Eb-C%Y{Nat2YlP40N4XT1rY;|?uR16rIxe3v1J7Z3kEt5P;Hcl-_y4iq$?{(o%?QuPVg!SGuSfBz9G^cw$JX4>ucO$S`}y^U)_ukopD_dD=PS&@=PvkLIxx~+zb!`W&+R#HCS&b1GC%$Y?Zm8?<LYM^13Jau*JETp{Y5>-^rlwdV<>)srBm3XpJH%+Ll@;96Z84e-<>b(HQulCS2T9N<NvYyHLbF9_xBsY7=6;8`3y8)ndIj;x3tfT!Jp{QRD7%)BiN&V$^plCg%*GOSN)hTzSHIVnf+V^nY2H@#1#EZzh$yqbNf49!vS-n_<sUtHi}i*0(Onu(~3;28O5^%O}HY4BpCAvslkl)aZ%<ByC)h^2m-=t=(Ky{@O`ehfJi$fnvPh_m$5sKS><bS;+LV$jkxiT$nekkp0AmEZX-Mc!343~W?~Is6*eMfqJ`9*yL1oMO0y%Z4(D9)^H;#w&~9ER&LLOKa_mgEu2>TQmtl=sZ1_>okSV7pFmMjpnXF5#Fa?=WOjD|R+!is{P=){uLQ(0F>n{Rb5L_1%x<^T1lZS$m7r2L2?vNwb4@NjC7x^Af(&~6sKDljN`df_Z7_&*Coi{`yQAo>ImWVjl{48+UKCiWF4$1?eejOU;Mcyb*`8K6a`%t*>C5nB9DLO=x8<yo+#hF+XVQ#E}@}`NWph;)kBQs_*FLKWYr?BFLhlI9GAg>w->!`FpQhc&g&7WX`M6Rb@T#-(;aZO#e;2vbOI+K*5cT$~WM&OZO{U&mkdQhEL@!kq3Zj;P7*F1qf(ux_vpkc;xBCm1Wx@}CWHsM#Y-U^WAAh?G0>5_}~gF2_TE#<G2p5Kf5G+|eet*QR8j{PgGeI04bS+s}mDe)6-6PQ=J!kS>*h>w7@2peY$8X_QcuC#El(t1frDdJk|GQC|;xAo<5Pqvj8X@^NbK@~XV9@of#_0q`be6gm&>#<i&sVgq0tPu`$W{qqU58=ZZ*5xJ@<Q>ve$+VfmTr_c29@i9Fc~e4K^IEoD8WZ-CxxG%%Yi|3eh~g=phy}0pmvmoUV=N$>$Y-Xs)~i-WuD{u0d}g#|X|=qD)$Ac~xi81a+tx+hR)~k7lEWt<hg1tLNDyDPPl@--3u&-kROd2_;af!cO6gv#-SVV#FOX9<Va;cl`c2Tlby#<^RI9FB(_fj2r3592W2?zPn-N2Ii==&F1jM1XJZEnCLTde}cx+IOj_7K+a=fjSRuHfBRM!6`zxp*K>>9iHf+uW2Ca6ghp0GW+1Tn7)jc24L4@f&-m{H85tB#G<qS4iV%iQ)DQvW5Rr$w|UMp~y=O2|7i{1Q4vhpOrliuMg_ViDQINt@+004&^6ru00-)+xIJ$abl9N<31h`tA}5^1=*KQrkb1dZ#n(d<>1*BHZIkS|6@hkP}lH1XuqZiB|cTo5<!1NXs(S&Ffb9Ne+b1G;ZXc*^#Q!&{Z6A;~b?EequUFIaa>^5^Q5)p`?6^6RY7@?W%AOK+Oxi#sDCZSEfp{M2-ncnsyTsvI$&BpuuCMkph**Km~(>IF}8n=0uM(7dTxY4l^EuHr4rw8{ISq)}GelAta8r&MGjbe`D-QvGuGnuhH}N2j-+K$=cO4vKQ|m1uN>IHNILarQK6#;<}+s={^Jm>(v%Bhg3q1`;VB;;(`zqS10+Vgm4bvnqYR00YOo$;|=vMpmPSS2!S4xc5AyYE5+MJ;$jXb%15r#%<)CIM}*qIlil5gj`%=W*N`UriKZ)mZ?&Q1AFRkkB*B#+`3#im%mmf!S{VK;jPabv_C?C~4usOQXi;58d2G3IY~es>O!?je0AqPywX0WcaC>p({AVg18&X{`W-Hk%8J1(8RI@8gZa9&BNpV$rQA4_vh#Aq~q@cxwB;2Eb`CHZ532&5c6RLzJpEnJ!XeHapi|IMt;&X-x*D!vZ^X3pLezn{I4@yf%j^AK|m-BG0v~;u!cG5GKhDqA9kktOQQ2uIHQ0yEosGdb~9Db<!V4Y=%mU1Y-MQjU{#X8y~rFvE=iTQNxv;j_fjS4F^gwhy6BnA!9VI$js2BLk5-4hD-`s;@F=bZ^YPdRQ=Owuj`>^;7g1lrQxC!pzLwgI7Xo^@geBH5Q`n;0lf6N6AVmF+EUK+%PSy{YqLIo}8^n@B*}pU)JFwuwEV;)Yi$zFOYzLC#atEp9PRc5;leGM@M(*jp2Vk<t>`1P-JTX>sfbMAdn8{$R**p({V+^?4d4(2KoNQ`nd2y1bI=q|+K|ienAY!ccfVMA!@xp=_L{Y+T^_li*rrQDPlwb@B*EFWH3qamAy|kq?2w>z0rOH_j!aXvwkvPym0AYHdoI@@?yM*Ni}m*SsT%<wcXS%I%UNQnFZpW8??}87GP-<iZ@L@Pel;0e<Z86vd)hQ}7a0g3>)%C_D`#ews@gAAyp{KGMXl96;C7O`BHELBw0f<itf=6<BssIrrioj|mq@@eL}xCSggYTLCvXQW_+&Hz+15Oo6<&9yP7Y!159RbYudpNFxB!nT-t|qyj`6T+Q=j(CFE=WkP^l3&=?uSE5zxl*lc$baJ>d;oH*2WZNp3hLv1HU?Jzaa|9>WQ>uk>-Qgz+7flGaqB=N7F8V-*eoQAUN*mP5v0%kco5{KGEi-0%T1k5&Z7u=8RlJJS7QSqkl8Is_?ZA;s+oLp&xXVwt;$AG$OHh*x5gu&axse*dRnExLW=gxCaFBawlY2nOdFi;J;T-lji5bC7$)bkKzHgP%d~W2k4FgXoO{iAkB;@#Dv}Qr7G}e-8zEv1D+oy_)Otx{vY}3eX3(NJU9M_!6wai=WwWx^omrX(xKExxUTx}h8z?IX5^|>N8qPa$doEKv`_8%~D=FHZn3LhfB#Z1<U=`2wAkgcP~So2A!&D4C2p~8n$GnXrT2u;;oc<J#Wge~QKzd(Q-0_sQdDp@2u+}c9{s@p``0TMXQJnA)Q2#K3r7gY@9S8GNZz6o>^%QYfFE*JQUJ0zH^G-%}ds@^DE*h`iD3JWs(Hx}d;$3Giz8Uydz+kpERc-Ni|!*?URYwtZ)@dp;f8ooOW-wnU}JuHZ~>?zT{;Zlp!D@;*6zxe8$&9UcFd)y5gF8?J4gAW*t1lgAy+n4NQt#rkgWWtFv;3%5GuifYJ?``N?gYR!?C%q5MnwdiD{qXV_A8-_6JK!i(9^P_Q#rf_Njza7fH~homhJP5eK|;U2`RSXRpT4>I>6@FM{_q(`VJ?U3ILqNWPX9d#%WbdUVp-3NUUx#};VmD^vw;7)PIJR`BsW|~GWhs;=>O6C>m6*zgP(708Ut<ug|O`FD37K6F*8hid`X{cx4g$fq@D7;zNFxRJbs{k7}i&`rV}iay5=7yUiSBkLmv(JfZZbPc>t`^Y>s`|sOdir_<-HwdEf{LpL<TRKG$w}f4}FQ($k^6pKi?^x;}+;eZ))65myacn(kQI;I9YPt-Tkw_FmlDdok2IT--R+1`LDQ;~Q4Pv2K9}>_%*g<M8}c9BGfs=`jpif2@A&`;TnP`GCWj%DVOar^hhNhjuQ9zSUzG&VOSV%pdp$++zc>U9T7OW=?`0`@l`O9&idhhC%C(X^&2io$1iY8hGFw9`-nv9>bunDUTTgj^!YSTk;9RKzHc5KjwAnn7W^9;Q^-*cjVmT6b1}~)*nlj{jsg$qgK1b1BT)JH-^Fdfp6$JHRPL4uCBSXgxO;eaLD!pPGRRVv&ShctvYlEJqdQUdaWGCEq3|2$1pTYS6wp<*~J>h#8u``RyfnFgXPYVe2XumUMGgk9ZaEInn5c|A!+gf*JFhPzuQ4+H4V5P#Xq60HS=y-Hr`Fk#=B|R6c%-?|4l8MAAaOe_RmoE&+xQ_;mMR~w_Tphz*CSx-=YoPhd%xjdBDah0pcMWJYktanf}k{;+X$G)5Y-y43ax}?E8bt2YUq3z+*{n{4FXEZ~5)}`TubZoA7_8VPpPV!^YPTTj>^CX*+$TnfhuHc2w`Wy|(N2Exsb#_OMLhE&Zy022P8onss(H1U=o7$viLh?!3`<=Z#J*t`X~52iCI|o_F%tPLt^|uKF?bXn*BgG0Y+vu$LRYuogFty*JsfKSIkoT^#kq-Qb>AW!SUrEk1l#4vv90PieJ$-jg2JM$s11E-4@3XTG(2-^nN+$h}YD{(d9ApL-02D~H#(PjOU>#k%*!e!bp^*2&MV2fpzAEk5(EY3AqSqZ%p96pBdmz8oWbb&KQTAqBn9_uuEsa@_e+zTDRy^Uay-qdmg6$Ib8d(7*W5zus@e7xVS`j_mdKyd+<FE55s*Gs^!XzW#2cT&f+MhY?@;op0hx`K_`3+1YOjgE8t$M{~>j!mo1w+{u_P-TL~wF}@NdFqe$*pUf>9rq5xjeCptr@%BIWse8|1sk9b8J3c@8)cKe89>XsD<5ORSW<3+5=Z!q4zt4LC+Gjq6#qP85`TXJ5XLr|6_zM>K%Usp(zMb=5`LKNNUYn#_e(fih|G7`U>AbJk8^ieg+o#_?F244c5$wgiPhZ?=lUR?7G3<%_-51~g$nTU--|jI9_vQcZe0<Mi*e&JL|KgJ$!+3@Dryu>}(=Yhqo^NC9eC5->$AaC}Zxjm>`fm!`@e`kZn2fa37<S`7^yx20FfEFgbCGDSx-anVv`oJCn=xJ(WoOE-cDna*j?`lW<M5x<V=<yh(_;w87rWt))b~HZ5XgFsVP7oMeW=FnH-?$`-?`uHVazU$@wfbA7p?!yE`BD}9k+|_%o{Douk7<4DJ;N!Kl<-57hd@B>F<$w>SuO+@1Gy7?2f$o)8}Wr7wqDA;q|T_avYD?^B)>Ni|Q0NtKJY9yE3I-bqO(hAUD0At*~%f@pW#)*EMNNaxL^YY1ecQVp940*o9e0%42rr%~r5OPD?jxV4Nl_VZ?vWTv8R7Kjj`YnCq`I%vJodOX)1hjc!t0S%w6E!ZetNy}y1w%N&qw-P1bL;agY}c{4u_Dlz58>HI?@XbC_W?28%PgCNy};@sHefbZ8-$dv}1W}1Ft6LY?fb<oH70b*|*eT4)#1i+%Wdb|>XyOfX>(|L^c)|rSh+v4*S$JIQ(>Jfp56eqzYx(XHFzsFRsbGtku18NzSZ+14Si<hO^pL}otY>}Z;mOwYvphaSxY!YzO5IKZIY1&umWLwRYcFZg3_x+VWZBD7<+hJpo{0c(lPa{|?5%IN5V>4p3akRIN8+`u9pQf=SzLLvUloix?h#LQz8$Jr-ROyK<Zn24*r~+<5{8QlSM=nrE8V)F78?3<~0BR3;IWL-Js``deTBuOI(?;k7h}S^K6<7n0>iHvw`?B7zoU})xn>tHckJhJn>!{~H%Lpl9c7+WS?2_ZTOTA#Go_`?xG;`(^!$p^S+=z{(p5ggI_J}JbWkP8;Ewp(S>KtRbQ~UoRwb_g+yawPfHu!Wymh&uGy{f*5PRi#OUU<a_r!9;2J|>O0ZsmD+VtEl@Sz(|((m=Y2!#V5ym7JzkD^yHxakY*)5I7}liYTI~4iCyt6)V3YLCU|iCv-l|oEG3X=paZZ@s*RcZKWg@4FT{N*s=*lyNX?bf~y{Hu=1y!nQVh8s}56~^jh(neEbC2){+pe{9<c$9wcoOgHrj^+zr;%c~2zaQ{uE9j-5`$pT?7xz`f-YA{tpf7<hti<q%M@$I#ZM8%)%B9l<B%zgx<2qwe<>8-!%BRT1Jhsene{S+vmGHg<iK+xpvvw8{^+Lb`tljq^$IvCyVuh3B*E>d$1~*Rc`I0>z_Z@Ft~?msn4yz5IDq+Mxims9qX@PBQA57b<)&5=>-Qd0gXV2DrQ~thN*^Fg?p>-Y$u=Gz!^ABC2adz&Bi--?JE4h|2y?nFkxionWywDPQ7>EC101871YOtkM6&+?zEh%5&|)Kd28HP^-&B0)#<96G#}&7!(u~tF#LB*MCW{y33)u>v{IOzjxPtr;#}c$;uk8wU&9be45||1&+(c52n?YZj7PZ6rrb6>{DpZp!1R`36GJzCq&*RAzWd3XBO73_Gw|^HSLPJVRdm8Mo0GfhT1*^8nJ-O<Dw*TvQHK0W}9L<C*?TY{;|V(O>*?tiJ3Q!>lzKW!&Tf4hiLM~#+sW$xSvPvIR9ja%bH>^3+p42>Va=y%`>ZAEW2km58fF4OsU~bP<?2z(VTEVeX>>0v0R@ibk2+LP<c&$^c&+yOg!N6X9_EE;`+$r(~JVcOVftYG3h9~QWGG_(NZ>t;{iP^){X9NXqCvhOd4k&v-e}=08=F&k<E_x<J8?2>4Fy1h3P4t>22^}7bb&7^TRPrw)iPC<ffp;Xdbw|9nLt?Y|C*D2`<h+r(16xG}Lkphq`7VlQXx&#a&oCZqh(758H7P_4qK+e>55J{tKw1yXJ9EA+EV^w-4hJr$3Z6n%nLOxBZ*Pkd2oZZ>Wy~&}PP%%wRIZWX$H8$L1%%3tc+%Txo3Vvzg`8fs`ERmg=Z><RHWWk*OJMcV<Yjl3C6yAPEdi8Pm1w&&i0}{2*J?G%Pt1W#1^39huPthe|Xl%rUEHF(U)DV{`Mw*NcEn--S7vU<l{jSDw`g&=B$14t_GAL3-w~9k@?>cOt|c2WxpYLGT3l8mramRorZA+Q;*L{g(~yQLOCGwlzJ~AoT+{HUh~DZtQZs{Z5F{H}=3QTix`nKPE7Ir%u$xp71qbf?iXwb(%Qx-m~pg@1KXnb*8|DOksa4?&~s0s?2QaNTF|q<&3U<xb40^o!ES`^{HiE8RC8*kC!goNocz}xts^rhCG(!SvZ(~vh^8w6Hg8XcGyzq#9;E_Pi^3g!qXBP{+by6>flV|q41|Bz3s>~`keJ*i-fOf*5|eFv_i!1X8g~#_g^F*{?giE*yobrTXfm-X2DUPHwkQZ!5U4CU)Yv@5>}8wb<7H31sTv{^?hmdDQPAB&`5!^k#%PyS;-Tx8!j()Bxq=1A7?yOw|$&(f*iTGbs1XG+qC??o?<Iqwjw@v(ee1)i$e3%${icA=b_k}ma+sOV6_A?+a7}eczdLrgN(5huP9Uom~4I#Rv2|W_cpk&w*eLi_CCrM0dZe1R}Fh#-#~?{KK^+J;_}aXXY9Rm_TIS*B*ru(65KsY6pm#G$D*ysx#SmeroElbxx^@U`WWSgq><j|m#9tmVGHej$syA6-shC4+)k<T+(FzHsEYe~8zAtwuduL}^>#L0#qbBu)dSGb=RU4_`P;|!UBb9yTw5nu&QSQ+3ZG^EyqfzZ^XGA8vUnciPH@6kJ7*$KADcW=``F}}+Q%l(xUlr5`fv!Q&nhbZ2W&-GcAe?iAg+g4v8S%5vU25XXiKO&$ZB_xcwxW);%ivwz(;f^+mc4-5<Vgs@ItYKj=roOeTkLc-}d7fTlS1s_Ka8dj91Lcf9Y>4aev$R!;aw}jL07&UQpoWh>UGk0HNH5;UQL3Rv!Dp4sgEMSTnqI@H5Ya1^xH`2W(2^X0j`%8}!~>`47Ke{D;MO=UXvub<*3+X&;k8Y%l)9zmLcN^cy}HBxJ|JvC7JCJCrHmgCzrAuq_|)T&h@sO(6lc#dyJvFQiKu0yS)+HL{H<h7#jqSuu<tGK_bh6~yyyu`M>>D`5p)%KuA#u)i!M{9u1P@`E*ae<RXzKiF0akftp$D})vPI|k~Dioc5Y-`jcmc>jY|yTtpy(GRrOaksBdf?CC&^+gZPS2z09JKsI&E`L*6eo|gc)SL9xSI?KO^(c>gW?gOv3s}2ud^VALvwy7*`ofpixY4(K=}UVXcUmXC4{`dp`2CN3DY+ew^`nW@hk8A8IJG<V$n%J>b>osN+W;!8IdSKDKX!k9rO!!Jr&evE-Nb{|6LnQ;e{r)|^7~9=RmlEV4)HNiSv_vz*S6~20Q~g+PJj5EJAGCA$(KdM@xIQpaP{}7KRdYO$M55Uo7`RsHp9g3fMi|wL(TX+cZmw2pS|QNx0Ypb$yHwb0E6pX<)CpHpShdmWzP$XMnL?enVy#@_1IragGB}E99Ao`^$rVT{DvZXOxE&ff~-_C>07Lf>ogo~pO!z_-}oe4V2pTYc&(mqy-Fz?RD=%C@i|SRZK`cW-qDwIOQ(r4K23X`x5uZgIe*Ie>hUt!FgcHomr9A>bM~H|hiB&^#uJB_J#W<H16zz!_Kwve!i-mTPBD82P?A%o$ZZm>84sN_`KH+{iq=fR(K=Ibldl9#*=b%o$t}8KeDgX|4h_4;5brHoj~#nUB5%pwv-~)gE6q0BK&fDLh?J^Xc<qd}{}6B3wIN>i_sm%xy<MV=DkeLh*nLj1p{F!VMv*dp%~yi|KZ^<S1s@)URL-Dx!rTmQ#)1!z_-~%S6dR;r>+IsCthSbNNMB3*YO<rjnHa%I_20-;kGsM8{4|;Gq*g-vwXE*fy=^~;_2bMgJjvm?5VvSmng=7EGQM#-r9;U8z7!OJtQTxiZis{$BD1Zy*WaQLo?{c7min%pNw{ofP_`>|(5amPCnE16*<G$Za+YAiW3Bu-*7e8KFOTsYihsGbgqm5}2Sl6{RINEFWA=Lz15W`YYUG7aS(m@)vlhLSXBkM0$0Ur$BwcCz>eP}z^B@tc$ca<f{25GwK#~lQv{JVP1PkKtsvq+4S&}MN@UtR=XXTACyfe1O2kc!zTRI9r@k-s;+HzfJ$3WE6?AN!n@8eg-GqCe<>4@vZc026b#&Z?E^4}%97qOkQh<WbXIwW?jKHD`g>=r!RuPWhNw?GIRcB!+nGiK`Cn5vH9c5_xJ+xPC`N2s6TM-V=@80&nSt0pZ!+ssu>{qm2kmDe_bFV-%|bK)@h0h|OEr`1Nj>hY(7Tes||etzd%KYJoVM()@9&*Pq29><%Wu#j&{G45^tev!9#@2&O4eBQP{w*DGxr#WFo^gr~<xiPFH9-n5V(+{l5ZDY{y{+YWb$8t2?Ef(MbEp}8rA3#aH!Df6XhtSR1C35>+V@Mvn?{^#yH!E(^_}%Al`KOH!sRQ>#Lw9jI%Io@H|9zE<C{f*Oo6FzKBKNW6AMh%VWAESeo0hHO^<Aza*0j88ICkjvJr6KFto}{SZ7l5ip`Mi$UmNvh=?&B<R~M?6sMdFK<~*<^-na7s2IzjgJi_vPKgZD>M&moVcOK<9x~tbCtj~SD9$*M2-RxUAflM^N&++mwj?6c52Wfl#LHq}fX}aZsjcuoGc>2oi-E)I)<?eaVFRwg@(k+knAoo%N=uJ*dEmIvyyYGi@jjxAsLhf?^Jgo1_ea@Wk<cb0hu@JZQO21XFhq+?E>c`t0y0`UuU`xHP*Q59%_qmH6V$N>g_YiYdelZ`TtDEoZReh&k4|4`-vq$k|{`J0xSPbVr2gl|+^?HPr;Bf{Xj4v(eDvn*djRSN0-rYm&nu(hGoH-A3R=qyNu0<TP_Ln#??D-FE@*laBw$j7gMbp1wDeBR`*Le$FFUjA_y&}Ms98+;upMPOj{{6o0tM_H)Sh8;3=RRmZ#|AmnW#5N#EW;@{a9=7+-EH-PYDj}Kd?h>=MFVjvSEfs7><1N`nN^5tOvxIMWKc<Yv9kkqjF3@C*?qB;oY1xka_Veo?aZ)@XMWU}fiZ%(F0dECme%9IlU<26zz^U~@dMAyO#F)K5nXH!$P4KtgBYihw+<uRUS!@U%{UGbF~<2?epzflSjdI#MX*J3ear|RV)I!0(a!c|XIHF&6Oh7Aptnyp*g=Y{WorQAjeDjBv=U{vDvScrCg;BP9aZ2U3yV!m4v`;FCyT(!KYJs;#!>(qEi|#8ZGjnY+fxwW!#s4J7LdOAknUp{lbAS>yN07efh%ehgl=|rOcO+-<TW!3oBPZAbuwJkp5u{XK(@O*G4Yi9^~IZAk{Gh((^%$q;m{})9C_PC=ndT(hTdkkPjnh*^{&kgSf@ty&c4Yufx9}R4XYENab4LVO|(T+q*(T99J*uQYwcJn4!NAr^z1zuCYIf;*LoIM@t6l*LymLeao_Ef-3Nj}vkhnkQf@O0_d9jmqId(>sZyM>0ews0c+GRP<cD@rm~>ct>|gQ~DElfxwD7r4WxDY;X$UoJ?nd$E`Rvxts~5@+VG{X_-~%z5JzfKi^>si)=@e|b0s9_nOp4Wl+dXARa#>ddb$b*!36ye>n#H=X>LFTtJ8s*jN)h@IUHL&{6=XDFvimBgrHpECly01jyS0zO02uM0J>e#iQ|aK)x&U~a$YHaSkpeaD9uiU~o`r`xk;ZE*72S*$Pm5+ZBFb39VP*S~XQ##}$xN7pYmd-%Gs-ux4NcjP&(!q^wFA<ga<f^-Ysb#dY}AXsA02`wKBi}f_dR9bvUMXsdEX}uC3BkZ)UD$R-@aNBco<Wn!zA?N!ff8N6=>tgE#nPs*zZ+lj@h@M_4L4=eXjVkl~ls~*^;}i+Jyy_1Okgf3g%JsWXbqF*MOTuNt0;+<(u)A)%#!@&0De=pRy22X*hnHm9MF0x?L7HVPPIZu15-V2d3t(i`m@4azPhsdAeXCwawcl<Ack(B2{Gm?pL>N+QI?}8;@4n(AAtmKBjaY4}j5#eL$K43FP@aY@QHw0IThgY>IV4s>lnPH#cG*x~|?6-D!i+LD|~F=_WrVu&@%H9X}Td4xHI6@?;v~cP!KW!lG4TG!gr4OeL=0^3GXALoe*>pPy|$UOE~g1uLxY*V0INt$feOm6@4rJ=1|%Kt_yCAU`Z@whp{yioD9#-YJ%yt+-1`+8|QpSQ+yiI$Z(1ls45W*m_TxHW3}rTEwD{DxM=DEy&mjq>7TQ_nyI>PNYi96?vFgFecP_cLTWgO-bRt;*3rVsf?32EUd6bj0Ppd)u~gEazq;No^0TI2zQ<r7Dl+GakweZskKXrGwZtuZbQ>MxNB@KER4c+6%>XeXOWYz6_{q`@yzIz96~q=!sAXUt92U6FLdj?7K0WghIGm{704}I$2@m<ppHGO?E+YYg)}084ue2WWNyqzWbcX6T=J9xku}~IG(OR&2^TO){B2?e_0b^_8T)~}pCIoPaC@}ncmf+$!dGQgMYt(;bX`4RsqT>CwS<fbwen*kGdg@uXrO~Pyunu1I0tfu&>etxWd-UYa7YS4mz#Kn2Rw#MagOWmROt9MIeY6wkzHETS8}R>QXW@Dgr!UwE!p?lXM<_#LcGf&GEB?@`BGuBIUJzP$oDpfA#FT1BooN}k`ozhXavlHIy;}u?^&SAo(?+?;-`s;Q+Hdmi!BJ)__U}@`FLD~YlnDd!*hqcW<fIa!m16aeIf(zFb^;v|1XQc0gG*A1e*kVI*$|a%xNlQb8lTl-YMjI!jIS#4WI?7EVk|uHb-BmlpljAm*Xw9QaLewvk7rSK{|k2ER&PFVQX%<dr1r$=f-Z8>!2n^m855me{zC!KuurTvDq;;y(V#qH1a8%mvgF)15Q5_*4I290M9pbXuZU2&T;5)J?@&(nR62Lbctg#x<3AVOC={_YuaehBu-#>AT{W`kg@L40<*Of)2Qy)j2Pho@WaNda0I)8^A(my-9bgrHlgtv1|(><MPm%oL1B6Z-LN$P60_`3eWYxSHWC?2bj!x0;e;s})q#-&ev@b@Ja8=86Af~Sy>CkDYVXmcr6CLxRxh42g*{_SC>vmb)G2kvbE!xH&vykW#M?&Wc^F88!?+#|sRf*jBr%Wc5jJq>21!U|FCyn8jHx4sb>lF8hS4C*a~14U$&fRS&w}1-YI+u<mAmA9@bl-Xp64|Y`ZBNAp^1D0O3C_EsTh?$EK_rxY7sugq1T8tb=<liG&mY~5<C8?l=PgN$6aCB7mN#M*z^<(k|y7JyG;3&s<o%Fd8J+Zo7-mpt=6d?9;<wSm+T#Nq*PU|uw$3^MhcsWCfsG#Jk>YNAvedTg6qNMF<YyT%|+k+x7_lAX@2Z~{(LH=<KD07DHS@w9+Tp9<U=RuuY!#`TN<ial6Zj2<H28}nG#`llM!A_b7AWXb!s}YvmtM}KengNSY?I0`>rJX%?XE{3;)*^M18#UiAsk(UIjjD654N{Rol?XP#gH_PCluMv|`0qhq9&)YjqIY{!^P5sB(+E^2T=M{gUhsyyBU0Cahqa3<xWB%&sAhI;+)R!vS`4t~2J(z1<FcgX_K3iPYzdx9h$>d|RteNZ;{i^jof5{xMf|70EO8o&BDXi2I!K`)#?u-)#E(#g_91$Qkv%(5;4hU+AM+6XEa7&Ozbt3~fCWws4TK*6MxUdhbp6U$S#q?+Y!f14-{=#Cu5C{Vk#s6!bCTWkdKho6r_9srh#NvCp<pc8vkf<1JqEQMb;Ju*IiYZ;MYa?*PE4#r1xPiFk)0umpWfbx3-D>k_~8{?>bA+520sfHmy>txNnvoCDR*9-F|o=(6R<3--ShnVy<>&r&NvuaL-YAseiOhjZ_X4}0HavjcvQhuO0Z5qKEWsQZ34`gj6jpSMqHHQqi6H13=63z_813yqW|O06l526MuSXro&9_xL5pyNEVwk?^Z$=bAnazX>mXvheaf;jn*?{4CzH0Z&CTDw!zrG@iKXlN9V`vd#)UtR)jG5<LuLco^{hT6VlWD);-=!XAV5Q>A<HTz0O<XMw7(i`b&eR`ge)9;E2v+gwX*(UL*a^l=(4KK+KR1-<Y7NF_Zsh@JC#%vGz!0zU=T>X!8J1sE^bW3F25f~|@Rfdvv<>9Xa=BQ~WAc>Im=SX|<&FE4S`mty={Z0h&p_m?UWG5+$>GsSmj=Wr=<4g>)1jXrh&eiLH@x<=Of@&~}|efjea|N8LB&r0E2e`e=|Z#_HrF8uC6)d}Bxu|=1y=&Pd`Tep7T^jM4B110S9H9!gY{r4_ZQeVbZdl^^lWnBHv<Iwk`G1O?^j}aR`VvYtJ*CygZ3^l)Rzt1?%J|6?}4#IER9O|Je=18N;wU{I9Tmt4i&Vg#As>rLb1J+*jTdd;eK39WkEc<h=x|NI`lje-YIiu5-J-#PemO-a?dARI+8^04@1#vF?=%XdJtTkb!|1OtY76ds|w8tzt)~pls=n{7#{fIkZ{*F5lUgA!Km$(ybJF)Sbn%leabW^{ziBnA_+?{36omWJ$aiS`U`b@THjcoFcO-7el@tIhPSSjMoJB~L4!U{FC&0*rH=cq7Vq61>ZK+#WCQw>*R-$xefL(|90ARVWbV(rjypZj8>*0G?YsB<iJOwc4{^hEc@lE3>QYr7v320tYLevUBv%FxH!4ozzHH8ze5<ay;(AC`<$6R{A1X&4q-scN@kOL6Dw-Kw3V^-%BDL&*2z?pk-N_PVkjFY}A9y&Nyosjd2#KkLT-+C<=yu26m8$9%zy{N)cw*N_VKoCmrpVavM5-LUCnmg-;d9$(q2c&todjGi=OH!Ea&Oap0{mm;qnJJx_i&d2mDClfShypYrM`8(;!xa37*{LU$jR3=OJ*jdJRF&>sySu=i3qUJ2>^xJO#8}}>XowdT})e~5rQq^Mv%pz@MPq$=Mh6f{eJ(RmsbtPd{mVqjl#+F^PjSS854b5yOlk!ROZAI2><xQPpLw_fR{>A~P$V~EiUH-)ES~hb`)n|l|QB(t3U*V@jfA-@+=D#1{ryk}K0F32PXScDAANDsJUx^C;<Z0fZ{(k7H`AX<sxje9l<nfkR1(U#wm#D{REEDDU&iKlGG)Ss^(^T>1*eF%8jF@a#NK`76-7?ua?-}Lt1C}_}B!A+v8Q!M~9p(M_|NR}D-nJ|--Y?=ixZUMD6xwNvwbMJ%PH!sqN=qAp=K*@&Na(qh)#rAl1~KT~?7VfJO6yf%C4iWZVER?QhQ7_cy<I4{g}wcHPCn?f6Byj+V_9F_>bbwT&%D3ydV+8}{EGL3R>OR2fDe3l-i!}Oc2crU=K0p{k4NG-lcu~dK5(oGJVg?QZap64P2Z<RFAwy2zAA9_ZE|HS=Npg75;dRGM_!d&c)j&GznsFboH4Q-zUFi!Vf~#-YMBmDT}r54$!fjoaTD7@KdzAm*3AVQ@s%CF$EFE8{ygV2M8upB7`<CN*0udSEkEr)jHMtjY@kBdc5ckp<7|7OMSp>Z6*s=|5AE|0-kX=E>!4b_%@eUyZ(}n&v?E+&1|Q7j`+ChD*xhr$V`czx{L?rz+fSVahH50SxovYypJjKd!0@fj<8MqEqkAF88(iBv!OLgN-hF-k<>Sj~%$<Gf8lz|;^IP}=9&fs;IiBDeyuk4U<#DVkf_5dUz|46+RAp#?;09Rx2C7x+Ap!#)vPrBl(&*&&aXL%N^Lr}C5jEMIl8b>G9tX3~Nw^;ssjHMWn5O38$aR)8NTF|x_DIIlI6Oq&8is66trDs5=(?~MFd5Q-$6ZbcwHk|Vj_>K3&0Sc;UMN4M&2CF*%zY!n4_gL%CeJ^)_b86yz=`rR92A4y%Bu^Ft{Xdt3HO29XG-F59T20v>$FZ%(iG66yC)a!WJ2?Cww9-{FY<IxvrV(j&h$vhe#m3UX0+N7O2e?;X@PPK3Yo}WRM|7qglOQr7ZIHM(qTt7&!=R7{e{8aXC7X2sqU~G%efVg60^|r+Oab-;=XEgFM{lRbHvR~OU`u5b@$=s_*9t1+La1@VN`psvCnP<Lt^ZL&}dJ7R1R_-CgkkwSli^8=}PYANMoh2!vMy(mO(N|((G&x7uHTG<mQ-#V-rW-%qL^pm3On$kk=@b?aah26JO#i+6`xBrv&Cv&xsSIWLJl@!X)sv1$2g(^<6Hp??y(J2X~X)!Yj{|Z4&Laeh7D=?qI~eVi<wAFl0SZ#tD{-(1Tomh69&2JYH!Ku3<C_=*evwhwJCUEp2&B?u@`a+Em9dbPjG*Rhi{EA%r{b&*f{imzTZX1aKXn*IKMSb-{Hk<95RMl`7xjbD=a+`de4DW3>9BlYtydS!^?Nyo$r)St%1X4!nx%Z44QVh`8?9V3|6Rblfps=q+db(6r}=tRx&MX~fpyt<&eOykIDS<w(6=HaTPpmKl$9Duuq*ei7I8w%|_~M{vr8j?y{u``${iMvwV#&MRr%54JW-KHSlBW4&WzH7CYuR^kaTIOY#~$mh5~&=Jhm4GUn?20WKpkxwnpo?4E~WUR!Nu<Xb{b|iF|$m)RyPXrpzD+!o<QX<DFq@DW<nD1mU^0T9Jj54rr@sKq??PWn2UgF3B`VmKt<~`3}!npTcYA?Pj>Pyu7q5R(VGK}iwDw9h*HE?*$rnrJX=4@d^HCEIPt&D(U0a=@WvTF%6**U<3hXH0IMSm$$Pu;SCw1^LgmmnTi#sGD=@rAA=$3hNO11$2@i7nsvd{yl8ZFjRB@*IVIU+`xbj>%UKRL2T%qm{vAHM=rCwtw_Wb<BSc)&0CQ4rjq*xyBSBpy_DJilZ?JNrUHuZge^;JDu^>IwR4#qt02OZ2ums2tM&nfRCB)@lNAAd4=(x4>4a%4k$yOGv^-|$6NX2fo=OX-qaUs`vdui$*x;;&4~QT?b7^9zPW$zqqUo3>+a$naXuU}Ua;<Q-o<RO0wk@AQwFOSU*1_%sd@YW6s~EQL1*I8YP}$g!jb23I@qzVhS_R<^wW)(Qdk_k$a`AQ-GC_E-<7^50gh*eV`X~dV2RGW&`~^v%~09X@;V>J+x#5DL@!8^dIZYz&=@baZA^mvl&_m@VS#m47bCo;a<ZYXJRf^{mg|e0M(~R9ua}srPVcA5$M>K3seDJP^^e@@lU{G^ay&PqSLcL|r9}jqyvG&Y#x_mJz?m+>-KpaA$Q5{xvzS>zx7-FR|IM8Yfj+=_)0%S(Pp^a(#+wEuI5IBbG>_qF8Nt)L4^M9g-&18eHuj;1SfObweAXB<(d*VSHSGNx!wz0zi&pJLr`D=%=_=|z+6J$_c8U-yO#b*8>8H7`pJokv_5qKL+V@cHyX8tkV^3Dcp3oQLa}1Afs9>^+VVCk(vPzE`>E~PY1va=<Z}kbE{_Zg&kM#r(=K+tG#<9Y^yvTVcwH|RF;&;l{-GuCRB#b*klR<EHXcB;s(%lwQ&v4l&^yD247`11-Ni`4sojS1le97+@8AXf_=iJA%y_N}c5%1PHiFK-%35A5x%Y;Fsoz|?+R|nHmPmyQrq5`o3mhsq_CLWq5HZa(?nSaL6-^qnHc-np<_I+LQx%o}Gkj+^@E-~~(9=`1jt$Qe|vtckaHp2I1z<p1^_zvgz*mvc`agm9NpSYYMXceOwi&DDy^dy{y^88}#_>jpzFyMLQ#QsqIc}trf(&|B{m%eze_3_+W{(t$1rdhVf+oM^R_H2+TbWN76EqRPrq2mE>dc^DBeAK@NLQZ4-$l8^a?0V|*=L735FX6-fIQP%n{quRjZJwSl`gb02(CKwdyoY)G?tQ!5+k9+~`>CBg#^npUTdhZ8``7l|;w&G0$Fn=&{qj_5f0KW~^>=*~`_KFrF75&C`0IGo>Uq%M-tWk2^QjL^fh*F$h1cy$uG2_ExXMgYa-EU3ZNpF3)dI_6j=LnXFXwkgr~y3=M{n5xmHB{nj5i+Hrcq*(DoJ?cK1nCrI5Z0%?6MW8Yy<Cv&M<U7a5mE<s>@gzza>nDDk7&6$IG3$sN92XB=1Eys%^`YvVqgEdc3mhCyN!1ZFqI8Oe43<He>1G`_b+R%4HdBo_U^we%<r?cPE>%oNdr#Q6;f$c<=evVe%Kcy>6ncK}3j`q8fUk2~SkUvsgLecvHOP(&#m_9EZu3?{r;CbmNV%RPD2<LE)x}Foimk^G<5t{}a{^)q>TR$wBXzel*g^lk!c&u@t*Z8Hzr(tq=S2uv`qJGBL+ZegdMux&1m;%92=3kcM){WD1Lty5xRTxgz@Z*AlfmeQOIk_*=)tWE^h;XD+ReANnosR}#?tTx^|_a6+-By<BqPA(EaSa2P)TQ>*fbWOpK$y)+6b<5_ZH48J^E83F%X55##U6Q?wBCMZbt$Z5E*SJsSANeIu}rVh;FoykK?elkAAU$~crgd3?f5j0~UWTDyfMHVVR_X8|i{B-TRCDt9b9!ZQB&kAj|#@gzYXsZ_$jY~^As1_WTwti53w=irsF3kbj2emPC=5fbk0T^1q<)A5otDjice%P4HCI>Z)3d4=!%4D)Y%w&_;@?Vj0_K~+!mAx7uT@T7$R@p-@QO~vhUg)a`>#HTvR|{Jmv%0nAPbS;=5{UN_>h>#ENBx+heAqm%`}o7&jK?)Ts3|H8gc6m#FVAZ=h;9EDg69<~c0k!10W$P;2Re5BQe`ww3fMC{_RNkwGd7MZCRdfk<e&zgqbjwYcEIBgS1qjtKey3KYmb_rTkD6qy!6LpY}k`wX>vOd*Y%oyhV-*$7j31yu=i=YUV`q0$FCo>`Yf3{-E(REWCZDnPCPXW3d0W$h!x7%5<uyJ@pxlKKiJSoJ<JNEtl+f3tQdY;fc=7PS+N)KU*Fqk$B8qGyAk_78enp&rv5@kvyF_6?z2MUaEs&cov=c)D8N~i5mvCVT@qHXW-YiJJco8^D1fXab-!QfsqMX#1{2Wt-{A@A{{~M8xoqOhc$}9I5@}&36DmU<csoq%amC}j6qM3LIR<V3B--p!N{%rhWbB@0oVUGCnc(@XK0dMip{wroA5T67)RWv%z7yviuEWhwf{)@l>Z#-9(}`zKCle`_bSIbmrjWI!kl=VNp+haJhq`3*f$Jvx!H1pYwok-b-P>6tp?nv1w^AMb+s91ku5Z`+M{Bxt;lU<C_sROLw|DgPOUXm$%?qIM!j5ab4#w&EVIh8&AN`WAgnZS@RO(O{m>SV>oIlQeNzKy%j+b@#M$%z9<v5iMe8<LVON`ToO}KIj$EpDbU)h`<^~JYrPPewg=g0bT#^-XJx$3aKaONL<QTK6i1g(8R@boO!q(@@{?mW3Y=V$LN-*LNzO8YUv`5-YSW~SZj*XBvZW63fSbt|Dfm07>s(&8(5>qZ9n|7mVLKbl({i~o6U<uZL)nAIeg;np>27#PnAB~q7A8YdFuG52Cx7il6LJrdbtyp|n~y%g9p?#r!E>0`~@sP}X2BmU7Z-e%B=F(q<m30WEya)&CZMAgn;qlp}0yU7SED1<*TFm=KT`cuGH@y7f95VoJ0_|Eq}oR7!MB{%vx;rf=F@AUaEQ6~nMaoQW((beCBv5Oz`vJdLPc-O}Lo?b_MKRo+U8j~;V{9^t+pDuP?Gv_|0g?{l}VKO9>mCQ`oGSmt8In!%2adpa{3!l`JI<_rGd_VrJ!(N6CFF0G}PH$p4qSA|M#P}b$E<$v|imXr9$BQo6{lR~8evkXb=lZa|rnTyZ7MGIM#+zym-L$M)>r^hMDiGVx*F-&iQC3wz<)ZT<`&7^d(m^p?Y{5BP1D!~Y&BkVxH@OmQyuE8WhpfRfY91l$yNllFBTfL_6(&98gI+(*+x+}-p0~Mz8^(7Z;s{F@fBv3Nj$A>@KKtow&3NgCp3L#P8Szf7h&85)aZf*VNZ74fZOQ27E2En)YQT6CW2{=%xXf*5>}={Sa+-)2Rrd;&92{1lN<GX9?*oGs#J4#;AXZe{EXuj<skS{Mb4G(>bTH;<j95`^^yS(lOkF)aK6T(BJ^q^xRqg4m#@FlU#%_IUr`z7<J#If;ul?12y5vrgH-1Ks^71~=b#g!8zrOcB^>+qVXDn6kiQ6rgh}NthU|N1M849_Z`-gQV>D0&m$>m`T<lgTX42IUlPyRtH4r8ZEqYoJ>_Ul6w1OOJbGx6knL?~5aX*Z&q<~0rEYJ#edajo@!9{h!DOfp$A-vS;FwfUgcsGqleEW3}m7uK}TLsizj+@#Q9ZZ@Zcj%zmd8>OtoHd4l`^w7e><j0$n2txb&S$~UT0ZwbNMofCVH}?y+W__Y5Cf67zvvkHrFgc)L(gK(990B7wGR7aHmBpE+5*kGr+Arjn4C42d`d%2vcQ%KD$T$sr<D|6dFKH+lcp(LcrK}&85)%ew;FT+NT^L|Z49$uRE%I5xhQ@egjq%4^?np{o!YaFt>sK|lkJ43i;`+R~!FZh?j30!;CL-)hY^}FMi~&}kxnWnwm1Wv_%(vF3m=64Rbrw2Ehk}V={7_xvhgP%s_-xMrVO!;HE$j7qeeR5q|NQP+_QC)B2Rvh~ZZ3Y2Y|LE7p?<+gnHT#p;XKr;`}Ez|{&R2t^Ai(}a(OIgTPDN9G0%g!%Qv*X<1Ihp8}j?~TF}GU?-&mGY-KGmI4%h*ee8yU%Pf^V!1YSx4D;U!D+qur2FFc|3fr;@Ml&zhaXsux$6xUWpZheu^yvl1^gm`-x{V+88TZudZrS>t3uLFt_0)a5$v43x_BIP^5<k*YuY|5(BH}+H9{S0058?t<@AImSCEpwwuZ{L*1ICx?BldMs9y7i)-jY`zoHE49w|LXfaYDiiZ@T0Q*!F*pPcLp>`X_h8BmUjHV7I11Mpep2i6dv3$OZ9@(PN&o75V7;F>CZ=ZOWg~%P})1yYn1Ncrrq-D|N~BDF}=W%k+@N{Q;yhZy4Qa7~Kh0R={KZ*<SPw`R@E#zWbPq*VlhN7ftnQoNO=SB$`k$CU(3Z!9BiE+~3PKL=|I0=&{(?D8X@xz>(wCe7jhXz;dcg!tPE6E*rjQHjn1){Cj`CxZq2_l36~Di*afE9v2+b$LNLgzYu$k>#N7Auv4(>hxakTgxy0y>TS%gCBko}=HA6_b9fHKfdnrxvf#3$LRJ#%bToulI3Iz_x;D_ZH#ohkKgKsaj1hJ_ugvxnj*rcsC)N7;p$}rZJ(zC~{pYtGco3Ik43s{G*iFj%OAIkugGjPI_0J`S82tgFs~BSZyuDP5)1>6F)V^b{kn9Wo>Key*!C!%pzo)w3uh{#-9)ETBU82qw>sS53H`(GPDbk;R{v2~3(m`nM{LGYRfklZQ7IYpZ<^=6dUauRGdpU<=O%H<C@A)Hen)N!{Ut&J4J3(XS0<-dgtEt#Ml@zR#lk3+`UY7kerNHG(c$~3lAYy<u36q`qzEa|I8WwLK{!mD)vyRc%p?S%b@mr+eT|B^N!2^HdseaSDUGERp@Vdagpm&JBlTDZ5MQ?MVWvtRMgq}oA2N%0w(Yh&mdW{xco*thhOrB&wo_KyQ=xeriC}*Zqh8r!6;Q`HTyVTip629;3%8jf(S1Z-G!Te9ms|$}ruJj>xC9N!9Z2w?K2<iEx*Z}yofM5_o#+N}YEECTllQANbVd)GoiW=i3&PU^?&Gtp$?{Q(g-~(dCSmH5S;^#7vAmjNkUdjM3{|Dl5ap4BT7&vUbKwLKt@PH9@*RcvIwkK+^K}xR2m9sLopRh9nft|5Le6qSwK$)+MjqQu;`t2v|OmS(ys`EgB0H2YN4-=pg!)AP<t<^@MJ{vJ0Vp|~$G`G}Q+3A`(*XF9DtKFOx%J+3c9qYELv$E3}+p14WM|aVj70UL#dz$_UXCrv{2e#;ctXCXU%yBfg{MP5U+|u@M;c6bra*Wo0-~&vU%;|v0gvY|(7Kc2j2kszQEjC3w4~JvIV~t(r#q$OKAu!Bmd*Fp*Ewk!VFAE7?%ocO{L+&vT&EhMJ$b}EN@NGk($2d#sML+nLHCFImb90=}t+73~o{0Mzu8}8Oc-l+}D_EE3M3-l(&v~>Vn12Ub{`SRp`@fGZ|EEot-#59xPx{V%v%C9lM%X7TyOXz^KI^G&3Cwy|n9X5PkLRg1`S6VuJYzA~y=V2I$MrCJ++*6S3DF^3Sd;06=89|m2yTnb;NzM5v>|e!B#ImLda=v5`M?cXk^C$pN|+=%`6=vlf=~B)!ydQU9W}5R;$J-tIv4u!9ckeG#+LUR>wa_ml^x%*<6Cz82`pkfy2r*d?i&=}(2sgEK7M-n2R0m&{Y^dTy}!<bdHYxWsMUd6p6i-t<LAq-&p*b|y_r5ASJ$3QoR`x@Tv+E@G2WI!=D5LbJdknn)#zJ(OMmZ&e`E6>@NB^y7UWU=I!DM40&D-zSVNL=PwyY)ALMyEuX(tKc{KkXGm`5Fuj$COj*y?Xzdrv^2GA}%<29Z6gW1>E`1lTHU#u&Dj2M4NBv*Rwe6y&MC_Wcw@IDV=k0bGRaYE5KJp(yW65p*012?MdD_*h)u;$7h<=BV#4DHlvs-Ve_9vO9u&~dV`S%+qEjtPxufX>OF2`Q-@zb?8$ZW5{-28*zWC}}JgCa()JuCQDTXF>B?L@i3f@{9s7Nu*s9ti8y!$k^5D$%oCZ$GJ@fA<auwtb1zDoA&<wZO_B5Kj8{`3?*xKbipB9)<0m5sw||8cNfp>b%MR`#}(hnXeGxx418%6Q^PrRd@R_K;6HuU_>i|JOx_mQYIu;cNm{NYynmCy{%vKPx&97W+AnOJeiBw9<DB`%IqjA%b!EN467-gG2wr9A?Ir9TWZ)eH4w><sjP?nB3kv?O4tpMqV*tV{yz&K4E%-ZjUc_1D>#_EOScVOMRo1)U6Me*UlP{5Jv9)->*5biD(g&|TE3z1$Bo=<BOO^ZOB0;bE9ONqUFL}=WJ|~33wx4bHj8;z>4`AB)JL4r0@p(M{+JECbuGQm6ml&RY5qNsCbx#sH{K>(XGd`G=eC{6Xx%;X<AJLh((!gGNG*8BOo_fYSEzmrTOJk)5j2GQsc<*VipX_;GpYiQj@ai_duHSy*#r@AXZdd3^7_(^@9^*qj#!9Uj{~4*Zv0&Q;<44)PEhC&5x~j9XGwgD1z|t`oX=8=5{RjM}__ya<Uew<@1mJh|f53O%#$3J5_qOSJJ~8jc--^ZhXZ^U>1^gH5$F=X#Bl=uEsMmw_gYh?#_D}lFakK2bJYM;~`Ks|<zSl2w65O_P>mzry4m<k`e%-x~+4*?=(EcXd|2K5nh29pQjS(@Mc^Dqw+|3c>#(3?nJ(&d6)-};Ew31n&949`lAl4f{P-NoO$sv`{7;i6mkSY+yb@k+LXcy2%r)Ou7t>yD#4FX>(<}*_4QdrB`w%L0Y&|}#+Co)_m=c4vtMS@MSPY7e)qkM$P*rrU}B+6kuC-Dvp?A|A)MBopNzNW|JC%@DQVl-Fu*TwEw7VAuryEq(;KJ)_@?1JFuZsMXa9(4RNv+|Q0O+}2BU9T%fA3ih!!}OC)xUx<Lc)xqm=GbI3$7D1o@XEwV>0So)Spu=VGM0>vzH%Dk(atK&)fCxsgv};nU7jNFbNxx~-S$2sz1*89AdXkY!p6hO`q+Mwdy}5lJcldwS98S|`{$niYOh#7y%ScDroDenM>|6QPDe{>r-ZeMyi347uGA&FHxqRwtWB``g)An2K_-8}W@2N}rVsiV_4<rH);LvwO;+l{2JAf_+fVe9Ug)P^8l$rS6x-;{?X)waosRlT(hx#=hY&=l*1Mp4M(bMb*7XE+&wAIn8tPiMZ6V+PtFQK1D1g6(o4NCI{i~kcIlcEbo*zOMe&FMqzxVm5eu~)Sy-nNv?H7^H%4lOO66#82UP|mOkM-yOt8IJ!vTdc?^Gy6YmweT>32WPewQcdewxK_58-2uF__mLIZ;!jRJ$=RVf7s!z8+-Sy9X|Y<e%BHH1sDCUwk(~Ce%JY-Zm)Ah@b`WA@B`~Y=Y-uw|H$RwrdxdQH@lP5$9~s){*q&BKl=gR>Q^Q+@r~Lcf0irsE6N}Jid`6iJw|~&ys{7Dl{GECpc9(fiTS(OMz6$Jz4UYUk3E-O&G(}8q5Wr$i|x;~&<XN<25`yaD5+DU1+)CvD<Jg1R`=x&XzJ{l@kl!3k#xXyc*>oRdjD;DoRV0azZGl#BbNR*#=?J!PZDEoqW&eNFSx;8d=Jm`cplOZJM#SE8@lh~X@JwR#|6xK`?8g)A`aQDT~EZVWHJob-}H7p|4$x(OUy4-=$|k1v(PHjnZ(^r?%Gr;SwU?st8HEybG{y0%hvhPge#ox@QZ}<N>=mgKf&^S_UCcG@Kt1t%|l-Hp&!o`KIKkV`urf5_5=Tt2eR^mZ`A$`@b<0u-06-U+MiyzAOF4Vt}j*3VC?*Qi7?|OJ7dFn-kV(0H+1UiZ~3TS8E?8p&c&}~;yTuaXRJq0FR(sQMV@$@-BZ{kR@Njh8L84);7n7!>F5S-n4B&pk>|%-8u>c)itTQVq*BIPZ{&s^aAn}n0=P*G{DwoMcxKZqnu_MeLGv0YrP6UWBlL}IWLm)X=o`l%tjQoV57U@>j%&bSY7Awn7q6M#Y)F7<PLtH%LPF(4!|N)Xu{&wg9=)(~!rF_9aOYyW8=+cm7xf5d0kngrc?mXN=UI5}QM^GR8V7%P+B%2jk*w(<BgZMVz;>p~Pm8Krr-~fXEgg{18DXU|!_BS@HzS;$<>Nfib}G+@6FH}B;G8F@_~2OuTgvn4cx&8b8}B_a=}8P!wr=$2k`v=o>r5G>VB@u!(ySA|hIx6(iOCh?8@%K?SEZzzG#ph~?>{bb?<8Ie;=x0{mdE?+f_kjG5<V$>Zq54jd4I9#Gd?sDF|mj%;#?U95^<LJwlvnUu0E-_kY><BGixWyEewTECLSAm-(!TsGnRgVc)qlme?Y9{jP18sp?-J(Syn(lJ78AmVEI!#_#+qLP^En?!i5TR^}uSz<9w;(Lg)whwgr}=N<B{*^q3(xE`g$!Ud<$BBhYBEE5`L!DMQbQrU%4|id~Nv!*=Zwa!eBAGt|KP29EC-|HnAKgyVorq*chh$GWh2|1X{HLoCdVj`Xoz`jL(2HhxF@3G2-0-viv=Kk|)S+s_~80lBa5qxkyj;ww7F{mpDP|HOyM%icHn;(LY?Gl^%^K4uYhV~U+b*^k35kBwW!1UgX`dhU$kAd%g%AGL8TC5IX0Iem*2l8P8_#yqdL&wU$$vwX_;&%EwjzO?%H^?uG;FH8FUv0h%(dLGy9j|nXHSv355j!l^CI3VW1VRdZ7?KI`>{?*$s1T=};F!XAIytsK?n{O)SzB41vUHUvKj<He)g^nl4-Q|ONy@<W>g-?5;v80Vu$)`ZpD3Fk>$*QbzA0@pCh+aL##le_4Y~DF+-c8xOo2GIr>4hWtqlv7sLcL6aM@6FEK!)BxQilf#jfS#18kS5>Wqh9+{LT}2J61p8b7aB)M8a3KqPJ_;%avZ}vHnTRxR0TApQB^>$nT%?(1QQ@@XMH|z})qIU?G;X2%PgnDZZsTZYPW;c147jiP@|RMjO+}>wjC*u*Zen`KxpPjvzlf!xUC1f8#1PUG8m?0{hLbDJ`Ar06S7JSvhR97oMBapYV7Yg3n!+Ms?!2u^D6|N<zb>tPYp|?$=MU%}`bUBbu{i{lDs*ds=hF`#hZMOXR)5FR(kT_Qq26HC13m@DE_!$SgAV(f#~A*m@!`9n-w$N9jIOV4V+o9nAzqsTMYGxkW|X+<ZG-itkW~rl*=RmJ18W1?0Kz*!c_g6@0>JeBiY9ef(t++vKOfy?O$4+s~_2Y_he7&6gRIYb=gYW9tP3_+4NQpeLo)u6t?W5}PYFO;?KT4=avIonPW~kX{cH^!jkG^o?ts3%TfAM2s!vqNfle)p5y0)mm*`>-*A{*rbOu^mnX)!|9FC-GZ0T*IZ)${S6E7e1pG!7>DWB2jbye6xaRJ27T6;SeKTc<5nS1AaF7jw!HzJN8P9Qe#6$LBJgJ4KVK8iXL9rX^Xu#D{{H@J;n8eAt&19%Mm%=oU!phO-aq+U?#{<H-v@a=z<s=}j@v`{{df76R3yIlrvqB~7eP~ur_XWCZu5%WpTEu>^H9!U<3!w7e!efc)KmE3gZ9P`|GIssy4ru7$BVb~6J~)ei^m(==FNF<t(V!TTaNpCJkEJ67~^I>e*SxiS!Oi01^=loz~l7{{v2T(MQmxj|32H2Klh(DVB^2~G}J!w<5&{RS}a`~W?8#8A9?KTX>pUVH4-s67!61CEfe+s3!d`veB|^e{Q9PcHgJ>oFZ_%D$wOO;h<i{yasFzlCOjU+ROK;5g<lAhXBA{G$~~VS*2i@V&XaN6q)MN`K&%z)y5IPFcHHB~d;gJ$`<WyH-pkgk*M6|EH7@Eje*E`)%=Xhlc-6n<QoTQaGcGT3GJXb}j#Zz&hlz}9Y(^h%gV(EEB+nqW>O#BKb3DukcD}mkvCT<xZ}c3GauX+|^8`e@EB>9YF%;_c{g3kKvGH;Lo=5m}{T8qKAP%7!^Leo}%fH?C$QH)ei%%E9=j>B`zSR%6>uz-XbkqNAe?PPO6`!wT{Z7>{{~pY*3;ojn>fg2clJ3F(i0<*6(og^0efRyw=+E%$hkOsSbJx$T|CV1r^t-;I^x}s`*}BoO@Be9y6~}MK$Nuwq`1kSi`MIBL$`<|xZ!h}s-!|~|j`zd$x_b5Z-_UXXz49-ve_W5pImv}T!%nM51aEC|F7I=?^H{}3Zo+!uUABI$1@-93Fm`5W6f+dy(BHt=HDq}n6erNjXvmkG5pI$yH^<X3Y8twQU8vP7rA&xFaNe^)kb(&B3iH@78HA(}=6R*DACB0urpnCbDWOi259q$Iyi?WtUOR;Xr6l5hsm^PkqeD+&Gahgsy?i5A`R1?`eywoK{a4pX7zqE=z&v<<1d^bc^8HWOzo&r7KM5S4vcWPnD5zrPU~=DARu?IgxQ<V5M9gbtv`NE4&NopCBz|wP%eG9urQ;xtcHCERn}p*-65-P#y5Qq0IAAjFCX>hKn8&dRM{FNUsn`02BJxBnbHzI)A$?0tx=WNwV$X5853z`mb7&)MP!mz=QaFx$GBN_WSO&&eM-)4O^eZ(i+9f9I7dqZ0tUn7Ap3}iR)dsA7o8&!W+r+}HQXW6*(k5ZEO|2l+Wv9v5y=jy*fjM4_cW#}yuRH!|^O9Y2W-{OYQ@sEi6JSxa@g?3Sdsnd(Z8FD$XaL@G9)B|&zbR$$@!sL5-y@}RmKke5d!Ce;bj2~K+_%1nboNbT*0<hnu^~Gx>T{*=xSDa~vF|@kb<11lJZ~5KmY4qYKKha8BWHDP3(FR`;k-1oKE5;Sk3ZK>cwK*A>$TG?94o93&xPgiwtVS(ATVGOJW-y{3|1#yK=@i7#P0mcMG%1jlY%u=RD57BZwt4qPYCW%E+Mp#RkV;;86ZS!Gs6H32rGz{&)5J6{3nzgQ0TmrwFKffUKFj|uTe%c)));;9Nq5Rm3rcKe@7o9$4t1Ar(W@*fUXqRf^9s}6b~Gb?JS6;7sxU_o<*v(_4awTDxYX^$fJp8N0UhzN;vOikarR)kFr`aidY^;qONJ2ynqdB!-2Koz}j#as%TOfg9w0kAAq+KzM#ckwTK-|hVZppoY?Of;c)`rF)-c<D~Od6bc(Tbz_V25Yl%@uMJ;FR?#DzQNw%aJX9<^*3`*%uO`mla;CJ<>4fkCx!6Z6^pU9K9*o0fG!B@fxVkI_?+sHV*`>bH&G$6)F;qf_$dC1AMuvsz4bd1P!2s}m2y~_HD!D$+6N7J2;s=ZY1UnF(^q5wB(^dAnkD<FJa3(0dPr7M+^B&m`#!0yY6_%`Z&UrU`yrn)xwS;4v%5mpc@u?c=fruOP{Y=^0xiK(4zzbF%HoF`MyX2nRR2b4_PYN7x&-&htlG_9Pa)v*l**w8f_6(zR}0tu^CYcOshg){d1v@$H=vpZ{>AFVp@_0s^c67#(9{(-e~rvmOnT<aTWnN+NwpI;^Q`Bed^Z1pXM+6k!(b!rr7YNsG)ZD-$ke^k`Yt3gH#f6=N1!jpsHPTC55b$qDq-IcDyB&mu4Zda1#$`T_rGH8`|e>RM>dh@Pj(0&G0=Vyj<P)B}Yq<&mYd2FP$^kWi?s;Pv!R#v-KVrAg(-(D<p=e=~wfy{<#2F-(!p~?DW;{$S?v9z$+TDl3-JZUR)Z76Q=_}IJqsvcjWbYHwm`kP^nz-wo6-R#Q9*mru5zxsAMn9PIWZoV<z+3__yzGlbQJQh);fuBArSko*v4=r>l<rn7){WwA1F8@)lIp%ZD#wB~#DIogEZ{nwN^Ll!EnI4Rn*#WU)Y-VG$nGMV1O0{BV#riu1>y^sq{5&?RHygB_w^n~%{hqAeT9lTT>y`xoDJl+zVI2@Fs$sod<32Hawx&MK^|qbWRu;k2)@KF7(>sBux0bD-2jtnT7zZT&Gi)?Qwur6pLuE7#m|yv7^tSU$EL*NOvva5FUMy{xyH%%HdYjLyqh=Y&|E2g!4{~$l-SGzh0bV{carrvANsO!gH8#pU2Jri_Xz$`LKE$_->O1TpeE#ewS@*sr*MI+E|2?t`al6%{_*8%GKjABJ_4l9l--CSLLhtm@UUvPk$v=FtZtV4s<m9Ca&*}#8IFJw9pLa|yjBKk=ujM0g{Xo+H55I%+P`?%ltm~T^J{(79VN<B?^B-%E@^|0#(1N$k9D+nGI7ariKGO&Iic<UA_q+)zl9r$3FSGrmBmmO&%fQQL%x_wLmcP*TATird^X6K=`OvR7`ac^d`a?hd+i|OWEB5uOg7?pV@SRpXzw|X8WTM~tqM7ZdJA^;=H4T15PnyI1`yXJi@AJGrvI*Xe7yMxSuGL}duFB0s-=gN9^{YmA^)nv!Pji3WgLbUS<J<H$?yrf+ck;QzhcVA@`{fb6a`jbtnrLx5E3|*c13uaJ{TO|xe&&O58F!P3Hf$$Z$=Gzt_0gKxPt?W4_|AG$JGHq*Hx6Zc*3P#=9iVHSvxN@-dftO}2)*uoKR(DeFXHuTtlk}?yVbKg=nO%xtPYB;-FjIiKZ7k}kG0!8F%P~AzrH+hyp?`=&fW70?V7G%>4hiP{ubAN_w>xXqDv3r9}Ljj)h$>0YOOT?MrZYF8}Os&YgT71)k<OO)xEC*ctEf0*165M^Ju(6{ynORtq)6-lum86$iB5nN8P7=p;!8jPluf?IrdoirN7wPuw*i=!erBOz5<$Ugt3!=ABOe~euzH@4)30Wld`C7`&;$xV+Hz<=Lm3fSZxzMY5fhJ;DHx<+a`#cCJLm4E&^J)+op95X`I(tY8zb_!lX{jN>0qiA}}Ef3RV~vbG)fWu4%}N#-aHD$JA@fz&ym+1`kt<)`%1Xy1^qibO4pG=|!~?)9T5GbXyqk$u*9XP^YzTR;R?kRzefBh>}$Ti#6WJqr!yJf)-kK1}LoM*xOXDt9veOU_7VwxES;}Ib~J3F)h!DA-A4_TizzLZQ^*HL^(<7MFguNYUZeEPZ`~9LUZh3CKfE}%1vQqviI@6c;Zpv(x{>F21c=zOcx=o0;}1e4LqcZ*JL3yy#XGD?2^R>uZx<llTeQG0o}5FCksbmyk-4p9<i&-@AGhwYDTT#y6}Uo^UnI-DM$iPjRtX;P$CmK(~D73JAtQD;K^{4$<UsYZtU{h+U7V8Ol+qnt#hLwbW2C6;-sQ4t!5WfXEY<+Cox%Ny3=~Z=(75FAe19^WW1=Vm{|1*1xWTu<6#+03M-c4HLzG8!g;h!O<2(dZ9qJz{2)knaqY}fidS*q92Z9OineX()5;9#?iFtvnuLc<rUT1uyf;dkFsW(f69}?EPUaNw+}BgLE?PPO?0f7imy&ZL9ai4idGTPeb>XgZ&(0(akNa?4L^QysIU5r*NF#Tfg!yKdB*r1e^=^`zqdF&*ol5d{7GjE}L+A~5Y^)TzE7?5fPvXm^64c34-0V6!z<8$15*rUS4IG~PymL4Bge6Mzuvo{N_O#Hs&!)2`q|#_T8u^N6W2qT>o8z9{=Y%yKd4Y#go;vWHXsKMJ9NW2ws@88R9~<-?Z!q;_XF@}Y*>gjMeb<yE5&OpB0@BW<R7<4xNTR$eHb;|KFm!3s1O#rwqAe2(odTs|-}F$kwy?S;TUT*dT_uTxg&E7m!E4xRe5Sl#YIg&}MA@-%N@Hs5o^rFQu~D7UbFobn++n2%Gi!HDtcvGd+GnIm2<5qeM(3>A&8bvje3p-_o>Nb0T(psG58`(hdYHX0p|GHV-i&a7{YB#)5y8ih&E-TlPWh&K&0$gdr06KAwngatf84#<cB4GkHF`mHP&9TD4(S^kVgwS+86XF28k5)wwy%Cm!l{aFsw&TT|L<gH3=M+mgpih&q`Btg+}h{XE#?yuABa8ZGGR}36j@sgyPby&$MNA%LLCJGlyuwLIkt)3Q_C&0XjZPbm6MS+L9)4vTGT}b@?eLAAO<Fc{W&*?w-VYzuBQ*F33R~qkt;Ss5H{9&i+J+ZwM*l;%qNN1oL#E#PlZrz3(c$7I`&bBIxn(0x3xJh!iz+xY_~~g>rmNx9DZG!#vZkIvGvTK&__%^TkdZB#XT0vuGP&qW9aW=ttYT$rmx-dXnik6dm!W7g7#-$aFI$UGw#pyStzS*-tzCLqa5=Tqqslewo(dWZ-GwQXQ)fa01vKVY~9+JxuP;eQGLog_ne-+I;@NHvte}5bmw{OM5HbyN#rFM&TCg|GM}%`L7Yf<QJY0SVidzs_la@K6|W;+iWQ`{v#=?B<QC`)8b9(jau;5-IG2pSfp55gcZMP?dRhFO8}BKve3jF64`I%I+2_)@;y!V7rG3HCt#<axJXU$+)JZshu#B&3B=$Qw_K^t2zBtd`znn({ROCXWJ_YdtWc2`+ayF=MD2gmUY0n^vL`V`Ze^bLb_njlty0r?`AN8$WnfIB7Hu61d)VChAKxP`muFRE8pLhvtrngJC(&s+i>N`?Yf8@;de%D*Cre)vw?F5GJ2BT-!_Qt;-XHVDT+wtL_>hZN7@~xQCKh@*-pZPa7enW8)Uv8%EmDhXx(rtU%_<^G)wX*TEz4DMyV%N8?4@-xIBa3!;f88^^j@*3H()+&-UyhrFl9xtz(dFo5h9~<{h>O9QnD6MQX3)#cywe-SU)<uK$o<Fl%*RYMy;BZxgxW(yV+4}3Q)d<!JQFm4uMpnyJ4E~kh{{t$+lhWi^RuHCLeo8y{uzk=%oVUs?KiQD`+SQlfGQzu^Z}uM7g?3#oq4CII6CGcwtbP&EEM%HVqC>>UntXUE*w9K&O2G`-D>sI7C7U+@_CJdccw2$dmQoaSMA@jU+B9ErKA%3@|IGK!DwF7b92$|)o!!}#U^3vU7CPDQbVFzbWJRHAGs-=3Tfx1f>g%>PvaTrTImdXyH#P4dzoll|7%8@A(UXW9o0-_<5h-Lva2x<^Q$%2w3Xhm<&HGh_LoJoUp(t{U0M0Aoq1q(=7GjOUF^&og74~^{d_>1?4Z11Y;5oWY%tUP-l=fZ{SM`J)K4cir)BX7<XAc$6Xb5x3-@Jj$u!XosKq|h1YgU%%<KuVIe_VRlVfny?-pQ5wZYkzyKL$2JRF#2dZZWw(?yR5uw}aFrvIrK{-Ic$K5BZSnCYM!x{(ev?oN48%+h!ouiK5sp2&4E&*oO6nZfMifPOIDbUiVVOyhVJthBB<+Rl_yn6B2&z<z#Y*TvAJ_Ao0E&yE>09hdAnS=Bk4Ubik&s8VfnYj3^`<1vNfEM{|Myiu4Y`rcZXl$TU_RJy%I^SK_<M}=yslk3(4JNBS-gLS#*6T8l^Z6t4LUe<~M+4Eu_L@Fznon6RVj?MY$RLGn>uLO!p<424{_x+Az<*DoAF(0TZeRmCLY-<!wJf0J)5y#G1Ml*-?17s_G?$fRL<ou-{V0ev-|H3958#0>uMn6F8D89w>?nyuJEjz00YHQ=0d-?Uh*->Ri?dbD2?daF|w_$4D_~Q4V=VAlt@01H{&DP1k+9MjXPk-B#pXc;!|6-38^c=Oei+%F-nz!*9hKD>YefHZs`|V;wmIKoqW10MICqCm~?F~J5T^(Oy?)VnMW{BWCxaCw&B7T#a`VR(7w^nSn<p;Ur8_amLEbGB|^ix5EsVMqh{0K;bBwc(G$ovjaI*933nzEV>%s#wR4h?q9r}jZ+{z@pXj^lO1sAKOFpN$^VkjJ(L)Dvb8NXr*$W(T0`!OJl%DVcpC<ySDD#+Sj0*$6|{piJ!w@hXVzq4y@&`Rthfbg?~TkJp*~NC(g}Ur0l*>>Lfev90x_1D|SKDnChkV>V-n5@uKER{GqhTca?3wF$K@itWh9@boo?hGA-y)8oj$JI304$YYE%FTMQI9crW($`N0X@qQZP4~Dz>Jl1`3@<8RnQFhTcn!hmYhqN>D$au}gWu`=YpSKc?k2_=$>8qtr9~bqhg<_~JGsC#S_rzXPT>7Y@9{KJ7i?JOwkc3JJBgm^EcYFzm>kez|`p655c8pOP`G9OT2Ul#y_<nEnuNUN=O(G&LiJW~J+ain21<OqDa7FsZ6Up}}<E1)_J*Ll|dOMT!eWye~wNM_0qD5^MSD*c=P0J(}L9@2POm9al5f&tR4<V)eY`^;7hRaOpJ*F|hzxv;Xr@FJB*K49O$7V&#zRx@GQc&Cuc}8J*T`Vdjf7Q3!;n%*LlmXLw)Gs`{znZ14$o^;g#cBP-%KMS=49^(m1yY_Q7I$$;EIx5)_+jX|a_HZJt?%+NSTs3YFr5n#XvQNXiPS{f&?MC5wEr_p1u!ll@*C}+^}U+POOZTdDYvCcc|d}}*|G70N&F{vu5u#Ao5et8K55gme<H`w*ssSjzh}qDbp<;{?itIg-_J0imY1xJH?k<RHlF(4z}jyKS6?wSs{CLp2QGCFMd}^w)O$lSPFFTuNW4f5Z#fh79B5v7rFrFKKO(Lp<mK5Ljr-C!AF;mq8R(lIyz0sGOwxzk^GQ<P3r`OU><2}nEJZLA`Qz-7t7eZMa7%j5pI~KakR;Ym%XPwRR52L7d{9nUB8l0mL4_kP(+eDVndp|bbUzvG8<LwnyH+<{bsN9iYu3-}YBDV3z~jwW!e$~lB%wNI{q>AEM$55m;#wWc#+Wm^sh3(f+O|izDVc3s52RbA_q6t^&&pVVGGDUt2ZNE0<zFZf`!;fx4eT5&3og6fZ1-9RHs#`=r%UXU1P34MsgKEHY5#9hWvdnCLmzoeI13o{5|R`fbr+E2*%DYp2e3#yv`I186vRhdd+6cih50Q?FzOdS%1CE^qQTqjz38^oe_|tejE!&^7~z6{_T;Dhpr3QeCkY+bFYMhE<g+q4$tYph7Ue}BSxMtj!<1}y%CiV`;-Kv~4(L3u=zOWaVI7?0;K2FD!S@$4#regvL3Nx<(lJZin=8p2I_Pgm@<~Ez!rt9g!tuG83}>TuYH2*PwqVF=#59(bRBpz2U?@9~l{Yzt<dv_g8(W)~5pguXaz>~saupFkGPs@F96%1QAcyLdSsOAk=Ph70OK3F<JN&tA7Uz}k897++FOVcU<{#KP9~^ydk{^@3zp+z5xupHAEjRM06YV>sPo*}aq<t#Kj*&i<lgr&k{*f53a!kr%RmQLSdW_vWi9vnjGzW4)gLsuBgkR{r65r59J!)bvn8vh{kO!#bUhPH}{Fk}%bEcAO{mcGO(#tD0q~-qwUuP+BrU;~2@B!pGvi(fQaAmCb#?#R{1D_8eNx(oMLOf-GQ7Rej$M>c2&+L6mVrW>~i(+{}IfPd><78-b8JE!V<QEs~(9M+<2Y^Po*#x-`NFFqr2ho2D7*1<<{K0t2o@L*hS33^KEk_2iWc&DT{sg)%*owzRrUSZ0_z~m}Xxp2Qz}Uvn*hX?FaVtGJid*r=;$_ayIR9zK%TGHR53U@uB%_$W15F$-v77-<2LSs3B&9j`3%`utb!rn7I#$7Q%(TVXxP|lz3cq0f#^1I!XYz8Ha+f6fb+7^Nu1Rge!0w5cpZ|~d{9u0l|HU@B&Wj*(FDxD%6$T}mvDjArf3m&w5B?=F&J;9^+$v~5pJNdD=5JiPVq*~ZH1d-&PWhX&zH-W||Io+2om0Aw6`bbexZ#mBYvqm3S>4Bc-(iii@`?x3l>hkm7agkXZ(Q$Fu>pSz%)jMrndX_Bj?cY~!S|<PNS@>_A^uYOB)|SOw(u?=Q?Vu!_b+4?>*Gm^IeUGP9TxMjyZMe+f48v*rf*JiqfB6{ZnXpQO|rei+)%!{s-ak#+vnJmn2!r@AmylMYpEk={ta&+;|_4bZdanFN)R_2a=qVXW_@&{UIj)kxOE>DF%(i0DInzdRoGIV4l6TJMR_<1ap$L&mt@H1a@e~b590KkNLbw2;W>THS}CS$Y^pB3Wu5o2*7&z|S-Bx^yse-v5#OE_#(Gl)8LIX{=gbS!vE4IvaEk?`xu=4gyV*9ay{3wTrkcBa4-oHwNaN#I|07d6G9ECGeR9}Y#P2`i2%TvRJN*6s$hRy2G9bZK_8AjU9vR;<5Xo~55c};*rik=j(vU{;)B9Kcf_CK5V|-GJ+7wFfl*W`R$Y}~`r{`w#o|1COTO_iv!(nHn?N=^Sm$l1lO`=f?Hf_9f3i%VFP0E&;FRxxWOo@$LD9~4^54$xVV{H=#+9qhCH*Ux2Uc-fb%WEV>6~}1}&&jiz^XCFD&xMV=!dex$`Js4rJp0*MC?V(1dg2TB<XEB|7pt}1&o=R^yFL^v+p|~p0w$cgd*aA|jVB+C^j$wl-$nYvkoYUlesIv2mgFz32btsKeMgg^a8<{@X3;BW@0B;O(9Vz~V1**ILcs}ll~o&&kJd6Y?aC08ByWWGAbWtjSM3eh+Z>Wa`p*~Af39aT_M_(=iy{BTqYq^3c02O*=}Vw-D@c;B>XYd=zdk9)-@NzFa@e_R`c2B(efQ70Je>6fP<(AT@1KGEq#fm2q5DVq$)MYNj<qk`CqL|w`-JgfUjN<L=fCk3-(oxO?darM$2D9i8|Strv7<N7yW*YrJD16yIb3!(G4oe{lRRO6={)c4=rqUFUH^Hn;Xcg=I;glL?YJA%|7g!AFuD`@_|!QRIi2x!bY%PA?D<5$@m+fks6DrsJ+GSt>GN}LDO)TwCl^&J;CtR}oG7!9lj;Wrg}k$h@d>bb31Y`JoM7afa|B!;0WLk0Q5?17eDjLTr}+v3YRC6k?R-Fu=b6oJDiCa|dC@v^SCE|N2>ZyeiOrtzS&M7BwiC3{JmC8b2@N3EX+>SIxsQ;|kxbh~8Y>1HeV(?+47vFU(R1x5W*Z+aylccZI{$yOjsLec&y+*!m(4T%p_YfCUiha$8;<U?e=4-$q$_OyR2X!7Z}S*m!G%|n;wL_B-ZjqpmLqf0c6?V$*1Gt5|KJL|TNj?xY5bF~XGn5OeZ7&xc_-hE6Mp~Q=lgp$>MpLGQ}QjOw&A+4sBPF(R6p_>FZ#W>fhXc?PigOd;W)nF>n6CQDR=*MA=C5j_&olm3pL4KHKl{4ZCn-?fAc&^F={z4y-)5O?uJy9*wo#4UhIcghwjT~f-ht0yA;Z;PSiaPU?NU@Vl0)?{9fa1?&AW!HwK}2f}8haJcYH|bLuzGSJ?UUZ=P@Z?u#5yZC<bQr{ZX6IsH?!g){!~{!@7SRQ|EoC-D0CCa(G(M>{c=HvQF`GNsvY%O7)BUxM%8zNc{RZ%QzQf6&tb)3|_Z-17Z%(WFjV>ql?O`hLC9;w;Lyt31fpnju$z6Jz#^Z=zb9^CDN@!n5ORayrV(AdoT92Uf0mYf|Mt9>AQ6f4Td9?^E9|N|n>z$`XUE&wjnHue_hE!M?xG!^C|q>#dd@-13FI$f!16hnML%{D<vS`PdWX^Nag=H^1d{<LvABktv^b@gn!9wKXjM+TTq3gpw-W#B*4Fce8&zFtCQ@{rgVl%e}|*_q82UdqUi7QZHZRBe%GI-zRmVU6A^6Uyk3Y7wUxlSqybg^^O<&uX9`qC1BgCDQyq`jkkgLEGfmRsC7epW;^82YZ6Id6;{;Gb+WDUfkTdC^A(MuucAcCFPeVqP6>!_d&)HBH9-9$(hb!O6+MZS*wvaPhLV$Vr5J48V<6b4oZ^{d`It2Q0kp1|3dcG})!DC`cN}>zj~ml74`$RUp{Ls?+~EwG&CG8+;I(Lj+W9kx<x^7ki3^>m;JhqEC`+{}$_#G~kuJFu|I{;{;s;wl)EPXe5LGJ}_Yu~6kGh)y89jI?wL`s0eX;q-HNF)NN}Tand`7!t0Gk=$8#9mVS=2P4Upw<mLuuOb@pA-^SOAtUIx5&Ie9|d%03F4RysgXOG&RwD-P9c7j39`Pb`X0uHje_uz80uj2FU0N1D*m4?{gjm3B+-5){j{1H@L<LY8@LH=>ft1Esrpt2$kj5she%9YOUEb(4zMY^#eS6Dz>nl2**Q4Uc+q<Rc7GXGu$7u))m}sGh1(w9)y(@Mn@MzV+%v~1h-%pM$Q88-Yjj8anxXKT|1H6peo?80-(_W!E4F;?*kEM>s?ht9lt(nUROlm1kTMaijGzgE0)()&zb4eUX69Mtsd4bDHk5Au%4???8Hbowm4R5#9<S44G&OLBi`kMw%<fs6o$H!LB7d6zBsMTYF{+XJhISp&>le$I##i59&+fBI+T)cQ1H+|$gRD7Xn}pgNmgW4v)rtLb!ZHzQx<Fe7^G)k%Fp~^y{XGAc1vtljs0uQe^#y|iMLJTlm=u>7(1tw@@iOhS#;<<Z=3g2+?BT3oNWv2$T@Uf{7iWxY^(Xefg)znaZirFQ=W<3JU%RRcCUFZ!m<$2um7=Nykk}2@)K!4EjnS*>9Gmf^NWr0pau$g_OVG~uUSbu8}XzbpmeeBj8o3$+!n0UC+!YqWc2oI6q0+`4Jb@bg<1Ky_39#Sc7A;b^QNy5U(xSbM-fgSocFm=IVnW3hdiM$!3J>0D2;m>%iv;^)?~bDq6RE|K2;O$iAR=vEDUD}>I!*QW4T%)`QnmsJPC~w!KTvv7Qe&Ros)WLy262vIuM4OJx8&zA=kKm%|8cxb3nYa2NpV~mS?3#dc+W<z`%nCrB}@N8Wek#<V%cdJ_c6xmKzj*S2<ye_MQPwEc(eJWnvfye_M&G(0g#8SLLnOkTP#lRpAR0pOOePYCZoT-?-1)qRbg*IX-1EjR;|QOVWn;D2xsq#apg5XPN2zkeT2J1Ri;3z5<(CAF+;~IOrwg#SzNmJH?13EyV;L$o*e3)hKwxgDB|w73E0Rg!H2zd5T4+$)fogo5nu3c4eqFQONbrVC%rNc8|n<tUMkVF6slHBcu5^ox5ixTt)nY)=<t9R23A-*HWy7Tas@CkmekoBmWq+o|i+4IU0t9oA;>JNnhD`nQo-3Se7DEPKoGsk;Xr-BE47QC7aJG-bWmFKh~v;y%Tv`Ov;8~Uphqc+q7A9;ZWJsu}~TBDdRtt#GJl&ME-A^J!u2W5w9`gt<q7awHxo*54lLbhar)&cRmWrX%d57ECTX<ye4UlZAQxH!tY7S5j1Pcoik#`P0+aWPaM~Q<<;p}{x8^{asGMnG(OAweAW?1%{JpHzm0cJBHReop;=SRXbi~rP<nC><!s>+(q1VZg?z&*72;2AgjHmKAQK)lS>UU+<<#Rh_x7~jXr1y=SZIhv%IhNSa~j99AGInqsy|4}qG1@)6J!{&QA>g9#bAn~A?;l#`yq>!7sjt2&AVbh;(d;zrq_sN+S45^Blo=20Yo`yNF7*ZYD?=iI>*AXFDO3|&8H!e{LRmdgYhdi=AN&6o(k9{Htkf<IS6N*Gtw!p`E$<5|B1De+L#A@we<Ye(k^w;--osS2GrwEs2+cmo+mFIiKY_Usg$+N>p@-085fjKyjnhSfRlKIlQ!_d26KftlW}P%8yny<GUxcMZr_{5qI}>2Ti{h&;6NhsN+Q0?7U_*%zv{iHBtI7%jLfhuqF-+Mkm`%chnR7F%XPxm*V&e?eQ)H}WozGR<TDHc-9BBml*45sXST8{O}70QH6#?DK7;YH+VTK15!e(L@!o~&msPrxUX}2o$@A!&n@6Z`eq6L>NQwL7`Cs*C=0ML{BL;e~kb@6M*Y=|(+J41@03EI%NxrU!SO*cxs8uE3i(wEHd}i1Pwx#<HH}2Cdtuh8LOB^s#w4?84o4XM!BJ4-3h%m1IlR+`tr(1@ri8xgRI%<^{->5%66UmE6@*<MFJkq>SP+sI8K9dfB=aVG+0F!58IU*k?=7@Rzm4E?x#ekfmAbS5AWYFk2(1jby^^z|oKVLo)$5^R(4%9qPwuji1Ojmy8!p7sZ#^Vel;56b@hB)NOmPaW1f~N>S@f7G2Pl0@fm5yjACBsR&D)3h${-jQ{5r5*CBhE2Vz`%}0GA!6JR2tT$EN!w~sq*Z()N`H;tey=A*_^_EZ~zQExstP-8N*!;#OBdw$#a+Ghi(0FyHm_3+4q!4*94_pcf)(8&TFre1xHItV`Jr%FCIls^~wR*^9ph1!Z+X0a$h~Ogf-=-Z|hqW2`fJ}A3-Gige387P7waWg(mFT7S)7dWg(Fvn>u1Joi~<0Yp1?2OqJ~U3?It2+-3Xud!i{;qJag<oa%wJ!&lM{U%8Td<z((v^oQ<Mev`>}cLS`G<da1IFI^p%p5CJ!r$`D1Qk7Ryl`DCblX+6VhQnL*1}v?Eme$%KE>{+<+XG+8#AYlG1$K%1>n>$TY=uB<g;2|Hq`MYy@&LCxi(I>1LXv>FT|smE>?;!ITYV*Q8h9Rz7vIw#S&B`~&&;2wh(jO8KS#_H)ITv#%2+Q-#UHUgj@;-Y)`yI}#(1Av#bX&datB#`3cp}u<FU@TvM}QA$g%QLXR5JX(yf2l{`x)Fd_?!x<VnklJE@^<JXiXI9PX57%JIw=Hi)_PpgxmbeWsF;pZsL27PK3(Z4}7%-yP14WY>*U=vEWDHDB~&SF9sqx;0mSx9eDc)jz%E<e!*xo*EO|{O$VE75DOg)x){Z$HW}nWIoiCuG^cw{#!TH;fdF`PepW04V<__ainYRrs=tXRqaz@o<xxo=V!yqb;AXQF07)xl=8q__~}U*HHq!QJQ9D1`gQz86X$cCJU!=v_m;+CrV6;B*jLiGzf%nDl%5sSqUZb}48Z}$4$tCLe2V+?dU~8`5)ZHXi&t3I!M3cPpK&VbE5XwvuRJ|+e(}W1#nVL#hj_w3fs&yh3`oLC;yEOtDr0!OJ;kaXS)T|;9ALumZ?xXq#Hz7+uM&Hx{#9G&=5L&{7`c<!#KE_<b#8R7uX*L^+}ZmrKIl5;O1_>Oyw25~=FK<PI8JiwYjn<EF~*n!;%B2=IHaiS0Wd%Vy4~DIijF!sfGs+JP9Z%LK2SY#zuWmq-B_7<>@Y;Ni%O1;HQi>cKbM%O5y!pL*?2-3<0=`Rs_4cs1|0F;Y|i=DIv<i=g2;0MGIq~JN2KSA1FI`6|6^VG>Fe4ODCZSa&d+@D1|B#WD>NOWm7aUpjIl!!TBir4TVrFrJ^+#ob1eaq$X6luS)Wy$An*N+_D3w(_^rlx6jq`Ww&r}%p1+Bwo#azc(@{J5`kPMkOx@^!{PlkS<T;i7kw2l>F`GqW*+va|uA$@Y0B$|K*w8sX<%HS#?^yOlyZ__2qF9wM#vC%d)0)mBK11eP2lU)g2P<Z6%>Vg`(YCai@laVz%hAxNZU^y6ukfWlTs5c#(H!JA*Xo*WEGqp~4tC0-)cZeuvvK)o{ANEc`r_ZvHTzYT-_W?b<;3~x{jTl$#Qn-}{%>8gKYeS`U%gH1eaN@mA%E5`xUSNZoN4U5>pA`@jf1!N8@k})@!xvj7j1;t@~=6bC+?TZWL#j`Pq%ABQ(P&!b+h*Jm$rhHe{rucj^S%~&)@F%PhH$k&R>Po{#747=c+CLn#1`|<r9;k=r_MJyYD3*_CM>Tzqz`pdFf{?$^rDRwZUKSJ94}D;2Ej4QuItSyl=-?ws6ueZN@o-i)QV>=1Izg*{W)sI~n7q_7|<%aqc7?&)Z$*xY)H!|F77L*KWsogE7|WY#4?9#KA2(S+uXGdE3xXdt&q1yu+1d(cxKl4v2dakmX1;kB_Y1avv|6x1`_tp{#e{;jcDvj?x;v!-)FT#1@WY_xu<CEY<tG))%Zp%GXI_19Y${u_uG2r<3G^rA=*XxvJ&N(PqPHBmcyze6r!JcD8bBtC(9FcKx{3J_a&YCw>*TGIq^;Yf%l|nPbxZS@W>9UK8ZWD;v|qh2~s;XtdYT@Z`|JG;y(=8c&UNCfE6h>?gKUFFFc3>q}ys-WpR~q#C6Mk<a+||EENAN_P&3I{`BYdc~~u%m?q#Hyqt;<cv7uvRRY&*N$svy*obal+f2sF-=%k0w2zGr=bLasqEC0D4f&;=OC|~7if}BAlif{cja)8T)A&KdEb)pUATd*8zhyp(OWxsq5Z``u{rI<_j?FT;6*xClXkwLYYLH`S{bioIggK^Mq(})8z|WP8tFqCH&M>bokBlu)<(7QYvLQDzC)<5k&*CFtin7*S=RKMEOZ1{f08_F=ZCEXGmbmE5%1v`r>oePf^Jua299z#e+Lb5x6I=)swLAyD9NIu3iSR=d@wBx6=f9}4-5U+pt^r{xwJze@%K@`0$UHIQ3L&^2Y~?+7oi1ikQJI0aJM{Ig$lin{M<k1eCndmKYGYHLcNC&p&F4pd3wVERPEOgflvb=+4AqJxTn|g2&T_jlbR@+9iI(*22Bj}2JML77(%W&0LbrwjyUoj08@N0N*{Fn*rTwXLjydAx(5Q9kH~p2b@J%AoUaiu0_2z(>I2X@D2STKHFb$`F&R#TI46r55RtN1GZXlJ1IQ1aO8k~NY;d&J8yjm{M)GH%sLI^Ndxa4~ZfGn(*F@e~ai38irj2K;!&D_B77eyIit0wiR+yRkAfT<Ix(4uJ<ISI;eM09nKuszJ2y=P7lQIi%h2=ghPm+km;=Qn%a~APKZlVrH^*ixZyQP5MmjWF#p)*#Ww!h}VDHiy|59`?L^H|xZ5$3bVy~Qqli8~-;@kzhsPrC8$lz!Fqxbe<zGkvPR#w|>8WK3uxP4|lwAAb`w@%7IdCj65r>_##%4*tCVU$yqGH95@Pm%;a+wEO;o|NIu0-e<o4qJ=b#4J)s?*slL3HFZS#oWET32aPB*pnlB_ognG=v{4I2q8O`BTxniblekib3A@JhTycKBO!*ZSXXaH+v2EGa!zs3{JW5JblX{$9Flp$A63y(-eBi+lWvkR8Um^JzOg7J<&mUA1sjgTLYmM*H&-^HW^crkn-fQ9|cDi#%p83veum$=&LLZpUU5M=e6V+2oVuu?w?&t3*)lX~2^$5lCn!E)kk<EWB8O>3#W&9W9nA0R;dSVUFT8{b*n=y8KRx*FV5=y5pm_~zi!rsnh8hVDrQQd(wn%6?vpHgBI)<~+87*s{ibP>lG0dMC}{eT2rG~Gr`u5vPF02wKYj;Adhc&X5!K8ihzF$0pH$a?jfEDkzwun(L>Sv<+MtAH1*DGN7Dn$=eSVUrJRtI3nQDNjD7yfTTyWn$Sj*U;8ywYR05eYm9OIGeKd-Ja80JxJAba5%-@aDKVv<#NlBMEn+KJ7f!G$8*$wAU?^;k$jSh)$(AIq_14hUol-#@*I~u$6d?F=!rFLvIICr(HQ602(|%9q=R^aM(|2w_~`SkO}Tc|WN<drk9qlxku^rYX&iTgm&5>>t?tSN;~iw%x8GP;@G`E0$gV*?2{awBXstJ3sN`8HIX@|#FWTIn_Z*)imC)Fg<MWg9GatXTxqpt@+{8!H4Qo_hsUgMG5)*$SuI@R}hSN^<&$>38b%X7ncMy;<)=_?102OLSrB;C|Ye!W!=>A`^w?C*>)Auyp>G<_O%vD@Za{VWL?&<z2os46%UvD|Y{(-suMqI!&XExKQXXCN|>3QGg=q|Pg?)sys<=;&AecZygIk@l2e~ME(yI=>IF8cpo4pSW2wK9P@W?bc07ys9Cc>O*XdHlcC+ez%&wC1k*KbD{S{qpmkWby8LZ{qr2ns}dclh^*mEyjA1OZwV>y3hCX6gKv@9H+RfC$YF@q2A6f-F^QlZ0~)(CNR6|G?w_E&zr&={x!~Z(yzR~?<9wuKgkKy{qs9aVTJF$gE6HcJ&lRJdETJi=YRb_<bNRT$hphk6xR4nX(zdrZok_L)eOIn6V9gUfjPkmHHFc?%ip9uxPK38@;!v<_qf5%-<R_QhIx|v{$KU@$N!uAsFQZ$w%n`l)W<2z@0&WorS)$+RDUz3W5nLyWBzaN*GyvXO<#RevnlMoabHdo?SqbYOXcLn!^HU$u_RZTtbf<4y}#dt_T?WmC~v>ZVoK*)Ht0GfPsWG$=TEeYtC*(6-#Wwl=P$pj{cHM%7e8?*SN!f~Ui<3L^xxmqiTeMk4J&f?i;VB`;eI>z!8NJosvBL#=frO&PSv|A(wKys@1jl2r(A3Ao>t$O&o55%TDkSh@9Xh-qTE;mr*`Yw54-;k-o*Q}hG-4e{d-MmlKzUdINzT?;m=;$hu!(tGg6kFWA(br{i~MnpR^#&xiR&fy@~q!D~4lxZ{MG%HEL-4sPIiBcTx4XF(0M=m-)8I`7fqDdf)DzC&pDb?e033>*|l#vx#<2HH($jKd!5S&DYej=>pomZZu@B{{FJwwFvv?^|o?7zG_j;i)*8Qbwy*5MU@(Lj`eIHnDV%a3~YFiKSZW|T1TE*Sp93%RxxT)6GzC+kuI*Ho#ZxQ=Ig^T()$R+#XM@C&I#A=Grh@N9h(Rqy1X@J=v?!ez;{WD=PBoinbFs-$-jcGA41dl030y=sL_(GW6`;BY*yyFQQWYpwy3K_iXnGJun2{UJcFm_yfeOa&B-#;6MzZKbqrJ#r&`ifhs+}H2zv){coug3JZ%j-GC_bvnUCOb@?q)~TtnW&Sgm4R3dG$I>V1-Pb0ycj8brK>+T+}74L;JHV7*0EfEp{0D>v6c4O+fIjdOn1k1ZtSkcWI$l#Ji;!8G*2<)lRvD^994mKPnxtUacrTstiKQrPWgq1h)1pA1;+GZ1=y(0aSn=phg*ln8~8)KVNY$!y)BEvfT0sEv2xRlY*upuny?g_;2h%8eg+4<rxdJK+d+Sc$g&8PxqL(^0n8aX`Li7e-D<${{Mc-c8QQ3D#+pcQmfSo%s=-yWH^rBV8&qz87l6#YSbKt`|epf4G9T2%`!`?a@Mre0{Fj1`$t=JFh@+e7E+G<hyJs=YFoCMaHKoXsQkDzz_(|!R=fw6G6M)DsIY`T-a6nA_ChytY{w0BubOqa12sLPEuoGZ5VqbfH)6v<agdF)GGi({;+}vTCRe7t`=deM5L@NuN`Jt<E3F!9I?Pj<o#q+ACjzgtelivDDdy3EZ!jB4^RZ^x&g0I*C$2Yb8da83WQf-m+k><A`m9WBs#hY@1ECi4l+~9yt6$Z<Vz^t`H@!5!`e8n_4L`(4Y-PIDd`q$-I}x~<O{rmYVXw*oXV|dM;wDgRO2`~qc#)f8ESA%x$`rWo+;)Zbj@4B?@pjSD!6SnUexP3uS;u-Jj*=J0o3`mj-EYeJg-7m3ap)-#`W0`Wzz0eR9|7Wj>xEm)blVp^g-?Hv&h@v(Alkx>TMnGN_aM6Z>x*=3^vKu8-mUq3e-R(7W}&HQPdd_n$r6U;s@QR`gJ5JX<VK|WQg9G=T_khea>!;utMr(6+(wT2V}6?_-6;ME$6ME>tmXM@~x49Rzm64sKS==7}zscQ&1KabCSQ%)0Fut_9^Exi(e?3<PrmQT#zz87ImtlP(OltzVkb(8KLk9I-RTYVHUeXsPV>{{GRH#dN#ezBXui}>^Z4dP5?bS)8}<A@EdUU_KAq7enAI>`L2kSHsQTFX~PM&Q0Agi3|sKv@%0Iv$rm$+V-On_uG22>Knf5BxmodmYj|+3_P9fvAnxr5*<yZ1nMdlI-!_Lt@VUsU0=(5{328qGg69=<sP@R5*o9}(rUu9x5zvieDxfeokn8Dbmm<f>4JGm$I7cmMlX{Op16&Uo`&C>^;iguFlH?{zD;yoU&vMcY<K3;R8F@4EJnj@Va9D--Au!SaaOuvEm1DxEbGLT3u8>wak9!Xu-$;Etle7(6EJiU-vL@ZRMze{m=G8^%>pF5Yz`1iz?2V|Yk`VH%ly|DEDbAi*OPJKVFp?ff-47{Vk$kTJA>$cAK0s!9%(&SM)QwYci3r;{X^ZL1=js84Jk_tLpF=0i3^aHVcmP6$))97-mc@B(Qi0!MlNS(aqd`!smv_DJa_*9Z+n;hiea*JjCOJE%7pHGg<gGAYNFd~gbyJ~$tCHNpFo|>?al<j|@GPl$Yi*<-fo4R+W<?oSb(r_INU+H_RU*>Q#YtDSg{V|%gO$`uiA}Q4d5u6I6a#9!B&;1TZ@euQ_y^D)-lAqVgK;4}Ydl!^#)-|#lD3*ey$yNCam{9%LnB+knzrFG)aNvSYyho;iqJTQ9Z<7|*aizAVsra2GD5IbmaDjV&`Bc$Vq=01y+)0r7ZA->(4fE11FZ^xrlbj9DdCwv(KTA~4IXG)N$ZqUyW!}<`O<F`+Gc7L9lMa@cUiO>pvJ$iE2YXIw!t>#>H0G;8e<)D!vmmEOiKSihXQJ?kUGa@5#Qt@qOnLczHPhKf#8|m%H0|$3Hff+xmIW$r!D6>sgDV<t&s~2Kjr%{<<XmGrX6Yf0_j6(9T(8ni;}w6L2I}W8TATsQYQ6sXrjdDQx}U)hRz-rwCOJ8cXJ?O<O%pAfrl7`Xi4%;+F!HtThf*zpU<PC>BfqZG{Ev;8fGEhV5&P2%{gN8W}#8hepSG{k|nHPJrH}?t3dQnDB$-bbYi3-gKFF0xbghPcp&|%io_-gL}Z8N9IUte8?}k7uE+H;glUbSdyL@x!>=1s&N7E$rNfX<;n^R6#zR`pg<fr8I}AATfFIgY5c1v_&jwE}tW1yiH7;p8DQBNx;}1EHs`OlWLDY1v=1U&wXOh^kpNWldt$v$vq&~&Il*Y6^@d&}W5<&#w)>wuOFp2*XfVL-(X$0b{Xr3m|Rw3+-3!b;=Mh+K`)m0Xw@+(G)jf}iq0Z4lf>gL5K?VI$0T+CGpG)OnV1DmvQ74i~-)`AV@3Ks07oKnVjd=m%7@TH4Kb{>Vz(6}Md;q!JrYF#s(=tG0O9mE3KB%SktMaE5B;nwJL)7a!DI<XK2Yw?5KXFuYW2gbEqJ3?9gil=h%&dwurE(D`X!)2z6PLl`{=@W=wXrh|&d$E{G8ZYHFH0CLb!8{g@^#A=;ypy+c3sO^aVO|$JjbTc;Vn41Ko@hoacZA8S)9ZYGXvAy%c<SgFMH|>U-;u6^GrZ+DaFp-Rvc1A`Jlk>>DB;xkjtfxFtElJ9!w2W%ftT@cxrW9MJjlpZrGds@8nOJr?4^PR7F&?W?Z_jV_|BHa1{kH9jy$3X#Tc{rjM95!$H;a0c<e!r2JIFH^)+9N7n>WoV4Zs8f~8v)3nDwt7>80V#yAwZ9p9P7GB7UUg7S5%xx6IBs;p!h6XY{p6Ml>pNz`oQ5I@Lm&Eg!$v0ffI_O*PBsUg?R#u$jfd1u-LmaVNn`E_~7v<ZsRi<mY6Iflw`d|s0<esFSKq<ACFbxwIdho?PPKJDMo*7rIMEMp6j<QHNLG%<&on8|_1trlLfT6*?sx!@B{O9w9CkG#qsIm_cYUlMp(5=xzPY1>t7ZeId(yOtQ2KgGC@oTqaz@(s^N?q<bex-TS~CbwhdNw=Kr$0C65{1KkG3Z4$()?b;Az!iQ%lKdiG0V58f5eIVkE?Y**kvd~PaiErXrIxs|kT|)JE;u!ws>>P}A{Xl`_u#MGH>4b*?Z}Y~ZT5VRbJ_FR)@Pa!0sAI~tEMA%e<8Occ7N21pw%CB?3=T#f7#NOBJJb@x6&P$a7qt3U?5&02_0+BL?VZdGu}API9ZyLa+{NKoAdGEi9Yv*#RbqZD^xf>_lJzex<-x#tPWW-8gFzOkB#w0QRy7USfrVfmn@#(haAn=yI|ju#`-l=qp^PRax>O1ax5Krm<J^qxvigMv}4C!WFuq8WGR=W&-dApa@I*X>(UW!{Sf^Gz|<f~z9v|JBuEk&!-aktGmV}{8M>csWIg6_uf)H&m7m6VDbh&UG1FJZI6^XBkH&Va3A!r!PkyazcE*zALF)?&=HfL2lQLYBGF<a?E6-p4!+D?ySo~svN>(>R#PY<pBX@5*#vx@)cSydhKeICG$uU+&<XAJt8!7D=heWsjWy{L0`%-p$Qg#PYb_dRXdgtY*_k(Zp3&zoZ9OFSW&l>9z-O_!-9{1^X)GrA}JLk&H7*C0O=Vgo~8PrSJxzq;Iyr)!{lf_<fYB<JF)pB#;E|(pD)HbQLWaL2K$ehpYN923PsBKbfVAK~_$aSJ$^ioWAjN}EBOxMI#^ij_sC_yl47PxxuGtGj9V$Srj-GKK|qp8&MfoU|^iuuHBk|q+%D08OP>GUYC|Bn3=IRIw70%jv`_$8KX<S?h-?|Ez|Y|D+?g$yW$Rg!)Cpj)=&TlRxO+FS8K6SWK5c<Y<m8_>=lkS0|-$EyAkkmRYJ0usrvQxA}&+bQ-*l1chMxaV31`b=@3WSgAvmYB-J3+euruX;d?jh?vJPu!&THgaU+L%Gx)(myJ*fdlZ!EAV(=af^?>dS*#plDoizqr!tiQcdFnmwF0!oO19u;5_pRN%CPu`J~mjP(<KvIN;X2;?^|IS0ld(R{xU+^2o(c`hZ23Ly~}Qy(C4KBVBC|3r{}hSbxnAK1sTtODu2XdvQO>_mau?lDYCAbMiqxl71y@H2@+DlH{k6=z}rw47UsmmDABd^oNKahAmeP+nv4znkqt){7V|+BR%=W$9m)+e3ER>KggcHM>Eb)HXOuTUZ>pp_=D5OG}=GIkq?TMOPp&Q3fGowmwY>$^M?a34+oB<KYza!`F<;z5}rWv%^>+^5SO;$lnUpU=|(;u&4Dw_k3Ys3{wXG8oX{O(2F?G1t-O!%nu@i!!Q4z^QCeB#WQv`;(cQbthw{BO5T3@uzR2cZF`Sdw!Pci3zj{g!n_>jjlPkNva#pND{lxq+zBpPIK3(JfE0$uCQ<-5GIA4xa>B61-H*Dx#d47*O*>WBkruDCwlH2b&wU#}#)>~f1jqGmtiT;uQ35?7n&ysN)qwzw#jsNyO6BwCq)hEioILOIhD|GIDyHMWU)5ynnTR*3;G57hH(vQ9?mnrNDYbOz@hqCw!^C?rzr&d2^wgEoC8ST9oS*eK=uf=gH0^%|k=iKZc(iXf0R=)_WR9#n9gpA_sL2z<gN6F*eJkY#DQXk1Uj_2uoNMg`&J~#7QTqg`Cf85|G&2Uql!w7W<IcbjMxvLqcq$Oj*#)wnOpMfy&43CV<kBc>&&Dos0o>~D%*9)+lpKak884mysvxpc|Ul{nLX{_8xgv>Oy>(E&uGH!PdyIp9yC(lS-R|hG!8t@!8LScH*8V*MoH^-<2aUfQ0u6rrsD=}=0eIhOx?1;u~1~B!4j`D}3dpbrB_<kQ*^^l)Y;CBji5jvv~N?E+KA)Vts^WG{<Ppr_bogF}@%g%Iu-+55=M)Bd3gwFg)*eI~z@Oy3{J`sQ#8A`V{3lVmT6`04jb>q}2tWeNk0UmY<Y>&xvR1R6^Wd*ACewPeLFy=^f=Y9+aI;Wa6<q&MqJQW<|ik_317$u@|$oRC+ERaFHnCE87Cww2RBYg(q)Fl7g1?=Z|3sOIHUQwew6s_mD^<kgI$ct()&uTiaYPfVw2i5N2HqCq;`!i^zebV~ptmbP{w%bhLKTs>3L%vs#(3@f0KSxaiz?nPIIb-D$GrTR?{NTvB;xJ9h&$!jRWbx4kw$PB9uvZSd1;h9wiNh4%k9SIX*y#+ri+2V)7JDa1<CnZ&=bj7m*yBI(-6H8Fh5W(i(&pJ(jJiRTGT3^4`-~^jt2f^~i$LE#LXr&P_c+Awk%`|!5^8hiN6QKv#~M^$Z1hD3BOLu`2g);s1zsr8lP3Bc_0xTmi-BI}kR+hN7f2GtygHU!9tFjP%{dFaUY|AE#s(|W7x;BS$MPyTkLOXpll&%K{U*!z=Ux3aVrTz!?lT!zI>n+cUlY&Med3Mywp|*6;-}<1T@9#z>O1zX(gpb`{H3*_RtpYDOJ0$dWK80cF^Nn4F)dgoq!PbGeV@Jgo54KjyOrmYq~jI#@hYz>o($c{sN3W!-aHb21sZPv@E?#QO6deGbn?{$hwWGSfj_xtZsVR0a5IYzIv038N%}UxK1n(b4n7Wgc_Ao8#VPWy^duKFFM~Xgynk#5wbYG#Sl#OA7=fpFsbuJx2S`GF!8C7N<uXt4O2(h#7^yVg$8Vc{$g>OX`Qw5`CPvzbU4hoOx9X@bOHENLq%4LN>5|9&#Q>D$@IsQu_TAE8`z~kCfI5?p>Y$9<**h63XzQ}_3TP}=sFXrFe;*^T4tbxhp{Y9mn(|OuZ}}xX4~xZY73xw>x%FD05F4YeqWN8{{kYaW#@ZX@p2ga$cm2>LW_f+DJ3NIM<nH(dC;g=8ary697v*Gix3M=<+zk`_#uIDjFTU~K-C{haFd!T6UcY&wU#6Jb8|>%nS5Eoq_nyChBi487y{EJ}zWv^Q_l?-$iT9rNH}BtDz4CwV-iN&R4BXeBDXa=de#aDJ{Lk3r7vH(%zn#R0691UH7HUx_RxP{wiTZ~(7^JKmz8*KRGP^pyyY{%Q|88S<E&nC}YA;V=%&#k_@-XHfKglx-yvWbxwI_J}cVE5}*f-`c-($K}Yta7jKDYI8F@>#GvngzK^CUm~ZBTMIZu^5DeEWVAe(=P&>&5S%)Xs0O^Zy$|_20`?_%2rdq~7tua?5<<aEoj02}u=Z*^AtB*Cgc1<vrMa-tX>HV(vO;^gh1x;ve6k=%23+O}6*uuH2{iqDlF2*W|~a&uMBk=4`C}(~e7;IV<kVaRNJNaf?)LBsHS<um13U1H~pTDc`nk4bEk2U$z$I%~eFs!`cmpQ1xZ}XZh0AL2K~t@;8NvpQv9`F^AS)$CclD&ct_^KWVRjn~}J0NBSiH_hhWa^B6-2u90?^7(z|(E%N+J459Qx6UG=qO`NT+V+g@@e>AOS!h!2?@6+V`kbdn)yiE2Nch8&ZC-2K;%D&t^ZvuOH|GcSKjoNSq>jjYayqS**<eU9#JMg40?lJT)fQe-PC;Mqk#)eIP_kfCW|0nyWd^=`J(nTut{g<2H_bc(YV|D=e&*d@|3-O0?LAUcR_jZjmj@ad}{x9wkc3$@%{fFCfNxxk#iuW0#bgnFaeRZG3e=M(W+m8YMihbiN&br0s{^eEg>(?Yt{Z##W(%b!5PL{j>AIrD+e)*zbF<|S+$G6YDf1in16Bgu6@-N<epZk2h{0VFRqJW!nzW;txJo*=`dGODCs}udwCErH;&wOwGjFJDvfy1!OBQLy5?C&-9oW{<pBDacsrk}EUDW%Wz@B5vg-iF;SL0xJ`uonv5*dT#BV-xHP6Fm4~A>lK>SyvUx%!7d120SA=cbM=+y*s0AsuWxPV+D^7rjZ`pPT9LLoJTdb*4t+1ig+7X*jXW_)8r#9wLEh;VOZ5`qiR!8mVCUkk$H?=J$19Xde99}yXQ0r%%@XS^9hDcPsZ*iHb%5|B@Fd*Xr$)4t!hBI&trqbd=Dd2S_FE3fQ_OgTb?`<Fm5;5+fkh<tB8&d+1AV4hGGNJL&o<@6oGxFqh!5NpvPe~*T8FvdW5(=pIW;iYEYCl6nociJsl^AyoVe2GBSV#qvJViP=<I6ys&x*P#-{YkBCmtLMZ{z>2jU&qa(qCsX(5!r2Okh$J?ZRI;VVcrt`W*ZR}R@PV(bj0^|A=giVc2Y3u6v4b*cUv}g&VQi?SGENrSUHL&ODP6v!s3-tLSh?PSWgE$q7c`5>wa(IdAbe@{}nY_n5X%GALR)Oo5n?IXQ=eAA)#C{LkejjySTx?OcZj21_p6b`t!4quG<qi>yQ5Lm^lAb9Z?ED}Hl*bVWk>Ld>;vYgCk$Yly6?+dVISs->^0vH5>Pn3uR<WTBq2O?NV+3w{go)^MDCFTPs(VG+nIZ2zQ+`IFY*vu}f>%PH+U380QyV1&U(bPG^wBx0VHjt+{#7&m_qhu1%?qxo3ZZ&%4J5eSF><5%CfX(^h*ELg^fl%AM~(7EO0UmRA0e?(le2%q(Xq!3+TaKWt7wn_`9?@nVwX?(b!Ti-%^}~%c~8)eN4jI=XWk(14}FBUXp0^^Iw#!Gx;pox7C;X+bIO;#Fpx!lkAkxkM{Sxw*eivG>j+k-+)TZq>Ep=kGiV;oq^lIH@iRJq^{gND$aH9|0Ux#g8S1-ZW>#53+8c_~u4tVD6067+`z+zgQ$p%N-Z-R=dP^TlGgu!ZNO?84{G7%?WKFe4bt5KCuak0FWJ1+M+saB2I;GrvQy`q7EqKTUZ%5jVxi;q@YWfgDLtR7Ut__N5^d-nJjb0Kq=>hXND>P3JwjOEl{RiLy#U2{T**gSAy3IOo12kvnMn^6+`UMhY-i;1i6go-TI9*{m8@zQko=$2qi%Z}Wmzy7R6V$-uM6^}rg<$ZJd8Ba(^B}?&=&Cf=`5L#pfVR!q<BmNHp#(JkfIN~nT}n`s95GkXc!O<FH#^VhLm<pi)Z#cnAoeuGQCwtUHG97WyUg@YIXsx5rPQPiS%6C)GT3Yay%-R&7MZx4g}ReG8!3xp@Ix;Sh|MFms0E}QhAq~U&WRyPhIQ?1)3XCXgWf}fv^~*KLa{oKds9xL^C~pxw~ZnbL~9FwMD6Sxa($N>X-3-;ib%T^oDak+Q4;s_MAT2Ao~C)-X94n3KdR;!9_NsJi{Q*Z&^QL4uM8T;0Qf$2IkW&mMe3Si0Upk290P3mBkJ%gZf)LecgM&AZq)MeT0?CnR%vKdAF#oLA2}ztDap400gGcWs$<xAdp9EG6ID?VH$wuwq@ZyO5IF&d(b{tMI0AeglDaB-S!h)t&^T@d?cNbD_{<9yllep5?)jI-11~ZDkt_zM=W(rr*>Peg#4MVf-9{49cu9HLf8i_X`UQ@+nfe8DnMcM}DDfeQJjVI{$<OAneq`jlFSa93{Ky4ri?shNJ}&DWG2^1|3USB7PyRKbX#!ZyyjVHSW%)NR8)wf04n@$)NgmjBTVOOCy|#EAxmhmv)6;WW1=6S9YkhRXh6mz;aWV?!f$6=HUh-{iGy~&plNmqUn5W1-yDfT81gTDA+a8aNxYT@n2gdtfwBx%n?iKICt0@>JYH9le0x3)OoX9*>F!oM(V7zt_DX))$m)=LaoYMcP#>R;WKU;P`<`EBtfG<4yd|R}}A&tp(?co=<{yGLbs$;<RE9bn9JuZ#-mxSU}nFavmxrsAX@c2RmAB^)xXejp#jpJzY&THs?vGZBk=`pe4ytGSVZ$~-z6JFxhvC;@tMej`mHO`qq`D&Uox$d3xpA2)GMCVMkeqSq;$ICq~Wf*}^UK<z33bCI?oqlrL>~^efbhHeqMgy(0{eJw7@&36?%g4Us`u~!?@(l~cK>Q&KTg#Z<Ya_F@Gea5I&IY;JDT*&rokr(*H&9MKpn~nV?s6vG{q}9-<(D{Q^#<uy-)*p~Ows3Z&L=LA%wclP^Ea<4$Te$n&6-@Z{Npv)M~<YU1=%i=%A}lr#6@!A*^%<W+rO_P1N`lhT(_8dRzjRgH)a~~bs~af%{Xl~<T;x!&%ru*7TM0&bDI16mdGH-=Kd_+MDK1kD>V`9`&V`KOA|m<wvAr3wjy!KA}Ku)z=Y;QJ#cGJD%Q`Ey?%b=owNTTzj*o@c|J)fP7eAyImov8E-%edQz2U%ifnnXv*jy4<FqQ{0x9QJDd!A+&4K=fSNfNY{*jnL7n^|?n1OJ}JXwTTe}@O3Bn2X@r|96PXjd%+W&g$>_a9uf|2X(t{~3J%*EmCxP~1{g8D%F&qkcd<7;g;sXFMs{sIO4uqrL*!F6_`NSLU35;L4|-lb?D)aku=@?YPSA-pIXO_yHFB8Ioj^cMBo*LrB->jyfj><(X4_Du&j~zx*#KI_^Oi=)s#$5_VM4*Hw$A#!(;XHgQf{UsFSxNIl4$Xm-q5{Ruj3o>so2Kawu`Cp5VqB#&IVkYv}wWookb-{qvduycB-))}CLKQ&Eru-|ejh&XVFdF2pq^mAf@S35YAnK`SLVj#bg^RS>6J9_?;oR}(jOw7%PZ}1{X!Y(_=ag0gI%STSZm?gc*KmXrQT=K~xb>#g3a(VXww?05GU}bC}NnmMokR)L8Z;+(e6s*9cIM(*f&qPvVyGKY8Fh%liB7L_qccda;N_M_{g!Vge9bHn)B*~<_^8ovKkW?;tm)YEZO2&2L$8p`5;lk@RsShMyCp)z1dE=JyK>Zlkuh;Z{$uDJ7c~87K<FcgO{7Kr^Z=L#qt&LeO`sSlEe`53akl=a!)M;n(d+s}&1+01rNy2szlrh#TSMo{X5_4X;94LEUDf=h+$u?yguuvxIu5=|}%SI*Oc)`v0<{21p1r7L2Ij+_VM|yADhePE3f2|!!d*ZO}2hE`&K!+aQ!A_h7NP@ExZjjKhgryW3;MYG{qBC^Lyl)Qgkk75W$+l!I*fP_nzBo=x2_HYqN->`uC49g?FIDVJiXZFMb3O3cAuPo*Jj!MGUKv{G4_n+HF4-y<XMH@{yFd2PN)EJf=&ol8d@ci8jb3CNbt+fq>(v%aHs?)qHPf1D(V}P>i$b%yl@`{E7Oxje_Otwq!wG!TH^ytek2Z_JvpjtM-~OjF?z86CS!LLpg`hLbD*gZ02YMR=y^XhW4zy*qe?oml8{A}dPW7#v>O=ai{s!u2P(RzssSfpZsIO!Ft9o;R`WLtUg`qq9AAdj3dHBnD&c$VZOyppy?KIOrYSI4GGWI7e<R3kdhx5h?*zf!n<m-^HLw;Mg_nlw;>CoQ>`rAN%_N%;ojcC^Wxm4c%$0-O|De;Z~roaas24)w<qs17riBESm+PR7!%iT&WS%m3t9!h-mcX3tz8pDXHe(E*mfG6T92HAUMlBcl;X)=iUyLn|jBj&kz<-$TZ&n<-WV_#UwmHEllsB@RS<R(uc{r(OFIeaM2H~#rgalSEr<sb0`{#QsJTk-|Q)o;uPZzcZEvw44ycZ~51znyzP{|Tpa59l*{@W#M{->qWMm+&W9byu*3Z!q;y54y#(r5MGIyHxGZ7xnA7Rc}BFUxzF8mX^PmIo=QTH|U|ui7kFS<2fU5Kqwh?G_VGH@%AhJduphAqZ1V~ajV{d;G1v(`lfm}OBDMa#aaZNwAiGJi8|}_va?frahYTm=$z`UE$dP~!qMM3<JQY$QiB519=<AkyA9&<Ot_dOXD1%zVZRbv_`5ykJdWU#4#-T$cy3A+Z_gKE<V*MpA&)M6LWJ;t2zkH0+gQHG)Wi9vn0gKV9ywMtpw^77yUFMK7JrL}pJ%xqSmmXobk>0GXW>uw@UPC^M@uvOhq(0~{wVnG@n3n5;%E1R`Fat|EkE*|upMjX%XG^_-!9+N<ao@}$p~zT>9kcohim^iN%vmbw!$(iL7JxVd}Uqb286V>c#e{ZmT0Zfbkpa_wqC@mkWW`F8}C(*>5QDBw+Y%o9{Nu|_3vWWqgdL?Cp!{22bN^FJ8GQ_bcBT_yUP~qE-Uex8|MLww=|df2Omzdb$6!k&w%qm#ftC*P=vO(qRlx-voMaV^z0|43wE^zcK1gzwzgmgpOo!8Y1P?mU1(F&dXKbv8VP`9XEVQ+r&#Oyg_ABPSGVJv);7)jsi(K1`M5rSoig^!^fKEl`h`|blG@i3YroITzVBtlHQ#iP)3|=~?0r93mxh<5JKvUCsMWz#f7wP!>O}e(?BYp3PZnCT;vadvZzuYT;XC_wzG<$LI={}7)?~JF!Fq){ng1Ty^}CGuC?9htUe(hwnSg3uw6ay%lo{CbS~rW^`$KH<y_Z<#q~#}>wb-Yd{_{)^V+oP~#<0xOeJ(decWU*YjqUF@9!C*>HbKA_?Ryx|vepga<(h}^-C{{xmTHZRHBXIAMm8|Nz2(vG(jCtp+J~0KyNO;O3;SG$t+emQ{I$?uTI&73VkLjS_u=n?a@<$(kC(%3zb?jUt=@o($W9ieU4t#_>U6i0(RoYct0Bd6KVhu(OF-psHoRYlS8*=JF5WQ(8y0QrJhNJ0*T%nWdUYW_4%Ll9`~jiZV!WSAPJD}dOK~W$eTH{Thsbl}Kj4=O!k}Ng-*<b%1Y^MV3EwT%oiiLKz2T>ISAKFl7bm*U`GIW=da69w!iZNewpL{pnpxssPL%(X#{b1{vGP)@Ew@9I3B|iW+(UX(hvMHKY0X-6-xl|Q;?P6bklt>j_gB_5?ug{Vn%?xFySf8vkM7%|G~$;Ltv4Q}C~EQ<g#^10>=qZ-?tjem^QFM~y!lOb67x(4#}LO3A4v_!!y$i*vM5x0IML4FOMHGjl;{lcJjiE!ezU<fDDLC)d$a}?!q&6~Q!F<`f61rcX-@CWoUz<4!Ey!7H||x%-s8XhQ@3{kPK4hM+Z%WUBm9<BcStZ4)R&s(d3Bq6Y_B0)Y%KRd>%pkKfN&xD(kY(sl-eWOe<z=kk85<I_EPkR^fTf=hU@m_9fU3UO<oZ;q`BIXpRK?(AG$<CYm&?4FMCc_i~c;@FFyGvb=JT?q4nvjN;akDfy`c!KZf|_jr=hUwQEqj5@BbIqcF6HHi^F4RBnN=n@pI{zA!B8m!=%^SLN@Twfh%d-T4F`ydm|Ys(Q2RWnE_Hdb9;PQA>cd=R2T<F%{33NheoQ*38v|W$lJl2^UYw4<h28dN(W_HKw|s>M~Df-mo&kzP4r|YrQ7$$+13GUpUrZ6Zj;fFXzTg-hIeWMu!b5_Qt?gyY&bCmY^-|e#5Pj-F=YPVZ(}@nDL|*zn%(wZ>@=Qzzb+3$QJ=KKG@(v-caT7Clw=Jz^*9sip>(no!m7t#*dPL-9L9-X15rdbr@Kj?2wz$RN>)^oDFo=$(Hs?TJ3FUZV!pM1sq?hK)7rOdBFA`xe7FF`c+`<7P~JpntfDY_qlVQ<-t*mf)_aoI%*DYZC;_x6|}j+Hhn8!<QmT#O={;B)6R$skKD*-ssAFpz?WX&GT2D9bZJ5TdKH@KHZjwU!gpkK79EXO7ftrAE!MkM?3$a4sXO)A*egZg9cAF{6yCk@(oy%whM{>KCFV7_$G;Ew4*>rGj_ua}82Znl{~Y^olBIzD)2Gn1&BU|~W|Wm@xeHh0$&)6}ti{eiYFn6_B{Ku|7`HHU!A{QtU-&^O{Q&3t6SvPhZYPD?XZ<&*e}MW2tbfC81h`4SP2S@czlNr{N=$QkkK2bPo2JE@25_rB>kpy62lYLy-^poBY27>(ZyVOlgLUitS~myQZ3yc&P&5g&rJZoBmuH;EVMopJJD41++_=En0R8~;dN3n`FWtHNk)GEe{qZht!e1q&xuOkRTgAcS=yqo`s_4#WR1MTR-^P-{Sk5q(bAx@Wxx{usy;pa9S=YcjzA6QtQ}4C15N%g3Ue&1;5%zcmyshrdCS1kp27XU^tn&!wGTB!C7q0ADg9*RKcOk;KK$wt1*}4eptNjE0sL%)Q9}eu~J8pj9X_26ZCslqnHtTR3U}hzz$|uaiL*qhSYr;*cm*qL_L+KkI5l%CfP~MpSr+(5;m|69>ie(NmP{kb|vG5h}+0mFQ#Al%Jfkl%Ru8ADbyxf)HJ5%ApU~g3T!9D``HIHC6)y-+VShsp->h6WnaCIMJ$VAbzI_m14x|i{adAtXCT(DST8J}UErt(16uGN044(_YHtj}-{Mp(?m2=iDE^I(i|&&aVJGw<4Rlr@ZPHk8Lye;XFN9O#vKl^8<ag~<=dQ!uc!WDn;O+DvKQ#!Vl_s>TIlRr6-5v6{T$fCY14#Q|2Z&}>359lxyySnMhf=VpX+13kDlmCLDIrOLSy%W;O~glgB2k7!j;dy?A2{+k_(fCi0<gVhTQD~>(omH=2<f$oRpT`bR3|7-_stgsE6+E6}EgqfA3HDowefnx>zHAjEX*VJGI57ptvKT?Zn$O|U%g0FbNsqV(lXifzC&L50m@&W8t4tNm9Q(=3C8b8mcIG=on^J%O3G<V<mm%9TR_YTJmG@iqJrZn#fwr5Gi4`Ci(BYoK<|0hUu1k>+nff0QS9>4<VBPL!O5pO-QDJTBB=b8KgOy27qI0sJvqxNiq<)oh|7zgQ%unJ)Y@e9Ii0rrQY@jp_qqfRU>EGYLiwIw&HZ=c%KRGV{?Xu=~L8--&vBz#W9s~sq(d=3xz<q;17y{I>;c_Y*vcZbQR#^N1r!M@^DA_Lf*g|jA7x}Ch-^q&vV(cW%)(gFVd!ORW={p0D2?#4k+vt1=C7fVgPtXk}4buTOXAnOJo>jog}I^Sh&CmVteA|{O%x6UmS<EH#nUl08y7R3^AB%e|Y2aRRbE&j#YxR;v}<fa6<sfe_(zTU0R^$+zaU+@v%6U7)1w-^$z1`)l@JzzD(t+|hLQhvrc+5U=iqEp<9%AmK3c?Wh&jGrUrXZ)PXxW&)uunoq~VYABDDP~Ov)K9F}W-WoSBOour*b$JIR58VG0ID%g%!^^(U>`||?`XfX)P84lE=UWop9<Pz<DLyNkJd9#>&Y0dvC_K7OM5BjM-jN7lewsqDc#~vn9^mIGCK;-g*9_YKY372=?qIbJqq6iJ<83Myr0Y%?nC@*>U6;Vuq>u%@@on*8TSBA`;1Wg!hjK-8^jMdHf7uom-gJ9bn5-e-bU;U3d|YweW1yx%iJ|X{bd?66<Y&#BdOwOV5;VM#2pReX^df0!Z;kFCtm-^E2^-Id5$aQ6r<z9op(WRHHSYR)>CTKnBsV-w0BE&Cf!OzJluu0is}J&i0e+-q(zoLXUUGgi)9lHt-(>?dvZLg95yd_w;6wkIlhfz4Om$nhHusN&DreA!MXc3KE2Oh!~yjBL-2EP(4u1>Hi2?uZ$oaZ6fbha1?rO<VdRS6(8l4WD?Q-J@A(E>lYP>zh}VU;05NTjVBZ5QEA=<nVC4H{|M@Q!Ft4`".encode())).decode())))
elif sys.version_info[0] == 3 and sys.version_info[1] == 12 and platform.python_implementation() == "CPython":
    exec(marshal.loads(base64.b64decode(zlib.decompress(base64.b85decode("c$}<#YkQ(Rx9|^|4+E$j{YZdtP*4I%Am2DB$U(8%g8ce7VCOD&ruXygz29C}8-*NJvd$|j>AaP{{AB-pS}tT=mX$!(U75-7D#J4`*BUPYlbuM;Oqsc`1nVpKYz`{<<@(RpG=q0QhxX(O)`B9tpyd65SSHcq`R{)DbK2@OV;}F+Nck97A!m!ptOQb`(5xx>bAz>3q_pMmzEa`R`Gg;o3dMHN&OaaN?wYyXL7mK%w~I90-OwDCGC6xA+|;!%t@gX0NRwQL=BQMwGhy;7f*<qMCiA6vqR2W14Ct@2`|%K-!;k*FX@9!=(f(!H{`}G2o3@WX+LLK}Lw>Y}muY+9qy2u`e*e)vd}`l5+UwDz{ZamCf0?$=KibFB_U6a@jp_W4PHB*H`B8sAt#5tI*O<=t7(T{Rl<9b<kM{Yr{rY3R=5)Tt@}vEB+Wzv<zI<x`F<<LxzFlcm=i5j9)3pBPV}9$W`K`(|Ik!w{BAdFew6MwzJoiiyBS&}NXn{ZA`7wn@`slx%_V0YaV^85JvPXM$J#D{W>UQ9>7p8hc`HQJ^D3?r)hH}L$r*!5npv9uxnlA5WRc=FGmZ038hZ2@si6~6%Dz|o53|r-{CMwJFayNH1TB6b&+Lfeq$9AkjRbw!1;P1v{+Aw}&F>M&XSu<@Izu7Qt7{9TZwjWA|X~&`5G7FVn$l)nhr8kUUfzq1~B`p16oXRRIikzJD9hT5G=j%aqv>Qu`+_9_?8cPXzLrHbyk0nKTENeu@QbKen1Kq<6ayUqnGC0DqXBI2z07tbd=>SI!N;<$%!!j7)sI4*>=36^uFuq4+RincI7o#3!x-#@vGhHA0J28D+k2BN9^=OzruE%8<hYjP@x1oJKw2yUk8sLg4I*(<Inz5A7WhfIJy^bYC*Ria<fa%gOUeBzwjL*Ek6Ds2Y-V-U40p1fUlL6jSS|$U$r@TzY_f?sW@0&6m-`~n~eBYJn_+EU-QDYGu>W3T!)meYY+3qJjtsd`95M>{Hwx81dS$oi>QBUadqCDsty?oO3hx{<!KI?t-cbN3YS|`dr=>HIX(H9i`__MzsfAp7q)icxsf3!0ve55BjJ)<%cFOZo7-Yz;b2RgnO%pB<WVt({vO!@TqA-9fC>+vC{&8PL)e6(Lr+ZP}39;b5eESAN9uk)fT27H}YWijBZ0cA1ZtASNH$REb_$nPKhI^+G_%>f=}KgPEva#QyZW9yigqy8$RPrX~WO3L-J^3MZzSRaZnpE?lm?}T|R8@?oWURNhCpYK6$4f6=zKH)L!bQs4S<z#iyK23$^pY<mklXa;!!FfHD6~))x_-yF^{@K5*jd(pw=J5gd?ip@Z9rgKieBLg-Oxtlf7thMx)tY)+j*tA>2J-U{9RCh|@3!^uv1)<vNq4e*kSFVH2;d-ddttO&)==&RIhF0t${emJ!{00lSjrQ+XEN9Kzu`9oC6$v&KWFosPB=VM`aW;It2g%l3AcKX9bZ;T=)aXC3@`35gc`}l8KwcMH-6TD+gXeCs!yFW3{RE7f?Wjk<~^dnB2Zg-B4NpK&Q@520@F#s<ys|idyP@&o#~vCdAo=%+BEPZAc<nC!(*(IyE+W$oQ>aYm|>4ZVRC6=?#}#~RR@A|WfZ<KiVoPQ{D_JzZ)*@-iZ)#J@r>L<3BM)AiQ9$gg$2$_RClu^AD3#R^F$CHADwoqHL`e=-ek1OOm#5`J<qk7tR3Z9qN25HH_5E@_o1`0ee(qbLMz-dEl$+j57hh@QuCKEz1dsqmTWhvw%tVeNoeO%rX511Tg(3Y1MkFW%y4Fzd)l`96Ub4OE^M04D773USQJT%8PgX5t2=|8oD#wO-7nD9rp`Ks<{~;Z7p^PAEws+IUgZu<fkRhsN$s?0Z>~~R1Z&rbWUsku8DBP7X)k_sSSPmi3+uONow(~G{^_0E_j74cBIlbzehuOuxq7IzGJ=};tIn3@vGWwY*9?0>%M*(ZO0wAHx23(z<jBq3J!=a;aGl*-Bb@rZw&~}ab64(&2;fE4Ur<E+9{t(|K0`V|?;$|9z1z(W=PXU{Z>MmJF27p$iZ_@V+WSSf!#6>TPcgcAUVp;sCSB)R$-KRLlN4zWd~tO?(SsJVY<ujWVJr>Pcte{^+xNAar9u88*FB(}+!`8Gyo+}BaerMi+tKUwcJG}@aTIR89Mbpvpo6y+?Y+CXa~6JII(@2J0+XZG6`bUN#R~&6vY-^`yYq5Z-T+%>M}xkfT$XNi`r0XLcVARLMf;cd<05ZfL%zU!TnL_&)<JN3(TeLC7+OYO)BXaw$T8)W)n8US2!2||K9vRM5~!~?yhn@*J3CUtUFO*l;N+MFUbPmRy@_pq=OJ)Dbp}{2ZL|KFp|hynN^pytRX!J$Kv}hV0O#ANwhU1C@nLaOf8M(@Zsd8X`bsQ=I4ILP#PeU9`@4(|Wp?n;63?$vd#cyS0zX?}Y3@p4AD2#>)M4_XuYT!ewiD|gE62sCC94bDR<e3(0`z{fBs5>`D_4Ss-|v31<04Sy{pxDI<_2(;Qpfl3W^T*<9=5YJSS+D`x$fSVbrPr{khCAZ`>L(CH`ye2fi}xk>uziH2PT5cJlC5aXq&zweYxAUFOohte-KZ|fZQ%q&}}w$`|F&wp~3Y;<Z6T5e$ctI3{Nw!rfWoAP`22w(d$wrktvv#tO-T3Nc3NAL}b;RlNr(NL-})^S1)_PIsQDZ57rW<{j8bAIQw}o!t-IrNw90)Rc=;A$D~V_mDzdzTU_9um!q&#DXd<Vy|-c2tB~7?-H>IXvOHc__My%7ZELPA-;Q_Jg@eWOTwckuw_>;P1SlI)FppAq8D~B^gb8Oivv4lpye<2sa#+DvsrpGy7PJd*%jz^U{Dt7YiJI@9cUITkDcY~-%G%NV*JXb+MbpSymC3EACR?;f4skn&zAEM*Ace0lqF>^=;j>O}@KxKtGGTFA-%QE2fApJ;_IhK*aglE1^v4Dswg(lsws7CjHOpFV>2GFBx0lvhv|V|H>RljidUY1N-uo53iF?h=!neJ?uGQvxFpc<!n?gNS;19ZUtO_M_B4%r;>b6^Vp_sk+!xiVpm#jJL6c$-V`pz_)!nROYIbW;3s)M>>KhU;JRvE4O&C!?Um$eeUY`xVzQfFbPp8KT7fqyYyG0q|qK>bh~2mjYCW<FuAm00rZ=<Gbr+~OaxxelSNSeaM1M3r_W3CthAx?i=eXRklBw)Vm<z^>j{^(`pXtFy20{SD0*yPKH=#g6y_psV0@rv6Ck;IwM&TwJ|Nt7b!7wGx+FnBwak&bG#e9rv8ilJ0sfk3kuM?pG{teegqG#p=(W2^O8uKN&Pwpts`9lVP{Ut(R@hE8Co+cDGEmxO-oE$27FHQt&uzM7HjL(>6Mp`k*`ZdC2vda|&kY9#MD=W}r&y>YXWzOCqh__B9BJ4@<YiBB=<ox!&NqdK=CvV{2r6tPyXo!it>O+N<);mh$ah?{ua?llxmJF~BjZMas0*OI&3OyG~1I<{ZN!yQjD@BK>wugize-jYxIK>onWQU?{A~DfY$ljs}e}*hbsZc-RbsZ3A9BnCo_6FHl7W_+As*_HNx^tl0~<%#kNrGg7g2QZ{D-%XSapj?Hq4doV}!g7}q1NZGAZVF58gG!>e6AF|NyA=w(`Dh|#W*Q*AuyC5pXC?u)oQ0FBP8;cZt&IOl9(#`NILU)9{n9ypGu;AXJ%$3`M5Rok$0~Hvjn^;X3DLl`qZaKIYJ1NgStfeg}&v!oGBk7%aY_Llxbq0a#whxNPgysx!d&CQxH>Tz$5}J-11`O8=E<VE6qi_&zTz8YZR08ak>6VXk@nEA8DG?o`$!TE`ud;42B!ye1>K-~$SaUpzVdvAX32W<(Kr14%CfdWi^Q!a(*YHS$Y=HuD<8Wf1iXpd_grsU_1hXg#fXnCohRTIu>$evjA}tQM7d=D$FmETwkCDm>+jjy?&MW(L4sme4Q@`v|tt)Vu3a9{LNO6ntb(Q+!eO~}S>aCpArAW0ZLIvE$Cw5~h3b_$wMKy^c(V4pybbUz5Jzgmo^YyB%w+L3Vou6}hu;+G}(}d67^AYzl7VEUC$^_<XueL5;)ts=%l%zsChQ-h;7m5v8gkie2_3o4sa<t2a`aTdD<aAkg@2Q_hUg7L~+^*bPV`5ReCn6(`pIR<vTaJ4PNoYq6vW~dvN$Z85YL?*(i(?d&l3U&!w}u-stF|fUiLhS0Ipus78;<3aB%-Ay`86_#Xp4;AZqhOL!YY5|>o?nzCZKw?P7O{^*a;D_#6)wB*ta}~c94<^QWbh$-5uAiwS953kuP*;w@5lKVp@rm+i+Cx{6x!(ec@EtPgddSoMF1W`$fe~%G;4vDJCbf2qmp0LbLVtTnS4N5LMjmC>iLQ({k$Zg+~;-_XIP^*0_yGlKD0OVhk%x`h3Q9L$%KV#by5L)v)Dw5s0*!IlgG^k2&3!S?ASFn{rV>W@zR}Y0u5-(33JLl~y_9HmO&lYYdy2OWPIlMIs%6m*Dgq>*&R&?%gxcn#|;$`YESdX4{&>+oj%?<RVGWA>p<Jm)Eb+%!yc)u4%<Rerla#pYykV)Ao68yM*&z1+Iu%bE+bMPvy)v8szyxzr%Tx$%@B<bLi_;$SP|V^EGm+oVk?Deaz)Lr`bdm=A1Xe*r+0xRC82{S1wnSur8&rZ14UoyGO#}#i(<E<L_m2UvV3#l0xb%HWgT4sk$Y4S0RyDo7#EjvL=ZPBqZwjeKSK`{)+uK_4fbNlQ{oM<c<47Z(n?sw@_N$_WA9c8mQeKm+z6jx-oCz?upaH0k|@p63<(3pGSPrrGH>7W6Ak$-1HMZr(x1UOq9R%Hv`+je}+gRLc6eib`5D0IHz1oM8r_#u&s_e8+Y7qN&%+n+3R!23g|_;#p1$hV$~7%HM$_FUBssbg~ZX)z)_iy`+k)&$JbgUHWHboGbW`zpK;&_Y><PNui<Ws3EpZ|fKK^oucxMu8OGcPVkhRX3Sm;hdao^B_87f}bvnnKw;1MDgU}pfEuE2q^P1RP$Shy)wN4F#JfsAol*?DULNlLcT+Vf2R5lKmS*?c~)u;KJujRfgun?bkJrQl)8Ji__+J)uHptM^gCm4C6<GQEH#MN0MJ=@~Ivcjrb#Pv;MJwsk^MUlo9u4KL274A~n*_<C=Y)sTW0S?zdmZPDWTXu`6c7Pv{tM6N?qggLR&lw?UL{HV(uWca?^4D<28oyv%H;9EjgEo^I-KW>PH*4CE<Yo%3yR9K!Bft2*DMeaW?)`9)8p)jTd2`)3ON{);^}6B~c^_8IE0+Z&>Y)%~<~uzpQ`|*qm2WY<Nxp<sE`!f8#~rO#0q=uyhsI{T<;MmT6LKEpB~5x1`7nLM(4vm&l!*ZGj^LF&YeG&hrXyOBtv7{J<|jYE(pKwsdr~fZ0y$ia?(qV0nRfJHPTZpEBeCIh-<4d7I#__d*Ar!s-3(?6%)Q^VM%1n#hpTI8-2|SI-S>58a~gWtVQoc?3s+LPxrf|>RbdhH&pyc{EOgDDB#Tgl!)&QtE}~&Qk}40mjnQvmQ<0!4xgIg`EcLyD|D~(Q7V`_nHz}@>XqVQR^U|80Sios2;{Lgfd~1zQ`8AeM9TPy2;kaS#_N=rBmyb~l(}hE_)~@oiUBk7n!Z5^Qus8CTNV<iQYBB$W-u<fD5`pVXeX--ZK5%E5n4YT0HY(uwcFXmq=;;nZg(!x9?6Hl3nK3M~TnwL;K$c56m9@_*lNj2;1%f>3<1aBO0Zd|6OrGpTfg$z<zPz8tkgn$;#wc@ZS#iMvC^m;9{H(0Fa*{PGxf=G`z)C*NmA#9~A!c>RteG4n@?LhBY$RaqlI>u(a2HG9G<R_c#}T)O{8LlY!XX~#DK7h8bR9y{m!i{K8%nqgndM%hq6lGau_Nv(B}iYpex#7qfr(&-0yK+m=WQUaPS{9cYNVGyLQTl+<}n88oGldO1q*->alN~CcabdJs(pHPW4$UEUG$8sURh8b82_F+XTSnm{T+i!a&3%-DR6Z_Qnm4P(j>=W{lOT_OT_FESK7%6$gne$=fP2WGv!qqucNFGy6c-DXQ3ot<C9jnmjBZ?G!-d=p-~5HBgcVJYHp%5^Wo0{@7-kx<jHc2e(YRsTeoDH$pE;sSdsfo>C|6KIT^mcB<*q-TiNuke3L5x+8vNH!b_+4N>z{G;t-co`*iqdB^-S~nAVB1??Q{<GNqBHAHy{!1Tl#RyXMpL&v+)E9`I#OOJf{15M=6tr3~$VXywA~rX(BbtO4m+iD$bA7$8se{I0koP7RK4f!n+rj>mOc!+Rj5uiL=U*`)+hme&#Os<?(Xj>~cCreUI?l(Oo;eJaZJN9U{LK5h<=9vA4Hp>GcLQZ`k9;sk;yKnrM8!X5c*H#m3o)w|i)nP=vb^MMLH+5cIzz||nUar}j)$?@!G+E0#~?13AO(W~svWN8u$e*8QbdW<hSKZcK0D_eZsp4MIdE{?9B;Wuxdc~n1J-_`q!n?K2n|A?RDC_Hczm~X>}<T%iw8UfCCNxjHp8bo>k7RiUb!e-oPo^j0@ScimLAgNxxF^*GJPpcHJCb%;1V}Fl*fe+pT_i^P6bA*-+e+~QBSV2}>IkWlNx7<Y>W46I=q5TvUdnw)>OYr#b-Ps78V;^OXr%bk?33fkrGL&6RC18`ITZBrt<#=rRF;Hxpo#QGZP+Rp+**voRLpHY|7-h5JPWBC^^e;U4Yl6Qh`;Lh?fBiAm?|$0pKFQq;+zCFX<C%FXPgw3>;{T~UVSC-3?2~ak8)x~69ypnP>38>CzlSgF_FQKSbd*kaR(|UY@}V<=IoJ<$Ht4Dhe$g4$c7Fscg?Wt&t@R{_>t(`ygo@jDD|PQ{T`U4?U&4Gx%@sYCR#Ld*I&HFXP2PtgrHobkVei7=G&i%vxL!1IogPw&)1khaC9AWZ%=mkq+#Y)doR&{k71Nc(Y4SAm!C|@EBkh@&;d|1KYm$A+mGlq@q{6xgl48g&0T14ghP55{9d^2T`;}=0r`ZsyX}eLw<?QJ1ce``>qgD#6+;@rE{le;9O*F6$6sB1xrEpCl@bxk_bw`VE>bm&W+Uj{_9dYeO4z`V-@}MV5t}o1qzDT&f;JU(o=!$NDSFv5R0vlK5zty0$z_uj=aE1JZ{vPuFp)ZbuUihoN_>K~|-1?55pKKTB$@X~K=bF@eo!Tshprvy8*Lq0>1m%g}z5@bW)NlFi8+|s}?@f-?^Emm$HhUgN(4O*&CbreLdh<{I<9sEnMyp2oxANmn4qCpRWKc`?L3S?iTfH$KY{C^dwR{TQQkKr)H#OxrgG>1&7%7<Sof<7X$ZQE-uIlec2N?;I$;i7$JuS+Y-}J0J?d$%h{!?Yr)Nm(6B98-nOAp89e~G8<{|Zn4$U9|f`aI;F0w3~DG3MrnyfY73{zcxQZBh(v!HWs2BQ>B$dT<SUcuS?uiYT+9(g|&vzlXTmx+GjVs^|<d5_6vmmu~CTP7(Y06-(8N7eF;JP|5u(YpZGEXg?oIkK0FO7@&&l;TucOYFw{oQq~c!oA3A^{p>t!Bg6dlSj$nS-8T;z_%c2#+VR<koejCXd`tC$+t(=PcA2)PBu{Rmt!6~jo_p!p9&I%-)ww@)4-0mbGSr6wtCAua`?7{EmC};38<)rM&h3L+EG>kH+wsW^<;e+gI~^{htoi+Z!6>{Z<-<;g!IyYBTyeVtaoc}!N@mtbQ%U*I5y+J%@_eMBY}|JqfBC!~w&t3{-$y~p7kJ^Pfi*76eq4v$C=W+FB$o%7zJ<4BYpgW>n`}*9nk##2g_$~2<m*kZ`)K86?v0zHT>k4fcVlq9poOd1G1%`8=jz8vuVY?kx4yNm)+AQx*2&tD3zXUsy0+}zy(7Kyu?B<C@Cw)PIe{&By{vAdc?Km=9tBWdj{0`T=FRCU*W4G$Vk?#7O_=w^?6}@<<d>uDC!2z{EYAH_@%>GCa1|gWv7?#m6<2F%VwyLN|GK8-wD)bCRV~=b%(3s@$~Dc%y$WvjzL2kxC|{GA+-?h@wmgQ;0$2f|V@d~4DqU$5a~*{bgWc4oKep}$?l_IRgRhj?KL($NfBtc@y>Tr|_Z2Bixl@)Fa!s{U1vr%d>L<@eMhpJ`*v@~~K~o!y`@<lec5b-qNf(ctnG7y?J>}v$TcU*xIDN5|>#ApUb>;TONJGEr9}V+dmvWNZ<9F@T-#IhCx--KX*Qpro8@u|TzXY_kk<Q^PpS^%XgPKx$$DCV3wc91&u9Svj8k<|T(^lC=GfaPI7q(x0lJIj)?-}?VdpHb%0(RBL{Fbq_O1ZgeC)ZiYvsOj2vIDxUuoe_@C2;=W1n^`RgXJ_2xOCUH+PZ_j;`LfMwy*zbza873TK&oH9OW&CV|E_$j*)zB`2f7$OwgH({!9Oq+Xs_Z2YLVLmrme2xcO4y{!ZAMK<4v0xM((%+#f2qKGf4zF23NL%X9N^a4SK5vS%jxPj}(e&Q_vn{uN+D9yM?OLkUW4)DywnN?UFZ8=1=eubJ$Xx_>*XwrZ79X19*+H_F4tee4&Wxi3sBHJ(+SgDVI1a+lED4vBmZD<Uxo7H;pXaZxSyIy@686g_SSd-SHdJrLN;vLYNV+;Y()vDp!+)7h-)X-#}zF#A14Q6lEOdje8Q9T*o5N~N@9x@EXD2Z?qo@T_v(lXLYY2gfB`yEAqVMW^A)$w=^O<4Dyp7Rpt0<bHDIH1WxgRD<P7wR+#umBDR#%{I)@zv1t1VW39x%n_2)!v>c!GQ{iOQo|g1VC}wgT_e87Cu>~Tq#XP+HBz|#;kNuC8TU>XC$3|Pi0caO`;U4rkcK{nIM70j)AMe~F-ilc7~XMx!Qn!^l*9M1W?~{aLtkYuz)=r+@wdJh=y9qqKK)fR;>8;AQjMRt{aAVQR}&btn@~sh5HB+8tZcLJMP?V(Yvq^hB7jgl%J1R2k1165nPVZp1|FfQJj5L=ZZOXz4On8{tlz*kbYHj}M(x{G+4y?zyLx#s)s-B1w=6N5l~Ln;>Atk;1^)Ccb><uDFD~a#A@?y{MNt>aERmsKEF|6^_aF3s{0FjBxO{dBeN^%x%{IdvcC;NV051Njxw7J)6kczPLh*7gU!5O=FXEDe{ND8T7*8>Gu2;$>vN)@I1t_(K%QxTkT<u-4xXq*T=gnBIxlf|GJ7DKTQRN-~CHy=0O}_B<!&iRzCe08=;l2r%QT-s7l_6Hag=W#hLar0e!&W-*<iUksa`z@ag{3Klywt|HrOR#Ja%k^-w$DaiWhu|xiTD671OGAEdI8x(rfKrP!)PT-|C;M3Onv=lJ<@8I_P5M?ipjvI_%D~4L#{3W=c!)$GCxuRE_3v3+Rqo6OkLiO9DR{}qfAZZC!1V9$mvp9f7;|p%Sv#{z`<p6IS`CNW^$Qr9OS%~#i{IsQ`xD0$j+(a8DwWQ%FgM!fXRGy*Z3FN`4x^&SsJ$UZ)B<IA4@eE<DFceKji2mPp}HdXW;Q{v=d%j_p_dJk-eGK;CiJem{@+9FPL6k-CFCY(X4%Xt3525ez~~Y1}Yp~v||;D4s71{*a7hjy?Yp{p<qcEvtuMAb5g@|Qag%W=fs!NYbd}Qg6y6O-4Utw!aJ2M)hfs1{(whUvyfJyi^ZPJSQNqB^iI`+aT#VysYU9f^CZ$l`s$isyHNrwc+6|uhknFQ4eMc}RD%qA#I_lMq6g6>IX>(V`mpmq<ZN>fA2Mw}wyPg<ZnPE*>+tAH7@q}?XA^l0?(2uGGV05zynKqCNa;HA8A<A4eC0T{|M?MHcS>$2XFIr)6~)D=q(X(uKlK8<#9rjW$v<(qw;ko4yUJd?G{oMk+?V<`@g0q>*SR8e_)P$4eUwiw)LuiF9|N|4r<1-d%@?o`x_Kvb;hoFgWRT7DCG#$d9tJC$ZKAHfs&Dfo;f}8AsKR}vb^4Cm$$)YThEh9w7X%iSif7_ExAo;^P|Mp8zsRL1FHaI!W`f*iM{Vb-d<Nzs)0Xm?8(KfO?GEsf%VYpfi)D^wU2wsV^o+gtV(?vUc;Gae;q*VsV)-G1C2&myu4In#j?4MG87_#%WilN4;5POcU(H>ln66@Jr5OP0s=G%`J|jmlWKVF>g1=K0*fwKnx|OQ7J7t~UR3+Q-U&6mTcenkD=SR#eHOM`#?SJIN$Im2}+8Jr;ud(iLZMarBJaVKz`yG63&wh?gj=r`H1~YZ<TA%zLSi1)uTlaAY?$dFeyQY-D<Yc`k7cL9RhrNv+^gF_vJnZ97U(m4X2mKF}uZ%i9xzFW)_J3qdIG$Xw%^3HMSgm*&h(IsO*{dWk{U1)d8S&|2BDqUE#^zA)lC-1KtHACo*I8N1FBn+aU-ob&F}Yjz(0l2$f`0yH0f$)FANvo#7wsu#&E@4FN5Ni(t5IH0k)ogV@B1&mdBbh)iCq8to`d=N6q7dGN$h$WgKMX;>cPjD#G<)AGu$Z!vB!A-)K3Qb<N9cvSA0x`=^2Hm81-Xc^sb+t`u`90r)Sn$RUTv8gFWGJ{ni5RGc9E)RMQOfKyo=f53#jYWtk%lHhemDV4(dKuV2q5{PXj>pVuK~^?Pl(y)f_#c$}#ieW@t_F3dOV^^}@_`q+E<(23C_4r3=HTEX3Y#7ZVUEVz#rj`88YmXCIi{TXZYxgI_(*Dtft#$UUFb5A9-<MueW!>fMnrjLFnv7I4?l$4{dclREBjf5*@i{J5{Y3vFzom~0zezd9njNJ@=bMJ6pWPh^8`Mr(0XgBJj!EaXbO`zoOi2w5PCog~c%2AiO9%(k*=-Pz9;)d0&l<UyDwT2R=vn<#fhco<9>9rrNT*JJz*=B>9EBCogZNug6ELry(*A@!faI~J>>{qhV%(a<WrCPJ-&9%&nyA-mrohjG5s5*8Jdt{5R{#xX)C`VIa@}kyXL(smt3d<H}{nb@_1A$&|ahxq$PMny$yW6Tq4(SuMd*$Q4mbzyIy7!87@6zgtYzYuVLp(_6s`x1X3N^5G<D13-$RL+VxR_n6{Y^IY;CD>mD}9Xe^$`<z>~;Uko|g&sgPr|Xeg}6LxbW}o#yv*?Ok=f!9X$4D4RI7O#8FV?4d+M(oNgm%OUXwpg!_kM|M7tHbqS=Ljr2A8dHU**8dek1?vUt&`-7|Ud4G}XEpc^-r1VUE>%JfQum_S>`}N24XL7R54em2_egfJTZJ)OJdTleVXZMnP%^U6AQ|>=Qtvh5|S7b`Z>2H{~{)fzc*sTveI5OndGey(&dc>I~eN1E9IeFSUnY3FCdxp<@z=OR!_NQ?C@b$DFJbQZBXX#^4^)LJ6DG2MEf@k198hOr`_i*1oY~%k-FZYot|8<Y_ImXk<`|SKXZ^a*Q>0e6a3x4_c0RS~pYn1N;=aAIo#%<!aF~<AHzFfm?%WLbYz}gzkYcd|6Qb$F(?5^_1-dt)~H;zv?ngN^%ioFmJ_s+Fnq0*hWZC3pk__Rml{0lxgUY`8NVXt-l&=W1dEnnk@js0`P%?Kg)X&)x=KeVb5POCjIZLOT|>)RnQ$Z^PHNzS7U_K?r#kJ#aVra|vNz<gI{?!=ax;7)fz)SW+hbmmSRwr5_}AG+gF?>_395r#1?YFNt$%nuwpQ~gnCpY!+!pZOu^6Ctf2_JZ|TZ?Jti{We1}#zH$q+poB-6<(LMYIsW554<_<|7(Xq2AzvW?LEa;hxlmtFZ>#QuGLl_bPQjsF(=~5AJ<)FYM02tbj|o$OgfzU>(6n3r~cIM{Q9S}d+Qc{#tXoSyEad;&gXW~#NKM<*J<oiPry^$`#DZfDwFuYQ@lcVtr54pWSR98TV?Wjw7*!kzA7)D{`$X-qfXBR%VMbn(;OlW2O90Nn$Pq3dH&Dy=l(8JxS!T{_qo2xRa;;G(Mzngp6pcyxP29US?6GCpMF_q@U+MKH~341hRQ40ep&xXyhV4>feURgiF2?PKEd^6K6o;p=^5wee!r|YoSZqG(A(Gfl^T~%uQL4}-lurZQ@rV4)@eeIPiMicFY}yyd7{IAnb*rV^E&;H=k?UDzW%S)>&rar|B4>I@YVXkSDa4dw@L2Yzl}4wqeFL{FZ2<AD^I|E+RpkrfBy@7KzaqA^rrkbbgX_)$NTT${P8ru*Wr$k-~IfT{G<I{$35-+e}QLu=SZni_xP$z{Vdo2to#LD#hb#*+da{l$~uetp)UEp{gb>_zQA>Qf-7pzm-e5e-f>UvOZ{eY7s4o)qkNi1G5z@p$K|hlDi3k?*)xBvCw%vyk8|+NAYa${`d9hI>x}Vy>7h&h_A|j_B9C!;v;sk^rC<^ZdE_zo>WM#p9``m`$JfE$Pco<6oCH07t(IT*Fw4zke$hP}Y!a30sTHVS&O;8&)4Hk3A9>VzFwI>77vuXJqzSWq%?0{8j{bic=lI``^JiYTH*4XS_3XdWS(2~*pc7~P2c1;kK*;Iu<?2LFboXYQ{-AH^5BffSyZ<uqi#VwdWV5e_oGI(S$XOfc9#pox_S5af-85r>Nc$BjFt7I{1^Co3sm@8FWo--zb|r02M7c|h)DFvq;fqZ5^p3g}IYqPdlxT|{b3ZFOA<x4Eda$`AIx4(+F8QU~;<8$xs`2&#*oLJO*dmdbnEEkEZHF#iwiKC2aC9ed=3#9auE2C#Z*s3nw_D6aXLSy#-YuvGk9$qr(#oE@1!*G5y4&??p6a*Pi)%zcXYa#)>;+=UgZb63&|65HAoZc2O6Zv2v?Qm>^hEYbX!Yvpsla_~g9yyumyQ)_smLIQt+vcKa7aQ^H|(KFwZ`POx=l;x;#T<!uB~?OSBhVNYv|{OuQ6o9#=>R(#&qlI3^xIZV9V-U4J)T{u=SqKtb$Nc+6Ly`rLZA_<N115ctL771$<3UX^~1|MKC-OvC-pzP)75X8IEa-96q`l_O5H6k{-Vd`QfnNH-N>GXp%~6agA&wb=01fcaP*|R4z_2Y?xa(gcM|fDAXuSy|^dD*Pxn|mKhNg*(7Um;kGVmdaB(lho*igTziMGFqIaCE2M8*+AVyFZu~P$rQvKTF=92>*$f>WExD5to|*1AF>!^cPH%k9LD*Npo>~zl&N`hnr@ii|cI{BR?sPA(09M8I4m-d1twur~?|}%^Xbnlvech`^P#<C^z=bwTh3ZJOgpYkQ-HN#+uwM5k(o!Pdy}oKvBgayn+pJ>mq+a>4h+0>GN?5@K!C~vv!yb74vW9uSCxFv<{_a!O>`N=MgOvN9qJr!Eim6k@RGjZmzzfUj=8EKHhsz;m<1o6&!@8>iiPH#O2+8WKCORyW<6~c{c=&i@d|4_0W@T!U^4zAl+1kD1P?`#~7Vc@q>02chDs$jhc8kRdQ8iu1+`p$445A7Ok%1dISdY4Af61v|rs5V_r-VAkxMI{ci0B25jsz=oXhW!K^|8?ilsY%mSM#{;99*9}pRl`E4rfZyJHcu13RUE3<eCI5XFBn*X8E=t<_<}BdyVx(s4$uV8ug|yoU@8ma<R2rNnkod1?qjtBA!|e=i6X-LN^SV7i-;+!rQuq+}gTz+|y3MK^4(@5%>~1C(tU~-d^C!x_Z<xBD_#g52COXXKpWwyP$e;b;pgdLnFPp(jpBw&AG#wC|Be>SHrW1t1ZI$+zx<4gXA7o>?OspAgU!2LQV)emR%F-^hENd?zC4$unWjb2<<r<#?~uiIJ3%VyGZn^aC)c3J~$zY3<~pYQg<(5Z@tA>RGH*(*(LhqMBZ=>UpQ{IxB$E1Y+kHY4eKjL$Z!y-I&nI?M$&oC>XhO@Yqx&2AVyBp((xP}ufm|oa1h?pqOw!fIr?IX2Y%!@FYGeC5-F!)c~cX?%I$y^o^Np)Uo42^)O!pSF1<=hVCdJkHzx9ND_eByO7wM0unR7ePv9*q$&Je(m<YrorGqfxRI9DlSZD=X6)C5mz~l0E8@QccRt}QT*4Fb|cp{BmTHT(Kh|7J8(?gqZ31ZJ2FVQ<Gl)A>(OfjY1F)17~6w^~oEzcGmE2+~woRvL-);cosVyiDW?^GuSD~JUM*r`!{AE}NH7l=40g=`&(?BrLL9z(dsS}5U)_^7lLjz5w}w?(Y26t8kSPAkG*PcIlR-crI;TZI<Z(mSoukQ;i8>vU_Ya_{R15MT6nT!&!Yc}2o%j_bA^&NRE_e8Fkg@`dc~73AvHD31enO*m~b=qx<Vlp@ISp^GIBniD0JPDHc~rRG9U!`X0?)AG$qalYlU^__`Lfw8tig$VYXw=qtI*r+ZZX}G*jL}%78T8cgvtRa6W+WU6ro!B)ZjY7n-i|UT+HuA;@yzVG^S!>;voN^jN$0J-G^YLarb^L@7+b@tFiYVagu}w;bef@@FUl4bGHOMcr#|R`r-utv^IR8T%lcOhzoZlB$hdN4(n>jmy6X&m6Dw4|%YYi~gbdV*_vg$*=oN}L5&ebifb4p6VuA8k-I~?|e%UW&D>8^Be8b&(Tshs{j)$u&qy>j}v*#&&t7Z#T<DH(GFglgeI;6?SSr6n5hyYac)MB;ExF6A_0IdQ$(a(#a1JPjQooW*6w=|{A=Y`>D4(}M)5KisfjG=QpNw+oyXUF!(JH=WDOE5X$(B`ilL$0nlI4>`ehR4Tvc_Q+Q{n?zsU{lMAoe7_lEc}l4adBaiQjB=bgXDyMc7nYt~>}z*!cbw9|VzzJgq^SCMU4o<;^MhZukm#P~TpiIB!+>#4g*27m(ZlJM*EM62-3fuOoG%PKbAqVH-M%E{R!g_2Z2GNkwk{S{kuRcs4nk*Eom{$_M<r)!VZL$-k=roV124|mWOelx(yrOpL8NPKN9qOL6Z=l|PW1&-z?{{Q4`v((f<HUEA-0U947-$Ak&n?U!r96{ozGlOP%fhZ?jhc4&e1KAlUB}++ZkK0WCDTY8kY+XRhAuz@V2AE3I)7B9~xoFw3MO<X=s74xpG&0ov?PNm>DS+nWtJ8!siy1>_ve{x4C}6zBuY(8?r6OpzlNU?utm^bpK8W=c(F}xV<*eze_4k|00*zDo|s=YPr1NdYia@$?;qvJJxSoM`NY0GsFfxL01DEKoT@M#`zn;i&t)^Tu`0bdkFO%$yVujzJ8#Uu;n%?vFVNL;7+%NPQut-p<eX%S&l>BTqLt_HJr6ensHBn&%u@KdeJjq^w#K~vzO4LV$P%>(lBv+p|Jvi+b;r^9JmTx!l0BP%z|8y@>JuW0Kpv&1Y#pBLT-Z|um&}xas9PA1H$bHF8dv~T-m%IZj15xaD2N`UWL-_7|)6bKp-X(FH1{I4fG!0&N}%x=QHGtvj82!8M!CY>dwc$GYU)oJn-=1;0oOi3q<4JXN+3Mq+ZR2oOmhg-V>d?1=6BQ#g!1!4Y&7+=fjoBMGK$9O$r0+5S~DdAu@eFW*UHTpHj+55$mg-d8Hv`!@X&_5X_vBHkI1ChIH{7NDtc^)LqVPRWWsV`+s02Rmx@G`0SCh&`UWe#+-P%5E&Wr6}cp!-8E@Px9>|n;v>H&Dw3Yd6_mVw<fOVoenSW!`yZLBpMf<48mpC8U-PK!-C6{1Zm@Q2w2oTgCXd|p!sIdcq+{+z;CR2vCwI*MOI>Rx|FpR;)+$&Y^Wv}A-3@IJZg+`>D2@haNdfDz9!NLxu+yO}Rr;v!(U1Bxd#Znz-^cpB{LX<k%Ax-u?*+-CsV@1Wy=(bnUl6M#8{f_4Dp7}h0qQ#K_|DMOB-?fT9g}CaI>Ovqg8Y+r04#AVjYQqI11w-E3$8ZQK`wd+J9~)1sEO<keaiq3NrJNM%ftZ(cbEfYSungi0h+-9Cch;O7&gtcD~z&WTq}TWee6?a5WH){T0xY>L%TJ=i9W#VyNrP0)EW%+M2`7d0|%V6@!fvN&KTEBGotn|yqkl%HCE$XoZI*gz&EgJk=Drf8opx9D_l+CZYEmets^J?&G!8jqHzk|;uWNc1MbNRkkoNen#yi^`=;%H3m_T~+#&N(T9*76b1jc!x^n?^d!cg<LI*PefSl8mSE}of-dwbHWOtp8^;SZs<&C13-iYIcJK|U&=utYJ{66;U%eVhc{r?mEZyf&jaZNMmjQwhJ#cwwQ?MO0_M|#H@r@7&sfdP?6UZ8R<jPK&idY1?M!ca-%F-J>~18vOF(oW`BrZT6wk)A{4kd1YI$|p@-w!^sA{lOcihBANX+XnDKkHkekM|#v+&6P*GG5}tV^oV8h0uIBw1n%3B9#v4fBkiD!r4PEA>p>e2bJ0O9kM!tfEC&NDx~=aY^!RJY85!s}Y}smTr)l~ji-mD6r{&mA!?N)={OYVd5AQ8FSBClM;&PlbbFJIBX8K(5<lR8Om0Xr1FVZ1o{ouv@2Tl(1U+I|ouxV){AJ6*D&YVpy+!X`sxVO_AqQMOulGLHe4J`IIwA-&__pp--&0Way8R#n|l-1nBo+GDZWpkI6`%(@%#Sa+)+;)&};4I^ZT=Uxj&qI)Efrs`IpJJgFE>wQ`%Kaw-su}?GotJM*&jFD4xulM((KOSPbIa+;{UNm1pMuN9Rf{&f-1J)E5_<4`y}&>}WlHud)WOR^S(KZ)l`J*P;L(Ufg}Z{@&D<Clxq9VeI$G?ng@b37htRnDt_u241;(SEl}AG7o`vjsmcaZd$ZaCYEt2FbH$#VWLI)qJg{SmIqJlV3l^s%*ZRt6#y-Bl;W+7AH{2_F_%x>mPZmHO|h2XYDqrGEQRUhN<b#wT-Z5?y79da_q^FGUk(1kBTw)`alnO4RzQ*L&!UTN;eNnD$k_OBsfLGDGqQuFWY;IR$>%2Lr}rTy8OnGBVAYG?Sa`L}GtiCNQU-{l^RX$_Cu18LZg{+fI6d>;F0FZR20sL$u4pZ08@&U3C?^~+xDB-iC@JMWvlFDNMA!vVjCBbx3t7_aj2`@NA#EOQv|U*>K7H70Mk)BE(l!14FJf-kv!(>>}^`TJhomvb~vaM|ClgEYm*c8U-1uW<jE&hH66?P*VXf7K>AsQ)%E?efiDVV&s1oh{FMU{CY&pU&e??rA=_nl<DSet(X2lAi%vW!wuo4fp$6Pq~Yay$gFgJbzk;>Hit{efNvxl7oxh7ULe&6P)yKdnaHfXz|Tie#u36+LL{ZZw=>^zl?wUdN<A8n6==`xa`lptnXv}FlwWxSik;4$2)PJ#(n!b?gf6Ai#+hxbgxy`<oJ~SG2iL`LHO7!ic;`&FUPlgT2Fgd&wFlf{_GDtq<`QcZ-nXj?<oI1H+On&`+1$_r$6cA<!^gUbkg5N|Nb1_{`1T8UQ@{pk6|x9I{p`Q{n(ota#j!isWEZEJ-Pymk?7cd#Z+>#UQ+QaP!(B`o?-$kZX9%GR9cZMrpWQF7nd}c`}B&9EuEIby<z7*)||+PNy|IAa^J7xJ{7VH(HriQBeSY-sWtb7#RUsYaqDUu7WhtsypKe5f1Jg<n1pbTbC%6wn6n7xo__*Y7guLbBkNdiJ4(_ZhMK@;X^FJ-9vRiu!<CL^&D=YIaJa|Mt-?MHSP`ohCA2zWSS^TvN_;Bsw6p?Ju_)EVC=%1$!Pk}u)ecF^#ooZeu)h@6U6E2NLVP{k+PcJ5g(-Bnf!2w%Y~Gj{a>F1!;xgxbXx!&-=G+_i6U|yg8exuV_I?Skp6*ajV~FYLiRlZ&({mgfxkZGm#TB_C-Py$f?vkLv-f(tL@3a)>)>g|F_{83Av8lPQu6U(bhxo?*>-jv^*wL*Qx?huPs+D(yS30g2DD1(_uGlSx%`vW$1u1~&=%{pwx!U^T>u^7y4@rSexrqtsBY{y5hx6fnK(`mo9Zhl43^cAr7_vO3=o$@osnJy!RnTIRc*MPfN!jtWta=V>iTE!KoHtLHFA{xG#zJ}{0X*3{VyMsNj-I}SL*_2WM+8}fN~d*CZc8K>AZbCE&-DE<Cj{q?SLCfrksi}dXVST6KJYQN-Y_Od=3DMwMJ<IDuzU2nRmGWf1QeBgyn-y8+RCX;oS3Hbu(a<CRy~t)%193Vl3lj}r}452XhDvV)L0ZVMyl!s!E;YFX4z7z5-m5<x}#COh!QbbI5d56szw{`KBSse)5_%Z-Mq$z6FFj9+n8K&ZIy8aQ8e5GS>(1S5^WFjH4-(+HW=NPtB?@6jUcD^zCw;jJf<_>C!8(=K$CJl$MuTvHNqsY>@9@%@vgY21dmvv8u4dayT}$!Kys!n44Zbhl&;EHOfBBWiBt|C0v2)5^aG8>0@D(yIqo?np-OJu8g@i77jZz?{s?Rikl~jpXDQUhdgH}H^G+bTvWoSnaBPo2xWnOUuYATc>qktm#eowfWz(mnHQf0%#~7X{v|A#&qJ3(1Ohd-L3}=ZT9$lPvsIproK|p$Qk<N&<FLN(}DRlhw6={6^Yed}{$HA!ykx;Ffbi<*LikyZoY1MQ@xQhEzLuqCCwq|YI6Nr%NT!y%|S2brM&AU`;#jw1+`Fs*PqDD3x&gE8X5`;o1vNs39n#15zm>L64UCEuJ9_i7^DZ^4UQh}Ac?>w&3_0|U>DcOsubp|2Mc1z@r=<u3W*3PRTj_NKTH5p=g{cu<2z7X1huM$WusD@@zk$EII6k(S8`U=H`*zE`zVum+D7y4GqJ3{hTMA!_~o$ZToyQ9k$J)JXO1!RjC7Uw<eO5GXP`I?Bxigiva8Y_nWY*l>S`PF?)(lmG*!y+!130Oy%%ch*u_&O#?;c}SblC{2`BVQGjG2Rae^R#Nc59E%i;Kq6278M*r!`-trLq0X{c1`BU06C@0KGJXb4*!Zw$j+QssclqZSXbe`6d4oqBQ30V%6XmZ3ybP#%cSl;@Bo)<+FnEJ6l!-a2WYIVYJ$y{5uz}`8hGHyVB;s1^+E`se9lK)<isyX#n;?s5T16ydF9_rlw2NXqM-Ii+|xrCY93w~$>nj@ZnVve^{C^d+%e;s)$HrxE)96a5^2N0%2R!HPcDx$cCU~6qh?NCA33tO$Fs*7j@R*wP^1LIxr^n3)2Qg&KJMP=^Ue<PGuCb}d41%6-yUZ@`1i-Ti?_%A#v?EH^)crA;|$;E(|kE&VFlt+OaiF7GjL6=qfPui#upb$<s-lP5ldXzXtVChn>xl4S7`LLWx;#IPj+&Zj6OG&tw+pHTPjIAyp!M4F^(c5?y62>gO`uk;OnEbt{-ur+Ykr({~3p{92@aguEjq;eBM<jbnGs4uon&TYv}jjLimUmjd7oTw7&yQdBk+!{SohRm3=nO_m^Bg;*dyo>M<T=Tou-i@Cb69jq%GU8{(Jl7{A<)@lo(13oab`Ok4*(;*VE|AMqXx@LV6>c`eyJVmfCP%kd))>&ATT_KD)iIbGRd;GknPu0sp_@k}8oWc)bKO*20K_i-H#W2u`;^uSXipR}<~l3C>==36Sv9pOI8bvVvRqX{psP_55urp1Dq$y@k{F`R^sub<wuLMwLs-G3kd&|`ls9Xzu>gvN3A9RG0Sbhomx>zEtY$@b<=whbq<wSQt8!c6GgxsYAwlDs69Ubseo@?r7nsr`GXfe7y%IdgAz;I1?mIf?7>(pv#SIo`b$cIgk<g$<eu3Q&YDRRshzu>%`kZUio)1OPT70+GZ?dhB1|{g=Fd{Q4YoNwK}TWscT--jyO`qVgPb>4~Zup^DZxa^wR|ZAx#ZLvO7OZ;5TLG~0YZ8&PiCrH98@3Ag?K2eFcoy+7_xnH&G<oW_AOn|6B2YhOP5_|tQOkN-_1*De@*-EYskf1l6$^gsLL%Qvxvr#yM(I{lwUf94TCwVTFLN^oh7FZtb*bAL~FTA~SDPcaH6AHR!{l*%N3?RAKeeCG51OMh?Q_BYLw|I**z;noxF-_}?CJ`a4F-@4@OCXV)3c&EOhyL$!7>t~YR5QCcBg))gjJ)QIa0+$wji+68|cjYoUU+{1JO=1uXAOU`RZ?35@K;F1A*nJt7PRE5W*MA24w{fR=;|zFL@G_-SbOI*<q@eu1{bU`6*u~SjPh%15;r@u<srX#?WW(J()<yp>@*0ET9M<r^pj<TMYfke=A2Ee?F+6{U>(6{xjj!7ZFj<MS)gSf$h>2J-_Z6Dum)KlsL|^hl4M9)Agno=xe>w+zawmDlU<oGjB6%BQGtd2B{>VSgzgZ!^e$i8`;^{ozGaOInd_H1aYN~u&|E?SEB=7YLKRxHW@5X%he?;dHGl6f%F(&s!pZTA8u;1Q!H^jz{Pca{kkGReS>nZm7)PFI7|NDGd<5^FDzsEvL^`*@|<t`uJaGNQ7a`YwN{0knfKl6yc#pBbx*JBLHdS34#KmSV%(EL6I$nmj$jsd<qf5P`apfe`_xK96<=@9D^jUmtZY5h-siS?E0On|8}l^;W%`%}B~SGxET6MY+EvCr#K{}Jm`PydRa5stXA{^0xd<u9>NWtyLVzJ0eYsWSOry<cLX(Vy${`p5cI%^!H#{150RRsVkP`qTPxK8%X*?pOH2*UDs%;!pm){lUM*cd_lKyGbYa;V7<rZdZfccmCUac4EtGZ}D;G_Hg&4*~gSzlM^W@wE`zd?`)Qnq;M=;Th~akXD-cFk@|>_+Na8P37WgYqQD|hD6RakaPQ76cOr>A;-j`P=A2;6>tjJ;QpzZCuv_2y1XhshY>Rx*c>yqqw%FLZ6FDUBc)z`itGEA0-M2M2ifmo}pnhmBl27Ro1PMYWC6c^Az5yu<i;J)&8>C-9nc(V@>~ej5Vq#`u98sZei6rm0z4lr=_Q5(c27^`Zg*L<6uCA4Tm`N)*XQa9y{itJ~pSXLTlPY))z2P}EYcr}AZ#g|0%mWCH9B&(AH+aBIl#GfHx4|hjf_2`a4Pk>9vopv{<mN7|8Gt}sdAnng5!T(YNbHWW^un2lxL(&W74r=V2dH&0Y|7cLg*>LEA2mZS7(Gx2`lRB=ya`-%t<8{$D@*J%rK$2OdX8~8q$bisReoxpcAmaf{^zI}h^SFTYxou&N;78gA;%>np1x!)O$)bXg&_i7m9yMKDxN`0G_XX<KFD}NuZVNgKF|Y<Nd=Cvvei}s2_`UO5XUZfl<fxzfl-(QubHe1bH!`a2$LMd8`ios_r};hQB)&}4R};G)u`ED(rV!piD<aC;1q}$67kBaT8q89+Ohr`SA`lYc3}hoboY9E;HQWM88yzQsHFxwlny2<6Jn_1D`oO>)uskoBZJIxR_Lj2pJC0Dyar`lmo`46eOz}B%r663zEj#z#c|-F!?TF)%{Wn($!hsPMt#yv(T$%E9-vyzIu;wVSxQ05t2qxnSq^=FiRo%VOy%DPsft5^ss-aNTt<fgA^>Yj#0C=nMqPNyw0VLKbqFbVRX%cA`#4U}-LoAdZ+?konYiAC#F#IOnufAJ&!QP{=8NaF0`FVwE_Us4hW&tXZ5~ioBVO}UTnS3FT0^afSq&Yc16pYOj424@r`&0UM*%G}-9F{iPE>rU@M`<Y9!5X_=rz^lSe~&~q@=31T+?d`ihiSfXFV8aq+7;>uGj&kA?UK)9iEXZ+D+1#LhoGW!+?3>jhOBQQ;t>aB<cz$bKog%;E=PLW?1ic&t<r)iN14!^$vh0bY-?=;ZaI@tW%rIp3EG3OPe|?ssRzQTA+hA&~@c}_<vqT9fc1c+FfbWl!!M}ogavYu5w<`@Txy3`z{CRENX%!swoc1ImQ~_#JB{gMWOsIk@F!4{ndgd#}##~OWeZqmUNd!tuL;!ef9>e^mRyhNJd`A5K?bosYYkCMVOJ{Oz?ie9X(k`@X}7@%GJkDo3#tTbJ$Q%=EfLXT?&xS3j;i)Aed8qrRUgoShYxVt#;%bBh)Rfxr<(Qb?4A)q(@1&W^Ik-8nhO5ci>Hp<+vrpKqb1`9`x%qcLFCO!G&U^e0P)F>yB~_dW%eX3ZcMd2ZaT7%fhjrsS^x@ri;itM$9ee!UgA@H;2$Dv@H!6Liyj)@RF1CB527eUTL(ouT=T30%ff&<ye~|cCd8X(rsE(7<xK|OvJ<p`<QZrwX*GNP;D7mz|rruqnR($H8t8fwoMQ9Hlnl(-37&7aUsU37eJ1`n#-{Pye&=_#W<fhrEOWq2OG(;8qrE@H<Zpozob<8_G)1t*4$x@2<3RcY?DgPjn|YaTXs`ka<2?_RWaKE)XVkN4C|6Hp9ZPcUzp6F>rll`d!Vh%Tdg^OE@4|4X>DC)`@a<KJmW;}33dI-NWDZFIzq1;QVq?K8<@El)S+9xM{V6_4eWASvXsej2D)xT0ODp%V^_F4V4tvhhhuL-x#z?b`5Be%i&3>9#hg}j9xB|;1VFB-RZ5PROy><`D2PZIkw$;d>Uzuk4iP5Wlu@6!+}|}r04q_#gc`dB>5(2Rg*Uu#8muS@R)t^6S+8$s#b0wWP<|z{!F5gXvzEqLu8Q_kZp@#Ax9HV;k!?AP8{n}zV4*M9#yYyv8i7zxFT{jlLBV;8!v$*B<KfUa*-SX_Ej|PWQ5Yww<@gh3dZ_(~4JbQ+4AlZaQa*6nmE>A3xnt{`%~MpZ<~iVUO&6H9T*nNJw)H5fFLJylum+EU$a8>E>5v85j-g1dF`M1N4r5mOkjOR2M?qML86vzbXuuGrEYjt;XgS>_d!2Y^ie1uEIe+9H7a;~_-0kLs^gYq}1J)K)j$>2q89F5OCAxxT=8E_95MC)zQKvwr_Oz&}dg74_17KM+gL2ee5fi;_aH)K!mo$;@CEW|bQ6Ex%#3rQ}+i>KMQP_n}$>iKUVkbbwL3iaEqi~groCoWa@R-Ow2^qtIdVt}I%JBwpL57sb`GXxjQ+-oV?#6BDVGuN-Q=fJey~}fp++BDj_v%nZt=O_?ktN4H_RefqbyT)}9AbNwdjo;B+)2oSg*tq|4nok;Pl}Tx%P&_)Teiz_Mp)G6Aidx#r1)w-P%7FGKs$5;mg(J9j%&Gj>&}*mhmAWhTFK*zPG<xombqOh$6TQN_DO><ui-|%*AqlP#h81c7RVFGna18Z&V4(|^uUdbeGjp|RC@xZ^pykKBQ-xnhFEe}uZRICuI2`6Imy{z;}&?N8Xib;T;vDsqS^)Nd=u66QpNU>b&Zk6lbBLK{AecEdAXa1X6Tbe;U87|Q*4$bZUK_@<Fpl9Qj<&Q&MEig8e(X2osjESrS=Ec*phx)zZ_2GT#DjDDcj8s<a(&qJ$Ysjlrr&1Owyy8o2=zwNagy)`USaEMe+QhAFKSOF$z!{aAV(%zTNU&hpd^;e&RarS6t^2(fZQe=q45~)BgARfs?4XV8W|U8JpL}ei+{?D%6FZdr1#@wyYOV#I)0*=C0hQe}nTlW89-CDX+2I_j7Y?jPqLQC+haYPVRL|BR4l~y?{rLH;YTofHrBS*sr*f^FF!9h(7dp5usfm_c;pBN2s_<g%`Zb@>Pi;Y5|W(m_esBb$P;Tc~*X!e9@E4QosA_QGt6MJ!SSk@$cwm(%M>2`th$*Ta2!h{`#+9d#?SRcGoJ=7fI%UEAzU`C^!#XTRrb6(XdgMX^gd`;&}Vc(f+$#KJVco%+?RXgH|5rhP@)s)>GvSn1DFJ&P85W*K#{>c&c4=u6y=~4`qAcj`)%1+GzA^w>mWX<XYR<dMun_Lq@-2d%m|vzhPRAzSiE}FQO;)d{pe8#^;Ovsc`KW+g<Oq{vleskJ#6?@;YP3PY}uukJ6`e|KT?|+5WGiZ@nE`q#v=OI8uJc3VX3P<0r6|bi$J&t4^0nH_!#ea&G;=qi-ks8w20Lj_F5EtIGSFf(P{D-9E^*@QOFgRPX=GB9rg2>xLtK<7m;+l<#;pGa|a-s4WYngZVI6hbU(6IP$Ip7$(WhgoyS(qwl*_9Va}i2ahAx1y)NkVsy&q@gH1hK4C_M!n%~N@y=?dJR=LbBcA0R9WwdqW6LC?-*c?A@J6i5vPG|Ap|BDA2t~-k*FDm$A7eZd=W6y&RBX1&pVwaf<Inpv^^HAYaN#nZI0~}O_7kQR1rtsv+cO`rENheZYYV+uYv;UA{qDzO6TRh5TES<Ft;Bi6j@H`#v^y@@X#*_{ox@kOSUt-z_Y^>dF;zDh(}(|Te_qM4m$tI~SJf4Ja`SPkhgG!bV{cwM)n)wet;hF=ga7wG*i(EC6NNcpSVTmAl7&29E~1FR9*^m+Mirk|`0?B)epg;=|5|vqQA}89xg7n%?S(vzk8{PP5mxh((>>mM_Cq1_ILbVpWFD!^Bb9l`f3`@^mi$c9^sk8ggPD5i*e9M*IE(RfHgYZ0ry4_f56y{Ju~(c4H8$Us?!=hJ)J6<2?$OrX64fV>4SV7T@=E7kQ((UovMnoo4s*P4<(6H@db;wTt^CLdTkMI~^)qdWJZ(7p8bT|5KwJ5_)j%yY8*O!jc9S2mY-2gcfVM@hixby<m!I$QxY|bYle*yb9}F#$<0v|>V08Y85B4DlY&OPaBY$HbI0(q2ngbq3T=BQqTVTfrSqJ~}3xE9iTr8iH{R88Bj4srpe)xq6`WRG?u|rfI6DLECDU9T^F)Tva9`YZG5&@%R5rwJ3Fy*`C!7B{bDAks8xpq;mfpe*Q!OO@uumGFZuh6CwPoc2re$?kqEKp2bgx*f3HAMb4>BTxqyPFU>sZZM<u8L<xlsCPNS7@W+)oE6gf5aj9qQO1+DNkCYzS6oLwMc(&EBlBe_N|uPQxx3!AwS*4$x#}lcbZZ6apk_z8oI}(*56`j*26897T;>LEdPX=+23PR-uIX!kZYvoE<gGI-s-KDqwV$&`96G`@9Gcv{s{{W?);6jetm<5-lbDE;#)Lfw4Hv7;r5QO@8piGPuf(@pXzz*7p}B??l8VD`9!x#Kj*XLJ$#rn;L+RZ4lBCFcGshZ%OBb){LVl9li#`fC#|q=F;ib@QN4Vp^`va-w=?jww(Zw``mDcq$1{L`s^|8<84tIDz+dzEBL*LR!!P(;?^^@-=XxuDdUv<i)H>lljsD1go<HCE<+H;6^&X`8zn`DlEhhA-KDU1R6<GK5ZX7hf-hYn?-j@%&+>U$n2@~9Xi}l(g*2`alPwVtQe_yfQNweRKnw$Lp!Fuh_SnpSVc01pD;iKPs+4Fb)<)8hwM-AAU@9dXvgB0HHA9KsEtW|Go-p#lU6hENVfVd4y_Xi(>JIv-I9+#cWzyb1V)J)#f`*>Wa-YCs*I@%ZK4{N~ZIa_#H0)v$4NhS|7+?W%hiCON|FAy9xY7$-PH?UeDjCHWZkMasr@?B!v@=l8Ip;Y+8Jfr2axCX18*S+#&y-|hQz1WNrvCKeu6fD^07+$lc7&xIxeyFq%^B^U{WtA{s1H+8MW!BaQR&`0rP*u46K(EkN7)@a)|7?DOCMB#1<{=48LV|i%r#f!xo_Q;S$&pAC_|BR+4Lt<uLEuz}Z_q2-ysEFLsZUYMeeRa2(i>Iww~Z4#(`v8F-`|i1Po(X_IO$ec@1o2Pp3|xrWLvyKd6D2+p)jHs#n~^~+KG~27FT-6^<ohp^yl5d##j?<!_J+cb(1&ci6?fKYR4<1fO0(`F%eDfEnZ^Ky;EbRGhhBz1<J0m-Lk)B+wSK(0_?agXShaKRDqu*-7~?#a_4~8VsT8VH}_%F&$6n{s4g;?z=yb&@6+Zqmv_OUo9@;tkj}>bZQ(MdWg=?O$}&`WU6_#k=yL;9R4+~8q*vo$BiR;@8#322V|Ae>WV^ObWd~kDZ|F03{tPP^M0Ef|!_}z<HW`z5{$}w;tGSnhtr{1@jtQG2dlT1CmHm*B;CX{r{mxyy5><Am^b4amlx;56#Q-UMi0JX6${ro~dRLZ6I6=1|gO)PLkd8c<&;w68LcAZ^7Pnaj$Q)@42F)6zdhHX+6L}%6AQc0uhHI|XGeqDlGHuG}{t{8X60AG$Ll9AduF$Re7|;rvcEUmDZ#=Q)TK9~BP<HvA7(tX*FwTwPn%4ChyK|5OS#fPYqfMZTCen~@pI8es<7CI7UK*LhmCZb2K3Jv)d!Di&$*%Q5P!yz<cp(SS#|);SA(lItj<I=~HN9Rq=s9lmb*j-8Dl7f9nuiAfQ-gPy1gtRTCDsMSb$x<ffbwS8glxFP6#BcS9|Qpz^7Pe)&^h&jS88^ia1>Wx*3GG31XgyXI#Cx0q0;~ve8!q##S)N0GS8IGP)y1`Zop~hg>z&?^SrG+?jnbh;1s%gnUdm~1MtAznj<4%)U5T?n4kHfp6!z0Ap_tT*1?RJw$GH^-b9<i70(gVo76-t2FMQm?iw?Za#vF^(PxEhZ>WVvbO=t^pl`?+PTAG2Rjd&X0-hUPmg`VgIwVRBECzhZeE2Tci)2UUN#^O5oJ(o$)JD#NF2jYk!}>|-Ij}>pF0SqZnd?lgLq9Pz`HpQ)OD{6Rc}ndh)<MEeL?TT*su<oG=v-?2(23G-X#<>-pps?JXkEsc3ED_s4RS@*F}AL(Ez=$8<hT#A%mtaU{p0o+F$d0}3pP7Pz=DbAE#5EE5#J#fY(l(c`wp0^4|~z%uN+KvrO|iBD0vtY2;}?$i6-KR+AI10Pf-Oh!l`!WV-1fq(HBq2mD&^sFfo)yc=?{n^--?r+E1HYtewlyT{wBY{i$95C}dyAG2s8yde~J*T~@Tq7sur5JK=lI^txzZm$K_m8{3kBAj(*Ejm;^ZRZ&lR+T(`kuSXw<;$@1nc$&T&#_wJy9evA$bGe?mJSjV&VkDNfifgMS255vwFEZa#Zo;~Fov^IsFI(JGX3)8;-zifXT`jDC#z>!RbRRLTUZ?WBPkE2B%72K9sO)nM*Q1M^^OwKX8EJK#>~rd#H`?c-$I@+6*M6~Lp==-F>)w4Y+>5tgFGBoyv_sQ&nQj+nZE)YtR;)2-{guH`&jjjs%8ub5?GM}6U{NyOTSJ<T_8eE<ab<et%d2wVM|)+5kSFd*!(lz@L&z^k59`rS**!XZKWR<ye$txAl$J#AZn9`&p?Ax3ELvE9MUN{e|DE>{=mxj557D~5;+5Roxp!4It2c}6M>`mgKrq?r^!4O>K0I3IKKCD@mA0%Md7XAIR!cnnkx+1m7)uCm9}!EonEIHARvAX+Iaj_<)h&(!GTztaeSk(|y-n+*zMfvl`ktOTOO}Vc<CS}j2vF~SC5h)mDKkmlwkS<rapJ#6UVH8BXq7+heL0R+=xOgE`(4HOn$^0cHHxd<x^d+}>m`Aq-0)D9t2Xy$c09FtZINm$mrssk8GQG2Q--Z9170mfl#?@3Tzbw0YKk-9#R3umk+B;!5_<c?$3L*@XsPT-PZpq~%|f2D=wxfnY5!RG%jH-eB+G+}J=g6)o}!e!qib|eTs7Khnof1iJ{zXp?`7Ypw69ZJS<iHejU(t}ljK%CX)+}H;AOH&o|fXLO|mV<K4eia`{=v5{PeBi{4n;x03NK)@_s}!YiS?SrS(8i(5LEsD@~g?1=YkY03Uwy08IK2uI`TYTvB)WY~_2~dLecYdaaceyY+sp4L`1LO1HqdM$XlYoWp;R?L1iMErRa+-cMfl#owdtROy_IZMOf=oUk_Zzp-CF+H37{`dfQm{jIbCeptomH@>{%*jGMS^sD9U$LcwHhRb*5Bfd}n+D7HC*l@jbACGAJ5szrA?2SQUDV>$^bBaGLpZ}{3$GcmPWed4gZG~06B*)PDQN028=vzOIzODY>_~J)3#XBFZ>)Qu)|Cuz{Z!bFbUCfC)d(UWS`ONRX;o;udFYbJBZ+#f=>_m5VEH85J>@L|SAN0F?@6z4*j^3C5?w<Eqd;BK;`{#6bKInJlzxP4^gXZ<EZ}vUE{r-J7_f&4Zot%5$`_>*~JN)=Iy>sW&{J9<vpXz_((;TULE_iYO{XKU%#_nsQ_$L2fKF#f?a((q_{&~-}zvr3X-*b17)w%B6GY$$TEw`j9=g<RhRD+&q!+A{W)s6&jxgQ+3r*CoqjRJISbS;<o0OdKuPBH1W0;4Rg3ysiH<K|JGrNs(q-9g?Xd8CV0T<uo*MIc?C`~A91F-?S1KV(`E#4f+e^Hq;Py<wnShmL)eXRsvILA<5oom8Ix0y}C;6D$0e1hb6LXXpg;onyZW|Km>jYR9-1j}Y5K!GcPj$6s?#c$|tv;F^V49AcveQBppnm0m~2Y(U=moe`dr<~;CgnQ?C($E~gWq}IeNm)XI7NDXwB_n{Z1BS;AJk=zN>nnz(nDfZ@x@=4gWMbC}l5PNdPKTu7cxnpYXb=sU$h3N}<ACPw@c|TK_e{to^)sdz%WYSZdls++rx6sqq<N#aD<i7^3k#;`87J01EF_U-V(3SUaQw&=YEnp(gqduC;v*V*|14uj(Z53BC>5lT=bS`ur<_A~`UEblVsz<Uu%v%KVY)DuF6Xp;t(`%*Y_aggN-!ZrfO%SI|c}ZL7%NqsYS6IioSZ#1R$otxx((}xTF7H2z^*Mi+_onBxnXmDoK5@4)Q6e-|56*O)9?)zn+t~%By<-b`cq$(;hAnfHaG9=j<j!Fu`yK1@PCIe=+DXrEChzvEQ0q2@V=KSCjnH|U0XcR|o8@L5rKC*c{p2mv<fU8Vb6mSU*DHg`_M?vd%o>!?(btEn{9`qCpkF><9JKN-FVE>`l|KpF?#d6kwvNspu{?fa;U9d+>I-hZl4tga(Zw3;Kk@Tv6919!IB^!;KX4YW<3#=%%X@=7dcdAo?UZ(|{QjhH3qKs!oW13wym=?K!quSFrXt*>XV*>tibf9OqrCDyzDDj@p5?af0mGzK=M3Abs&U_s6(?@wF1pJ}Bh4E4biR>i%{%U5{Go$}N6Zr(opi!O4?pox_7e}a1M`E6II}+ZhvON<ov>J-oyId7*$3H#$)1+^basrbX2N>hW;&m^i8Y>?t061EOSF2iU-8O`XQ7DrR#?$ioqziI(n@V_p<)#NORc04PpXRLzvuHk_whM=-7Z$o+r>U~pJcuYhmv{P(VLG~AS}uJySOaV>OY<dHt9!P7VY+d@8jLwp9SuC0b?AOfA-ojUJ|$9-Ft;~vj^Pm{nKX0ExNeZg1O_-*-w_IcyzaW_z&w2OS;po|H-5Co+6;MRhFOj<jq|^zxMt+UfF$pZ_Wtb@rK`Z|0nF5dj38R`lt6cw|n;blNQn+%5%$eQ*mi7_h*xPUe&Fp(%l&%E5GmWTP>I0#~=JJ^S$FE-i?QQ>}1_XH)j`hcKf~^Z11i-pWb`NcXJ<pX%H!F@1Dm7?l758?;*Dsh4r8?ihoEis(ktP<-3hXao--`4y#+Ayqh?|ceeRE-rpTYbN4<k`?h_v+jj77;|l%ZeYd=`Pdu_)Z7(&?miZo3miZ}tc3(gL<(BvNhkQS^%j)ioOj|jh9kKj=oUQKih4=ljTz{HxH&~FR&dBIx_3wFq;3?ui>?FFm0Nr3g$)|Gtj`wE;3wv(adDne;KKLE)uhf6o?WgCy^8Qw0d5it`HyF3QSo+b^P5K|VajJ@QC(j_ieto*T8?6$t{J!6UySvTi6g=F;n|||0jPY(<e&JVT&v)C#&EI`F<@@gLi1+1;);H-s_+AUem%J<Q`g6Peflnpx#;5fsp4s9allwHz-u~Twad&sV?WbETK5|}{yE`7E!Z`2qyL{o{J$}!_^FHygKKIL4KGpaAqSnKgPrSItujPCAZ^|d@`$;RT8NSSq-^Z1K3)`5BC+j}W<8R~2w9(tm`(DED%Hv0uU;lHj!6olCU&<9`U&>W~X^-2uF#l6~_>q2>|Ifd>`5<RQdR?jY>tFNN%+*>r)%U;aDqaiRsQWmj`+*$f9j^h1nzqM$_!!e*m64U6198ZhewBAHgMrS8^llkn;fXP&iLYW&&`i{V5kfWMa-!as(sHTp_l&u7Y6M=SIAFM5VK->xJ^4^DeU*dGz@WP*fB&5Wb%uEwk>gCTA%nG`1l!uqUyo<P4-VdhIs08I?_4YHc18gLPJlQG9kdap2GVNfdvBy<k&tUW%gi#!Dw@*fsD&O3ksh4Vw(eLPq}bKhT(8Rl2oHLo<sP|&+P>c~VX~(4F-Z-WfJ2ywZkvP)1dl0mgE_B&wsXZM2B9hI)xjnR!kW&YJeL;72_xDA2odA2!YH+v=-#eDPVNK&cZHqFcFc@$hO{}Qo_OH|CgGvFgoFoJ69ZDXH0VObGf10Zn^yC)!pTKLYfMFx1E6m}_q>yB3^72d_T$3X@Fu9p<el}Xw0{auaeM3yOKdHzLCQ(+UT84GltS*7i~{Hq-O_fB?o2qZUB0RN9sopfwxCyCQms2@-av8(WWuOP)YOJ7Td(5S?0jT!0Q}4tPQv9Gt;0U5%3k(0&JT8sntqlV{7tysGQ{wZYGptUywBzDVH;|xAr9PuzHs(eu9X!gqN6pu7RKrtnZYv0bd}coE28v`8$(r);*xp6QQo(?iopV}G)OCQg*t!RQJ`Wn7^E8J1#>U-3KdojVzyZAs^F44<zeS(dhV7+OuJKL)XP+sn^UyP-Bn*W=#VzLOPj?*=+<jxCm|+%Qy60Cqqhyy1Eh&7X~9w6ksIa!D1Yx_R?5cW$2_5xAfi<K7wpz)?8~8UEX<Uh)6mriu5}p(Wth38$vuFX$JdyZHusQ^*Z@SupLb1t6<5?kgBVoXE9`bq{F>MS?;%?p-~o;?C2|i8$m~3Z1H@XWutl8tT_7}Z*|~Ke*7Y&0&WyDbq*vL8H9d0OE|C+2^gwh{Raa%}Nn1LLDfcn1!yUFW=!z??_+0+3#XgEz%ZE6jtB|JiU9-rz4tZ1|gbcb=e2Lt*owN}t(PaCXb|wJPxnna9piQopmR{wUKiQPZwxiWT3u*UE&1fi^+F`B2jBA4%RK<YkG7lbkgNDdN%i=2En^2zsdgf;NEZ3D1)!ndbf>o%^*D$fJa@?(maem=i@LXJjnklYigF@zZo6Q(wq<mwQeo--3P+el$!ee9v&$8W46x)>JQni}`XP%kT9wT)d%LRq#bQzg)+_hj{99%PN>*w?UJ6w|<S9OYXptQ6I!_j32xa{-c5ITyZL|bA264sE#n0gq{7GE`Eo4iiG3^=f<Uk;eiPOg8ajMUHQ5Xd>yy@r=+SsbUh;nj%6zF0(uNm|!2H$=^KQEqTCkgDDwIkyW|F1c5qV?buyL_7nqjT&*?HQ-FIbn>OB?YBakZ*#W`xF(Krbvwa^UgUaW=8f=pf|3Z=RY-;))`|<Rk!*kE9|D$HQW%V!)6AVap{J`@IaPG1dts=U3t|}>3rAtrqUzSUTPvGay-T>gQ?ZXQZ)Lx`TfFJ4c0Jj*rn)J9jxq6bI)@~r4|RUVI-=xiGfL&S2k<%cIwtp)3VQ<agC1=Yc+n<1T}m-JtGEbxRhJPh&-f7bLhrWB1wnk(nd06com{w6dmL~a8TxWZbe(9BhSfYm4JV=*mbe)_=uUjh@Ss1a_!u8N%<(|2c$gbkJfn&}$T0<wZd2jt8^zJVI)9H^v5XaGhR|3LUd3ckyMT^rm_&6r58eGDHb1zqWr^iJwt<vC<ciZN=j|?$Yhg9m2<w+EEfs%iNt=3|YFw@_axXQ8HFW@sG<u>3F30J>2?-Z5*4Hl)oOJvA)o2X)8AoKaZyxGvcGb%pAB85C>x}U2N0x{rH-#?eFwHCBQn}9)22M)Dj~i#T4uDwaC+OD)MC2agb#tV55p&NlVxpxqy--|VL=B&rC*YR23!!+I4w|zH7&|~=$i!hw_KVOwuBd;!kQOdKcv*6OfLUA}O+wN>*SUvH*`^2Er3q~_9r|*wV^Gd<?35^$`_YyPnXcC<L9?*xP6U%aQ{zSMmxW`Sl$32q;W-3|g}O}VBc-F~Z&~?Z0PZ54%XNBqj4|*<TV4w{;1CBfZ96?2V}_k6F~mH@t4pfO-Itx^`dP-2Y?s`V>&&&xkZ+l+7IGcpeP#$1$L&4y=}{Qa*-?8*yus#_%kxpdRb0Bv&^fJY#ZQbgwvc<Zh$s$x+Lo@ICtPv%<r;E=nw<Ma$rKw??VpII<}Q)v0wT^xu2c~NZCD|O4#bQxUojf!xxqQ7B_z~tsi$-{sTU^4%gDdH(ppq{CHHn7)xl}!Q5L&si4xmOwffBUbe`!nl>N5cvejbOK8~?9)qL4d>d3xZ$I9<U&b^o{mXsY8f7z8|1>>u&(`KHDs@Dk7793A}WGL6ZxP_iPd(qGfP7I)TdVqlH91|Ud1c3RLRSS{);#X!@c!;aO*s<UtXW$Tf#gJCD;(o5Oy3X=itRP!F6trV<{aZ!{d(D$NReGVhy9ng|`a;`4hhB7%`!g$&dd3bYVYRD?M4n%bI)zEC6-{(uF5C!gzsE`EQ@6_$e^%~~6piC1ctwmds0%_`MB}796UV0V?CQw<8&j=*Kt!G!NjE2n)ysJiVGYn6TQiz)J<_U~I<ID$$kMjDQazRDRgk3>Tt(HYj|`eBekJjGQ_iauGLg2yYCI3JXNH+vH@Ackxpr}^;+|!)o|G-*ZVmg;8`utXGsRDo^S#{CQMWRs2e9T9k4V+`aWgznpyGSccUtKfS3^z6aS=M2srn|bc@Q6{7t!E3bl_=MEC0nB$o!s(2|`@E*R5Pnu+o}z=PV?hhH4(mc_q)~oaBJ(h|C!QkYm3@=%D7~IFB_sUn_auxyX6skSbVW0&qs@0XOm_L(zjwyV((*U>6{Hu8g;|R^>m_Ml1_0NGRUR%B%)dodYP_S^(r>HOGuqpQ#vFa!kfDuN?^Fxm=#Rfx1&Hbc)kno&ybjmAinW#w5%NO|IdLEaZCexJLR1rt&!Y>=xw|Gkx^=^&dx2yEsp}+1<pmo1XjdftpR<EvM%uUmtVY6Fz*8CXSvtJvYUYA8%>)<uv87o6=7E_-smROwUbaIZfp|jNiRQ)<0N{|2W3Ae~IeL_+tNY^no(=^m&XUm8>78_x#2O>2>mnn)a`7yeIwgNBR}##?}{4f}Q1=t-iQQ{yz*yf27xc_=3e=?~6){imC&L=&?EAfVEL(I>a{p)ERKfo7b<{&*CFK&cEXurjGSsp<T2EP>#-XxD6h9@;doS%*f=Q@=p3k)%5Rd^hFsz6^@i!4VipW`k<X+n=Fo#-^!1r=pR2~+pI=>C|9v56h5@<$cPVFi^N*=Tjf78`sy^+gb%Tam&c>v?SohNKH^03Ve5SJe7*O_=V|3H#&njid|1?{>WDNFuOt7_bNxJ0@n<ZWkGx0wVw<P&8Q1Uqky~hLzB%y|RlRrVsIzI&G#Y)gj<PdG->f2nk0Wo*+dFuQuM^pza>sXp;~4YA(NFIEyB<H@HMU3n6XOz5u$W@9%v6jZg-z*J?K;!DCSNc|4;}fgw6S;9(_^1%@|>z&>v2Rs?ZNV+eVmW>ajk#2np2F6ksFz8apdC<zpanBF7CvwL{_kx@V{soPkkE7{+jT)KFBA0u3zSp-X^x1A79Fz{w#Yll^t8b^VrW`<Yc4&n*I7u3?mC}ruI8IxF2K19BfZ>r#Lk7RJT>>6h#p$pQp?QKgQplWJxFO&=lY)cG1>O+)-B)?dfHVUF28bX^LG`S>_L*$`VD~A9Y3Dy*KHK+Q_a?ljf+!i!oM=7kZgB#)`4+rW#|#IL1+aYM#@aJf#OJXXh6^(ElTTPWF##jD-^2#6lrY7`O+#)DEdzJ{KOeo-qtL7H*7>rDNKwym2@9QT?~|gEz}f__XM;*X^&hb1i_~6zdVgMSo2g?)mR2UXSLI2&?swl0Dx4k>|LGNb-f(`A6R4?t}OEG`Az(F2}i0@yYip=acVMo{urE#!uD$@0MAN<78*S|4dq~Kb)s&F6K{@p6sLT{%{v+o>R*;>?muULln6G!JhUv0>DWCc#@w_^2qiok38@H@HgdYJV&xVv8<P>A70oz5tjTUBzgO9wNiiaBK_yb|2y2utz1?V=Iq>H&hCG>Jv<e%*x~ZO(NKMud83A^H))>U@+EKhLklbE?L7+a{GFa|F=#)!0fg*Vwcn3AyRBv`oA9SN6WT9e;(I>WC!Uh~J&%puVoKg84EGN_w%sQz_4#}MvOj2}J}E8Ff6rT7-(jtP;17=2?p-{bdkj$A3OD{i8<ku0%K4-vck3@UYM$O<$lvq4{++g|tk+AAZ?L^@uxwj%zi%h<ZGYQ${mpK9et&pha{E5;?KoB%s-@CU-F!;VKh-b0!Jz+?Z~iG=aTni*skk~&yNy5cDZRK$|5=;#<#xPezs8F{@^ydM-th(-zyG`GheD0}r%0~wZ4bn)@bQGzTpjiOeYu{##?e8QCl@oN@!5QRe*aYi@+`-t=6}{m{hzc!zi5B9Kw&_4?Xvo;-KenJJyqE4{c{h$!)|Y}?JwBvoo4GDc6$oGXu|$R>+@iJ^LK}#e${MU-TAQGr2EipwZ)Qr_xuHzQF~La?=?idX!E+v?y%1M?fkV~pWE#Z_2TyPY5hq9^XmVpJk1}=^Mzk}i&g&AK>ZGb8-1ldW3S(7asI?!zxC0noR|K1kG;+xzLxJRHvEV3$@<=pgIpf-KacOnuNY@0mbc{T;|(@`|0ixYr%(M7nqTJa+n0I!OuvkW$NyqHh~@7!wLj16Ls+WyYxwRxzt*p@AN^wAY2k1A&(rUux4O`sU!KQ#z8c+)ih9xx-2v{#zP+ZcePB#aVqbLp8Yo+{Mr%0d2I#1!%_HMn#|Z@+$~)-Qhn*{qIpA{yx{MkfDhzRw2X4HRGX&$ZWOXs%7M@t6aJPCRyx|%X4zP*z+zDy|AdZ?6GtjLW;GS>*OtI1$?c!W%iOQW*#Vg@wg>CZr&IRSp>oysM+o%Rz+ypOSMQ5CyUnXqR$z)xQVJ#?P0;M?cRU90liEKmRF*>9=@?;wAOmnZ8vud8CSGp|NT<KaSxpzJZy?am?vcU8?ZPRO{bGBn3C|vZ02{a>Zfb<%~*xQ?&0!-Y%2|a#*hGyhGJaQv2B2z4*RwV2IWVyS(aP{Z(8bFeWBW>5CKUw;ugn3j<9^q`<x()TZ3ajHhO~{OUfsc*hO^~v}K)jDJrC2nCb$1fj)>5kC2L(OBRJI{!xG8(Wf{giSStQVBji7mhY}yE1P{@T2+uRG{u!d`hZNg}m$oHFq4FRr1jcC`RCh(9EoTBEa$@B@r6z!^c#sQRdL6^MluCkwAGeh`{EZ#(O>bX{Dxu+)^3a*d^2D*}YgrTAQq9LZQ`9bMZmRr&W?;+?sqRZ12t0`4>O_1t&Max}X#<=;>XS91~?hx!)-NkI~hi*3u$)XBLsgtTSs1ZaNflI`y8LN20&HY>)$}03L9r~iB<P1@=A5gQ`(?j`2jq_Duc%1Ha+=x?Vz*>$$$XRhojUkoe?J;xD&xjO5?w-#vqaiWtC2aIMZCBUAtz)juc}!s#Rh<r-K-=MB5JtCDw$*~nUqgom*cICy2>Pt9yRZ?Anv|zzalw@8{3`2*1Ct(HUDj=uv0C}z16m<pH2XgHWqMLNQ8k}Kwz`JZe6#a<ExoR;+|@O1oJ&d-{tVk4=$6!gUeR`jys%;91~BvH&!o{~LPg6P6e7L$cK%9^YmuT#C)^C4qeJipW&dQ1mc&F$Xrd$~Ly}$TCQLv@G?CIqe-PSWbE8nW)7t247G48iw$Dj;L75S;WSCsjy1EiT58P0ESusP+>H_QIg<OMWbfxcUUC1%Q?Oj5Hf(TDxz6?}DC{KE!Nw=w4U1ayiTrW#;RhpMXht*I=+Ig9&^v&#=*L2`lo8yDh6oq=ORc7q-Wo+z+^lDu>4b0r{0z%{%_tPGcnxiW`!e;1FO`H*+y<lgB{k`szT48@L7~Aa*>#HpWm!(=~l}?>|rjc1bD4k7wupenP-%_1kL-jpV{`>o$Qht_WEzD}U4$=K0q&V{ccnE82o?`$~gPvof*K!XX<hV^ELNuOL;CC9T#=fj~zFo?B`Ly##ON7GUsJyUiRO$CNZqK|y=_$V}Em2a{r!D5nww+PgPaBf<w6+~o1sP@>bDf%U-g^Z=XB9U-)p&}5tvL3{mgpB}^p8JA6xTkgc%`(LF;Vf-qD7?QKlzl&b-Io!Kr;*;Nd-MZ>I5Z$mb>YU8UvQ?hPM=4#!bjSrix=7V`A=_x$=3q%J*KOC;L9B7R5oYk$Nu(7;(E5s!^O_`<%Oo#5BF21h80#Zwe2Kt_mC-E{?i3%VnA1;=(olE|}o49Q(8t*DP6&cI(}tWT+}T6|b!Tbw_n%awayiO?+1K*Bx7wITgu<f!AGCuTUZwau83Av(j|7cSO$$DllQyV&f}4R;mDmbmw=F8^Yd_*&<sgJ=W+#T&@WsIL3jTqx@PZok!3y<;#PrMT`!1l!J~?ni_~9merw&9l6yUwE32O;1Gn*2<cLVqY%p1Snd*;BgYrD+f;{H=+p{F4zN?BjnbMRBmNRm3TKqaxx~UA*Xayj5tVE8Qm$()0?-MS7NlGwF;FoMHFHalO2;YFXM%M8h}+0^#yX@#Y5QW@#sCIN7c-Xo2KEA!UG?=g2~;|h5|vKoM=O~hH?RgNy4tc`ONIA@avrddcCRX3?#TQoQuyV74E>0VA&KQa1KaXkctFm-V4#)IQwEP=BgYdHWlCkA);xnr5D>SN`^q5C4*?6cAcLl@AUGe=w9j-qkb7XD`1ORrVaMn)Y=)MTVU?2r6>fPb<eE$m!D~zgEn}T6=O<MCpZj~c=hi%}OGjyfholaX88Dd8aSxUAx7j61-&M#_DBGg}SeB0!axII=e3jE+onK47tM_xcm$rr6=aEr+QQOU8YWsyl*P=mHT)|d;cap37EOzNqn0A^P^|=6?WTwp16C-X__&@PWJA^gIag98=UY$Y!PY|GIg+t0^!XO4xTDo%;cP#zDA$MIVPgWvQ93$b@ud!b*F)NR$9$vW~z#O0~bKxdx&=I=z77-EC#LiN~mA|iy9k$gx2;#$PkfYO3{v_B;^|X=$*p+LB1G5;EZgv&AJa5>_Pbt;GyQ)WgsAge}N>0TisnIDSm4P$_LKSoJQ2G?`wLCjyvV6|Yg9bO`STS_Q{A!T<BS=l;$a7%LfU7Az&q(PC%ibksd5x=5=@GAJrEd$RD+~gKZ<|Cr^-$-WHRn*4<D@ii$NA<UhO6!kRdq}q+sgqYksL>e$a9#QZyuEEwWe>Adcq$ox(+p7lZN!P>6NCeTD|8~wtqo}im<)H;a(Jem+EBTF7@c>gTa@wOjlw88dkHp(r+i;(Bebw33qT+I=N?TRbL8O|EMmP8K6x_gP2$R5|a+(e$=CuCUT#Gp_?wkWU6=CmNY&H1h1A!8@kPOx(Xee%Ci$Enw)PsKgqLUSm;2Gn;#1tSJ_XUgb|qYAIH1b#J`f?O<bx;f8YZ@G$wqmn4bIKTuo`k^xbbX3Erl(=JdV^1H8utZ*)fGcT*nK^xcF<{yq74Y{yt}f7Thm=@q7^SzJ7|=Wb6UuIKJ2T+gtrZ11*(Q|=zKne7`^vDy2773;NSYQypM)qjn>Lz}u~ys{Vj&^g+`w0;oXCbic8keB56#MCb8h+)Fq<{z=zs%13U$d{HrX&dgMV2Tg7tal%n+x`x7t0!Fmx#&;4^C)OOFs1ebQ##&bZq{mg-W~s+M&)j~9iM+%Zm0Jz;mz~y2d0-yn4XA&zsC2w#KBWpH<n?IWknGzC;piI{883}DytXllg_{V@SwfSVK~o6tY>CNBTvnSRy|=_%nJ5XoIH2Ao48)7)%FwK<xjkN$DAn*(c5@x?h?v%c%cHaS)+Y5ns{(gG~r>cRZVS#tYAHry<d{)H*D3XsogAvRVuB{aG6hBe%)%PJfHTmTw}aEvi!gkL#tVhSQ%H2Wg}L0a*9#o!PYEo=BoU%9&Uf)VR<y-cW<^&MyydOI@??27kYG)e!})-Nk_~J?dfL3!`vUBh!WKfo}H|~h^s{OuMtP{BIl`3Cd{iUyiv=+;?anQ0oP0WT%}vtP2^3QjeMAJG}kNk`G<CF-Y<Ky5msiQcLiF{$cR_bCwW3VM67WLH`J`L2aAMb8)lZ$u2mCd?psIOn_0(=VefZs|HhZ|6MT-0m7SKxgnhln%i&=kWc^HYkf&YFzV;mW_ZZo?cue8gaYVaer7h`J8-_?j6zSFw|L<dK`=40RS{sDIh(dj^vHZjuK#6YKscDB}x^0HmS{c5XcCl;x4S9ln>hodrzFWJiv7db{95GH3A!=_^1rakjD^kB3WFDo=V<Gb>Wgex>L;eH$vu2lAN9ExbTYH+Y`uwT?m>0V1OgP!f`G1F#{XV83h9nHd*O-Ea)yK6gr|;(2)t->!9umj>TYmmc2rw}Le-p=ZhD~HWI)7UacN(Bkk(ky#I#{pia(Ity`}~uSd22RRf0GSs9L3>Z3Imxm8kFYejScwDW@s<0M$VZC-eF;PaRl$Q8SXSdZ}PV*`|i2B{J<?=%znAoX1F!aj~WEuVOpQDuumEcx8}l6`QO@(t0hyL$KCJi+wv_RPXF*P6!vv%`}~wHyu&gcdU%W7e4{P;r}u5{v?%V{;ji0vi0<<F{(b1K-pPG`xpx|e8^ve*#izUHx89`#>-%(0_K8oYv=#4poA>GOuts!W&s%<@7X`2O?pORmUjy7OKQtEU%PmHA_xHWV;%(f-TaCrL@_Aov(MyE^^=9vXYTxWP7?1{T#$i@|r^$G)q4)&@>dLR>`pQq@_nM3S>QniO{~2q7U-I!k*MG#C#E<2te*6-@&)0%a*jI3eH6_tad@uXQE#_RDkirD+-~V6O;Gb@J&kAe0$Bu5xp#``7^G|%h>bvI^)^x|qyBn{|<^6bFdY`Z+{Y$-8U*pmJ5o@}|^puA4GSR&JG-&I)_4=;gtGjuh_2qqhKZS|hJzxJf7*TM~Tl`YL{|Za9n$Pun+qGZH_Zwd4_vMrIJ$%Bj<k4Du>bI|P^}IG>H}845#jx-G{OHD!;y3)gPxI+FarbJ)C%iAu+rP)u{OJ8I|DS(f`Frnbo&1)E_?e&Au0rA5X(P$;e7UQi($sk*ADEN86EY{56Qvv2z@J>Xhyv(m%Fnu0JR|`jEgyv5JriSC?y5m&6-^88yy4fHAwxG&8(fj%2WTKpjnd;j_cL$Uh*ln(Sv5p$?H78TQlmS;B-B^~5<$WGL(}zTM+Td><r{7(E~=H5k@NG$3E~|HUUxtBbDnLKUsu`&R|7I&o3rwi8oin7sEaD#?c6iWm@v0&Ki&D|-M&c5bu1sx4|YZyunlXf^jWFWf+gCI9s?e*7KV8Z`Ym-Ac|F>a!?4=VL&r5zjh=UG0J&EyZ5}U5j#}ET64jo&(#D90RB_N)6Y3E;Eg06XKlv0cpe4E@Z`XD!?v_3S6e+&JO4$_;U`a?2(4-g`4PH<+4|0uC;g;Tp3Qn%17mltMqqDGz!3KS5ob=G|UX%?D5*`%B`C0ZG-X`fH^e3ArB3-BApb5uPv9w45_!42xAcZ~lA=)Ue1O~rsyfjoCLQ@dVGbfnQ8e9w2|K7q6o8e9AyfP|gFbN)Zb+;j=yysSf&)PaInls`iVz|)}YUYYhM5&?2gq0n4xSxByDVq5+W;Kdh=<~W}R7a=6hjZ2h38x_2GOjQIe@AP1kRSO@ZKUj>)V{Q8?zp*%BQ^`0+G9R#8H+AR=S`ujbZ~~Wl2H>Tsb1Q}RbdH2wXaQ^VJ%!<srW)WSq?d#8FcB4s(5nl5D?ZcWLu=l{zNHll>c}RKp8read)w#H0mRrXk4dQTy0bKamK6Roh0%$j&)O|<AB1QgVqcH7<!b++pkVp*zaokB3l&42YX2?o(XNZ5_Vd^gML)$qM8~zcfKxkz(NPGLi;gL?DkNn1J@{~%1&I-43mM8#9hetSgCY!?4EWGTo(Y~5CF!tMM`nh6F@_*2bjxCC2dhgwO&)P*$PLucjuDrT){F>o{FkIAl;sE-;Nm5E-B@yNP+{r20q2GMF#Lg*+=+5FEP_sq*|Ff0-xalKC?FH5$F!c95setV+wrgl_&%Cf%}ynwf3p-sJu+sOL@WED9k6*d7NEgxMQ^)QQk&6<%$m%v*CdyJPoz^OYTFZ!@QB>PLB;VN5+ChX1$52@C%pr3TuOhfYRF1v0GnaU&IkxJTk`9T@6ZZ3?(InhUAVFky?(2NYDNB!d=}d+@Q=sP%EBi)OI~@;3;REh0SS(9jdgJpd2q3eLVN5*iiu!)loyu5XV>hnERYWIu8(=Gui)3#W9Po`tz3Z%NV@Xf065%NMc+&A?<<<Dch*g6?bkE>SZj9US|jDWNy%A9t~ulHl(S0?#UHU7cul}H%+=^S9ML8hze?=mUGsSbK{a>xa95t*&#@=cWwj?0^!0oI@kz%u**q04{>l#6Om+f(93$t-^C2!x}|k+L07=?YoPS4lQ=1%sKKFd3yn7Q94o#GwKd)h8Yfg~Ys)$T#h)^%Y(rdiYeI`&&avl_KXs7fO1?J)PzB#%h;{_~vK$9}ww3#cz5m&Ma-5Ol935z!%e6Q61)(6-6!t@Oc)>13p=v)2)g0AmOV_wcbu~w!p=`uzE+|e-hvgW)5?m}~*+Mn;g~B&o;9(Wl&<K{W(p{oc%G|k%`b~0gI4Pc9R1F70`USztwrqzx%9}{8wHvuKg{+HF#iN)}u<;Q>wMYn+ec=-oSMrEmPUCjp$8C)=M-JKMyjAfU#~6Q&*ec#CuK9zCkwt2-++u5yJy&+|K5p`z*WT)LeX<Y#fg|!eO|H}QowAuIjFOUSctY;NA?D-r^uEcC{J}5zuo>^Cd?$X%sOM3P1d%`3jF;8g*z*f#;F=rr4?f9yK0a5Dz7Th@r$)_QHgp^;RP3tDF1gbQ`^hUAKW=#?D}RNi^g_kY%7hy{6wfMNiuI<>+J)viN?^=_AN&y8<<0UHyD_uk^JHh9Px`j4Hn_*vWqcYnZJqjYv~4<eIK_7gmu#{z6;_*$c0JMu=J?z4{Gm+>=GIwhf7wmv9HK|}KX|46O<XE>MIe_Q^inyG(NS~GwRQ~}&F2rQl4$>7V+HP#O?-*WYNIKSD9|U{bYOhsVUBss`<1qIuiCKJ-kgNE#CKsB8doPLq<)Q<VPew!hX{Yv!u`u)lTBJgp!~4s+UZ_to$ZPxw93sQOt+z}=>RAl*B|mf7Gv3>kFwdp<CISO8B2;-b^p_T{yy1(qh(=@<u`xYpz*|+a4ZD=Qo5~nG>a9tz}f%9EqK=k)N6h)8@UT3H$&~um1=KgkF|d0!+RAQYP6%CMmws#O7`yiztl22M9|IgT6>CD)e~2K>*Mdx5|4|JgmCp3!aKk9mA>!Kzp=Ic4>s028z6Sb>;Hc?R=YeH%k-s*-m5zv#rp@3V(cHyA<<T8g;28J{y&Qs^?!(S@SlluF#E(gcvPH&eE`WSSnS<p`yJ<Cw1ZBZgT7ymoP&G&$cwfAoaW>2o?B2^XuR*;`M`2(^<l61$Ihqp>~18*?3Y{4!QG#C{5G72xHa<L`ug^AT{ENY&HFXyHl2NUAHU-++-ksn<u3elpVTMaJ@BvWc27}IDdPcG_uE@v**>W3VQjC;Y9h<q%XTrM)%TjP_7C+Ow~FkxzE4pU$oBk~_x;|vwPSs<cf5Gt_H*xM<##$qw|ay<cvAoW%h%l-b%)yCBfWL799Q*^Y3*H$MQX8ht%HYVmR?z+cMq~2yPFqRmcN2ekr?enOvU_C_RqceVb|dlYsH-TLcP!5JMwqaimNqlR}&v~Ki(P1ZeJd7Bc8XcP%*kA4p6$ID?Lx@ZLR@tOIC|4u59H4l{fI6d-WUttNmO3eQ4)+YoxUDgKH{|0rBbcbPrbg_fss-tm)*rUA!01(|P1^!l6h0=@={1;9c&~r(|(-bJLb*hUtuC>}z%AsB)EO0x!$S77?Uvt;z2%MFV6WqA8liS)QF|@{D5eB<OhCW_Cm0Qe#o^WYYd$M~7_L+Ip&d&Gf}9PvkS6$~Vazc~;3AdQFV_Z7PfWE`c34=B4oIh1126Cx^^wRGfi8JzFKlltz~EnlbT~CP*)uBwHrDE}FX8(Zzdae(3!7<G}g-IY+N+!3JC$MlJtlJm>tS)*N-tk!ORT5EU|t-OIjg662J;?$HY~v5PNO{1!br=@0W6@3z}x^;f$*kmY5YI>WYDMn;$g{px7HVsClTcF?xSIW);43aFa>5$QBg7KXhq+Wvt%=P+Hb_HfaMwk;31VCn5wXO{$-T^_y12rL^5i#-K%kyLb-CfWY_;yy-x{5J-8Y5gzS-mFbg-FqAUKz-1FT3sFzAPfphfH0gfC@7PqmZ+cpO@daV-PZ2^?|PrQw%bM^b5_=PFZU!$!1m%1urvN_R~)jdRvo!ec62Et;^!ormEK3VKBjBSQpm?#Tl?JT<h=`(H}VWQQ}o<;7em6Pk&Or35hR?}Y~8o@$4_dXz2TvwJvpOllLE^_OH|<U)B*CWdfHu?p~zH7%gsW3*SAZ>Jc_1S0MGmY@8(hRY*~Ca1+g@LknbOWUjK=K-jhUTU$fZFKk-iW=XY*@-~+tYCl2WP5D(J?E1S^e##r`i6<y|io(QJ@BWt7IH_R{4U~A`=C-CmGp#}WZOL=Q+j`Vk?cVhMslf|g#qMS;du(ZbIXnTD#mb<Ry#luz*-(6}){>nM{^w(3uKIh=<KXMM1qH!hC`{1bh2KTksdro`Y&4Hb9P+ojZY5Uzw9E|f54xjj}UpGW4y)t?~OoaC#{nI%F-wDx`Z+dL&#T(z?(LUnt-RvaNcetkDHLj`l8u#@9ukfL~N6h(;-}bcsz*m*tUbe%0-HwMGe2Z^zS4;T`-&2{rtPc(Cv+~Cy?&<^o0SKws9f)XUJmID;UgM_DhU4@07^C>e_uz+IipJmS`8Rylr~ZWx_U8ev>2v>{-iuz&1NeB^4)yK3{toSC-{7}Cwj+Dpj<=WX7~1#tlJvALAN&kn;;}xpV>28_{Q;Nub$P>>wn%!yd6Ztyr}5DK&9MDa)D=^p+0o$nr*i9ItgiBBy&uDUv>(J~68^J;aWSynJp57o*6uKvk6SEcMEE`$i}(tc^Jc%^RuBFdL%#*_!N206oIy-gAJj|jZIAu=@l5BxE3bPlZ{=W48<r=lk9H{sPYlN-<&1wnL>R-gh^Egt!o!@gM9zrlA+fftAL2xmwqQs3WqF-jk2wfkV<Av~Q;hW$%%li=g6Z)n7P7M!RC}k4_6S=>SYjuJmE>0V!-Tj=Gz5jRFjE-CZn^Uvi1%oVr3_n3Z(I1DGEuN*84ktzFDI(W!`So;--jkgiub90)^C8}mysOFSn?}x5|cX_*N(6<-P^Ub%@lkQdp)Y|Y8FUk{!D$zLl{BKrMz7iq3=h>G$<sB(UyAo*sC)kE-M;eQf75`j?|rOmBz+YGKx`0r1_|ERimRhExfC7^6O(@2kAJvT15sk&+?38r0RmnS+i_}I^UawF*J6mY-}vo&@9!PI-}hfyI41c^8~9|vBK%Z45Cq18!_TD-z;+;Hw6ys<0TS|B2ls(s){#Ea~cYfWBF%~Dsg-mZQ_zIk&+$ow%UhYIYB}OiR|ze3g%^j!wcz48R6pMl!Q|i?6IR3`?$_jzc!8u7j4P-ZyYW^<MKGM`5pGI5p-nkOyrEM?Q;~1aBnw6&XLPYsut9aRr*RcqOlb&%}1eF6JLQeSBDi5&XUHCtfW#F3a|-%Yafk_Q|3=fmUB#<UWkmtMM1&cuX|iNIljQ`iaBLsUg0JbtX-xURov`0u51Cj(fLfNcqAy3NZ?z?g=(Z2JIe*wy6RjaSDYzW3&a)UmD+V)U7isic1{V6m6A!ZR<*8gy{&vpa)rwDn=J6EsHD04EG7FOYf|u3W9}<Q$q6bYtj!C)!f`5tt>x-G-WK~rsa(WkbrpCVS$A?$8skjcMKNE<@wIADZ5`27oRBup{3>!y#n57y87^1U6mQJr%ZW*(uxM22AqJtz8^H3gk#L3TY(Yobb}-B0YHHY^WAFLAk1M?QH8S>^eIaYLP1UHhz0Ahm`xHB+l$Hw9CEGcRe@ReKRN)A7u|NIP)uKo*U=#V6{M$Gr0+|cn{-k9mHGib@nrQvJF8tz>YF6pdm>J)jrdqqk>a^39bCuQjphIv;gzOUfT<-XjIvG(L3ECyX_)R*tdUyp#r;3Dl1m6@D8D@jqSR-|7ndVivUV89NY{Hz@9r?V2OMY(#RCdlUSS>obrYtUNvENN2x~5b(!Q`EliY;f9fu$Qx&CyQuwuXk}0+O9lr8xUsc;-3ts-2_4(iVzkSffw3f_t(?%E(L43zg8Bs?yCmoHzlNB01AS|9r{3W0_Ui9((4=%1HaU$uX@WGLIH*zil?Kbw(l|sfFfaEG+Rl{)7fVyh3x_2;sIkI&y_g#WGT^_;AbOl+;FOj>y=m**?-}ZkJ+`s>f~8R68<voCDjd57EL7c7g8}LE<AX(G0`&GO~UlpDI=0sD^{<X-jCDYnMit1V))w1@`L0IrS|kaWm}s**WxJKxpYC;<DJ1jTzqR-O3}hR@pg@Fh!wTg(*k#n4;K&#Wj|zHmb@CS#xMrXIv=g7uyT36fbsx&9PlaM-NtKEbs?HCtX5M!&upE5;%_~)f|(y`k{X`Rs|^0)*$7<&a4rSC~oAIS5{kK#(Y$`m1SnUNyZ3K+`R+Ee6+R*MI3fk{+ZAc1A90Wa9PY^B|1@jwZ!GO%fQ=-BLgr$`%(uim!N-&XE43s5%B$H7mz(K`*k6>0x4pvOvwId;tEq-S2ZiMiC6DjRAM<*wOCh?Wp1O^(!erOCt6hDCgS17+#01NM-8T9i3>mSkCU0L#j<MfnTAeDHQgq{`IH{p4y(Ik=oT&+LqZp#z-^%9V8bPA#3#S;G(OGt4C+XW<1!q3jWvra#F<LVMH&#W*0vEWFGwg3sgjk5%PQ<m8`C!gvrf5K%}n2eN4F`oSmmR{H2{&trU}hCsaca%3C$IZ77GkFOP`x!N>g)OlYPvmBV)nF>W1m*K`c93ad3FlgnkuR6mOBk8$#RWWUO_BqY?JWzECsL_rqmXMZ37EN*5N2)1b~4kU{p)e&weEIYRa+7oMH+?1f&W6B^_?yz%B?d%AFWjnNO4ALDYjcQ2(R<a`+iRuR_c>MOq^qf6pW3}(zUNBD!lhZ(|^^+wJp!RE;RDyKWFDQAqKPR0|{d`7558X<{CZ?uDC-UZ56_}JrDswI(j05ho2%FlM5i}nj8ydu0a5)W6gI+3gj^Cm2stU(`iJ%&}Zb!*E+&|2ax1g1dOV}+57lt{=NSLg)XAe@o0z%`yBFTyllFS+ukrMHY7<y_;2+RURCV@pMfp?D+cSXHFCrQvxrcWPNIY%VIiKskFbY6xFKc4*Xj<t|P*a#lCHGA)fW_W6D6Vlvj17x{;d(rCA?>YwYMKWFyzvS9REXJggJyvVT>Sld{|+nArWvDF%xW)x)SurpQ2&vzQUPDhCReu_b0b%|PW>87_se%$mNgnnOAp*khUR<gNyEPBSHZS=(W<(*`;R-(dd2B)MBw2sNYNxjys-gTs6j;yUiI&BxR&v&GLa?VVen=bM)>&twNk@r%kSFD4pF>=-O3<X9`*Y%p}inPTCmA{xS<~*|&Sr?kgz<!8|W+RSr>AXpu=s4%{L&Hl`{mSw!0$0R+{zE5+tD7xzEmEDE$S=fWm(Q{^w~h+=nEApGEkRN~KQs*yMlsOcHThn>OQsle*TUp3(7LGP9+qsG=BEUC)bx2Bw?UuRF%J6pkh9qIaW$*lQ2H1UMM8ZHh$HeX!@BZ2>&WgwUB2O9@#2V+``8i7W_W3uCwn%<OA|vcr|}+Q;B{^aNq<#lle(1wcAqSsL{Su{j~ST(Xfqp_&1_#Z_Cr@<RtDHpA7pwj%+U{a4-`KEEe~Ymzb;TMF|iI^%RwvSxZR3ZkJmnq2Wo5_)qAc?F?5){Rt%hcPTIA#)$8ZjJ&M1asTjEyS`*2tO^?<(?b|2y&x0AWX|nbiS#Mu0R=s^UTa&p7R3pDM>MHc3e07qx;^Jt&xkr?QQ&46{E6Hei+B-nKO<EVLKF`#;gUPMD^j2Qhm)C`yWR%>ws_0@|*%0)0JY918JfaiP<NBDQ+}QLnMW&SXIjUl6^QQMyE$wq?j%Z%j^eYY{xM7?HeO}j#IO^wl)mgBgOI=1e!@hF?JSctq5c*{Ips6H1F5VSrhdcJ&Cs@<>=)HiAbt(pItWzRvur=^yQ$=aSa-xR!oT%A7C#tHn(hZ-_>h0HKsn2B!0<kPv43<mn?=<#`tVP_f#Yz<VwV32q*kkv3vd`8c$bp)(HpVvk)!!49wdnRSPEC*N2S;P_{jS00UD;49y<GG)gV~Hn-1$82$L2N%P?0c;zXGk;^tnk>+xXS5wOm^FYt3KVGaY@3slJ=eYwxp-jAG86yX(dibQFn#AijHzxV3ff<f_V*h%nbQtWR!Ok32=H4>L==2ATO092GnGDN3SZ()HNq;jMJ3&%<lLTOM8sF`POeizW5=5_fxPYn!8yJ8OO+Mf=%-T=dkXEsHc)8FW19n7eSA&*h(6n%BkC)`W)HjMfxPCodhXK6a0s-Met{<EJRI`={NNVN}iEImb1{i)$KAq01Myn>#rtUvdu8>#!T>+t?q|3-or@2|Y8YowcKZhT`A<o^x2f%qzw);Qqaw#ebCZ4>>7&`=?9u<+)9(J2gM@UA|m;)4Ly(?s%|?U4FcD?VUJnwY0|Myo1{)xZA$)m7G<(R3dWG=9XWY$W)OJKLg=dtpbzjyuRW#zp!GdUPQ`!e;L*;<}ag6(s^lrrp^q+WSw;fY3?erFFILnt66I6nPTg)-G0b>SKr2C@o3tMF)#!mMpgF%$y3wTLtu<W!gh$Z_sV9_>w0>d0UO3|YzAu^yo<Uxd%%l&zOUNg9-9%}YzAHjE-dE>85<&&tOFsl34h3C!fqWk#wo$mhREXN+&{0g8eU=_Zm3NU^3!$1gAoeQD6Xc=ZWs{$j_}I6q|UA%gm(t&c^?JUm92rVvDI1b^FGd3YT4M*HuW~T`7AT%voTNvF`ehyHI*-kD_=G`uyRcr7ni)*hw^zrujld@%>QNV-2D5oOY`VKuSUk?K@T_3=UqVa;7{N_*+<B=!ScP&Y<!7w=JPwJ;}!_KOvTZxoL-`i{cf<|xs><#Xd~nmv+p8>=8n%UUO!gMkK&FItiXpcza}GmA^g`Rq4mraiJlXzF+E;z#fxb(65nIexp*X&IWLwQiXTg^!^wZFy*{r~KYlG8H!^<xnt8C}Ka5+PzcSW6*mGz(CE;9pyAD|t0k-e^`~$qQFKG{PYY+CShdgLux038f3`v?-PX7CRzKk~;=CyjHV=0J4XaBW6)b>@U#T5;~)i{a9XAp*l#_3(nt`r~aA!_@I2tMYedWZ+?<2fi+=Mcm2>3Q|9_B4i_M%O9b`{I^f`?h43&E2oTB<&kaD%A()JoOi$_5IfSju`FuyWZE%7KF}H{nMKcvFT{|fGYbE`ja5q!bLU$8=K2Iyfugn84)oK@2xE-thNOX%R(UZ#`Ao5rnyM`CL{7=rY$I*y>j$jh>0w+t5Jm-bgd39#c3+ff$3s<RpU5e7z*~(4|?AWRwkEU5*d1?07J}|q})soOI~xUD0DQ#4|&`sL>dYOV~?)jkP5rKUmk<i*1N9CDh?~?F5PnK5vGZbqr+vp(4QVt56?5ds_do+qY4(dv}U-RMxHRmzDs0dmF5y6vX_9*X?av*Z+ePrBBPd;hJ>>f3unXT(lN!1@&t6TIV54~C+=E-b;Uu<8%9z_GrKYQ752tv1rJ1~6GCpPQH-ZVq1X@*lR9UJRBzUkv8#bG>HEdP(INBj)_08tdl8XltCKHVG%v8?Z^et#6d<e5kw@e;RFU&hsZ0kJF|LalDgWsEXCh--k?HgLN-Yj9*HK-7WYv{H<h?NFVHF9LV{uqWU<Hv<9T1OVD*$@fL`Mh0Q8da5gbUdVvc`nf!PkI={R~nam*XOX&@vCnaOYysB-L(*1)WD%!*l$zp1~dU;ohQ}-;jQ`4y=|5^*67(u|wk<uDreU(w!XW3{y5eQM<kz1A#w9WW7bfGL{;PBQ%vuN7*h@i;Kc?x3E0AyCeXov_aHQMvH{=DXbxtUsba9w&bk43Wa5_utlFcL|%p+JT+tAs*=X4dfyvb7yiuZ>O%c^{oW7f<{yJDaUbuYCjPX{{BxBy9@EG6varcE=1|s6>yX`NXU4o`w4BCkGmHrFu*?-VRf^b4C)uwuIJwGZQJ@*vw2F(AO>-e7Kqbso@+{)JL(18Qw1HdOD7UWWHJ-$ga}y9bFSiXP>vrZZpq`Y~FDFGpH`-F)*xrX1-+g#t(DUFr@Wq?&EyXt=|C$jQjbg0NC{J$RzUhbrqO?(5Te&3E1kp(yY15jX`khUf6C&(xQ|0Uji=Fb;sHAOz=4$mEDZ)ZWR%a@a&9qjU5;81rg-aQRf$Zh5_hpepXPk4navHw_1xQFE^~k?yu3rVvF;EQEBE0tatn_1c`t>e)<hkuzdZB|U1JT7qbf1GIDa`6*@^3@3#DM&}l4W~IcxFSE#3lJ)a&7%_E`kAH!N5em=gFS1l81gOeLh|1TRs>(*cGEktmPq=^3!=Z;Io@f%7%yZEpAWK{x9`D@bSu1o?*DM!yVuzgw_)Zz~O`K?;?L|P#ShzH8{5U2zw2ovc9Dtf$D_`tuKMMQZkTe;3KSdCp;2)d(@uE)^;&x9I<Ou5iU-4Md?`OAuRIADB4AGB`-X~LnFAcWI}x^MDwh9wiiy_Ex%nA1&Un5U0}eiREtncUQGh5M{a?<E#EE!qn8^XQYnwt=bzB~Toa#t{yIh{ZrC$3+q(JK>nsFC$j^s69SBBflB)R1=J;7}#aAw&`IERY-ssp}nGcc0asn~ERk5Iat~>&1)v7c?Y)}2Pa&RWA=CTaoWgWoF3Bk+f!LdZ1ke`EZp*Upv2XYYi82pLor)*EEL>}IV*HAjI(#27q8(F^8rs-0jDog6K%}Kn*U66i}=AO)rLP$uSbOx_-RQI;uZ+*7@rySK!zPX*4b_V4kdY**HATEmwsW57a*r_OHlGx#Lw+wl2WGYjPDXI}4b`g#$zvRuVg5J{erb%4N>9*HzPI`Z@J~pIge8`gwVl+%gUZ>Qa5I)NwhLz4|mNK8sx{#BNl)F?J2d7)EJC=kFM^g9m?=r{}C)hhu^t3{zddqKR5I7->7@)bbDOSvDInH_)$I50cl5rbR-zvJtA8hsS;=souEez_*tE_U4`B2gKKyZ7n&&~Z#<w5d0<p}}d>E6YFUN1zed6^4bCij6BbVQEK-Y9RqwvDG;utVP=J*M?a+JDqr+s3_}kr+`O0mYAh7b{a_IsmPcb5uO>_QQHii`CQoM?GWZ{Sm9-!B_cW29#zFV)9jc{@Qo@{DAxY*q(Ow=$puV4@)^<-}iAVK|{|1LQ4s)X6?h~%N*wEC8OiCh>L-5&ch#gz!4wHH0obvoq@0TxAP<JWNzZ!{FL7`iOW$v<&)aZ@BEXlMMYXy%-*A`$7*Ho-r#2NoQj3WKc5KAyxi|2nCG?tKa+aO>6*o-8aS*RQ0NL`_GRkBoNmB83d%h8$9d=gB@Qf()U(NYJ9AF`qjl9fB{ex8s7&1dK0{6G&K;l<Ir%e^z%^5e?CslmOr9rer1T}=4u8|t>Z+@gQzrej{@JR?LS31hbmhDwa`$H{c(=ME=Ep$F^hud=GBPe%0J!JpBx*b4ce2MB*rmxPt8DBx*}<yyG3o!pRL_p%Lg?_})q;3ydzqOi$B6@X78VMWs+pBCUs>=bZGaL6q`eAklCB>|MA}dFTw!y!^OG@l0QKX(vTN-))m3zg0yAght@1^tTCEPj#G^QV>Y1FT*dX&r_*ILI?P|o$X7=R5EJB)5)3w~&Wun5}!pIDITFU&dIX*B)(Iq|hv1y~8C+_KR)$`{Pp01H!j9qL=X76jep!T~gm@}M<zU=JN_6`$kO7Fk(sbBeyQz}BvUn1rkK3S(VE>dCoDdeb0glU;>%$~ny>-aDHb<>~i8Iu9VjK5~QcCRa078=znEkmjMAtEcc2whi4V%u_E`;jZl5Om~xKCeSb{ADX!4N0=9gJU;WCP3cGBf?wHZMgY~Wa)>Fj=8BEML)<CGYAV+0A@(|;z)BoZ0jhR)|{}mV#kf`!?KhY_F~#CjLcjZ<6I_u>tZASyp?w)<y}a5-4gD=b*o)N1thjwYDiHC6L8D}%@7sAQ9es8u@!mKAxpFu3z5}tT8e4v-_$RrGm160`pCD9_OtKX=7c2alk_cLLOoXmRMs0(wj@g}DO)!eq9)P&QSvG`C*8Xs=8H<&+A244mGYP8Vb{hu@%(yeN9x-3>n+0m*7f`bDRpBf8u@M-Bx&_Gb=Y&I?IyHr4iGW%Y~&m=a$bcyPJnw}<vC8^1@3H&IJ+2a#DvV9L(bz8>uoM@qJ8)fT^mT}f8lS~TKRv)-%z?KmJ=H5+hGjHnX>aJwy8&WVwWrMg2s@0xLH6`FjeGRcz1EN2zgf?EraN??)}u;9%qm>^($wXR87}$uroa9jqGc6*)ZOslppnghmy#HEs+P?J=of2b#-TWWCz01l>~>b^>2BYUViC$80N@Lco-tbh*C4u13vHu&p8W*`Z=cer#j~~W4EY2-V^V1A#30!*?MO*Bfp<|8uGK3m!I_WH-3G?T=EyRjp>=5*GxaJk+rX>$IjO#)_x<Nh|GBj{i*5BLST~p6_E82ywn>H`fJ|$`@hL|`coW&(a+Bfm-54gmkFbfJs#O_*<rU11VZrn_L^R;&$J!W`?&ApS1ijy)sKf<S*PHv+Q!r-{mqxkG@mQlJ@)P!n-F)m2@NM3d<^^Y@b?@m@R;}JA=Zpyo!r*@1rs`-C_CH3Vds;h!sQ`$WN^hUY#bV2LGd%-?%-+^TbExhz41;Q^}Y^5Ze0njzsX`V>(BKMF5_NKWAWLV$ZVoaW~1^I0HXj%8Um79lDGFbGdK7M!eHtt;ma{9e~%H1zWyUV@%=F#j;bY;NhHE=#_k{OTx4NyyV+6{OgZYvx~w?!w;!@G6-S*^Q+;dG$u(t9CyKNsj4YvT6o+m)l>gT@dI!*aj0aKeA&=`)8@6bZdPanow~Z0Aubo;zco<oixm?&3u7$I$6_}TluQ0yiv8jRBFAF*13@_zz;Z|ATZmmNs7;4gF3$yMnRQF}{@|V%iBi>~yKBl9d51=x4zwYPEPLh^~-lr=_V#SY6X-#+%4OJ1Ge#zNs$Hwo;H-zkyE8J!jpG2Vf(Wxv)MvLwfp6*e$Ph34F($v``XZV%K)=P4R{|q%rT02o?bmBFz;T(~VYeP3MDt`jzIrx;-R*!S{Ls@iUTwL4c>KawxYLJ{!pb6!RY)g_{%0yOImANZ(OIuQwllLwa4L$^Yd!>WoDUMYCfj8LOk9xepkgjWX_B_Z=f9Q!sF(?7e<s$~exS+coz<A6B^U@9jzOk>+MfG4mkRI#@UorwGKj0jy?JHw2X~!#n`-k&FS&QhM$g(r$r%z>I5r4=p-t1*6@H@^^vloNAG>&t&wzHd^BKrYGC3q3PDc|EaS4A;PtIRYNL$JNw2j(s01(D#?m2V5j$<lk@N%u47)aw}72oTme9idA~ZJs{9(JF&YMOydqnMRNKpr@ZV42WI_P2`E9i^+-$1Vni7AeL16jn|1_e2_iECFJ*2V4R0#-E_zO(f*7ztj&5K$(H%oF?y7a**bjQ2VuVtPK0NYJ2B6plI6bsVgKS#c<Rr~Q=nX2L_XwuM81VK{?&~+1+BR2am}5rd?RjC1#AO_&{*;z-vRj!Tt!;xAj@qS<vNE%@?1dbk;ru#m*~S-Q+`i;cS${C!kc(~45F5jw)}b*P5SS*^vupD+jcOpa+!Q8NwSv`5Hb0-zU5Jtf3x*I@*q@a3I2;mi9};h2@TWB1f@*q+5+9y3#NQa+hcX)RL@VZ+5F0}Qqy^})<hm8GT3>2pXcZg9_EG@!f>a>37fA=c%Ls#Zi^8wrUCU`8G&-s%4=73D2{1D=C2OzOxLuG@XwTg8@)QuSRbFxd@|+Y?sbko%^qyM$Mf!S-}icCI+iQK+qnHYm;Z|2-Ex1^!Tn_GwRxxaK;M5wyz_80M=iyIC@(}7nUe9C5K7UdVWaFFa7lVu?YI8&nZ^!dPT9Cu-Q7Rpf8pgG^BVSf&e*z;(vr;|<y(5chU3k@B#4T%nl_k6y4(Dnf5{m?I1`yo(PsP$lYt5ULgdXiaXsxEbz%}8mhgGq4;xHPO*PI2m#5Vq@uuJG3FEdWDBs?%{g->A&+#bU`qtQe--6k!r!75px!9{pzxvT*;`Ds2CqDFpoVjyCYp87PmXCaR>T+V5(DhAiHLv;s2L1TRm0>?b=_yy`H*v&II1vh4myhe&mYCjbki)Upf%Q657Kci46Gl|$X_eF^?S_Z&Z}G8Or##>xG>>=)ug|+qj`Q~yH=lKp&LIA6$fHN^glGS%g5n&|9CvFmyU029M|hxx54a7I*6CCyDG`2Br+zU5Q<6dEUTQda!%Kkc98dal7ykf33bGCi@fHStGwhr;$#W$LIPLfQzPYIX`F)GNPx~>bpS6>n_rVxGo%iY!Uc*jYUVr|iI1TDFba_Kh0%%&iJ&w3=nw8;BYV;jj_nQ{nb9Bc%<4gN<oyL^Y``i93Fm2|mePO@deYGKZM?(v%(a$rxy8P_r*K4mc+ff{dbt+U1#X%r454m2(Kx23bxAR^f_jQz@_gmXh+^BV=R@>}lK5=l_Fu(DB-}*G3SX<t0PlG+V?0^_TXmwaMvaG~HX}#s=*8MnSzrgt;*t^jE(4}LJbv>U6;yA2992%LpAlI_M@Ok{uIEqU>q`sfI0?<B%MD~J&AApjdN0#Z$#<?*9c2IF2$k`RwX7mxQKDw5ZEy!JVDtDf0)UgV~UoM0{sM1-dzLUAqM1b)qra_puP@joz-3huw?~5G;1NAm?L+xhcsiaV>18M`N{aGqMPo3D2e=koIlf{J0=hBM>U`JcKx$zqNUsG}XWjiM4DG?3NUw(N%eiE_LF0&tv#r9I+0!hv#!M2fPklL2rQCf;J`K^+4!k=h_GoaswSV;@=J-4ZCc}YH)T`$E-R`R6`Y=haFWgC<0Klz!VjhSgUzUOCt(`+VdextV<Ts_H#;03SW>;HSZT!`x|h_1Lvx5g$@xyix{uTgExA|af5R~}N?uU~g_#w!c?nfbJt+muf@<FIm#o=2v9!cf0M_-Lwse`Qbo!dYW&%9(!4q(4#p7BJHqo?PWpi!Rmu5DrG2GF`}0ou*4|sw}lP+uW;L+u}8MUJ-eXUx*Ijo0KtF{)_+M_W!N_;J~kKC>QB!CbqwCF?oKVqI{}feyV@S2@dpaM#?}w<yh7jf6`@YbzGIxWvtDZt?%xKn2mO)q&!|$y$|E8_f;%ro($pY#<Sd?bpqIA_2^#aA+9{$6(Ye5Ug2xJ^EUQ~bTMOeFz<OEt{-+e1!qZF(Oe%>QCBJNH%4!Fzr~xbp2!OgmBk5P^royb@~lOkUD$ItB?RClKRnQZy;HmJjURSX<3IE~-}pzj1Krr;AN4yNo|iq2MF$@IF<4ypU-sNXZq0{vv3ZbP9`!ok;iU|4s{W3D%+}4{*X@<^gOuMI+B%1F19%!g@a_0H|L@07qWfjAe}4NhN)PetBW82`s~;ofccdqNM-Did$c9s~Dtmv}(O72neU<mXx9os7c~eyEnq=h6I#VL7UtJmOmU!3up;)^xa`S5<gD&FEj#p+1Dsw&+tYGC?QdC*3-=H9Np%bfo5y7mq+@f<;BT8Jfjq2<ax>4X=Z7$*~-{uO*DXlJpRg3v-<O-RLgG{q<RIM;9RxtAxL9xd)ZaYw}6#F)!xJj;sOu3x;PC4uK>R)~^jF(SOy<9i#d6FJuv+40P^Iq@KV`4J-Puzh(Z~OOdzH;iMpgNMCr<wQf|5dM7t%EBbIou?~ig7v8wXJiE=Ks3Ue1X}mellM+c<ho{oNu}F;d7&0sqVtoq+jGb_(^(~Amti&YZIBAn;{NbYhDF=4qFHAY#ld>OAk&P>iK*krgov7Ql`_>$QdzO2J&c+$cJO}!0Y|u$ePr9ygy*{Igu(u{Jh(%-qAZL4xo9e6rV2Pd$iuaXYInvn=TW+gwUsOb~KkWayFSqWohok_p^8<4IJrf3#HK%E@R7F#*Cl3`Mmwya=I<rD&t{FUjQcFDlYRuk$y6~CIg;Moc5c~acEn%qRZ@=PX7#4PP;3M%F=Dl-s)oK>Obu6Aa+~bu)AFDwg<`XOu6e!$gaDCVP6!vJKK_d?#Oos>Ghv<m2KvpuJZbCy6SlUMOXi-&#b%NZ!PVPuWfC=>Ex^PbN+;n@u>gS?D^l{qxey}@tXc}$`dc9Jo91?I7>Z!N^b4FO3%0&5987My8KPf`aja07xI$De2Z@K5~X*nzI%C3@)9IGU*~a#X2~TV2O!GSF_)-Cmk5?;3TNciDHp+l?9+*xXq6EW0b=3rmN7&ss`>pw=JDNMM1hg(D94$li4=c5a7I}{b3U5TlF&7rEd1)?`^Qg9IDe$j*y63V@jTpkHPU^E7j}LAbi65aujSR{CZ6j>T6|TenNw<adiA51t$KfhTdXTnvi%orqIeSlD3Yf72l|w)1EC#fSN)vssaz;kOn1dZ^j>#G?c?u+9g$Fzs+YRer)Dy53sV4PwNtN1b(gj(J35+{u6pcZ{U~m6X2y6YYIM&lV5Q5Swx;Ol7vXyXvKT(N?wt^#d_NHn&Q@;7-X{m4m_j1te(8wdg~(e|GnltIsmm*N(iK7HrwwIE2h(y1sZI1Ku00xF-WFO<UlyW!+H%Hk`Vt8s47bXf)Di3Qsi!aM`b0H|clv?_pnF?!9ZF{+l=aU*xc;Iq8{19A&Mpr$dr3$5D?8`pE+?mOPUuRWLv~$=hP?^NcPZH$LT5G#q}PAqhO+(C)0f^)@5wGV+@BA)X@A$%H9g;%?sX=&{~2pT&N)^Vi!UV8%lK2at{8vXy~(SHknB9o{|onRC`T~glyBsS2fFch{i>Aidq0=MEBrcbKJM2x(?i1EZmf&H^~%<S=28RaU(Y(!=a%=4>~*MY;GXSNk9uROSEl1U)E__7RmJFW>IQ|}@#~mhfcS!L87v>yjc!S6>Jx}>bgLOl4|FTg8P@l2JLFwf>G3mNb;l*%?xUv<RBwB;Lssq3KcDqss87jRzT}zQ`|{HDU|Ie2%BgbE2*0s-ls~g>z!T^)KtZS!Z|Ul&II}i?*n8xR`_FyFCc|hA!<H(^J;?i97sOv7Ty%f&QD^_}*WCKQWY_MSIs1k;f1dj|f9;Pb{dLWJ=PQBlx^bnSyNJfUT*w)8N$ubBK=C=m5%pDj^r1-GeqZNIcJ2LP=68L;7yVqOQlZXgSvpgX3i+5b(hQmMmc{4|taqp_g}nzZ+JD&^`c2FB$?~uJ<cV(q>>O_%>?|M8g?{}#`uV><=LH-3`u_Gk8phkT1ODjo?<rr<kUx5A|4^^o!3Q6wQ70o2WLn<)9T2`vsh{MgIDdub3*LvmB+Rej?z`J|L_i0OKbhIlV)ao(F3dt_TYO}A$DvW>FI2wt8|4xT`88Fm0@pmsWb0}R#u)P{kAg@Fg^BKz5nB1hHr`sbSB2-uw<k%3%ha{I$gM(G13SCQP~sm1x4|%jMuh_$uau(j1ahsOc}FnZ<SKS64J}p`l47Bqcsx8~5BavYYq5s>n2QR+w*(1}T9f>i!d-<&=p!z%wQ`~5jCP8L?Q`T!thj_*M@FGLioDpPKqSUJp4pDnDD<$wCD<|-7<m!*PVt087MF!1KD!#5g_oVsw)$|YUE#SU&C$DKF}D=cqn=*U3*n1yIdY|5$7Y1vkc<4uHW5&j=DkjhEkdhR(;9w8>hwtV+BR0FyHM~bpTunILSE3=y)qa@MS5&uR9By&e`WDc3>VmUW6`&+j8}iqL-+b`Q<*I7tEHrej_R;`erbI7*CH|z#TWpU++$V%MH~Y{+`2`s1gTuOfn5ATGNGMW4Depr+LpI==gQWlSn_hY59CTi<nxH{KVrE?!98YaCBjrZiVKfoCy3KbY-z4tuD3tCsxD@^E=K^AG8x%jHZ21o_btLp9YudW6_IHvx~Z3t>5W}2m(G&tzVstvTHBsqVW-PK_!0RuxRUJW){~d^a~!?(jb5h%4>*#q^ehi{tw&$|I3MUq9{xx>hk3YO@8hR>{g-h{L!8z<%~Lt>D_M&c)ivvGqq7dBd9QQ$+80U{dc1Ka=eOxWbd0#e6j42f!iNYNha|Afj7Y8#XHM;a>=&UpdVI9au5c5T*&NlAkC5L9Uf@k*nct)bM$30#bc-Rp?FnfpN8~+Tu+-ao%>Fl~yS}oHJm!0*v4tZ~JsL@XTfdnzET&&fziBc1Fy$BIVrE<6ai1&HpZEt2h*nBjwSi6*P@GfBv%s1tqgq~5zM}Lk@zb`<%Fay7ZmD1L*yFqLinGV7T1#AclLYc+gyfBIh%IsCWag)HM6N#tX?C>SY$`71nYmc$bj=@}T$$X@vS&E_q1~L#VAaQi_>X5r`w~X~$#+RgD6dAbdxx^P);;D@?c*NqI%-+S(MRvwjmymEyL2=+`}2MoON92M8s-84?ZS~uXi#<S|BWseW_x(%-Fn|rZ)9FpY7u(c+@obpd!2K0o0AB1zi51AFxx2~HQc+(W@CUKqNC}#M#kGOwY4i3KSV@*EL*Vn;`g6$?1#Kp_TRoJwC^A-a^uPG;v0V8Y3#`P%VI`e=ncS#`d2v;1;Hoh^ADg6^#t%f=7ctn8PCLtOy3U^by`H4b@yL_LSF5X2Jji2(inpa$M|8L&9smoPg#IE^10b1?^x}B%FpRX9|yameB5%(cr*0Hn^F5Bq3N3i8Rt@yPh@v>r8ffYs=0hbvkwq(=k~Z!PE2pd>;uPsK7K3-odIG*>A8el!fP*d)Y||JxV-Vt`a7P9QY*Q+e6aPa_{)R~@q7E*hT6%P&jI*&H6?fKf^U34{|y^~=HPtD72G}M9(}3nG8eRc($iY}`Xi(zv%v+{<a^ji_&%h~FLeJj7v#A7kMgBk`QlUgkC+XOJrFX%dU$3$yr;I#i<-pTAv~tq;#c>d%5h&k_dur}azH*}Dy-=l7|?n6YC7oW^Hs^;=EM-=;^kReihYg_+Q0Z!>5<suBk$=MJIwJx>eXJoq}pna0k2Q!I@MnLc@J~Vmf&sZL-K9;H;i`LzgLBm@_JdnCOp3SCng1aoxAff#|hz;+UiwP9^}#yX-^*`@RvWD>r)MBzl_)G`aW*<x6eVE%ZA#(IG8jRHyhlF#At6(emCDe{C>-^tgLOqLsPr`<{x}zZ{sw7wZ0z4DWc<adhz6=?T-006>k!=Z$vasb53=((p{z#Y<)$2d9_ZvKewWM5%swd@jDnX9*I16R2aV&bcC17Zts)(TBoiU57$XCXVdW{?-}o)x%u+ab@MXYEm=49VZ?lCwN9b)@XEvC_d4ulNWgN$eEYoe@O;oIc?#Y^sQ$>L2if=`7qa<4ADkhtdmXg<eTbPI<;ELe<5AFgS-)!1dYF@do(J-SZ<g}99Rr?Q4JFd=^)ScIH|0=z^Qt*wa2~A7Z~FJ``3T<!huZ%<e($85Y<QoH<6v(*{ym&ubbl2uedyk$NBaNo<*E~b?#J0b&@FndJoX!YEdOC2zn*XM{y)_Fn1iYJwFmy6>x22=|MNQN_tndXALpCyfB2XA<Lp;44~!2Q#3Bs!m758fpWRD$$$zGg^tpc;zhMsWlE@&t1y-UPc6=|V&g^*%G(h;}?d`jyF;I(D0cNNw=5DEQCbx5ZwX!Ui-}iE@94pG<ymFE6jKJQx!U?LPB30X+er#2&950D5<!CHG9H2v#wGgWnN3quwulgjv?Py-eRgIk}u=qqn*Sl|z6l64(;F9?85|3sq#iUR~>r8-L6i{qfV;_uAl>}fN)l-TgR<d{+?!0%sisI5c^m_QbkY`1tqIFtNM?wK@iZzSKy9sGarcSB;=t$aVghXzO>Z-{CqayEE<lQFrCs)#swI@_><QY8@@G0>zmp0WMlLuu&Mc$jPQ^C4WTyk<<X6iOpnrxTU(J2^N+qA}2QWsV1XKiM+x=XQoSgiN27;*@r5@HvkHRh@XQl<gv&(h|g=XleFPyjx?#aP5X8P5O}sc<CiI*wwBTTbM5@;et>t$A-ttm0iH6l4yjPUN4-yOj`m=M#}NcNFsncdYH+z0ZMgF47TNCxdp0!IpfQSk-zgB8H1QqJ2WAjGuPN$l8%|DF&~0uXkk){++c>AWTUA5qa)hh13s=;q2j#jPH?-Z5-?>>RbBRw?`%Oex>s-<mYQRGOEa*tncF~2e)yorfuX`O{}5Iw2w>VZ$4dgJieZn==gs<>&BA6pRyXSnLeKMCGFTg&Hso;v05YGry#AeWyqm0%_%;eIHQC%J$Luqqn0wBW*aPs=tv%DGc)%tHr%CYiLM?1zfu5vJ388mw(9MnrJ4kAlOVW>Tf<WP`7v+jdZ+RtX*iJ%w)QoY?4N;z8YH1Q#F=8~$2`^hXCgt$k6SVEBq=CCHwwUci^zvaFK#G_Z%er?7nMfpxNH%;Y+86U1Jkl~b7d<ue`&48Ic?8;CDQg<xkt(XCj`J}4nNXWi{3ghQwnpR`=|5UL_6ewbE_FA+6gbB`B+S?Vsrs(1H5y2x}`DB+wO-U5A&9a@lSbPnjKUp@_X)I&sRgUfREqHH792ghl+?7i&y|=#GlPQhsft_9%*b31p5F=BSbzflzz}WW11XhKl9)x0+)Fxoz>-XT>h-pt0P_Zp>nQ+<wW_p@f_U_tMf?Y$`A4C$gZ0zmk$H!1=s{yE`xa>OG`vPo-75S3VsEuv`6GabE4@^mPgt&jpmj@K4vs;i<tn#wAN^Rkd!at;@r9;q{xzPXF0Xp01k;oOF5AkF37(x8%1NWLW{Qg(TXESzKlYeJIy&N-h3wlL43DMxi;2OLB{TVF917l<%ab2Vv8$ru4L(4&y=|ygOtk;XF=?&5+s4*tdZiZS~4$ac2vw+TY&HGjm3kxk%iEUifjbh4JVmAcW#A~v>1oUp*~AXF-*;xlPiNmJ7c4qX#UKlJFb?saw6liO=p+4HjNL2BVLTf#8Nq_ecvbvxwlTWjhgGxvEC^0(hVzXtNi@yZ}aP{GvlLh5*K4TIgm0YVqXTW?{Pk!>Zh^%fdqac^1+g%<%4Uo_G!G;%(iyvkJ6>SQcG99IA!>j*Za%cZhkaB7DuyQjPvtG)IwuJ#wP~b4cj-%P%S=n(7sz6TQKEm9;@SA-Lm|$-BOU+{fDBqI{A(4w`L^TeyJsNFPFVvXRgcb`(k6i+1W7-W|=}hW-xmzeE!0VoI^erULxyT9*g$uU+^j4sE>)B8b$Y^N#oQkIzf}$bXlAwO^K-fZSbeIFL{S2f1#mXo#JbK={(c(qn<6!UkQfbG7J9480&%T&Gh(RdUC3Z9q?igw%l|1l<#ysZ0E}UUoj5+SNLE5o?lht!2dW8>Tn*w+oK(0_};(wXPEb`0}O+z9)rhmHVKamslWChz7%|lzOAio>wm1b{^xp?<|(h-Fu&bUIox9k-P(no>iZnpfnVyvvf)c=>%V#~E?%y44n92hO6T%j-dEcjJ_ldwWZGAb1_K=(%QyQ_@4xOl`E|ZF>#s2qI^kU(pIZ!`o5`bLo>_MNuwPz9tkHb7ne=xIu(Y(E=K04^hW;P&0}}c=Zp}?z&*a7)=+++mDJM_wJHviT!Bf2h`nAc=pL+8;f8bNO_;p^qL0&o4lsEZhCWY-Hlm4FfGA)Xy_gAm;`wiL?cC(o@Zf8l3OBJ&`)$BSFS2N|M->A+<;8Dj%@fy?#;n<`H9m?^q?+@zlb!D&f2(tTnOLdZ0y`j1`#Byt_Ma;f8Isd5!otoxnZuX!v7>u9ZT1kGS{u=U4H>cdb;jMftlLmR=)b`a5665V_`u9K=w*O!Q(Kzk@k9w^E{dkIJ)Yf7lh`}HJ!P(P#el^by#cEUZe7OOj7HfM|h{Xdx5Of3jr<LN%^SY?s3B3<CVy#PUKHrEJT@LfbM*N|Z@==smr8c(pOdOO4--q;L!Y~xizAlCNY$JZ^vYuNT@l99!P>Uo<k-p~#CZbdpZqw$jYK5_i{8%;0Sjj@%SQA$@#&`tOsHw^@uqKuZz%nRQVFM^ua1%k$Ix6}=+|kEc)r93aSSZoQ%I6DT+f~?`a2UF=uAE(8hNWE>as-j);_$NaqK#FhV^mKjma2?aWrgtwNi;u?#}|u8!!7bj+1JANf@&0QLEx5Az4E68(#p=R$DLiZXJ3V_BZJ0OCdhPI4!>JmMccY^6<R);#0u$?m+`pSO+4SY;8CF_O?4(R`o#B)%B+nz!-ej6JC4ZGx~o;8S=-lG24z}idt7A`>>HnW6sf6J*`aGp{8B$B9^A$?ucHcb7Tl@6mX+k0I^>JvBCzymlu`Tj0oTRERnBt{hg0jy2|`{NCKsN)(zs+=n>)Ut#+(7I(XMtY3s~42rD_y=g2KnwEQ*>Pa<ANY8Dwv!a-R4Ql_4oJf>2w*=(@tyCV^RnwrJwjFs8Ze9G~ODroDJBZcPoD2t#S<m(y5lLtnv@v{ZNtS4N~{6K87)c5O6BFi^PV4WTGP98}20(b!XXC3XubsjH8$)-TqmFk|6J7FcyfwH2pI)L@+LGyfbS&TwPio8T>(b){O`emc#zJh$2uWqdVwvaY&NAZ_7z?9|yLEZ;AwO#Pd1Y;Ud5so`N&?UtC!IqS-QQtWPYH4I$h55GpC52INa04-9H?$k#=;&x?HW*6Mxx3oq}Ti8js$>zR~!;qWoS6eHN_$>4Sb7~*kHd4cjcgrc4DP*p2)+DttF-woj{A?R?neM{qbA^qqqh!Sj8izP*X-+{HU%iQ^VLvOaon7M~<>3hj*4Qm~u2)*n@gj)b%CRckcs^=YM>?+)HRUEFTtggf;mIy{Gq-}+RCWiC2XA<5_=&<@qiYcBsy#7l*!qEZp}FWXj6X=*H&`|#nwQLFdC4pv*GG+wi>zO8dHhIJRQRejGXr2oYNjXtF^+^|=_*-_o8rwC(3s+iuWIh%<0>%y^G7OVv5T|0=N+aIZRZv2$XX=(sPaM=#Ga2E#G@L!>10)semBrXr7}sq5zU{bnN8NZ0ho|IsyP_XqieQ7uAx|})mVZB6I}U@e*_fsitR;Z@+M>CI36^02%uM1OCpHANe-xz8eMg@`qZ^{O!l9Ku|AHKGa&{AbiE@_){#$W#LV^2XTS6=rg}b-{+HNGuehv8n<^J^CXbq^h-7PGZqa<{uj84DT$A)E)c~P6J35{?y5f!L8jdBCITEbOQFz~MDn1+)nj7R@BLC?N!2EtdFK5Q|2g8$|{W~}I%y{&neZ<Imir14K<jT<lw#4f=Ip%kH=W{?q{hz5{B+a=-=&g(E-9DnR?9je=ez8c^Nr{#06T9{_#^}w2Ff=PLP8*>3-uuNJS$4!#bR30+$~TT+o|7Q*Lt!F^UKGaM#55Hc$ApwSSe)XIQoZGryXBO;<>cG-u@{W*p?XVodP+1zbFIkfM<0W6)A9CsF!+jy_(qqy=}sKY7|IsS`$=&_6F99CVZsfrSw7IT=j-!azv&j2t-e&xMdBM}=uX}=I9<Ey(Q*P1xt0D&?wvvb9@6XhbMPDkQcHQ}7eCHL>44^9+(~=S_cc4LudeTpIOa20_IbLT+(=ohm!eR1fcg_2#YSOyld{f``rKNbj74gR0a)ZxmOslCEuH1hl6ZsV&yvnFn)2Zl#s$kwaa&^xmTQ9?N>6L-VGZe}zOl1!VxwN?c8^5sfmit^2m1lUhcA;q&8huOd*H^dsQu`rIJ2j`=Y4HI_&P}j&`V=us|NV!v_a11Mr_F%%BK%|Vq-51DJ%&?wt2|Go#e2&$-)iw*Lbaykq%P)TZcgU)es)||MEQbQJlFfw`p}md^C^w9nB3|nswGj0k!{RS`2Z#^p76lXAn8Vb}J%CM6f#2Jg%Of@r=fA3m9?H774tEx9HQa;nJ6lMY<I)euG2TtFFrclQmC<m0}{^_g{}WB;WJng8G&(mtw5t6kE`^Y<qvjxW9(?cc73*aw44h#GhPtLwweP`U1+a%+Z{F$0lW%y+~#`FE{1vp0`h>7%Nu0j0EZ;%by|@uR~#aNJhq0$oVD_(3<8vh;YAmg?!qPvbe~%7$z;XJFPS~1{(dQ_<qz6LiZR3cj5JIXa@ExzNZOk*TYu~3=LngI*^sorU5@SV~#gcSS`HG`2C*CVafgtk7139Wkd1Gz}2Jce7PaxdRC9n8P5*+8?PE4oO<Lr!4T*kC;Q*&b0C;f)aQGfiFL?mLzWwFecm)tcKY0ISmgWMXu&;CAN<PGC*1P%@m`<L%?GekXdOX^wv0xQy%&ot58sL9;UhnJHV(i#rFqa`)CDx>7y^Eu6M?+fg0;<JG?F~%-wVc&zK8P21FYSg8g>bzTNHPIz8B}1@9&M3EKg{eqNH#-%YD~HKiNG+)LeT_-}8W=Yb>W*m%Ra&TkoK*x;1_84Ky9Q=jCMLmI^Bq+bqXo24JYO_wu5XmMLwgZi~&C=?E1X03nJvM?j*U5YSWXoEa}UyQAMAkT7S^922;!j?$Wzof?VV(6Kxw{j-OptH0v5USK)0d+%?|$q|FevoGco9STcr{hjaSjQU!C>6o7Al4F3j)Ce6r5PJJNQBOyBgOR>`qL=c<UKvC%l?UZDqCW;v2i|UU=KVWtz5P&UNa!EMnFZeDqEcExX+uG=ZomT_NQ(peO%w0WaP0a<2Uhf%nO*dD#IJYW*)uxxSJDgi+omu3ws)Bi>^+C)*Z#cwdln&m_FvEFcXmd<vAE3sjNT*fQ*y<Ctl%Wenso-r$L7~;@6r63>|9pG%47R76pg0O(Kx300qH#`atE2NH`_K$md{YemiSX)>n`kbFWMq+v%QOLB0ke+)KbnmcCL#+d1rgo6Y0Jt?<wzeU(<UHP)mj8K(YLm?O98`<!S5?WP4Y8CwqeJ-JgW>WqWsyL$*)nFon5ziz|}K^so5~K6>oGanExxCzkZn?y-RQ>G~^&Yc*X91+1AJKFCgKef)i|xySJL7~Jv~zV~F!Y~NEtLwxv=jOH=$`CU@eT<rKragNBn8{dX^gx?Q5c^*SJ9TC~NqF9}*o`6X5)s0u%_HlGeW>eOg-b5&X>wCQ9a_6<9OtDvHrj0GP#{|FQ2k6XCA>H(6oYnJ;v*?z$JoJr26zB)$2ae{{FJO2^eB~LAtXBQ)({Lnb53b{&Sd(YR)MtQ>$^8sc>gW>se3c1PS_Z{QzdyGmay}QU^t_6``X=NRp9;U<mq%cdsRbSTUDBX+szT~Npr@ME1S3$;oI`5AN7ntm5&OMlv)?xT{_6J<?DrS$pEDUgxpKo<`#SOz!gAj~_x<(R$AgY3{Zq#5Y^x}(S^gZeSOX~tWT`>&Ezc#+%nycxo7rY?L`_21sG0+^k1iqwHS;{i-#XMbL9s3s!v2VJx_;+kowIwfZJgO2({zdOzVuw&k^R^2pUz5pzW5*o;yq{RnC-vFwmNY-u*Hk{Vg$+ye=Y?MmBLZm+O|4(En#U#e&eb>&54rqF+iIWk~g0sI(E)%nmY5T;>>^9Iwx0q?g|c^I_bExan6-fs%_VSwml(j`}yuz047uOJ!Sh=lu$lLX~WJoQ>;YRAB|U79wTfUiP-YL7#*>Vt=Iy6q(p0;@MxSDZFv<P`rM~*+~*+mz{+N0ql?^Fre&-;L+o>=+OpsGUlVc3?gbRPa?*t@wV693&r~!=^{6*489(7569(HKfpEovDd5hL#GfOBLy>WnmVs045%~m8EhF;r!a4}TW{${*d~eD3)>}0r>L>Y2^bS(r7C2{fs2zaUxAT{X6&4Q#d0ontpDA>H1<;)%=+3x>CB7#|^O{W2c}34<@*eK_p36Ni6s%J6-mg?agrV5FuHyQlbL^0&gV_j(K7SVX91{1r@`cT_H>V<pkLDgvQ54d0RTH@P{JGv(>S?PH_Pkapc^z9*wpiI@O!9Uk{s`fR7~EnvQ;0^kR&HJB)f5|lWe};%%gmM6R?CTWxN<V`xyv!&Va2@u!VW?<U$6zJ&&90Mx$k)_W8UX=&B-aVv?Xby%ahzE%oW94R944sXJ+CBTjmaDC<xfupa8pL?GH%-5@}<-5eeh_LnO~Cy3yuV+2?_EARU(;TO@=R*E8I}HsrXAGqT)F`+C;)^4hY<iKJj`{Vw0XmybI(m$2%jjku5Gixxs~wY95;psaT8RPpR_r3iNEjKp`Rl<WDrEfpf{Cbhanij>$h_k<MrbDT^S+YNJttg)~XRw$Zer_%pXhHu$t>;H1$))(Drw^YLEXcMfK>v8q7(Y7@ICdJFr;I3#nJFQ1Ri8!!RxHE(sF}d0Gm0-5EB@ysM)+PJf&ZCi7I$J>Yq4RS@=vtO^4fXFN-?a&jo~~x4rTt9lJA}`rq>Frq{k!jkhRK_kvFQU0<>d`SSv3B@Gk<MEd>PmLplg55Ir*T|8Td-7CD@CzVJzFT&%sNx__wjKf5Zs3%NGw1{kcDsS7w&y{yfAE4`Y%ZpL@V45e<Q!XXN{1hz0dsJwrd<K|MEYbBp?E_c2Tj^H2Tva{rzKl&r@ara)JUeN3VGXyc|>Pz9zo;)n922OHoWBMScj_$8*KL2W0vLSf`hoJ8Gi6QLZLK_Owd`!Ji#Cp^<8f(Rg)A1z&JCuXe{tGFO?Gm+P6tZx-&ywN2AFc&m-@fuEPo@1AreBgTOF1_=cq)d&t0;l-O3#+^^eF#67*q+8g?|-`56i&t$2dBc5v^G9W&M=UWxmZ;$3vUv}<+M!s{OV9UMzwpx974{PFFx#33>v~ispnmIWO<X%nUAl8|IxhP|L(Eh1Vos)tcbsID)-oaXhiCTD6s2w3`Vr9X&3pE3$t?F<0Y$-@hB{oY*wm5Ze5~)#_k(cI&GCitv(|%E=i3?jNf80#zVX)lkIo?DYls6aYmJOjXeJ1Q2t358UJ&=#gn~@`ivZWfW}L1g*PKPrVGPT7RC(4CyDSHLf|gy#EXfvy9feX-ng#Z#JV``7EqslZv0>WUv+QN-l)!Q4ga7TY`}JQ7`y{I(b!-kkOa(V959_p>;#)%|4AaLvQy<c&vVY`%eB2-rcvMB(z@58>yD7FJAx9)?sgq>&dZ=)9Gty<eiFy$Qt+S4L9P9DJ%x6-2=(d7Rz0o@vlhnF%TW)Zc72KIO#ecLHhohLqj`3ZJI^h4al1Vjdml5gEoBVpygF*5g3Y)Bk{V~N^bXUfFCFQOj?eq0QW#`=Y^mK{{^E}qzxX4tp%gR6lz(=2zKm@DlLr$j)~5!druhe~Yoo5Mq0GMNr`6Z~P6x`MJIYSCO2B_R3Z~zG*Ffw)IeE3;utg8Kc>l&xcY9X(O@sGtfAi*;ovxkIQTv8Tx{L2G^MLo@&L24V!K?mgT)H{aO{+&H`(HGL?>V5pJ$LILF=|Cg?f1o~rPbrJ@B8=3ALIG-KhnRnBItN7s|p)0;eR|{-j2Wj;dp8B@sjOr8mmR7!#eHSjT>UE07L6`GAZbIlvu5bCehttaNTlSiH(zD90Gfhk+Yj&s3l?}Z!J1bPRT2l<ns<=HclSWM*K)Z(PCqwCsuXPtX4U3OjjJ7yepotIbOHMYD!z&khZ!8UA01(asDT;n1nH}=RFdi+iiaycbM)DYK>LWVUv#2*ML21Kl8EY{A=uS{(my|(1tX^(wIhC&2;Q(!92E@O1S%9jV;=yq+^Tk@b698>N?}V9S2<<ce>&O_M842)9>HM7X60rn-j!;jV*U)4>x1WUEleOHWT9=VtuFoJ6Fy9`|H2;9hLUgciI<cpTzF?&^_`o58a(E`lm0Nz;r%@TX1Be-2eUyANXCLWPIhSb?arr)>wSch4tkdJmB|y@Bf%@b_R62Hv5(@`_K8x)q8&NZ@9)kuMK<UK7G%sbE4^bE$+^;zNP0yF*Bys*!%0p@teN;q6F+YulKj#p8K=rVxivpWPig8-kq)eI2kuQ8-IJxNdK4by*|Xvg|}ySV10XL1$%WNn1y=dQ}r!eaOcaHG~jiN?(md+EnU2t|G^yi*+1+TzkSyJg0m}b9l*_)&u#X?f4O`98?MlNod4|B1^}I(zp2vOuXb%H*--qJ9_yChgmKGR_V&*AlliW(gU}n?vEr-m`^9K~i@&^yf99R*F8AY>_GsK1p0(b|UX<anKF>W4TGke~I89Y>Zu{k}qrNq6{>Teu3GO{Eaa<=F9r}|KGyfXUkMw@?Eu5e6ci%K;8~bs+)VJ-@S)YEb@qEo)TBDU79@)V6zR!D~^TXXPEE{f%`re%;?6>&Aov-VCJ>KvDHxGC)UGBSiJO0u&Q=&MERx935o?i#8*!n|D+xCOh;+fiMyIeYsnP|u!v*(N!`k^T72)OcsvW5|LNsLLgNSi9n+e-3lWsD`@;6=VdJr;uy+rBVFZsZ(7Q+)EGc65o;F-ssPxyZOTq2VN1>#;Lr12*zof`<!|1}$I26KPh%)^L`HX(i)i8P?T^iK7$XX>sJPNblg(glk+^Vb~hWUD!~YaviWXvOlPsl<6PUYMcN-a9ylZLw-lX3VStv3V`Fd$ivwpm%a0wkEb?*b!)p=b#hd^!9H09c-SEUYpGc!By7*F-a<DT8dvZdzl%pg9K0v3MnaIpqGJ&gzV3;W_-!tt9-c62#K3S)ZlAm+jQgu;qeLt)M3t5S6%{6k@nm0Is~~YBTRBd;z`T$Q;4odZJv7}5lw>n72RkO^H8heWYgQ?2-HYE{7OCkiv#=te?uaq*A}?$wm*zAL?Zw_|MA9@86y(!B!Y~%x$rBwZHL61<6lia(P9YxNeWBG*=yWlXqqM<cG8Of{DQdd5U2LsaJJCJMpDHa8aD$A3mW6jpj8=rgYDq|Sp=(_WiHWuE+a^Tb!f%ExZ9^+8()>p>JfpG*wT26HPFzsDd13XMf}@Beta;drX&pv!Uyd0V6558uu&YivY5|nSl`Dx!5GH2cI3He=U{7~0neGT)=e@%PUIygSqW*YE+XMtn;ufT!?NgAG=s0jKTniqPJN?-9qX^V0?@$>p7|$4fFU-rzwj43*RzpVD*S4k(`BfEC6O}*DpAPCOThQN9d&=m2#*q+{%ZaYhRTkEs$RgMN{rT^r%6h*n%;z%W{C>qXjbO{;kL+?^HYJVwln^i_;XkPc3Li_D1U)T-j)Q5g&Ft52V?8;escLrUC3OK3-9|o!eLN*PVA#(MS`4&36vG~<r!8pTiC%3HVLH4Jq!W&c-f2)%sJN}3h;=MOy(Nh;w6Fsx7g#$IcUcQx-4FzM6Hl~1ui&J{JK|lrc$YW$xOL(}aA4L|bxOn@Hp3gWISjN&w4z0exK37?;9SElN%n1lGTjpc;xD0aAzqIpLfR<Pv6uEB&9Ddk8iYwZ2w19?F1c)J--;7qb;wMbrZeZvdeQ(~XQ*5vU3B-<-jB(uPH34kt>Yq6`@929;t$(w0gud&(>D3}*COv)p)m0~!<FUK=ED8(=0-EFEbpo)x7x-R3L6tcMom1ZUpTO4=3Er#b2~Td<o8H&PMPGrvG8elQQj6U?k-Q6)~He`ciF<J6U_9N+xL6{tIWJS*~VqUy|X4LIb!po7lu8B0z{q;8q`*%-y&%r`eQzc%YC_Gez|QNc`egrrs<|__E;k9Ujw~;bxBgkofu?BadIX1nqr`aR<#KcRueWBWA8~by{BZM$aoSjjCXP|>sN3en0%P|&Fe2e-yYMlVfh+Fn%*Jl+D|{<<pAU(tzXVd^-)MGns3lVQZi&FzV1f**Lm*kUYK`Gb5kA*=7$|QS6Uv-?^Z~GEYSL)^~JF`S2Alb09uYs64hVYQVDF5a2u^>uHx4@t<lVzIiIES*;BoqW`Er9E3Q1k0}b~jBY4Us&?m()`#NW(^)aUO8Rl0^$JbK^<dOM$$E0X~a;S<GLfx6R5$_yF)s@WQ>ltr1t1(-sVh&{Hd;CG`v`wrv*YsTb;uUgx-ZA+(XOnYVdp)-qi;XFt`+w`)Y{zK9b-v$|#rkQ^&x}Fhq$bvyQ}l98=+8F5{G?eMpy_<4?V8Ra@`-7MGe2pX&KH)xe4J$_ZZ&hh^A&DM(T8+Qqhks4{dnP+1evWH=zlwA<f7d|VYc^Ms9&%Dt<4SbUO}e)Kke}`e&(aj^mL4>_szpo?ya8XE|iYIbF<A^2{y~pl4(I2)jRWZhW1gVg%Z=>DM~#i^W+k0t3zK_eCUl3B#<M<Y|Ga9S>D3s-$p-UAB+g;3)R4_$y<Dxmh22liBf(R#f&D-m;f_>lN*r4U{yMT2G)X_Y=jH&1XbO#_d9h@7xPNx7YdJ`X;Q<2#$PD0?=o~=&%{j#l3j@DJ<RSUF6mV>->zvnUQQn;-9lzagghJLQF{xwXyGHgL7uonOkWy{oZqohu*=USi2@MEV}YX<mmK#|D-GiLBPDHb>`WTOD&&|B1qRA))W>qGA5~MPMuJ`iDDadblU<a1>UGafT8vx^M$Q4f4VAS5-<7p~E@NwW-gN$ZrpJwUP>5YH4l)PEo%u#*f$p?DE66(=8}B^2tbzg$X0fa`+1bl7j-e9NU$~WW))nwUGUHZqjg~jN_oVdCnoJ+pk)lh=2qi@bTJsR^&n{V?ZEsD(cb>}iXoOfd`dC-3ScmJIy0<<5Jm#D9@+w@$)xlUK`emYR^DVMM9a^C_(zaB1gR)+z$D%j4js2uP376$nxEv>H@#Tj46u)HZJ7fF^3PlLdY94#)k)072o+`euvs24f{W(8J1=%xxz<1z$o@>*lz|S%rrJu0{q2i(Wj2!9FeAeqKlA^P`8pP0_)sv!)|BP0t0By-R0RY?Q4*f5UCmZPUXxpzoXA#}tXI_T1mS+r5>D0U}FtYsf_{m{T-}&cb)D;7m=P@wjll7x_XYzu^NCF?x5+3s)RFtcaoFEYNtG~oSQ0mv91pIfX*g<&u13&qVt_;U6{Xtv#e{~l57mcQ$cAR~_*KIxCx}e?t-JTKtWe@(2uT%N+85`pz*Z02vsc+&Oq2!&Y&7vo!7w2X^?!xxTG`%{|@hLY~YZ8G7O<<D&$IUQU?r<s7HLkh#lk1Op{I_$Hacpo6;7^|Cud}9PV(W+`V*C?D%P==|{(WcIoxGhfpvH_@`{d}aULwIC!w{ZP<P5CrCAJM_d3^tR=5T+tUTp9zj`?2j^L=mC{+f=#*7SkYX)?gMP?1cH4B1n0QK+#8=m%CQ$1j{%|7Gp=z;r=4wyXq}@|y<t_rkqtCrb|c`pygc?Tq=B5B@P0knNkSqyNwk+dOU_-TKA{tvzUO>fZNOs>bypN{og#YIi|e&Ik#Kx5dB@aI$upW<-<J7|H!!7p}V~VeMpqLUr;Z{F<0U?2??eg9^bzV}5ZJZ@#o-{4czkdQJFVymR5#{#f5Ft?#xDP`h!7d`;PU%bWM(f9ixO`A$%kt3X$dXSyEQzkw&gFVu^<voaT)L?I~zloTRZb%I%}1ab8w8p*%^4ZnZ#lkfB9kMrK&V?}TEz?hEZ-G0TLKmTyYtNZ(Vf96P1m|vgeaOUB)AARX^IRPjl)Y=pL#O38(!`ENDyey}DT)qV@UvW_Y80OuQVYFMmCi<z@Dr^AbbvVyjT^!fNb-G>=Nnker_T35%kMJBfyt6yuPny`j=ly|iG%K^ezV~Ne;W7{(@YMgItm#<%c6&C!@g8@3Y2SG}Z_XL-aTk1V>CbgM?H4}$b?4Rx)r;@;v~Ti}C_rSsIgj?T=lk~S-5&FumfTq||5y$)|5c&>*_V~&!}{BM547v%w)#M8hwu5(aQ|FBjS?Z1`8ey3&Q<64SNFV@cUmEbU)R+)#!bNT@BAendtVt;V};f}xK?bAGCPiwUPJH7eXXr|zRA1!9Fd3hOMiyjem~~tW-M<zk9!~d+Gf_JInG?X|IE+vvdK%IUo&SN3O>9`<$2auM0gA*7<duwuM8hc(`NJM?sXA3$Co55{Z5R+DM5M9IGOa18FPK3J^i2$GmWfr@!_kNe{=1!cDF_88t0Kt;;JC3#_6DBIpecdk0Z5@O7{S^u2zg2V2@14hSXM{>zDmzKU7HYpR0xHX3g|k0?!DYVvOtrJ}=a=?ESaK)YiG~jj=rl?n?FJ7G;g023URfcVKybI;tVmuMu6J(v{l^ISemmXc_Zua>4QR-0L5KcFl5K-Fm?b8(+r$a}0k9OxP3Sq7~*Uh^6A}8p$#hsx-jGD{S$?@4yO)ikP*aNeCoGv#N9890;x=zpkdF9bAm7CTNou2~L<#*h*W6`4(<mU6G6a=!YFG-$txmf<3e-;Ewom9x*@bgzSx_0Q&^T-DOF7YO!K8rAVZyA4ZG{J(yH|M~0`haarKH+WII-FlkS2JG{fT!l~H^eyhT`^_R5n*9pKwXkK7EiI*KN*n0qDXG>#PV&q@;*!e()hX_DR+_qtY+7)CRXbtW|Lx#yDI&6NX?}<2Uw}F^kF<D+b;EV`BL|Po;t_?Gxbs;&Quz`&bVEUdQ?IQ2VFfI~~+*J<X6Z6APYhm0)_{lUb9wy}~#c)g41ZE~4X}&#7^WwNhDW~4NpXMQFNg7(t2-m4m_?hT0(+Fy5TdYvy5E`#vfI6k=+tPARL(#jUXux3&1lYACt5t1_+Rzidk3BkT5EpNV)*NZtp)fvDnvNKEo|cJlgL=5i49CGDUGj_ZDnPOjT1PpxppaYc)8;BKibejOTkVt*am-BI7o>U57EZsB@cTw$Yg9ZH+H?JLkA&fuuHv|lydjI!Q$h+cCGK~An;XocYp^lmf6xihwQuW&$C#RXeKLljd$_*8Ti5Zq>1MtEoog1pY7gy%@%x;o-klG<-pz5(>R+%ng>rMAZ5|)RNYk_akN9l<s4?@IAMm(b?sPQ4Z)^9@zdMdykL4@*pVPr;;hXRIe8^+-ayy4vg88B(pO~EQdX^W)Sqo@7eqnFo@%U%#&7a;EWtB9HEBM#@(P)0^VKP1KJ3Y*`54ZcWVp@@-Yq~NfKeK>*v*FzLYhV7<jdXf$ca_7GL{Ol8sm&HxpmP@gH(igizH?<*L&l$&b+|4pCt`s~C7cqnYVz}}t1aB<YSVkygm_Y3&ikF`d7V1%fu7@8&p|$FX{0kQ&X2qgQ{CkH0565f_$Bds;vLs{hsVrnUlJ1tF+1~8xX!mSYiu)~Nbsex&HKmCy}~;kI1CA<_U(~PoJ!03T>kv2YqF#Em};k;_7)leQGyRe(-jmglrg9U$qD20?w~MUwr;1}joW}7($v1u)UB%*G^+U7IryFL4x`=~L8cW-V4r>4miayN;HPe3%TI^sHQspc&XM!o=4{Z9yPNq66$}PCa^W<Fj+cuUL<e8`xuDmB@)omr)n#MVOn{(t0gy*zI>ov{uWWw_t&fbbm1$H(v%WT6zx~wLmP-td!urQQbYAsQ^y43&>v3}}75EYZHKp@@xd9%1c=xGc_0KTz6{{_38^eW)Yd-<x4vOnS4Y{52?50ZNR`k14=idXp{tx}W((6z3`$=WLrQd9a852E^tK9DWi|sIJ{Ud!co7-u(zJLFzrq#V3uz!n1yxP{CfB)n2{l8$dzwv|pAJX}d$L+fLU#3&N!@u0>xje>Je{!n-AM(-N=EM4i{rq3$LwlGH##?vCkM<Xw*PV^H`5SND|1RIx$N652`nUMKTRh6lLC-YeZ+VUGaSgY;Temjpw{W+&&)ui*$1Pulf0Mpm>2LL?zrCm4VSDfD<reSsrrzp2|1G>*T-Wi&hQ9y1TTgt8_m-dRE?zU&?&k6D@7?X+-IW`;#lhU+z3#&MtsbLC?<J#iS5Ggq#>QQG%)5Macbo~|;$^yY-^%gzwmy?PU*&K3!Ta~#@5aM#`N?ndW2L8`O_1UFZr5ku-rN6qKk{$w;Kv_vjDM>?d;PHfs)y}fyTyr)^{tQiU;0t=0554IW5IBn(ZhUcxB6P6k<iRJufNKXuH(Kvf6IF}<6xbB1mDtgys-=Tnl`O&?%(}=Pfz#9a%Ou%_s_lFrbB&@j<^4PI<Ak>(QG2Y)R-MYj@g62==)En&C_o<UyErrsEhk{;{F}SII(qfq60o|&~f*DvKU_QE}z%$`OFWiM|)k9L+9(edFWfab#KzWo5R=s_Pn?L_PjM(-_j@khG#sq_vNjpzqKpN@^4PM)GO%k_Sjx;_tx(IzVDfuOX)=^zQuRbjz9Hr*WdEBz4KKA%vUWdZVy8&8{gqD&Bt0YFSqMDZa;qOSNcu6pS5jXormj<(Y&|2dHZ+*{OmV%f6#uA9v-#x-*Aw_wpl%Gjf+EoLtLvkkh+-y<0z%Nlg6m%Fmigg11l^&i(6Cl;!a$-f^*$>I4y7iskJ2{;c`TgA?LcV#NMDVea);*a3L0{8+s_{hGT*U7fudNNC9JnBRJtxhTB6JwMW0Jj=AJtGITNXUcJPvYNbuGP7yrpjl!f)3m7F&$hb(vs0faVkTlOUodZp$mu5zB#z^dA$y>U0a>RWiB^Fo}g0m~y_5e*0?R7)UQFDP(wRIQmYaA7E*gD(X!ihiG7g#4#!tz0KIj+Se;}683s>8lGr35+|f+XqNE=HF)!1lt!g%b$HhT->M2jdJoBwlz`XknO5;>QlRUwVTyyJ$*`;h39AQwYVF>FTT7wg^j?MH-6XzOLK^R1WTv#l9VCR|4zMtRQI$3jvyQ2^=!9h;dsyC6ae_d&k7)>Vq_Gh^a}mH-SqN8||V}-do3IXcTb*lCY54G?=_Y(BUH%2NOyV@4Lc@+ae;2@2^YhY;rVMtM3F43nW4{?b~%|0Jsgs;|}YoZ(JY&kYs%kkdEe~8P=&;q<K?B7{h+wd43iqBqKu=H}MsR#<kGZ)C0xI3zN54Y~P5L1Zkv7aqnLJ8n%VGV*G;+G0$6C1}e?_c?*(Yk5*MERtwbTB1Y{AN??hki;-CBnY8gTm!Rv4K-@)0hOAtPKkd<Q%8jB)gaT#e@S2FtgeS1r>f&|Zs085(`VD^H5^tRmXy)W3&~l}%($TRA(+pRyL3g}D(^z6@*cRmC2BZQoG=vNkHPO9e*jL9`JWg&`;6xXMeWk{!)pkC{ON3UVkB;(Q7oGgbIX0fQ0B^ETC3!b=ac$5t0e(TtENt_u7di}EYhuZPgcJg<@i_#^xQ~W93!Nr2WXUxhH|-MUf7G$K5~~gUs9MI&>cdCA?1duVKcRK|>H=Rz=VMHC#$g9GdkcH6M4xZOAvYb#?N&=<p04|Y8q$6VT~aMV(}`ROuJce82uY%(#$(!6X-adQF_DV?=o8DM{l{3*w&f*J(e02crv;0rqWvG}d$VHk_<mCig=tG}-_rUyuV_3j0hqQ&Y$6f&ZdhzR!KqQ#j1XWWStMS8y`8HgdCPRjKY8B*e$K%5ap|}b0tEYk_8RaOwv~okM|TYw7hTbWkvF)y>hF;Jv<J=vrE!@`1><Bor&D`z&BV!t>KHb|N7^~5D|j_+uLk4N@))0;QPoA?)_&UxAs!53UbfI0EP|5A?_iVB_kC0(u#?{lu}!hyoB|8)f=IPOa)}F4IBru_sD~e(IM_%!YY7n<*J8ZI4tB|^_K6^2@+=q8aSY9t_`=EvO)rdbeDR~C4@J+xVJT!?LEE}>f;f4{2ou_8Ujy2=Lv-;_<jYwtrd$(7f^E_Prp@wIPCg<69S5qu=wO}c4jp0|IbIAlZaoW{<thhB9WPqocf!Qmwt&QhoDXr+Of)TeGI@#HR`0krMkv|RK2k1eH-vHPSZHd)eJ7>?s9r<t^)&7s7Hr|O-FdDxNIs6`gw>Y`ag0`{kccR&!4oZa(=}Qjb~r$|rDL(9$D!)(q7CDG#BO&v?ju!XoR52q>3CKgXuB6Y0DDNh0~<^B=6S_9ALqQz{6YJws`J{3a9_RV!~t$+i-eq|c!3x3BwTl4^+em96oB^RV%WrZh)@mcVgV0WDAu@cZGsuMCVs<Gks_guvKj-|Wb;_Q-0OHM2)JU=Yl7}_iW~60#o(GO014Vk@cZ_CPdu1m&-A5pOS%j6Ct=(nG$;{A9?~?bRbf;+RHHE?-oi)Ea>{)ORoWlW(xu~1(Bi9$sx59DfVzClTQnxp%FD4Qu(OOUt=kwSmM72_OOn(x;1SX}2`=dM5ZakY`?NXK0Rmtb8gd-*vky!{uw%M4nGVdbTWJJ4fol|)=G6)#Fu+jV?n39uFbxSVR5OlnM>=Ta0upwFb^w+Gvp+Jsj_IMROq+&arpNh2rx?j?&dbC~KrF=99AkBdzWfhZ8y^TZRw%TpFcuT&W2X;Vcf{Bbu$fD!R!;?vM;u{-Y0U>sWzsc6fXGSS*Wy}gR5!uZ8aH@B+TqC+<TWCd#O6Owq-{iyD;F2<9`??dIA~8CjhGcJrQ*Cbl8~LL(fQ~An|25#2SZ83!2&jHUiH|#+Exo+9H2XSYdUUSNprSHi;u|y)5S#b>P6t}5y#yVsCkQFB8?Lvkh~R9;^wU(Fdund&VaU*2}H0}@m2??uy3_kbUs|rVno|<h}tl%)r6g$8781@5eFHaTVrXZhPANTVZd<77}LH+$D0t7{DKTRUNmx$Ps)hN(8rA!rPvr#T?DK>rADPAT9yg%K3Jb~CoyI1DQ+<go63XOAKggZhC=cdkijglGZJ(ru|Ver<0ywggYWSfHpkHB@AJ4j@3F7>+EuD9AVl&yz_R9J4|p|v2@K#P(7s@!!kl$P#MJQSYt-v<K9kO7yvNA**x%;xIJEW~Zg`jX_&sAdTv6tD+*HDXRKZ0;X#I8af^#BCK#ECwnt7Vm*Et-1-g-UHVSi$P`&2W<Hm7T@L_!y-tj<Z~O$=Y`o{wSP;X0GVGu!`92>iuibv|xsJPe~g6jsZyyi!6g*Y`Q>Pae_B#LAm-%0|+qO?r5T75<A>k;Sx%Xj@%|);eV4){bFvtlgINl^HMg!`KfnX~756R%z6$9;w$5(ixEJGpC;0riJ>J$-b2{?oaEeqH(j}I8L0;d^{zHW{hg7#WOcqrF1g}mncp%^Nz)OI`auWDP+_?&*4jP%p1Yan*nfa?uXCuXG-VKSXYB_ma<H0#&O12j?QuBZ+h0UnZIeLbR)l)`HndAH^o{y^EaK9uF+?nKkq#A;n4R=o{p=sIP!b@(ZihA(6V)0hF2bD8yhn=;Q1(y&nLluKD~k3_j*0tM3$c~qEKI?O5lyVwU_TUp0V4kFR`E}qi_{30v#!YQI<-h&dqukne_`a>;1FF@wc`LId)W8ed1*;&do~yWeP`4Q2c12qIdCvt^!2YvtIi<^WV^w{_*o@7lJ5I!gs}@%d}X~>}TQ9$U>RREWNUFR1B347oipE(^~Me85`{@K;v9NdZEw!jz<m6WgIFU;&BJ1)A4&cp1I}}`KX-7o#FVgpbm711Xu)@MlkV05HCwnkyoO1er9F=QUa5|W8@l|F@!%9Y-^0`klss_4>or$RWj!{RXSnD2bbWT$7vz$Wxn@AX-nRA3g1aMzS$a8QgVFrj*Popzi7zxlyv90aF;_{FvJ%@fF(^&C7K>f-!$_+0)0-CuSFd5&3K}od0R<nWBtryHRn-@U)4aM;XXy4dx;8v7oC-DB>xZh5}%i^1!f*8YSn3<JX<Z#mr2)@bH1*$Rr7qM>>kS(<Jtd*r=eHmuW~+~go|+&#^?7lZ4GPIUi6DO*PUn0-@yK=!x_iTIKO;t=J|78W^Uh+^+kaj@U(wC&;4V^`+(_dXy))r6v@zMY_Vs|+@6gNIk%^}R+^ae0|p9oIPb4<G-kd}HB?Q(nA;3|=kFP%k&T=SbeGd!s{8Ra_vxD-44}G1tx@|{^b!J#^JxC7AcLnVR2+ZCG_Rn-HQ+g(@xT}hj#f>_p?{cunY;ItczbqtTiLL8UT#DB4WCC_0H79xsu7i{{lC1sRE?17jA`Y+v8g`2Xsc%PY6P(+yRrKX4=<?8QMjPXS%33^{x8&~f0d1=LUeXCbS~*KhdxK!g`l22;o@wC^1NH9?m<-DMzV%~L{%BywAy#+7_#m&Xjm_C-e<H#W-hy|a9^{t;b$_B&lXhSAK?NO8jf<IV^G-XAtaWckOhQfA+mim1?Ad88HqTKwcwBS(WtSmEq=$%pWspe>Ol~SS}=<b0Tmw%pI-RDq5Z%G=iIer!?mAOTU5p~*KxCI-_+mec=7=?eTp<=2kA!%J>Nz}X#=NJ1;0!V$~2mzveExh_KJcwm2g!<8*d+KUGe|V7}GV|ll-nJf3H>b4O4P=#&M4|zCB|sJ$c3`-1+L?J%7ssb+eZxe(|F`#GKsgH#ZDxklbqMu)Vd>`J3<atq(6h>w=0}?3G!cST&E%gEzmIllkW}1Xr!q6$|GtXM1<ySPwWHY>u7$&oS1{pVK3NJG`Vdg1?;+-q-i*ANRoT%Fh~=c(hdoxC~(7u-|A@YDG8b8VM|v(ol%cZW&7L3|~IZ^{mT!m;TM;c6WW)?)3Cqy910{fX=VKcw)BU`B-A(Vi9v(7C2#CEo~wUJ;C+@PR=Q{hL6O8wvUF_qG_K@kR0&Th+*Ws#&vbZQ=7P=cc6AE;(H*`K*OVUhhFWH2^^@6@|GE`NbSv<SkMbep;CM2OzIZ9L_BOwQDQm{fn<nSIto5rpN7V;^6Hk_?U-@vFQ|<zdFYb3eZJaT!zI*VoC?DsGn|8q3K#du(KEft?Wz5&i@kKH+(Ne(xH*oo*us5?=zH-ZmhdVGjTN=8(*zX$UZ-{!XtzW!*gjj558Su%$p+YhwYm<P<cu59%(1g3O%;c_3OrP38D{&f)P|bveZLSvw?n1ufANHsl>@s%Wc!Upf3$-zq4te<X8VOUfCo5%)4r#68*t*inO_rX>jh1*rMBr4wXs%#j@QUao}`NNjTxyazd}5u#Bj7MRJ$0fQLeYgf;eoCCn1))j{Ei;*JwgQvq~hf_9fB5y?5N>0YOncZ6l0GldR&fdZP7M?@{Fjbs{kzXtyhf9}Rjejn_=NED8+L)M_LjCsKeeC%1zn4OK!yyvpiIFWTV%b*~MvBLtnd$k2rZk+&o*h+-i*?i(jfF>rTeDQ7`r{q#BD_@Y@U>B~QJ_CImz8FPe%g5mlC#$7g?QnG5J1r&4h(n=-hq!Ko91S|R+zn3o@@QHo;eAXK?vla4L7wAtqsclF^9d>A$51eoL!m&gbmKKi54a~EW?Fu*8oqW2EYw3Kf(iV`sv$a94fM8y)Fdk^W{tK|O<(MO_#2<9c<bBSwfX=g~Fp7+~Th-uXy9G6mom^_dG~C*iA&)M*UK(l;X@jw*Q)p;tnynTkGGA;uC^UzI5ytvu`^69GuZ_3R5<ajlOn>%!%&JO&q9R^IlYW~Q`VInbArwDC3txThJQnt=@+4l}NeJBOY#f&4><WSB)<NMG!Jw=qHLrw9sh<7D(1Hycb?6+d7~mz36u-$o^YibsN>_{IS-<5`z0fsPNM1r}SfDiGe5;c}gn5n0*41onsU{!FvRN;c6Q%<h{?WU9)qAX<zEL#EKyIl#8`jovPl{_RK0MRwx^5|ef7_fZ?L~L|g8$xVj$!!TlV*sKAKGl6xnp~9)G(NKXq3I^Xop1ZJzaEm*kRAno>|JF&bcGDSp(D^R^;?|Ux|6H<15JR^Ne@m+?O|F>>aL&eA6FM@8^PB9*;X5shYilhyEv^|E72Hddp{`KJvkk74oD$*7p9ce{zR|yvLiG$43Nc-{M<Ecjx_g`di6ky%iqcpM5A^eDLl)^v$r#Z{-cXmG>?F=GA!Q7x*nc{hPjwdSBj+x)2`vd@#JxEuQrr_af-Utssac7<V{PwidZN-#$JPcVswH!MfE&Jv`>Zvu`y>?m)(;8_ji9xLw%I`gDTzqHNV68uh=0e_yYM+clbVi<{D{|0bN*$Km`}>3P3h8{O5bez#`33BMoLg?3Z)U+3TdRlL$8{Mc1p_&1eK<CB&}q20BEO;#n(TJPU<!cSa4SqPh(`h4-v?`rSg#LU8@2Dg8C_alG$b^WjX<`!p0^Y7m*h`+*X8!Zy-LjSWb6N?WlzLoFO9q$r*-$|5~wu3*VcVuhh4byQntkL=Wwm-kEZqy3e@4Q04^S^yk9{d&h-J0I}mS1>h3w)L5EpD=Y$oqC*&$oEGJD#c4v)&C4<t@IYCwPosTnX@|%ieQk!dqUb=R1E^<7Rxi!$YXw!V4buk6T^QZ{dN*;XU29d(<n1Y*_Ht&shk5{h;CAwtI$S{KbQ2L?ir<`<qH0^*7n*|C?~q$Kfpgn{f6I!vWTR6VBmrIMJhZ$nK*s{_F#o|A7DTym6n7hdAJ8Lprg&_bKUb^>@`*`yu}5zMYv5@xUXR@yi~aC+~DhZ+r~z|GxFB>|wuBof)Tlb^e#-@em*U3<xieE0O%-F5TbqeanaUi3<z=`uum?87-f`J#YVxI}85$eEQq-_^;3Zmj33`2eeV_k!`>IdfHLgDUPs9=y;&FGyj{uSne9dbVb7aVdNkBB3Fx1{j~>T!CN#L<DXm8=RW;s*z>=_`Nn-)hy5|e4X|T$6mpOp2oaM4fD`Qes~^R35{j?;s={%1?&))Ii=pdJr3i(=!ELMJNrbxyKA9jE-P$=J3%`<9wcM$t*3!8~QBm(OlGDY}$Hv)$(j_jUq@i|&kSua}UmR_03{ilRbK0s;2JjcIunJ-#SEM<|3AHPC(eQ<TDp8nEc^fbGjn{0AVnNd*WO(oi0BhG6Ow_H^WD+jBu(&ESheM2kXNA&5N*gaNKtT<j<OzvGjS)T-24-iV2pPqc8SQHhh6sy|SVTiYT1;GEU%iMvD-<!trHrgW!DeCMZXDA-NeL)S4~b81I~<W9YN?3N30lRT;B*ZC;UT>8P$GFItQhASHVPc~@#MEjUxZ1T7>2luav9QkK&ZUNb?X)esF6^#uxrJ@#0ElwT!iAAbg04<7r+B;AA;m5u-bLN&VMnEf~cS?T@e$buyIqZhzU|W<tx&iyM3*qJrT{VMc*@>21@cNmj;2<I3hZR`@Tvu(Hs5NJLjD<xnf0<1zwV_V0$sb4!t}n0prwwZv<39NW}M0caYx|I>Sn6Ks6BI_=F{GD@~4ysW4lH1-WKT8+g)X7fY~5HMJ{A&U~TFQ1rHpD?=*V9TLB^fBsE%{H0&>>zdZ8)Gohy2Hj}n2#k|GN)6*yH|N*0s_3n9p{jDJdU64}xZ*&Nx$;R*>y_!M)=tB)0l0&20Z5t*B_y}nA(qN3B;#20@Zg$7%Q)z^7Hvyr6750a?%RZ6We%`y-!m|n^g1Xe5!3u5B<5G#CQqdEVz+TjuUjoh2T|O#?>p2!tpU2aokNP+S&-I?3p8lCjvEhEQ)X43CmtoDSE*}`V%%fZ4aLI_4GdekCT2o{Md6V?pO7%LsVS#>I=bNq^Z{{dhCIpp;VqVot1l#WM%#RhJ=&MSG8e`LLe%c3;c+}eTj{v=XdfCj?v$*zW|fjYv5<%si6kF_w&)m6Fel!t+f`;jmLqACaNiiqJ@H)HvHBgYcO(x=XgM(iNm49^l;PZhW_9$y@CqjtyHcUXlXK2-yiDuj0BfgmqgKfAAYsuKL+P9n+{OqyOw0HXhK}PI4jmtkV`!;yidMVK5F2EQ71K*D2uO(823s9ZK?JQLs%T#m8@Ce#+{sfWTrdiKIh@2J$B-IH9O7gw#32oJuMe8y7>L7}VLLJ@r|kwrS%{Vy84hUCNDM=onQ+RGZ0>vYDekb93CUYZoCD)+!vqR+JX>;Xs!02>Fr+Z_u0aisbo}t4aK@1KowzQdl<7)$UR_M~5;o2|2E&LJSoIebVE)QQEe<>4u(}n9Rgj`D4ASKjY=);)hbd|b4U==vFiLol5IPpE>F9Aygk+O7G97=sm=1n)j2TCSU73WUHe+DQ3D?yk6^F@PwCk*^0O>uZ0huIITYILs#XWv4h-1)lyWrkmk$#Ah3G3<9CP=IrRC^;aZPD#q0YxxjI956~Okq2mVgffA5t$D57>6K6qO+!Bof8NQ|Ky!$d;iEHhj_jB!7!ld#4w=w;4D752tM~Yd(Mk;+}_|hu1Tbx(g<F+GuJ>j?_0Kulq@H=Wt@PURF8i0JH9Yq=Ynz2EpDz6P;-to;>~!C1Lq*TI<p^W%5f$Kt^+r7{oG+$^e;ZUK3^O~^raIkwQYc^r5CAJY2GKDuM74n5HLYjM$^FGt0AE6o4%XB8tP4WMlvN;Ab;ssG#58)MYx!G7rwX?63ctrgLcH0Gh<fDFCS2Qay$GUOLCJ$wmsjQeNJP}5%}qI`lVr}@UnI1xPXbfq)vM%(X!<65c6E2$eXb|T0>}gedMD2K99=@`!~b3%sRT3J<Mq=##}0RnM$Sjo3@)&4&y$8N2cS(e^<`5k31nE;!C`6TBgw!aXeU*YLdq|3qP2q1})oW-kbK?tY^G=ZIky6FFPZmW4I_E<H$Qk(q)K6S=dKvD^(Q>`z1BOlmfYlqjsY2y)&QM!g7X~OsQu5dRHnhpJ9BKA%R~!f9_BINh~)s4MN^8dE02Xzr}jX+w5`H9c(yXpv(CfzjOB8eQvp*q<nN2g;iLa4GZhQu{^H%iRBrU_NdZ9A=fTjcY7X*byi-sh08hj7IgY<#CHdtN6(af&nh0@w>*0P_xB6&f_eec&jryzF3WZJ>PGVXoJ*f`zsF-=3btR}S#KdYyxLHv&9TU_Ll;a=;bLdmnk&Aa{d^HF@%3Q5!~pJX`0j7P^89vCcDZ@&j<(Es0c~^Z2WDK-ILhImEOG!35m|xkpuF8{qvhjfw5HH%LxiObw7QM2sc)rr`S2Nsp?P?V%)`IXJUpHDp2GIzKZvXr(b-L-WwnviW)LsUS%A&?&8&S-w8Blh@iB-(6Q_1?F0-|qXB*kbKDF91VN!F(vBa@P3V5A$xt`Tej=?-r)^_NXJ9Bk;63XX6Qr%j-xU@Xo{!OWU7kz|lW3uD3AEIJBy0U?sy+3~!CA3nyG^>o)h33<ADb-5z-vw2vBrQJ*{@5%Ox)cK+w7hn{WBePM!VenXSgvKowTd#KX53m*kJ-Wa$ers`y)O*c+4`9+D-CAS6U)k_`KBh>TWnVEb|BMt&-~qf?J2IaQ%tpN_B4z)L2XX2hIve1tNdLxm)n2K^JrOqfIs{IOg<1LJMhNLE^=B<Mz(&sfRlFMnsr!qpXs!JB88igbDqV8K|k=2p4GRP!aKasw7l@NoO<zc`Viph<E$K(=Gh&gs~&{Q**O>!^Y4t!Rk>&uQ*KsLoD8S8g}SVc+H01{V`dH2qMN4NI%GbzIzy}3<aQ90QQ=muJkob7SGbhJv;S<H%B!vK{6JCTq6gR0Hd9Y@Hq)6uxpg?aWJCMTv0q&sZb<K^(jv6Fe`%Zgh>eRB?FQq=pw<3bh(f!`Y~}2R!Lqbz9T)BN1b46gQP9pnxH{%l*@TAhZfjnd*sJG#2dSa#(e=0N9wSfP$DW(SF~i0^N453ZtW*DO@mCC5_KBx)wdayahq~JT{dt<tsQ34a1%3Ws_PnmN@%%i9e}Dd_Ty*K*`5cPjdwBSUCRxLeKVx3r{(yO@uKTm^uha1;=-yel4(|d~Kc49rx*x$-`E^gE_au66A(_MSXZR8gzsmx{d|{eHKI3oHe5KwTtEV43zgAQwVgCFY{5Li)(l*?2tq;fg_z<?rmnI1E7|+iq4}kZhcRA-+*^~;RhW1tQ)HP5(6t{VUqe=~DoyO8a)!+GB#es|@VOu8bI{i0h*XhUOzcr<W=D35P#Ps_Q8btj6pS)|_nE!@}`NmCk%fFbGH~WV7p*Bj)uqpKAn|+zb*o)u&vQ%UBXO6f}eRuGaBks>>MWcFs;kuuVnxAG4Da7%*GpFD;&Fdr*<s@mb<X#`>UB5SgwKJX>`pRG&>frcOiym=5g&tOUSF{DwPBlTB5&3=X!)r6I7agW!nh?;;JkAM9ExNWKVXD%#23^|-4>{w+w!=|8<!7!f-t#l<Sto{_X&c%SItztP8>5c|pMK!@ezHQwHxa7(6sg7r(hpV*_=q=d{`=z8Q8@R*N(mY*Y~g3QIiEVjGZy&<?^`8xyu^zQ*IfN~UL%0Hy7X8Z<^O=I&dopL{2PzYjBU|qn)<;G>oyE)|58Ya8<1g(BB!UevXo(JZ}jekVHJWVY3Sl0O>lt_wfk~GtdaD5aRp};3(zi%c2nrB7n(!rBWD!~be1EAoY&%laeo<K?Wg5hyc18$7v8{H8+<)}<Ql@CI0O5uPPX8zL~-G6<D+Ux$|)#~)m#qV+ZYINK%IQZqiTb?X6g5d8Q`LZs5nvk%0to$2ReQWEZ`vI>6utvd~`Olc9^il*qsV1F{>~$WG6&bK>Ff@ByXEF?UwY46xZ=}8^YH_a%w+xB~-&z+yMg%&muNgT7X;2$M&M=+q3}X7=}rob`H+SX%*D!As{Quo4_$Oiv|mY8}{l47TN=p@TrLK7!c9MG-;XSrKI(IzXnf%>8#z!A#vYIBy_JdALm54)LW)8U_R5u88sZG<0@R>G>Cu|Qad^~F9&KXE^y~O`OW2;qKoR8MTo5=_Qhn_w@H&XuHd)HxiCRUz|e<gHSWvd7ni;+l>3rSaF%y>ZS8y8uvrcYiU%dKIcF4IAG5DP!T!+p_Ihs5vrU)HeA>MINfq?>_>+SQ6*veH<Iw&nBB!P{%<zj-Q&06T-M_<%+JHbzXkX6jQRBLL7WW~!u4k^fhQIfzL%rhs;+w;4)6LIo{cMLND8IN7xVm#6`?R}2RZtrTed$O`*n_wc!ic4v_s@~9_uKMw4B<Aw+nm-}4_lhsZN;y>&D?l0zqXlq^*(05hLoq*;Tq9-C*0bC+jzp8JlgR7n!n9l^(V#nWwTA~C0^jh7h9d?b@qvv^M9E!K(ieePXHEzb3M<tiulQ6&f{P6v~T$Net!DoCz{jF4?gmP{i)T=^Uddlyq@hG!ozd2S^s(FIp>5~mObN=>bd;Gxy)w1qGt95N#^jrxRVYU+jH#Zd--gGujYHRW+M_VV<>o9h%Q$yw)4p+m>*}mz2f1m|C#e4@N4`~)7s3}KDh{unU`tyBl+Yu+|IV~^IQirf74>N`MIx3-pys3%zEZe^K&`BR?NN}_UC>9kGC#A+Z%g#n4c?oyqlM~Z#>V}=5|@k`It4xr8#fY+-~M~-{<h=`uLdJT=~VR=<|Bx&rS1lXm0y+-W1-~HubD`Q1W^UW^USM=6t;4Q+?;xILD%T6?ppQ{S}&De(hs!L-M@mGVe$1TYDKq?Q2|o_8$?hJR&x*pz|>Q?evAN9%s%eb)KWG^{g-cHivuWX<9GmYe#<V-T!Qx>>8hs)vL&_ea;7buAu#8p?>5R9%(<l=AC@aKR(;y_+T#G9qpYdek2w?CE@D2;%82LJund;u|pW036@Kv;ysr(P~dLVOT`Da;!3_tE8;?g(TfBuw}L450$o+pH9_}0(uDdSnW8M{=Pgszh<<;t%5g}=Fm7sYNJjXqxT@aSVX3^0TKW4uO=9<6m=?3Td1t))iYY1zl;{GpR5GNf3u?P)ib^}G`9txHSXoPo(9!T>9h!=EZup$Ir*q=|sL%mtNmsTXv0naAG`ZXvJReIUs6{1=s{_4P>6e#J9QeDUd-MBS`u>)^?+aK^<53u?RmJq2)zAmwOQ=&TN-G)<6bhkspGR0a{O3qe%d0RxPo**?dX@QLvO>LH)3_V1#pg1<ujS7)I5Z7wnua-C{7<Nx8VlD2o`NIUbz@s`B!5JLivAJC3vCX4tX~d_zBRsu$J4o_>0I%2-sg!wyQa^s`LlQ7ea{n*dqd-PY23^C*$-hHM;>=|_$@C>o|pV0j7!?DKUm#)n<En*etxIr5bFnC_M3IA*mR9Dlu8}z*B^?`YC~0Gwzptn7jQol-~(QEFk&q@3TD5lZBVXR-SV_$G;KLA7Xh<(fnacKpx)TDslHvQL8BTkcC7jadM=l=4To2~ELHu*P3aiuJs)Cv&AJ-OQPn?e+BS^zSz~RT_&yym>3g^{S-V6kNK4u-6?Sg~JD1<1VeS<8a&^ihjYo-T9wM6NtE#Zyc1rE8^tl{$1-@N%CFW__C`SI=E>&x!-;J+&?DxV}9fh|0W>oc&ejj2%fzvft=n4)_6CHEu81}(_)A*vRL;D8}%e554XJPQPREnuUovtBcmD+fL!R{S=hvm<thLo{$-L+zzpW9efN_uZR8VamwdH5`>E$!Kr@?zWS2n_m-bXGpql7%@LH2=nn>(h83&9lwo0o9Sk^Tf-xqH7yiPo|1kJfrE;JkY9Tacd<{>sBl2wd!cj>EUI;!V8}-EZw`wp!H(>W5+%nbF_aPTRALMI+|S*#qj9;t5uHdopQs%>FGQ+vb2mm4qeGr{T~}yr9qwrHXa%-9k<r>v*Y8JA1j7h`=+^}_WPFg1Kxfd+J4r&ZS(&6MEmQ%@3{71uZO$Hg8726`!XzI&V8Q>1sp$pss@FR3GBT}6GmAd@lU@M7)$)UGxJ$t?<ETJXEN@6()yo1Y0~UFR#G#bkAbQpop?LmD|Ait592Cc>IL@?Qx}S8aKEIi^a7P1l&?b7R%my=xU^qhwF<F%d3RYkb+lcxG6|T)u=n?8cWd)>FG*w3G2y_+BNsSoO8a%m$ABumc}~EMNuLYoc=}<RWHe~saegSJtwNvGtwHOX);)`hjv%V??j+0eAe3$-`Tnl)xzA%7Dk1B;F!Z@^6;#2=VEr|sjfUre{!SEruTd?UKQ^zGaP{f4XzaP)m3m>FhWk{FQ0D$x3jU#bjiK4lWbtd7S(=4yt^Wn~*?3d;Is8`&PVcW)cP!TO>NV=#_Oko7{kM7(f-_ru7oFKdRjV&-p3!WdwgrVQSf^jVHKqBSZz@H3HS`^Aud0Gd|1#TG%K!U+{~z}ROeF".encode())).decode())))
elif sys.version_info[0] == 3 and sys.version_info[1] == 13 and platform.python_implementation() == "CPython":
    exec(marshal.loads(base64.b64decode(zlib.decompress(base64.b85decode("c%0O|S(~Cdv;g{p`k?`}S|14z1_dP~0rJLRflN}RRUp6q2CUwVRbBh+bMAe)exIEZGOVnuIV<U9Cx7~6|NOOHpLJPQs0?kHbZ{pdCNIs1mw<H6O|Cj%W&i_~fZuHb**?iC`KOP42Xo-cydAGcE}GMs+3)^9V8ZdaOfGW5`{B=l*RdO@KHe`(^W(jhWEJMmja_Hml*;DMlXtl>cgEO`c6KZaf2II!E0Ft(`e!P<zcx|z?(pXcZx@&@>8>}8+91iTME1t{b)xKkR546UI`Iafy-#wA)rIK?vUcMAyN;{<?&k)@J03Lr2M<Y}-}~#$d4KGqJ)XDMKkx|EdHd@}dopjIe6;uH?G5_TewepkeYDT!?Vmr|vw3?H-rMWNto;dow7<;TpFY|r5A8)eO-|^e{&HTw`l$aruWx<K*PPGyl-}Flw0ZmUNBh&f{q|$N=6t@V_M^Q!Z~ywyzM8k+LAy>);z#{tUjOZ*{`sN4XtzlL@U}5~a=YH_%DyCpgLi=`klX6!e897t!&9((|ARd5fAP_OKktA4fq#3B|DwWnf97S29Wa(x?4Ysiv6GLbh)dC4=oxt7bo_%1*~pha$x!mr;^Usj5|H7VxRt#QGz%YSuaIGtxPxnwVI9f(SxZWU-Le0YVt4GnWC?04g9sy^TP6|gv9yTbj^&mJWGr_?2*=VULNb;P5ytVYJy{{_@qVHV-mvIwIea$)o!wMY$DYb+Pl+Im<AbDfFdpYqA&kfQR+MwmSTamTc&ZeW>3xpL^uEG$df#F?y}x2Qz3*`ao#2iSD<$Ft&ylPc_CMeWL?;@@51|uJC3TXitekWzMdvt{4DNj*uJ7>G6jzm#ee_!sNgMlZh&18nOr!}vEs-Ytyo}?qkMSar_alWL{q&fP@Yf=aM)>O$jz;+F4UR_m8-SzneFJekzHcmCiO%(7+<~l89Ow6bQ|P>paHiDhrm}MSsT7^tSRSD>OeJ-MsjM7vDn&;c%V+2;rjp*}>~mxN_>i-DlCirSUTkj9;{APQY~?%MI?FlTW*>BaoXfrQha6p;|IqyheIJLpo|yVu|LISDmls?0<N0Pb&PRXCFa14#>2EK8X}8qAw996Ew&VIHhkG?SQ=E@@KQo+<>vB$UKCa98Lyj-!a$;+JjAzdAar%&Jrw4p|$noWQ-roLbznix&=zijlqS`xCDem`US;GBcD(TG&EbURhHi<0jT0YLVyqUl8FxO9bY^QR#%Ib!=_7(qWEH7od<MQ&io>Vv<E%%{+llNQE?lS6dS^1+-*;ohmPY?ag-z(+#{@1tffiS*TIKC2vnx6d4=b`=F&QOHw*j-@JWTzzKJd<a|<m>-WZEk1uo5%5aeRKVJepnVq`(gQKP}obK+fDXPoq#PX+Uc3LD&#+7O`i!zvONMiyo`TZMD{!FPX$Qk^!X-J!tE$H@|$93wk5-hI_r(YWy0_9LftuC+nVE=fBLO1`m7&M`K}X=FY3<h6KL+ft4g|=Ue%W>b?s7CN{HXeX-%G{@l`GZ&oB*8y~9}xu4gUQt08sHFl;J;1&0Xe?R(_^ia>4Ui9{sFIa^^73QVU(ETKxuSjl|no#}oHc)Q47b!oswrX-4~4o|U8ZxfQ7v+=tPGwcberXpwN;mn^|bs#tw=EFDUqi14NIP%4gw>2o?S`%)DctLNWMBWmki4-F*Q{56%F5i=U!sCRpL=f(OI^AAtW$`4v$!L?A>PiNs?721@nQf7%XzOwdVNv2^=xl6kK7l~!glne7iJId;&3}1n{uHKHdv9Hn{Vvt^yC`pjZYgEjbEx!N8Nb{2bv0Tu6jIaEd;3`Bc~qqb+ZPvcZ2>e;u1{85rd0udAF%?I1m-Pn=!N=@7aPfn1?|EwP#97R+bYVPDt&YO>znI4I2FQ8Scvai*N9}Vy=WOn8?3Y^96fIn+xkWHYqU+=?TP&K8u$HNT0WKYT_L{)@sC`6uC+3Pn)s{E*5;}A6n)SPd*zo6i=LHab;z%4d!5OVo4H5U6*zF6!&@sf!%^D}%iXyz4^#y3Mb)2BMDc)r?E|hYb&B3YfUZZkUp$|)G`+nw;U2yG>f8(25#P|>UvxWs6STOA(be;YhN!!An`<TWj_y@bq$9xM=G^$tTFkQjsfUKKHcaCU?K15+)M}On`IB4^!0+YG(4gYIXlG1@%a+-WUT^nD?@Wu6aK&=yzvs_7c-#1ccQX&p3J;|-aQYCK9CfbXB+o>AVL(O}lmh*5UN6ckVC(E;`0tI&(!K7#_R7{h7S&JD{w4l+k$0~lNAQspf+wYQ5HwF(aXAA+%ly}LcmaLnnDWLNUN#2^ep<#cl?CS|P+za)h?p-N>_`m{nP*3UlVciq)mCheCb99sL*U%>23W6cv;LW(v#4E5aE;qdz7&-}*>rjUm;0!;3{c?sd39BP-ug3X<z=a2C6+-PlxZE3<*(iCT}IDk_UxfGSze^Bskg`iKRaP<9!lXDmrj?|Ve+JJe(7a)5bGaYPZQM9%?sOCvf8u(dcRr{T5gV&D?tMfho9`U3RL;HxtOoH0bHfj$t}E^`|@~%-C_$?YlvSihxc`z1ZoH*?FV*Wwe9{YoAf65?RwL>`&#`$sNgcs^_I_mm%bu>eK>SalD;&5P*2E!+^tj4?{;?g>zs9=!R2l=%32rP>D*a|&BCkwEuv2-TOGIPb*<9K6iiFjgd$lb`mZjcvT82rg6j5j`E#3BPe;Ky{XA`-tu;)CMZ1Ve_VZSR=jQ__!M=T0X_-W)q)*qC*?agcF38W9lW<UdSiLGoZ^x=vA-5B|rRzjxdAzOc=PuXxow?;48XqnzhluB;ypb1g#bM_OP&TAs8Kv$z&M<lo6V7gC;k<zJz8u!d^9H_3)lb@3&@Q|^tJBQDE5UseHH^;(tM6|<I&S=pb@20FFUON9nnu>COzu22*`rnR9Cu5IRWSzvEwH|deu>+b&pN%rSMB)9gjKV>nv!k*7<N1D^~#FVD&5KHj~#s8KdZpCh1<^GvaBoJaJN{ygS6G6{l+U)?*)=}P#3Z5y<gCqc+|`+d^_sfT5T`SrV;;eQ>e!Z{NW!Qt3t_=irH4G`u*NrDdr&laK+{6DQlk(3X3cweP^2O!>&+Rx!kH))j?gcA821Do6N6<-3d#}m#q>$?Y+${QWs&Uo`+;00e&%G3CSWFK>fKkp7F11%rIrHm00rP<QzQB+>;-%xedAYwKA{ns45*w%6+L{{jZuEVy{26uJ*z{Ag<n8^))Efi*u~V?F}tghb#BRivz_1@HfHhLj94{L9=P?T->}%n|4QCwG!7_n3Bs9F80QbosOK(lKyfjPeB=h{#PvTG58^GV)f_GgosXv8^aG)=&gA3xDB!;otN#+3)?kOcUY%d+`q5AQySV@DR>+<DqA<eX&W`>r0<V;$n}}i1PgSFe0T{Kpi1iMohhrAMB2O^YY;jrMBE<~am78mvb}^{SBGM5giWr+2K7*(t!SNZQ<zEiknWM*w@h1^iD-3+Mo(@no|#@frDDFcD^?~8M+|H27L~0LL3&EHP}u8Nk#m0(*Q-4;SQS>Ri3YJb1Vw9%@uq!g+--)@4g*gf%&{FLD+kgo_0j85?{{ux5vn<+TRX_7))Ot+Hq}~2^>xRnc4I^C6D)VAYAF`2S6W$HPPrEnK;IVH7OOP$Fm(5Zyh#`5j6!PQx?e;!jVMhm#}}Vmv3;er<)xg7!vPsFq_+dt6DG7eGyvVl!1YT;Is6ret?;#U8S8B2!IuBcoybBQq&)Y+lGAY&-V(7rQ=wXV4cmr7WjGakI|i>2@2^J^yO5@>IPOfOwaY}mGQVDxv_5xOhYekXtE8c=R06`ZbQ^2*g~66mX)PvAtN2YyBWT@Xm>0H?f}@s8#HR(7>>l~O6c)}Kr52?^8ih3Ly!!eS*YJr-!YVPS%i$!xF1n~@0*387C215lzzYTV#+_trYu6_oB0DB4-ELgTuN;~z@@1swg`?U%3ET}`oI_sT2(G-;XbX>|6{>)ka0O1Vwn?%0b}Rt5J1mP<nTR+JP{a0Q!3cvaM5NtD6^h)-xws8;Ly^*B;3yGcr?8@LaaC0ZA8~rH2b)`g6w}TlSN*81^t7-_O7nNGfg@f9A~6M1Byw*%jLOyCHdvHasc36y6Z5|8y7f~PyfPy-Sl!zxO(R-3?>I;{=-Qe@G;g$GTZiP9S2Dt#B#G6i_8~X%>+|5(2*;(h!;*FKgX+y~fP*CHQK{c^+p7o*@aC2)P7k@|3bgerAlWr~qQX*4q^l^Ma*xZlE`sfXRqd0nSKBxMFFuALU&koXs*|r;uMVNmt}5iK%tO*>Hdy;7H=FoEhqj1Bd*w-0=lkd_s{5K7ltrT2H$pC(s5xiE7jDkLZEWp&a%sA!HCj<03RK{Dm-0(kQ*cy;#euSsuHUF2dT9Z-evsT;!U|i3xlPmeJ$A$+t$Hd|i=!$U#~k=r%OtN#yOdTdt`isBcI5gb_gR_OUcow2Rh+)WMIxm-DX$^XbC3=!M=%q-3SCmzhAs)Yd=szI33!a8@3EFY*%I1%2HVmFP<@)dB^C2*waT%WihCl8XmbuJw<X9xhKS1%M@()$ha=LhLmW7M<X^*Mp4+I(6;h<!&bMBD2mvxG4zq(|Rp<^lZ!=l(Sa1%pT7`^SHJ5KEn@`u}1`#Ry1tH1CR)wDPMo5k7;0Eb(bPtGhRs6alVRODki(HAs^vS4mAvNTu-EG5dph^mTXSJ)qib&Np(fbOC)Y{d~dmNmT$Us7(p5J#1#O1Fzd{giEPd%w`Ly5j|f9UO#uksd3o9i*Zo>K#L`_uY8(l=M;t=uDZT24<Fj#KJ+EAI1%PrCFEjAbl2-;JC8fzN4~v=S5LZ~ZO6ULO4ebfsdrid3eC1O-l$2gxF3ggVV$<#vzO-J<#me4YC&3jh-gVWjnp78Z>SAd(vSNJ>^TXjdU^HLtN3d`#@Yv~(!xj+{og%v_{WvY;vpjwN%rF0r`$3->`wP+1PB7Mr+EbsSLQ3D%x9mBS$7GQX-*VRb$F)vGI|TM}3yDa}<XrYA>Bue26Jo3;uSxq~M3O-T5A2w&2I?ZXP0IFN@}=r0lP533gS0<H=4JjYxgMI|#xneO)xEnR^v2$w)%-5R#kdkL3eSmZLSv`mk-2P#kwlX(jpu=4%uD;ofc2P=<MYlUlTYnL2Pem7u)KKUi}k2rUzVE2x}7K}TAQIi9{+DjZD)fOy3^%Y}c+WIv+W8DejAb({+IN<V1IDa&@u(FSJyTHD7<GP^>{oKUVdbjmW;R*Q)leKizy5%tlSJX%;!)bUdm#ajBrv&D&ZetBz)xJ>?mXz!Jkfzuk=#UaI+S6PoK9nLI5xW9s;`hMkwhs+5;aF1}50)S6E0I>`B@(C~4Txf`f7?^baiCRV0ipxZHhjIqkPF#JG&@^|MIz*9j6;dfS2+4)<%*if{M2XKa?~FukLG8$?gxjqS4u(2Z3~?&EQ|_Tr#^~~Fh3Krk+6>r{N35nd*(MZaD$v43ut>y$__N)I_iZpd~W)cbs6!&xSr(eEP14VIr{F3um7H5$4A;K;<EJQaXmHS<5;yFw-w76GM|V!P6}?z5ER8#{!R$j4HDAqGCy+}?Q-2X@<DxUEE^Zr3n{9L%jI+Iw?0}pEG#brCRUjmP85pii$m=$sj{VArduv=s}Ng3WaQgOfLu0N6)xF3qveg$gm|o1xnJi&Y~&%Q)5u;_$f0EybGyaUdPD|c2*2#vO@WyyEV5pWx<jEdSU$#{W-+fg1F<~ogSzrOwgadOV=#+tk!}`ik|&$()B9NrNo_;^J|BOx&OXX|qM0tQKii7~9mvPnU7VTE<6dB#SwOB6jdb8mE;WT^u$EOpH9AnsUJ3D)>jTv>Y`r(QtcenFjA@`JOk0!s&V|#V#PvbWb^N<SgqvGc3p(1T4LJE_3ihhV4j2-2Dm5vqo&za$Q?4OX=`~WT%`+3h0tILhRhu&M9pN4WQX_@XC6~)xs#ovvsZ^!R;e6Ocn*Li})8|N{t3X0+xWJL@(_zBv7>6=UG|pAZ^5;NETh5nN6qv6QzQ=zICmf4RRy#Qhp_+DkxV*le<U^w0>a)4A;~jT_btl{DtKJk8@>A%0S#YnQhlPvl0wce{iqwQ!|J?C$?I<%kj#pcIE(E}T!)Ke5263b=vzPM4{qa*a#@|00d)f!h3cl_;vUS~3?OYd*<-gL_!ky99tO_*04Kb38eDj9W#H^1$aa$12J9~(0LLytToZsWI@J$Bmk#@^}XeBBY{NW32-5`?d%^+o{<37$g$;xR>fw+0*>)CmWCQ=%fC)I}gCKcB)Q7flslhqZsCsuhpuH`gcaMQ-pIa`6a5oisU3F*Y77$4rLn){p6qRR*VPe=R(cN;3<h|nsvOL8mWlg(bWR}9sosT^buUq>?S=W;C*z%>P5Ki^XLI%`XC;A=BYI6HNnypuJjbBZsRoBqAWnV&}pEFv2tPe0(@{M_t!YY({Jyn>(N#^2SO$&!b7_W!g#fqA{J4ZZC~xDE4t{4Hf^83oo`=!=z<R~`2W?zV`ZiV@v#dz#*Yg;Q}GsO5G5U(>!}0eYUT)y<yzvnSO2=DlRX9Jo!9Rejnc81^I0an!73Q{}i%IPL>yr7f!A2Rdxr;@~8OmumcL7v9Fk*v!ne9Lg&2Wc;(}fU7}x&A1g`nv#6Md>x;XZj!l*jfs49-L)*)UoboUJC1#@laa0}E)(bb2Q&JAyYts<{h&D$<c}YcCEvUObiQA*{qsCW99+LE|5Tl==e(Zj%Aeu*c7MR{9`Y~1j4r6GOz-~a2<1z^v%HMQ&x3AKMx6p0S<z&_pVvy{&^=GO%NX}DdCA3DbJr~p$bJY|CU4|^EwfB(<#NS+p;GYm+#>^!LLt54x)-8=T1Vns?SQ=>xqs%4zM?9&TerG7<1mK#HjQ>#%abgr=`sqqzSx`(+;@MA>*|e(n?>ZW%6Ku-DH}K~3(Oa9+DIbKSx;(ujk!mdoThba<;EQDeV#{L4bxs6*B?o)$-m_l@~ImWcsq>m^yO5KebDhjUWcc}o9uDf12W<)<cm`bN6T5Rf1L1BxOI}9xzYHyI~dpGU^*KAcCOYYR_WHs){zU8+7Y^Bp@3Q>0^lv=ZeIws<uPy;-R^nK@vAC$xf!(;2spgjsIN@*@XqxP|NFTerumsY*b;5QHPAvSIjyWs9S~khwkkh<X8f?P$2nK7eB|<HRt0>!C&=mLbASJQ9{5PS%=XW|)i+qiC5ST=D}Uuj`TWmcI;4|+n&%Z|Ulis)@T=dwf)``<>#zHpb3WWoeE0_pK7aI0&zvu2vIpAAj1Rw=zkI#_{zt@QqZ|*p`r)NY^6!)YILMT6{-RX&ZF}N#(e%HA3wIoM{!*u|Rg8;AUB}bEtE{cL4Qjms@iNnCAfy#B9QXJ900r<e7k-UA^@}{?JG?*c`^NgLo(~xX1Nn!p{M)SEU&i?_@^hR0pVv+OKdl?raa=Cs9NyEcYeUwx?Z^)b*T<uct!SFb?sC#}-Mr@VQ9ii#v#f_;>!N*9jItSU8Cf;HW_d{gj8M2<UB4ej8R=-w$)?Ub)2h82*c-19y5kA3P|OdcTy~M<6kJ|i?7CWcL{y!|UBqH)g#tVru(q*JrN`~!lG|k!x5ch3J*#oOS#Z5hM_o@OZky{|mM)y%a`)F*B&SLC-FDsd>}h&dbknmB`3hry^OovGBugkirf2Qw(>%GJ4Q{&`k#8@(^lYc~m<yEZDXeZ`!A{&p9KwLh<YKZBZq{VOmzI=Whg2W)Z8q0fS_u)i0h0yFlZM+KI$TLv`}_Th`S6yMcbN@?Pw{uS8MwV7aJ|qZ3u~gWq@3)>8*-<)Oz8s2ou;yBAA9=#V|#8n{2cdbPRR<Vfi<D!IN{;2x-Y&ut^DLiT$8=A(fBvnbJ@?o_TCCJb)m?Yt6mS$M$268TNr7#)33?Sa5Vny4qCWboPy)w`CR>I^g50<$zgld`1f!6qGPxI9qAP&8Vo|iE0BS?1YPlZS=~j;3`(Fp38;KI>H7m)w#`MZO?i{WR;tCjFdvG=X?xtsPbV2CyTb2SBA3E#We9SXHu``R<vmouB2bha|9eLi1t)e<FRcWW!eH%0Im=sRtoO52`qx0|`QQDJsPfan3oEPA3)c_~49lJ7Cr&IN=8A5Q*4%bh!D6|RFJ#@x0Jw`pk%wRW`S|x!(vS47C`iq<gRJsz3pM!wm5%cA-|g{y{Bz3tm{s`y)IXZrLw^)eILZM%0e&}APVn+a9DV5AxqQ0&=-f_vDOFq{ee1GMb~$SkiM3<S#RnfQ#v&<4K2h2+KX&>(vsEIUtdbht$Yc-PZIx-v$yQ0Md~pQnGX0SSPb6Z_tJozc!A(w*yvF=})`B4bw_l;!A3~+)^grT2|6)JfRma_)zTEBU(S9Iftm42+@KGwH<F=)0t8wN~nafzpd0poAThdvkI>jK+gB?!YS)L1&6+B7o%c$qx03=ZBfDam5*>&7jE3-YH-#e==^YxwNGU@E==pAy8$QiMtaJdVlrA|8ZZ~oWJE_n2Vshj-C)0)`{ah6ksvt2UgRU5X#=TncRIogu-Qs;JW{)rAoeegW#1A1}h<IU|A(#`UYA+i4W;T($JdW2{e>(Ho2EZ40*=@GV<GP|>D9La+$uzfkfkYr=n13YEg^);gG-EZKNM^=W5;Zp?DoTwJ1e%{2jgKZIdG^qM806~ID9~aE>HTz~m)HtLvP{|asa0b8P5?5f+v96*$v<0{BS21mGzJ`=IU?g0ix1@qMCgmj)QWWW^^J>RDl9l30y*TcHMdZ9nE2}_yd2<QvQF+xPlE24=Xl>n5pHy$D^PxMW^(q!p3kz=dJFXy0VxBl>mFtJw-L~iaz$ux_{Ev8&+$vYD=eT})kp0ei$90Lo=w?U_i~G0F5zw7;80;d&M|rB#=c$hkZ`;tTlx^O_nsJ}l8Q+z`2$yk)G=Fnq4IM&>_vNGKWZDDf`sTy0P(J*MFS^CBCSFR)ab1+jeoKB$6g$N;Ku4eDYsL&K$F*E%<`XE+pguc0S$$DnU0C?0vdLbZYe<|YS*YMXgcf507o;b-ak+EAMN{MJ<;zlgaxVhv-Y#60>jQTAGgIBjk$24!qum%aIhO8Ir@p|S*iskRP=C1!XhQX-x{9K%*4)>HxL8SfyZv!+$2ba|<TqU_3psNNeKH0@KiiEy)xqyZO97;EwNy6U7`a+2qvtl3OYSG#<6(S$@9kiZxG>Fw>z(BiIlz>?5|rADygg&rBig%Xfo-Pp=j~K(vsTf%18@LU)a<~&l>c_V<^)bWb=M8oaX*FY2JX|&d<vKIGWTiGa(s?u7y{1A?;{U;V@@LXWk2N*&V6f_Ys_)P9k0iEpWE2^DC3+*88<lb>{y4q8+~Q&8|>WhlZ->$XR_7*s*@gd4VmR2KE#vZC-|o`AAnbw+qjQ1m|_5J?zqqTffw+n2DkmG&HLd9ou45v(>G9EW-$s7GLe{ne1-?S!_oHxg}{Bka3cp`>FX(9Ojor=*?Ai6G3#xVX@6v^Q%|vnZm!%DIrPXlPs{Jtvw2=-wmu(cma9zN@*(GzbbNg78y#HO9cQu?<4nHCFe;#YieV_)vXvKiyCRulec(3rX;^n2zRTI$q-*w*Vfs-|jkxSRjk3)%py&CynfM6DYL$oM{(9}adO}rry0s@5RH1ae#&sX0K^rBDQgQ<(gk|;W4oo>x=!bP`(27}+))oX?0i~cplJm;toF6XIQ&?yNE?aEtsg(*jBTe-l`%v)pl|%j1@f#=fg!6Eu`N<ial}D=vm)B(!uy@u#Fvec!WanDpeGcU`FaIvPqVd@jW0xpONlv21ocyz-y2$_d1xmS1>N}2tJB}tZEve=EvwQ#Pz1`iPm=@2lCY$Mhl%dY#Uo>7_N;I&h@z2vZhsloOw)v6UrQD{$ot%}>NVDF(hLQV}kw)EzskK}QpjA)uPc9P=;l6BqsJ(Rds<#Cco?o;bf!;5dKQon7CR|?nx|KGie@wzBw>TROHVSU%7F#ZhyHQrhFJOB%S^g~a<@MFrcl%#?-vPt5g#+FRSPR$Ls{mQRzu`^!iBa|9S|;}q<aJQX`^<8ZgSFB4H+wc6**48w733}}mBX~hpsoNparq2Dvs&jw)&&>*NYBK3FNE>^wD*va^naAg@?9QF;F55=KRIy=f}?dG{(SF%YeM6h%jU_JJZtVLlZ)I@jLgeHX`bb6g58s?y_MXb;qSV9xt+>WwsreN?Fut;dsFRt6OO-=(*Clx+{V3e-%L#ERUv<h8_e^$$+vO#??SU6G$&d8kL(%!b1?3O&1Lbp7dDQ|sgv7HiSmcX;SJyYP$ik%LN!t<mdBjiP+;BS#g_B`-+altt!(}iLj*T=r}>H6FB7fXmk+w+^yosEcBbYerk-jhHyF#aaUi4b#clBALcZK}EDG2}znumlUz7VFrmwpSQ%<4Ux?260xcAIX-wXf5y&v%R4f@9T-+zeX#N+utb(G;6m*Fz^B4>&On%{<)NLGIHhTGl$8^6m-Mp^%0NB_P3pE%>(&ZaJk=M*&2+)SsXBmEe%$92zPD_&+XQSi0h94<7TzqlM8>d$cf7(XYE^E1Xc80fTmsd8NuY86qr2>8WyrZLT<$~?*?i9B4m-#OY4m$|`Eeu?9L>+g*HI9MJ^?w`>Rc)}E?0u|9o9)8nE9?u<UxG|>)-EZ9&-Fd~n^9s1R_qfU|UJq^)kcK&JMkM9E9lOi^$?v+ye>k5lrhUP!D>%1QLI){BWf)Y$)=lsI&f-9Kdw$XnH}Brp!~{~d`W+jZ$GITW>4iTZ!0&zHuX<!~O1M2X)-=DjiFfxu$G<thCQ7~wl>8m>FE4-c@+VeKy6kSUc9+W9E(8{5v}-9h3FvAgUBX4acmmHYYD?*zdn7x=zlo{bgeZ1i1rI1=yk((WZi4EV0~nAk#&|0}BSkrx3aegLa(QaiAyBZIY=<4Og~1LSZSb%5tH06At(jT1{u+Yr%~c}sBFO7r$ddj7_2oVV$lu6Mfn$n+(;f72Py5YfW}2|=Rb$&%nF$a?0w`YuP{k+tSEzvl(iG1GX?B3-=IIo?a-C59js<+Chr63R$rxu^@9+24=Jua<x4Y^5%+24=DurmGaroDI`e?U5<~Qs|fA4qybplwYx3aL(>2}ONNS^~?btVJrlIl)_$z48Aaf27vh+vKKW8h4FUo38fq^|N9a>X8S|4>4o_oYXgdF8$>vm0xQ1rFo$!#^^f)4`K*4B<+W*JL3l`+QM@W7_50t<Ct_A0_#cx7s^aZa>Fdf=ug+Y!-X@{~^9P-^mkBr*=tm-~0W`e*VJstyi~lx}+H=q{jF9cYgk#=YPlXzwYJ2d2DFf3*G)c`(=$WH1gESAH1H_(|M!u_jDMI%aBR#1PiO;Hgh}eFD~q<zfZB@S6j<E59d$OVmrN`g5w8!n$JiBhUdjTmk;{2quib=_NhkqA=vY^=QQB5B%f@fFR{(Lt#Y@4CdcaYnYPb)MYDC`{_ORh=fnL{&*gZ%$M2sfIe8CBCHH;cKlw5_<hJ~!^HgB%jrKKI05PolHe75cdiXW*%Jy#e{0Eq${{iNCJanw#clKZFkxqNsXaB@m71lZN%pv9N=K5-C_m%eRM4k3m?mBDAN4nD;xMlaa>ny&?_0?U6J;YcQxOsL4BoT_N<UHxCyFR;(q&S^bGc+^(l?CsK()+uEmGwe*NhDwg_dEte;I_ind~(-fS9W9EmD7Ox9WL(%)E$@GG1tH%_uP(0e;mujJSGVr^2;7<vYBn;ce8D^&;1Sadh__fc-HaH*;ar{W!G7s;t~(_^@m&pXd8RieCKlLA=WzQU(#jsxWg<_0bu2RW&tbMRUYFX_V#YOxeDnnE4li&{=50vO^0;VL#&r{<wWa_Y<+ru{^$8)f6MRUBv_r{k@WHkcxw*#%szuQqAvWvBYd!3KjG1v$7}uuFE0hTvhfFg=W!UUO=n%nN<OW@<M@y8&hNl@I2-=h-{bt}cVwvZv)zyLAw8Ev)P{e7FP<x<hk1UFkJ%j@bKl@IelK$cGGC{EnNRY~e60UGpU3{P|Ae1U^JD*Qy+85CJ$5+K!EWzb|JHvr=VO&V(t-Xx|IhCp!3zBwf6D&`SGsq}yIlPneLlqT9^f*HZ{d1=oR6LDUHjkpp#Qs0ddvlQ9N(PXEkHUEo0VPcT_@JQ$8$M{i`TCvdbzE+Pie)_{kC2GAUCT=IIQ6jj;&g1(;l1nSZ_Oncao3L4CHS<pT>XrJAX~NBaifbyL`@1_TcxqHxKab{w{B_F$ZtTQTY!!km(rrHUJ!bd3|n|R@oS5K78b=JdQiV%e|haPS5M5j(>??>koggull_H)AdVzTm4d>jeI;$JR<pw&L2J?o@bAK$_>&!t<&r-8~JGrK7Yg>X38CWpOf>LtMX}`ANOX-@HNle%clK;Pxb6i^zdMdB@;b=qEkoxLZ{U?5OaE4VF#DMl)*t4iTVj2(hMJWIeGeaKV_5?;@;IVSzEl`;kw7K|Mq#j+k)tpEVqup{fD=5T1b37n?AHwjsUx3Sws<}l4qosq(YaFvH+>DO9k=d329FoU}DG`O5v;Lr%PO=cu!!M>Z0WcRPr0AOLYgwHQSQ`96ZwNJ~YL|7|-gZTT0U=p|(JUix@B37pC_HCG3_g;K>!z4%J$h=<rI#a^*Kf8qZiIi?VYmSUTFuCWE8kx-!E;yB&>8iUwuOzt&j2c}ty_Gxc*5>HUpreU7TswaIni>6V40+;>U7rL{=?`dYDp<xEIlQI$WXTD3#c7^`7#Vbfk?kt~=b79q)3UYScVH+Nk=uHUpqSi%)1*520AoCxU^HRmoQRpV)}OzQsPQEE8aauKQMwD+r%+n~i>cV1(1S)svlLYxP-XzgPT6VuYl4qD0eZ6T(J9`*Fquf?lVu^@t|+>`u3t7?U+miYR{aT{kf`uTF;Je9CQF-`rb06x<!!-vc|lGb7*-{XQC540+6A@`l2%0qt@`jz$W_^q9m&Z}Ents}ObucaPUf#+9F$Z^1!kQcacdRjq_Gp9n_k#w8t%wVoY8ts_0@*N?)?G4t%k|iQx<;Qwngi?BCDtcoBIK^Tz?EQAdXe$yyT%>yHhl}K9!|)dCt;O-QI*`l8Z+`DVO~g5_AxNC_nFgup`@K(fmSdO*HmMegZV5<&ekkNSTBUr}*D@t3bFt;`DHKwQBVFrHv;zJS+5^?08f(^qU`mM!UPDO~(&l{jwaqFjVRYoU^y|uX3$sVH6~>f#zTUrwVtVzPTu%&o@^o=Q>3PGHG4>)>aXsB3^2`EO#SI#y%;`cO-6lWK*dFe48GSi5vLRBD;P`F<TCd?!r4$!zsG_v6wzQDDu&gQ%!hNdBOW$XqPtJm^vnb*8N-#RJQwfrG^5vdhAoGwYFZX_0hf@AVMNYNchqDFNy7gH+QkvU!bwL5A-+>x&!0A=1yhw!=t@14^t1B`fJvPqH3z%t3eV$gdq@qLJk__0_1}a!fwy+l-u8fd|E4!lOS($?qWF7XAK{-Z`jopP+Wuoz%nqZx%FYai$xo|q_UBOaP3>INit&-9bk3kg?F*O*39oC)0c=j#yJ0TRrHW93Xdse4olj?_{+(bbuhl~8`P-aH;bQbpzYwm44|4JlFiS*p@D1*@=-;ZaXX<<sVwnSHQfL$OONoh$W_r_(C%KJD(bs~-QMS?aX630hTDUolnq+ZoAr{S=6L|Z_J`YGo>E3}2xHr7!Q)+-kWtZ{U^j|1RG`fAJhpRdhIw2d}OVIFxzY>-&Ja9N3BKUq@Mdgc6l=J-G!2G!nQ5zdFME3JhD3*xZ`h{N0OF%_t9MU>M7TU3%ClsB*LR*?!$taKc=zVt`kF~_sVxT%70LAl(q+*Cp=q4_czoQCuBj!2b)8`_7Zc}p?eC))MIbg@EZKKP^@T+u;(L0c?9e8lK>2vSZzsY?Z6#R_=y2$vJ(%80b|6zNs#7HAcU?Vc`Bd2GNCO6S3?%v%hrBJwNGtvC<sreuq-;C!ryHK&!bD!A+{Y}I)q6+I)}vEn*Mq)rFlM|iKn^RdVsCODo=9O#Ph#(DPD(bG3l(~C=5k;Chy)M?$46B?wuNTL@?ERk|Kv*(<{gcU;4N~cZO5v_VfB8_YV<l(}3W8;}^mDwrLx&tmZY0$c%z>H*(KgC+gjx=v@lU|&X%VZU7J->hAIJ!o4e~s0uOange3Y>9my~Y%vy`CO?Vg+`|Wp?F69?UJbOgg))1TF(SDs4o+?$KTq$$`=*&f5iAfQ#q1qF=DUS7~#sSY%U2avPxdv{mf|*oIPHa$E;kg)~;3lT)u$;+LCbaXw?c_Y)clM65_y+6%YdIHBk;8o)gxOrg-Zc;#w~3deRUC>(rYyo=!M!+dotp>;GICzZ;jTe&^eEfNRNi~Rl)F52s{$!Vga6VXL3OV1noR%%Im-_w7PRUh)@2%QxXpkn(u_DOhigryX#X_1orOek!ak6zFK&b01<M^n?I9B=$R_JyS#R8M?;_DB*h#Na|S$W6QAydhnqV>RLfIW`BHifGT<t6@RM^)q5UwH!hlRMR)dcj}lxf6s9eRwzg+)}%x%69EQ?ARO@(a$|?4gzY@7r`~v`l*?$ObvJ_D@r?NG#kGFVZOUOdW;xkoizGw2K|jimb6vYg(NUX7lN>L{++8kvDk%pj!d8hYB)U~4*+u22jl*7Cc$*9=<GiGNUZn0l3Tf`s^xY=o*>&rJB!{zIzNZzXVSQEDf?+~a>`?28>xK)L6}lhT%dnv!8ifAfw@(_(wWD8wqmj3mk7O5ubO`)bZtm+MWqBQqXOr~miKXM*Q$MAQ5Qz~=I6X8KvLO*|2#d%-w_^_Sv`k%80C5jnAL$!NRgoP}x$RQMIKN^}v#+E5!UQoV3qX@{)pFa2cv9DKTT0)PULt<CNd^&*{UI%FQ7MWkY<r|xFvemx;)!y7%k3o*!>Y0CtIut{1Gj%n3QKOkIm5v>Mm@Zuwc{tE6LK3&<uZ0jNJ@`bzJ<b7hz(BvM(g`k*pq>hsB|i~avTRbKBdk+F4>an{!6N@o=^>KuHWAefxMv&#{~pjp)=Ftl0MR}kk(XBN$(M^h>ofV$Fu!hp7@+^%!JY)lCIpcVppu^$Q#7&5YQ)uOC-CdgN+4YT;qC*Df2m~@-5|-+X0gn8uxqUq>Ngz&v_s{BSgf5S60t%2{FQ<5Qr(DWe@>~s-uA;C?IaJL5d-IMx=+F5IE=?*Cj|B^Ax2F5^hIu9upNT^v`ZZ?a`^{>#asQEh5Q!KRRcP^U)AFXWebaT=vbIlyO^dIv4aDDUDO5a8sm#HN=Zu1PrSReH<xOYT;_5Vr_#F;lG=-3hQyNKOI=Gi&TBnF@N<O*K`pqP#$u7pHj;Xgq%+|_`Pp=N_6H@E#LDoMJ_|~ROj>aolCrMs;$e%55~Eo=R}%la~sxu9@p3ByX}3}V;!#I1r>Pv#c!B_PbEI~_)H4@UL5ao({$&Z+fZ%X&}z&>9QQ<Hz5i}+(+tGTi!(ScG1n#UcYkn<iw|J*(YV7Y0XfRFCectGZm%}7La<!`%@;v(7J99HRXsr&xl3(JdAu);+eY#`?_BScRGxB5M7dn6YyMX(Tdw?*`(a9t<Z<^DKrC-M1Q|My&XTE}r+QGhsN-+kIpI_vSnQ*I^ibb0m8t&1o^n=>?%4n6;b|(#4n1$Mk}G@ai@J_Ky)!a}b_apKWAZ|t-X*Sco5q2qnskQ|=7rq2>Y7hOYlu4bop#PI`6qv1bSjd^ED!*JzShR^pJk^5BMvkfB6-YQ0yf}+e>2U2*5Fwl_a`{;!3fg<_$3_2^*Z_jo+n&Ew~NPi8YqcAjvLEV2V<s^c7~{nM|hoa4}O|U#yT+KS`+ldo!%`$DI4QE*G*r+&oMtC(_{I$pXMS7(>u*y8hq`%Qr(9BRYO}xcDLLu)LM5bfPOFZ&OwCiD(I_sfwE38tU-X>!a-0J0Fb_GJN9jm<i2)VHkDdgPPo;`SsmL|YT+927uLj|So2j^(+y5j;~jl@Bp~f90J*)_TVT!8OEW^|*nU^Z(;8b;n@UqOr+iV3+RFc>{{JiZbq>GubHukK6JhEXXVyV}=d@#lfZXZb<1{zDOI=7NUVxzzyVJWjxn3*d`qIqm<Z*os7bNa(%>3|@Y&Z5T$PJn3InAse_d07OaSy{ZZevbxxf#;IVI<H_qj!3wz_`;RmXSQsm6kx<P4wu3;0(uisH49odem$k$rJ79pb{p!3NrQ##<^&r9?BCvDxlW%5tguHPZK>F7yVg|N4hFNb8qLm?8ns3aFyqYj%DP^&wpEA)+kfnSsC2(&f=h(=3L439iMS#nes@#I#E1#;zcHl!krhZ<$X=)TK(HvLT397h)QLfMZ!%M-VAJ-sm8F~OPsEcoFjWdWH-U6o&>V_#c6uIR&1n}vXW`BU}f^2yC0?i#6aj#D8M!o_4NHNBcM9TH$4OBzRrhfojF`;<&Nz`AivmqM<%<gz1wXx&2|!P&&&O<-V`(%2tyx=GGY=3x8U>y)n8Z{ej=c$0npxg`EGj-plstzf%xbsZ`ErS8tr;lyKk`?md;5ILZw%T$Hy>U<m#38<7hG73eVUqpF`t@U6s2VDlqQ#ERO%)Jqz9CEP>@okh?^ZJ2dVuRvM>i{EVSma5#!Y1#zG%2c#<d(sNvUmu5Tdjt_(5!xXx!xsW?w?7Bj5yQ0<JiK?piaU3~yHa6Ki_HOTFhfzigV7(Ih@JZ~}zqlUpE8~<YS3B5lG<WADuFXsPS57%?3_=dn<@a^SR0jcN?P;>o{hV&BSC*-rk(-9E*^U#brZ4XMvS05@n6_i@_a%s9a^QG>{zI(sVUPUboZmw%e!e&QaGv^Muk+#V4QQ)VY`^;c-0Q<VuAldUz8@ccKYlnL-ymJKl5d~(_-3*4ah!jdr}fvE|EK)A$MMg9ozLTW^oPAzPJe%k`GZ*f9xnU)`3v*;???QDe}#8FpVtFinmXT8NwJ1Y_21^972oWYp4R%9i!skL{4^i@u(zX<f42AHOgm2Jr}A&F9Qc!qV~p(pr$D0k{cOkJ9-A-6@u~Z`H&1%^>s>M3_?*50?PvS7e)#wLT{_kezSd8^?h$nNJ)_5Z+5fyp@R%cj^{;zb^gAT+`Cz@c?-5iL0iW<6f7v6*zuzMOq8;7$2sTe&=i7am@3;r$_p^KyXtM9%^!wTQ<Qe^qaC1jh`2=_Rb+2bUOLCc=`v%|dnLVDPe%R~5x14^;nRwW1o$q16`T6_&`#fIbuX2`4Uo8O`CDU0Na{3Q+KJ7)hW8UdAZd#KxD6lc@qXn=N$W&VPPYG>1AEp+Q(knHX;n)2t;s(NWR}rnAsMvZ$SSiQSl>B-<#H4-aepbY2BH9F9QpptJdV``t+>LuBu`!;tXqO51If+D-#4m4Q;ojUJccLM`6;r;@i%I>fftyT-)s%6c-p93b@krHqD%~Fae(wh$z#?2R;aZ|HeTp=8!9vxcAzku!2S1Q+Y`Tf7Exf`iD6JY)RfvjKi5Jy%ykpC**fQ19h{05He79p-bwG=3MHXE8SGmFTzD)xVVd$LQT72<nb@L(HI&~-bmGy=x_d^GCO3OTmhGgUMc@cqPTylfKuvju!3^(Xv>$d1Yfb2TGFr683o!ha>tb_|AQh@P}>n_G_e{9-UkLCuS-z5!l%O&}hl<eIb_bL`Z*%MI<NgLSZN{9`1iu6^B3wEKTTq6IfQ)y*}qH|4PIK(<T*>Jo8R1`xAwQgW;B30<e7z7n*j!I-E6&0gJ>K_SPV4Wfti^~J|(3AFl_K(0&ib;NP7Ht^fDvU>b57mhdjzufFvPrq{U{w;o561frak=UfH7|WF)oGA7L`N$mXiL9NpTZ%%63UhlWKmi=%xz5W)xiZC81*sJkEfiDcf5JE*d1#`VzSX4y}dBnVk%f6391vvr+Cz>&aKLoEs3vQAugp8_uz$eK`Uz&>lW~J=J4@WVL@(ARY5lJm96qUt~j0-oW{#*kf^kagq4*F>_m%nq+!F?94nF1oNB4D*LyK4tjMX--XZ)wZCkQ{3ev1Mzq|~da28`DjXatNHbxihTTNUel&Bo`BDceef}`PVj}=sGSoul0Q7DzW2oi~j2r)`Trb8T3PM4fQV{PS<s^xf~lm^UpM6ExNaO1y}AUS2zTI?Zo>?T~f4Si?&)i~<CnUboU?*HVtrqGebJ<DX#Qf6@4C2TqFSsu0Y9n~hsDI`=hSL0dB;|bV&Bp(;ZMGz^mPCdUoi&RZ7v|<8k9GkDTcA)YmI+e;D25^r>Ip>b}PJl`4rA=BS`fAD7zez-AM;ERb2kjHn+wlymmn_gYzJp4>){-Vs@w~zdx<8h=7gs4?8T1+o6+s2`(c&!l4IKCRTqd<7D$^#`*h?a|H@eV7KWI;WQQ`6aIk(OuZ?HSB>@PlS7ku2_@p}?B?2Y5eI*>zTL-;}mv<(-m52f^NPvHxvUF^|Rb1;31YqvuJ)x*ZYVYxAEfmOC%<&<M^?;|l5*psRCTyB7U41q%p>k?O1<rRRWQm@jg)$Ou33AHz55Y3UV?25jlGB;yNS+r<<Qicnxrijz2bRhYYuJu0ePiI=LQnDG(2_sY?I~5^3@CRvg&ajRs6IKO*4sq+gCS|(~D-Mt0_>`~+Yb`>9csT^tZTb%zjIqs?a^8!Gwjo6CbxuoLTA?eK!@g6p6NYG%zwAKzr!Azt2lFj8z=7%Xipo%m3R*d$gIq4BL&>6c;VjVt<Xnahu5=L(!67mss}NtYB&e=o-G)REJx(d7XfOvK!zP97iSy8&_?`H{1L{$Cwy1)8+dw`dn~3^$hbua;MT<D8d(2>%Rn|ZW^+RFRaal;?g4UE&9G4?b>`i(rQSw429)KEku+Un8U;!c!$$=XW5je#!lb3sLsdmq!o$jNPa>tApR(l-de>%Kyeba@3m8bgVmb?g4{nvZ_$?`~E@8^oH_h<Lq<<}`kG*W^w2Dx7OP0J<h$9d@?@9iKz6YUC<S8{KAKd-@m-*c_s?m5Bhdtdi4-|u&NP4>~JSfUk(YcUC+>Mp<~xlA_l`)E%jD?$0lgGKP_a^KEIyKP@y)hQORLERJ!5IlK`1#rJQnPLIHY~3cGTU#qhH^oTa?=eLgao04_kWZp9?xuj3sUApQ@1=E_;wAuI<!gs@)=lw33ofUakS?yL_zH8a>r_u)DxN&WS1S1<?&G^o`Vo6Pe#9Q1$JnFg*oe1st&cdQ05-kQvzySvK{V*EvEOGG!l_>^R1$fd8`#LfJsy>2@HWMS3|Bec<2}FR@*bl^vQtm7596Y+Zh}XU>uicYMw!#y<BytpyvIeJWWk+cI*IGRd%WiY$vxh~ji{wQzVkYIm|`>fnR|Tq*bH%Fj=N)`ICAc9>@aXRFHCso0G{G9ppeP^T(+O_`M*zic)rJVO(nXoQ!6*xR42)-@*cA(6?TtPo#Z;a$7=k9mlvqkXLXFRsDENCjnH%a>1`);V$a`YO7<(%!PB#{DtC1!S!$TUdz|7GEB#YuMcq<RQ7zoAjc~IX2`r1R@r<7sYARL)H8f7U$5_aJicu7<sqHWn4oK5*plR>Ce0M2*b$RJ&@IBK&M2?P}xmP=IH=2u_#PxXTZ2(t^GA~Wnzh({>cO!jRoIbXEj@!rBNkdiTSE!;bi5yNcsqORr9QWGU@S51>MzhT)WQ%UsOPn>PdsD;)!|D~Q^z|`TvvF<vFy=;G4r?Xje$W{Cf_AR`;`4rY0l0p5ZsL9x?S5_~8GV?4KQ}?-aLh@6{6BH%qmMt&D{mK*Z<xuy^V7e*OXK_e-iJHvl<#5#q_gKfzxEMxdCVt%s6W3;!`4Zce9bd`$p4(@lRd-|u<~t;V;(!<^@>vY*M5d?`?0_D^9`K44*eVcoNw}@!DD_a;q#rJ*?fdkE#@(i4c63B8)HcG*v9<sQ0*ax^8gR}c0K!t7}|EsTmF}R=CKnD;boT3`u&}Y6J7T7AXEGBsXzarzoFFrZQb;FjHpK#3}fED`wr?Q$7}h0yIJgFyx;e6{^w8h?7YeOnEz^d^E=WWK40=*Wnql5%=1g<`LDA037)U{tlBhxe+f}%9W+Wl#lGfw-}l%9>R@hV_dL<Z`3Rr$fya9xo@e7z@Niy*#q)e&>ds<L^K)s(ao=u?i9En{{F?9i?V0e0amPF8<nP9Xmw6}mSPL=7=d&|9kNwT*ZOrTTZ?l-vCwef3N4_%Ea=bIhkjalJX7_;4+n4*FJ@eZbk4?$VT*=<FK8H}e%<^bI@!f4MN59W|eK?Z^iT?K(v3(#nc{SeK;os(bFpr&2d9$C_ul!%EAC~dM`i(KG2fSKeV}$v4^P2Gf5hL7ug{%JGz@>`z=^i8e8IFATi07{{QGL>rn>Ro&?W`aADRzywpYx(W#RxCe7d~yj#0cHxNPqKjKI0Lq(h}ko{URr}Ut@sLNJraw4Dd7?{}C_o?%NpPru~Yi%NIQPnfw=i=>8Y{aG9U9{}WSGKhx3u9@xKqKH>NJ>0HJGzII>f@6VW@J`Z;r%<iM%@^^YQ%75oS$o~<3;JNbF`+wMbyX{tSZCm((>Y@OfRD1~rfpL(HKoaN<kYmE1nXwZvPyb1fS!E|PbFVtz-fg$j+R18JuIYe~gnoubAH5HK_fy|%1H2y@;pd%8dWu1u#r%yafDj8Vanqd-6vly!hqKfvHk`)w5X5j9U|qq=unwq<sk5(9d|ad&oBf@>JIRq_3=>|dBU5X}iN6dQG!nHosY7-_WIlzs+hDxB`VLHkx)=ir#;B^z(5<&SI$UUTx)NuI4{cZZIM+xu=&4dSNO@FwE6&;$)Je5be4D>OS+BNu%hax=E<=&jtcgh!+8&57FM^t1qqaCR&1<qo#?TEx7!#1Wh-5aYaSa2$C|cN{$ghUeL2A;Ax<wkNOhYmXdbh*NA;sN;-|!`Dp%%u-&6?rNBT)Jye8(+0rH+Tt$QH=qA&u%wPFR{N;3XSjos5N=D0PkS>ddHmlJUW)8ERg^iW3Ne(py9g)H6&dp=wHNB>hJqS9I@S7c%dWcA&_{YPa^aPSo!blM?kzTa~=@HQd%GN}-ok17aH2DXAmh1`mfC!OVsiUmRGXy4I;PyatqGT!A-=JL!8(5rDg(xe!jFmeI>ObBZx3iIueZm1!3i)jWU{yoPoqebyCs20s+<J!=a;SCQveMH^Q7<R2$veHMMOp^a`u*t<YlzrfPh2_|izp%{(HGNl|PT6ghl)@7yiQx#89qx6CF&)cFrji*UV+)QE62QpVu5rtG&ck62XfG2+PF7Kw#2M3TMiwcS~eUac*BI+T=6i5TLU?F~#`H)VLc+WW%&n`X6Du{wg2F$^d#NLi5%#yxBRxMRj0zU&_v&W|ukDsOqe0VWK-_c*fvN#hlzOdG<86b;ftS`RSYcikKoKK^Yxqg<BRa08&2_XnUl{KO0*9_MtYP>KcFvW|SV9Zz)nI5dzMZ9+>sIihRx-+kh5m(USqal6Q4;Xk$G8$?ynn31@43zr9R8UhO#$#j*xbd|Vt81c=6K%UBC#OZ`b}t<BW{1%t1)Z30$U_?Uu$EtwnhlV2Vm$F}>hQC8-^+~3xP7&eF^oHamj|cYQUaiFd(^L1388im0Wrlmi!#d$NTa3^9$Fk#tDsaF*;ZEG&HU)QxX{8R(B>v;$%B|f1zO1D?CM7PYq`qwpn~fIAx}OgVO}v1(i->+v`1|hXEogVR<hbnv4Z$|aQ$BN$F-5`i#_==71DIu46_=SM$eofAb?Y(V2!lWui9U6ypb`M*KGhlVoSHPZor2R+6DmmmFkd~Xf*b(Vy=>086FbgjYLaS5}78gE=gL|Vn#E}6y9X6`6HM4EYw^T>k^}F5kc$?yb?2!R;pNMFmVDMX)6cEHDv&b*&^{8P!di3k-6RpHeM4fz&fqLnU-d<!(E-*#S4nOS4`~Hp*;oEMS5u4*Mn8VgOe*#k2hPL0*oK8$YwI0n}yb9Agx$4TQR=vnuKw&4Vwa?(ilin>?1MEd@=6DTC~BcIL#84(3bm5Ja-=lt6av0+A863k%lcop=Fk&QujF_rEi%8Yh0}Hl{iH+(X>u1A3)zn!77yZ0Y;EpRAE~nQkp7h(LN<4^4)?2G{0iy+%v*P+M3e$PWEK8N*1pPsS5Yd6ip_M1X#%zqJ6zjD&4OD&00bd?eTg5q+v=?>>@Gtt3W+e^)du#E#}QSY5Fk(U6Z>!^)VOqg|9oi-XNtrap$;9Mo-4_TbWgeH&I-JvhKO#>lsC2O}$(rXXru&*h~>-g~H>5vpR=B>`9ilV`421>EMbv>u{`B4D%~#xSm&ahZF#EhxbW*yzT&dfP{EKRWRIm?+Da8Y5^2B{5^>ZmsboO8r36qzJw9bLI*vGXRU)~V2l(Sj%8jkz04f76aDeZ?P0-2d&Mj@k$j`IcBxrxK4+T#%$=3gY!+)QYsEWqQeh{EHT?|5N<~@-IA9EGV$C98+((-gYqyh8t({G}i{KcFQ787KZ6;12JDLwk1tiw8OiPj;NUlSAdDwwdFV{3NZd8W5WM_Ls)XmEk?vU0~Qw`~8!RXGdRob$c0uXZyedg4<82bu!f+Yprj*Vs~_rychi37eaOl-bI7_=eSjEHtLB>56oVw|>xjX_O<N~~HH6MIw*5ix~L(Je7C`k-cQG>SDzj;mPwDs>!)J&!A#Cbd282rI<+Pc!T<g39l6hY;$Lwb+xwFzz<F8)!Scdf3{-0}-}LZg(Ay{Qf|g6G=9YCFV!WB*ygaI|GftNsDZTpr!8Rnk&|pD{09#tr)~j(kBuhaV|7hh#bF>cwav-J+87+ZD;I>#i8Ue)n4yg<V*niA$CX**6fPM!VhbZ$oU(^65AjY;?osXYRDo}i~)j0y_RC`Q&z**$n7NVhWFHy^;ZZ+ON6@;<G#;8GDd1a!qHqyjBE!W_QhU9Ku052a$;1n7wz83nD7?uLX~WB+)=J{qiC;K^OGwsS(Fmk6G9wcQKOJ}VytfzROuvlF6#_<0k1tR&_uf<MVEU5Q3+;_E_#`n!HCwOt%@zDBM9pYR3a>FH9u;I=-c5ebG7X(HI)4#)(94qVvVn{=Hnp@6t)Z_0>TB_h<!E|Ya{b5L+rD1e}=?w3oC3ol$NHj6uLdF3Gu~KGs<7Fdg>#&4%OV}z*hJ4yh`OdB-W{XQ4FEj(+`#@W8wFtCYIQ{L<_}z3!_g|Cd^bMxgAX6kUXsN{AI>qq)tZ~iT$zln0D;6B=(-gK3}GdzWj;P*k5s)Cq(M&wB>!ouIE4I{qOYy_lRPtA61`Is@K|an9Ai9>U_t(CS{hc>(w(}m`PqUdlz@Vz->g`$m%(Wi!p3@k}bB{G_R#Dk!n7OIZU-9>9d8Y=J4dOW_6W%jg!XWXud|3r{VY>^Re71?i^vU|K}PY@N$A;Y<Iciy^H!)vBql-PlzwPj{n2Gd*%%gc0!yQ^6&0;(ms*#>E_@0@W^%6zuNvaKX2}f_emFJ`^P_fuKBx|^Eh?DNS*FFY2tuMi)93ouQ+K^FXNBA-mY~5f41wFBV76E_F;HXhLf(D8~kECSJn_=5XO;pP0!|bNEC}D%2j2mV@`NadIa_yvuT@Xj<M~~al()Gq4AVk!w!ei18(ZaDQ4Ovg(<Nf=ji5vjGZ=u{5UD&?DPIPx6LpzyWVNtGT7Qrk*n;*amEavArvp%PM$CQ2d1zxm4U5CqnzV`aX(={VF2KarI@=pE?5R4PIyaT)X7?Eo!cN^>&9a=VHxz#2)I^cE!@CrWqn@~@PHoQ%`ym@G1}3EEdLJ!Z>Bg@+n(c&EhShlL>VuO6!UI4DeGKUhULRxltD<}qre#v&=xpb#F)2#$ubP1I?ec051uCM3T)PRj?Hava30-w&nK;&!%_C9{M%`Ic6{{88S^qMWK8k(TSJ{=m2nT%2_Ldg7N6ttdn3-Jt|ggpjd9Y+T-w~;@BTC_BY0dr8j5R`4+eS<#GG5=sXyXB$LR<>$5LBHRZTb^HoRo6bG1(UkN#}>IX1U>T>lGf$x*HsSGjtwW<FLEwiMi8OZYhgc8S+YnFtduccAeSiLFs=5@B>ItcAJB8haN#$^SMUS+m~lpO^KY|KLim5l|$aG{!dABk?Qj*k^2mGPj4fB+&g;C$6!tf8{`!rn$}^t9Z;EQ_E+ZvsjyZIZjvB#5Vw9wF)BXh+yOx9Yy={12j(I#eWW0b`rr{9Fc7CYx3k`h)+LB{s{2jc&L+1vF?tRTdV1FImKDaPuZ_o4;LSt3F|Q9k?+Q$pYK^H*34l*dvm{$b0;uik6o__#kQRQVLI=iQAHO&i&i$qFvmoEl9idzOMvO>h@DRK`C9b(Ao?7kjXI#c_}nX?=87pk3v^ii7L#i~FuB)X;AqFg=3@9R?0w*wv=#5q!+%CDun-_Fw!qVb3;w*1iu<Uzk6xzh!&0=tz3%_U4}V@4it9xG!ti%E-JIVbvao!{7K?t!(Z!FDxHg2jFZx6Lq9Eolh*yE1z@u-AvOH+}-WDawS{LgWVG6hus^k5b;^GZJ=e5i?$%KWQxj~MThIVX#d|FpPZ^rX_BK|h(xLQ(QyORE=^ZwCJ#3z0#l&cwSkklE=6eGy~)|vX`FPmeJXPqe^eQLka?2`UMgGycOUu$(qU6b1wV-nopJI>Pjq&syhb@8n}&pn>E`7Sp3PPYp8fyDVf>jB+eZ${tZaJRZuk!eYs$9^}OrR{!-?foWK(O)0_+~2e#|F#`#>q|R6>o(nAe~&MH;D)!?W9zq?qxbcce&E~uPqXgTZH%+}yLR39ai?4mC;byXE6cwPxcyrG%cCU@S8}}A(Sv@65B<8oo#+3$zx!|d+lu~Of8XMw|NH&@_@DImtw7$_@_&b)55_k!{-4`>yQq9>@A^^Vq!(Fkc0}Z>R<6{w`M$rujkOOS&7b2$;*jn)xb!VP@OwPjCsRDZ%RlAP>zy9dUA@5FIQWc%=3j7KbHa65=>6xqMoSX#%==E)=rgYSRd>jo;;bs=ZMweR+~7d>KcDn%?(s|+(|*0nrFAPZeD||C-p6kLlQZz<eyQ7!9_Rc7!yU)s{=G-PeD8nfKrw|y74b)7*6Amv`AMhW!Aq&<Ir%N6KTVw9FPY6Q`JyX)z!AommJnp45uLN<q|=(k;;f$@+Ahrr*zIYxN>-<Y+PWS{%@Y^w(pttK>RqULXTPkMp>rAX)9kZ80Y;G~4qHy~mXzdjXkp0~u+D2<?;?9haJ@m=DverZCMxJq<?Rj>rh&={b9v7xy!u)lA}Y?73c3(yfE@FbxwRdLGju?)N?N|-vAIj?E=enIohu|o;w;YW74=nE;zgi9%AJr74$+1kuhc3fMH$jnn>&E`WkExW^kD>D=nUndAzow`Ep6%(Z#)~R{2Xc*64|ijmWuWSNWQ&ypq;sMi#VdJ<)v!xBlE!rqOICd=T6nrh`&YJP~<Kz(-B^<Fxr@kmPp~}r0JHl1u-ef_D~mTLV&lA@d`rGw^pH}3hWO6>_q)RQ1Xsxp6QohNwl-f505G4PUh4<LePywwbg@r>S;sbL?sYbt7|o%H;<&PFRWsEzJNst_y*%u8#+iO8djsyL`hu7QOtGNzD}{XerxE|4ThveF(&NgfK}#49?M*EIyfGdei4Y(MG~_(td`5nA}=!Msno^@xTw2}^c;iYV2RfY;3zeLh~{~ILzcX`RI=_Eb2YOsKZx4-L|Ljy+l{mt;tY@rti1;ZfXc4|J%~}CXwan<t2ilYS_ea>ZB`lVP9!p2RI}<3gVI+xC6%xqH1tl!+Bvwe3?mN6qWF=!9%G}YlV+u&2EO|(BS{SRA>|v`pgwn5l~mki%Fw2o=aLaQd2C*i=JJ+^VUW4S3w2Z)RjYHV)DIzmG<S*1K<(yq=yLTn?SXfp4nO5myQ4)(ioGY_xfH0*^<7k}2V448)i8`roGAU6VQ-r+JO=9`&MeT2d1Gb7D>>zBhKCr9HS)#3F|BloCFT@#L<Kvp4f~|JyhT{wWWe-xHZL;yF6(ZYVPEHMr6(ni#e9aoL!?gCZij)o!-JhtZbFA&2>~u{i*x1x#zFBKwcZ)pwH5-fg-)*~n(9Vn{d9<7g>4uHRn;HF^O4e>S=?<ys=8cdK#cv8P&M39rl)at!f|yK{oTv{rlkkD4f>33t{LT1yNIpy$pS8!;#EPp=`+B`9rakCbn8qTVuqQ^#M~5P(95dggq!YNjE@2<Y`vpJoM@K~th^u}>msVB{HQ0|AdIy7OkJiYt=DBGdf3zYVGU5_*WT!ls*-neJa0SsZMqF9*#+B-<|7e@H8CHex`j1*LCSCzZSrZO$803KLxa*xg>KLcKCZ>wa#pVg%0=IGQk$igxLZz+i?9V}Lb@=Bl2tmY&Y>_9(pJ}i@MUPLKiDE)MV7LZ+9BBTqFk|8(MuKQ<*YqC?R)NK%7yTEymU2qfkJjzA<szl#FAckfx21;1Oiy1JAa&3kmp!kJwq(ku}XbTrB1iAdP&;4%NNm4U)WQq*?pwIH@rGMO)=2QMP+Kia{T;Lr{N(ii4@Ry*9!in%tTvVWM1P$tBdSs-YLoNsLd{o;M1IA%DmD!Zu&g8=Qpw1Gbh2y7q!fZT_2oU*#<I~xy)gUo)gLx7JK5k!~5iSn>M`DlUVagvEGb~tft)O)=lnnCjQ3V?VN}4<=Z&!aXQ=G=1sZHjjpklSl$bbpC*m_7fG3Q{XoV=P1@zgn;r6F;G9fP`aCL8vvAc%o78w!2LJ77kGYLxc3jELe^AUPai+EOlQNP{6}F44$l)lt@iNxgHp%Rp8_4XNL)5s7?Osp5Ba>TG{Ih+M+7A76uG8@3iwI>7pgC5%{fN~*8IvDL?~JACJQ|5SG+VlHKC1osMG4L?(kIi}VdX&MM-2TU=BUc#^PHs_&S&V_z}4hKa`9>Mf4TN~y)e(uolyo`ypJ|^v{`dI!xw}pG#TTl$uEHAD~LHn+F|0$_vS}jyJytFRNk`z$lUha{AhC~&h)u6{86o;(S<Aj7(p|jqHKCWc>>KM<LK=m7OTSr=7*J$KJSISUR?e#o<+M0@Q1-9Pd_oNmpHb<42j>wHq#t!gG5<(xpD<ub<la{*n`dNOTcD0_dO5idgS3vJpxe=<R3j@a)c_7eE7On9d=bnJu0eL&0Y2&%M<O{O#V!}lKxETn|L$`{^?Job1eQPHZFa>nd@VV`hct1A{XqXNf6K`!)&ofw2dMX$APoRa(BJ1oM{YP=KflHvk$~n<Jo^&t>f7jcrcpN<nKs(Pn&%q%Qc^Ufy`)+^ZRqf`!sUPSxi1l%Z^X$%E&b9XlxvK+*lp5TXW(hlu<Bo64E&y-XPJGAIHG6#)A>zx!;5_u-%w%hQ00ryXw>2?1tqJ<27=}-Ezb2WDkw~o*TRU#kTh+)6os(!?*h!0jCVo*1~-8r)+~c=?RGcnvy2UHW+$rh<ldCX{VXTL)*WxwSI;#fhO}XNN)aC>CcDLnx1!0=2p3$|5UD<KV>}pV~|fg`Sl%7e(8c$zgaIIH!sH*xPF(M_+#?NJ}Cal+tyq6`GNKy`GNKl3-DrNfBpEJb90L8|7iV*%i4z*duLY%!><nO>f{=a)d|?Awefgbn^^q&Yc3jZ`v1wpzCV8CqKOQ0m#gG19`nx6v!2%5Pu%sJBkkR}^eztfHh%q+uK8Wg-(TvQ-*fWsuD|sUeX94}x$mbwwD)~G@AS^^>bt)4OZ-B=`!;U<o~wRe&Rrb$C9)=e*5+M~xKDb^clTL$ex=X#UVdsPe4F#=fzbYs&$mV?<NNGy&bLPWsXkxhmhaBD2Kk;7es{iga$}3k9lD&B5ik=}d%*$o;z05q)%8fRJZpGsVW;<rGF<Xz=y*v|j^Q~dgOPyR7dFy1S>Oe&#Fj$DG1Ms@b|C3Pmu<Og0*dumoP}&*=MiG_hBSkoG{7c{lO8n}5K`udYZNh(SVWFvSa143?NXxEC@EF_BQ8%BcF<DTz^_;-*1{eTXQ}GS;^LYvx}QAc9t+!=Swzo?_Y#(nq*~EN4N=LMNX^2%uw%La+xnqpkYXqfBHb%g>n*j1S7FO{;_Ub4<CC7b!p;NG52~c66uxCxJ?HeeNNR3DOhUFOC=>Q9!Q?G$yc(&+f>Pc~J}*(($SqW4Di^1Q`ZcU-Cv=9hI6GO)CQ)W@RDV$vT$~3<wNhpL4N~eeDNRvlV<eS&W(%(pcK%Cd*Gf9^iNTskr@S~t2g2U`(0&V~_FLW-V<gVB*izL!@g7nKwpmOlbaXetmqZ*V-o^Pe6~{9eigSKQYSABoD$Xin7<c0A+mBqFNO=Soxb99F^?bA_7CXw{8NS50tQUU7#kr(rL5bjw0zi~*mo|f$H0%vmI+F1&J4{9nCf?qFwOnDN)KD`M->qp7k)@ASjcL_NoS8S$F3zmYkS|WFV6jc*VEh^Hwgc=M0&`0iCZxoRVVjHlh_FfdN%WCU8+#yHuZy#JACk@qDt+tQoC&)Ygk{nb&<$h+2$sr1KL6m>B*0*qDypz9gH;fz!(^9_9?2KgDh;crpE<Wb_=r=ixK=O_;ng-If7{^Cp$$Y)^>bLQ*iR1QL|$~aQ{J5X$86u9=kF%ZXZ||*`8)Hcjruz01bm;bSxw)~9HQet`O>TjLysy{i+R_EZgDkb-p;34t86RRT&Y#&uvfA8@K)@rp5{hw^Mp)iU;V-sT?$)Nmk$d9&zo_})0)k8pJ_CBveSH;%-T`(D7B*`Rw-AyBcAuf7|%LlsiDm{XYv#01V3?3Bjl5wn1K$){??}5e()8aW;<rHrjz|8)>5g1B(*e--rEQ7?)`(y*h?<s7mXv!MNYH`Z0oPy?EPJEbR=fF{TnkS!p;Dtu&*r4w8_pG3_RNzsUh+4$<A>98|@4bwcqIQ%&YXQ!?Wn!4;`M{3%<`Ucb9wUK309Q3I2|i{*r%tjeB^P-;VaT9E{sN-e~9Y$S1DaU9KZ>UI8zXPj_!q+~t7H*0+0?%ys10>&b>_mZsE6`4l6bS>Nan-E*Gq>b<$SF0{Yzx7)q%m$B}j%KgGwlQz$9>hbg`my7>l+uY__y|dBo^?By8@~a;@+&t&TM)>#7yUWFLH;$~k9I#UFr?MoM?Kka3_s_pC?-rB5gFovo4Y$}P7XQA>2Y+`zxWo8h1frQ+cgy+uRG(X}+I_q4um-%w!%;WXGyms`oACh7H*@53In}rQ=iIe-%CYmCa_+FUJMP!*eE!1G>pjWQvp%((-*Ybf!%pUU_`aW>KV5&EbfLmWH#@>lSkT>l#oc}Cefu|eHuOn1v<V9)CfIz<f%WlogF#K}Rt^|3$@x|^XX5BELt+>he5z0RmCF-M+}P~MC08tyxfkyG{rW}U$u;Pt+e6HIU9zuSDQCH%*Sqn1yY9TLKfTBGH(X0O(C#^4x8>aFJYhL*w%@<U+Z-s7q57?Ok4M9P<PvMUZ}(?CDKmWfmJ@VWAF-R=oz2KS$M;sBY33x!&Eo6xtAFu)e~quFiK7?&vHD&6U;o2(|J(Zivi~Nm_3k<6uUxlpIbG2w4yDB0@5a?HI8c{w3Y*rw?FR?%Mg3B*w|`SF(Y_xaI$iHy=f&d}ZrQA32H#9&b^LPuX#A41N3YA9`fctI{@Wiq-s-X4bN1lZdHywri_B^M^*vqxMSo;B=iP7e=uR9_c%3=C|2fy}dTV!0`eXXd)pyu033931HAeEB?bZoby&s3DE)I3RL=77cwm4^7a2;twoT#0|IRG!slqs+dT6;vGrqu4XsY{-y#OPGuaZo!1it?NxNr8uD?uMx5KC0LV?P?La^%`o!TJn&@`P1U1m-@Ef2Te7mqz<UP+M<>~i6250AP)HTWyU2Yjq|*oIdl}Tb!Zjaur(`6>X<FKIE8lNOeIc@;w&F&U@5hVP;*wos0Ns@9duwR&aYi&0X?rfmjbEX&KFV-i<GDqXSF)Ce8soD7Ltyjkvl<2NTQ+ziqv>d|4JQDyd3CY9@-+3d108c8B^N5pmC!e0DFat?M~M7a55uU5hYd46SC_NwMCU_{WT<>%V{z2vXEGzNn+B54iRTVL(fKA3uEA7%*q1>k{@;zXWMh?cqEHi&*NldxQIC&8jde1aqC@BorXZ>duY6~Xn8=Zm7Z0br6{8o``IR{V2>LwrJ!49E_@Q_Zo+Ax6B(1PLK`}#6>hha&6Z?Gd5%L7f#Q9zF4O!zi=cS^P|%8W)b@7beZAzG3P@ZinT9H)p)-zyC2e_><IOd<iWlPOZ@6S<+KBthV!N}zIT_(5tG#V5`cIs(d+3suG@@TMdr6#JXZFg4wbVj`FWiRjK^v&Z*^Iu*3DI~ebLgbnQA?e=LKp@?c~oKJS^ikiEUudnlT8G?;y_@*30F~Fj54o6=%Texhu1_aE=ki5yc*K1f<sWTbD|L?w7Yfcn#)83GAGT$p+X+U`H)#e<#r|h&J|+SihM6j^;|L5Yp532h|1hBH9^>O!bUBa#ob683J;ij*e)X6n(qe(EU3j`-tdSvLvo;n!!=kSwQ$4QJEcvaBbA*qsV~(O9d-FDlbl7u*^VRwSLzat`4EmEO-6sr3FyTbFQCF1YLC}Y?SRZ5lF;H5(u=5Damno!OG@vR)SikRD0b<BAT3uCg0D=}Pgt^Ej`=mSYn9`AiN>RzEW|u6xr=Ky93oTl9(!DIEwAb^v;c)|_drW8;+0q72-Shg;;3Ogal8lW6l=JEgBW)NYv_T9IYDcGDdzeL$FBy7_{9edaC?=eb-wT^>r&7$Y6A~y`N(Wl%!lJB#&{Ll@Dx<I4;yersz(wkMtsR*gc;4n9NR@O4r|yG4cQ@puRfLBy3>`Yb<H$ZC2FC_yg&yBhFRUgRO9DFStVS|V2MMDHjSCB^jSk9yg=*FQFlpckJPRom{PNZ__~;HYN~l+{sm%Qb?-@e9J!)n-$F8%QF{QOPs9+AaT*7g{7BT`8Uiw~h2%qeOVS)wgnM23l=4VfN<SfQ>unIBrEe>Xloabss~gGR4Hre1s`lS`5%Ny%OICUWa6_~elZ+^ay*RaM(Qhj+z`2^b{N!svpHV=#!viW#CRnUjxw0yfnm1CTjyjt@tLvSw4Q7Z}E_abQIKnywV&p8$mS}iM7Pg+1;3=dlmsGl*TI6NtRLh_(7Ge!oC103E=7u(^<nzAdZdXwof}pA2L(pxg!?sc<O!~4?w}t_RV$D%irUk30RHl3t)$F&L+BW5Cs7ZfthV6lX7aw#~jG2<qpqHE(rqxku849WDG*N~IQ-4KEwaPD3KG+8bV6hf4nriwop)g^U&SwANQ3>heDw2FtKnQfu8>%_w6<h>j4D1NRgmAG=vJJ6|vv2DaY6hPGd$}joDtq`xo9-hQMnG^a`DB+v%c~4?M6evor(@(66k~56R2?~#qTg%cP+VJxawSpNnk-<HmF9j=FV|r%E5T|J`y(C?B^TqHZ^SM$=8YEx*j@#r`Yt&;smh|TQk_WkHon`PcOXzm$$?nEORNokNPxDF5?NO(?`A*U2j_D-5J<nFUwSOp{8i9y57T#5LAhP{VM}^a*J6LE7pUP&f}xAVK6Qva=?m_67`~=<9itdgY9Uqhy({+n^}PQST@<l)Cv$PMxt_a;l2lzQ_QLf(X42QYJ`iT6Z6UeeEh*KL^!2U*I{RX-9ZD6;_l^Ns9_(Se1K{cdPD5oSc6YzWG6$LJMY&~$q=adt3@=#pOJ1tubf1cs2a9aO8oc|?Mc5jvj$pq>bMCSz8O3;M3VEN7qkI+0{1}%)YB}nujn1s985-eo=b8y6`SnnXRXRdtUV0CN>g|C7%dajpx5zofmkp}C`XJUBVe?$YdMM^lhs6Fy6MET&gt>WBxT(xZ($<%tW@n_4C&`fv7h?ZVx(kwhp%y-G>U}`!HYH+}8PQU_LzfaS31luYAm<`~5OYpFG^j_)KxN#Mv<t*rH`#&}S-DXq2a`x2J%C}_tUQW|Sa!gkjY#Hni^aQqfMUT$%2`D%L(Cx-Q@k>>yBb!7*uOy^X>gz63k|i47P+VmBQ@E_;Hpmcl+4is2y_b>H-fNbj-({}q$boC^C)b%hLxq{lRnVq;wQDO?<2gTQeV&>D5|<n*oa{snJBXf4r?YXKuCEFt;kUkl4Buav%Vk{`#_tIDeh9<tX?9j+KHmKO!LIv1kZ>HTdeNluq5Enu+&%mQDPjqMlf|Q>!|6q5HmNb*@?$ql~=qZ4b&m%5~326#lpsPpct!I;bI@5ps=C__rmTPkpi~UIw)G2%lvMN8XjzMqG$?XuX=z`zD$Uri%((si#1K^l43Dm9kAuKef4cIKJ3RU!N)#R$qT2tC+vq!P(gR+c*tKARM;}Fv_@8<c%E;gTG$?`v@fEn-ih&{(5Tkrc+P9A%ki87TlM9>s;orMDLq$7$TU&?DF+cskv%Aw93{_tS|3=={IJoToNN@|VrN{7ktb|%u|6nR>->~}<(?+1NWL3aa_zeTHEIYgQ;Y|M6ZvkilqP^6k{Yt5y4c5^<XmdvyRBI3gpGLYb77+pyA$^lQ4bOY)i6kIp}4+~_4id$FaR7e?94!{cUVyrteS+|dMm~w7Wdat1)N+Nb~wfoQ<*r4zIeW{C)c8#Yo8QhSh2S-?f`EQMB+W<0G7Th*86zY49Ma_4@-ce(zHc8_mq&%cf`PKxR1w89}u>sttUC2&Yt!wa;^AJtVEx4h0pxJmswA7BJsIT6E;4_HJR6L-kYW+KYyF!faW~oPcvWra>FhB8AEjWK89#9-}^k5XH4IH)qpgw%P9uvshYo=>nza#V_SLo>%0%?b377ATG$<$|D5OdeJl}wju+%roZs}kkeIAxO?r@jRrb%k=o^^39<<#L-pfh3l1_0hz1s6Z3HYEHk63fqk6++AiEaLn0Lu<6FRw@YIWhYO^I7jtC+j(KUf#}!i=XcJF$9~Vs~P?7XvZI%!7Q?_hcnm?6Ax+!<~%Y_sz32*p46GsCO;)cM0>BE@ERa>8K-!V_YV!kccY!PDi4Mi&Kii1Yur!R&ktfu*w3Ey`#Y}TjQx;e)}F-cY~s=xK{m&j?DKnWV)DUFWagif1p3jOVx8otBx~7j+CNL&sxW1q7f}MBOLyk$@xSJ4&Buw?XslM|s^8oCoGZm`j5+5CwP%e<LuyPKlg4D&N3zV5q4f5|;WH33_fuKv#62@snF;U8T7Q%^^#=<iel-P8t)J%@oj;6vejX1zG{<Y1p)uD><^kF}-ZAdn>!SnBbq0MslcU;Qn!!i^1Rwo_rv9N5A8W^bx;qCOMXb4sVk#f;NahF6ay`c-1?!KPE?e>(r@TD!eZ9|qQ#zGv=0-E?gW_IdZlCJj{9X5As=M8<ljDT{Rfcw&`>%)N+<$=;9jE?#HIzqt&YyxV<{V#U^B|JCh^6T!wj5{TZ`#zi;AF@Bl*{E&)O5-pgpOo4=WBTcc@WDo9W&lc`GXDt`NNd)Urt~>_pz*tX;%4^uO$?3V9M75Y=`!lyl-RHy))yK>@??jv7I!SG(q?2G3%`$*`<9d@x$P6{P2G=PU*jqW4RFKY-8=>y=Olz%;4`lGtV<tn?28YouCQqDMt<<8(WMl(JZm1*ndTi@+ShoiUD{QpU(jW?-+pbGcWURUL(5r8CuymggKV{#%N`-_+p694UYduIhKF(CU?qkk$lNO9Z)PjV+9ncD$FA7?{;OPU7|g983S9i&;B!@WD$tZ5P-k_t&Zu$X;yl5eV<3>C+D$^K=m3~_+Fbdg4p-@FUm0bIj54Sqb=%ai8@-Mj^Y<%un>#%pV)G&t5}hqtUry1Ti)X0n8yoI?b3Mt7y72Voq7C-FQdzEd5qZ+5Q9og^0N-0eT!Y)=>YOx`aCxu7z~IEZMpvc&u0w2<)xW-*mv?@^BF&3oa-sh3;a$e)cb_7Zay&9-_-Y3uM&SQ?-nDLac0(My-=xtdE2Sq>z0c9Yk&9Y@B7=o+g9aF81DD&`ww+TC1&bN%=Fh7Iym28*PqMz{{4a5_ctUGGyP3DcYM%$UDMxTrb8hy)6f0HK4GA##7uwFPuZvI^AF6_k(lXiPLWUd@lTlPz0PI%Y5e|!ncl@|-2Qxnncn6u`GlF?)#v#e%rv>hOz-sse}VN(wt@a;s-JXAKk5B#K4V??SdVz#YWVuR&95+8^Oxn1zrtv5^=ZFgw0Gm?JB(JE3t#w(x7hJdUBz!P$1fP_olf-nd!6X1f8{s#`l!Fhh`sN}ZT)GzXl9J~&*E$Q@_*4jKf%}IjL|-l-#x$k<?|=(?(VuDU$MI{d)VLQ7+*2gdtJ`Y<Kj0l2x1&ZTWiKx59CX|eu4ddUoX+V(+9@Nzm99=8_e`J24?g6T|Mdbrjvh(ncmg=?R(7h?z;DX(Z1~I*F5uYF;o9Ph;#l1GriRt{S{`~N9}gP^*=N{uVm(QElFK(AnvY`dzKTv;0kJknj~oSD0k~n`uez4|40?jBNbVYCQzUT85+$ql6lih7N;tBV2bA>0?$F!LDGPPXtmTz>yoB;gIKpSd+>5h_M%MbhwQKd*ExYEZHi=vS>qEikBQWZLuXufUO<vnWXT-IMZ)8H45+${Dji82ggdpLw80g%g_SBF`IDe%OKXT(Nm8cN1;iZf2w5a*x5XM-hZY`_W+@fJRHm>rRHas>H)M{d`5HN=TECzbw>b88kieHzMktq1CaI~B3n5(ahsf<>q<T&YKpm*CmAYaHg?>iFLQ4yhl)&2Ap2jtv=Aa0|iuF6{ZT*I$11+|BH~C(QM;U_(*cxfoGHduNje;vK>pdrvuW*q8Pt6=O5alAV#F|;hYtRgq@1i1=yuzkNyde*gy9;A;o3wSpY%k6iC>8IHF;GkHu8XzRB5Cqv(w?q~(ji~w11Gu6<0G-OSELmnqIsV*+=b21q%BWVz+WLj4^Zt~yeQUe;caMbCI{zyWg}#`(Q&GIZ4Nq;kz5yj(~5WOMrAennksW~0~mL2sq`hfUFg%5<aI_n47MreB&TXXn#)_>fD^UI?ogT*tzbfNHKbJc{EBbGvKokk#?UfD-(^?HPYe~$P9v6PfF}pwX_TV=5a-IF;fqjP0T=;2b<LNo(UWw+WR7%&+Qp7h$;*_yPel>+FDWS?sk@WkY&5ihXQ-*M%(n!w7iPqKp_Z?Qn70Y3mUzL}nM<^!K{^`kMcS~Jtc1&`#683Hh%{C7t$7l4m%e($BT@$AW<fA(Wqh~ab`(eC8UfxNoQuvzLU%Ubr=UBBRh@{#)Ec(cGO6+_tMqjSKq<x?jw0B~+$|FCXOv^wtl|tOi$hb_kqUnVmFPQXv&>?GAmvx)5Lf2B$t#xTb#ayVBkF~IwNaB6ZbV(9-1cg2bJ2M2L3$c+gO*|*(nH*7k;PjyD$6|{(+aSQU#(6%D&}r$b{KmIM*Jlop-Cd%iUY2Ow82RukJ6@#km6lo1YcMQWfmJ9SCxu1Z;4#frugw15|(nhDxp|U2r=70182X4lvspBmMQ1U6_Vm58R0-;-ez@O`=u%MHl>#9Cak<u>Y@^l5J~Rs&KB#3SbM_KRK(xi%qe!6U6hO}Dj{6OQWp~xI#YmuZ~)|#KkcJxmAjiKx$aK5o=S#;qi@AQz3~AOBW2}DoF=PD$21lp%X}f#C8gC6NxyJrsapb13C8v{E$cU*u#!5eFl37}qhhVVo_VkW<wrn1FuBcSbL4W{k}>EGS>_ISV_>z+r_=qUN2_GGprNM!NT{Afwr=`vmu70Ag>)nHBAp_e5#Av2Kb<lRUxJpw1A*@{KhpsxJ#o!*Ug>AlT>O;Sz0~W3@y4IpS(qfL_!3p*0cw&rUyBY`6Y1ZkfN4P^^K=o_kD1g}r6ENCyW+Y=k9`6cK1fzc`=M=H6cGZPLDD@OD5{V$I537{UP6;wYO#+zN0yt^$rv`op|x1^?A1Aw8i%DPHUsvCm6b30Tiw&+Du_2w)=}oKPfE{0)k?*6weYKsMlCGvI1G-uO=JQT!s2AX-=*$!F7c?g)A__<P;@cBaVV@BR<jz~dWpsS%^V_QW(XM($|Chi;=bXcS_F}pzqX3l7_8W+u4Ns3ON`g%qGGjP_%)}y7*03_C(M*M1|wcA*4}eYP(hjkq=YGWtbH+m-zH2}zANWKU|jT}SnHu>E=ki#jloGHHPiSHtR;O$*b8lRpVwf!$Nj94>Y5~Ii#Dt~#3G|7&1#<zqWHE-B8Ts>a_U998mW;Q5^$0Ep~8569&(Gl)HD>&*pZg(Sxsc_HG&)dB<~Ar=Fq10Arbu^pFXr)2dRaK!Umw+GIUY`siFA8cQ}bOF81Z5&udvv)kgpndwLS}d`(Dcx~WqPnXP)h!cPYa_DrpHzZocxiIR-=RkU}*7DbWC+=G>^rb@jCZGBDR+DYoonABaDTRe>v4oF$QialbD7UYDSqu8Ig?%UoXb5R{uMJf8EhYs|z2+&-+gc0bvumYGZ#9L8v{or_FeXMP26;h}BEyT4e#>fvYYzSuO3Tcr}BqwMT&vL|iP9LRquPb$pL!}sS%il#`h19JPa`<Z!nQo-8?V*BRP;nb#VdXTa4i@GI#~w-!J<IJ&nTatc+WJcH;4<wjaiccBOlN?HjomLLMitq~fXlpx+HfJZ*cNSa5%)xyGHh^UNUSW#e+1J#4d4M$u#QUb5K^|G*ps@;C5qq`*J8Z{o!D2*wNDExj0zy^gfMq5r5{0vTT?$Ywnj9z74`>VHg{98=kca{i8QG-OnhNaZK%aw^OlJ6Jz+C>2-8Ap4exgZU!|Ub%xMW_KT_s~n5>z$3d2fj+g8`0?k=KyvDdM6GJ38UA7UNqJchBxo#BifGGhEF@$5vduVNj2KLEBxwY?N;3=Qy#5~_&tPo88xI#ikosl60cLx`!e3L~j2ZTd{k_v+$s;F&&P=Uff6Nh1|7h_%9pz*eM2aJV=fBLKy=+bu+&g<>DM2%8Cub@?4h{22Ip<Nze>$Co|sq(<t6L}ryMOzcq?VQ+Zv5iz3-;A_-&P6SYpIqEJI>#f8ab4#uEq>y-{n8(E$SDr)gX$XjiQ6+OIigw$BlMy~*nUk+nk!*KZlks3*wuperx5Zk9S7MBud!LXC(~xMlp~-#afCmlZ;|h(cw?*BDj=|GJK+P}JWS@8Qcj@%qU7ol9GrVs(-+P$9o6i7?8QVL~-%W8V*Yo_{bpFfVrtvxJ4Y)I>KR-U2zsK&1=U9cMuNF?W*i1R0{^%zifJ`33j)wJrg1_aTH9O@l3Kw&3w5N76VKaxoGbf+8y|LmsFPm=Ea}M||nRCEfnj!uFl1nXHb)d$~)21_C!;L1HH8GtTpR=^%`u2Kkl+*P%m^3=c8Z0-{_26;yQU2!k`uwB(d@f%#+F4%@1rW}4U0TUpS72!NoUh*5eALyKbxj)cP(45OiDG+aWvnj~R&@mHnSZ9NaWG+ui6ODH=}hSTHRF!Q^|LW!U^5<N?4OVS4+Hx*7+CTX18V|j)>CA|PYf(SW*-`_S-<Y_jvJpau>Woj9W)el@n6x(e?hC`vj?S4rC4fyg_C?>Ey8rd6-e_C8g;bta|~^QdEn#Abe}9==G1eQ0c}*{veC?qF#F43Q;m@$4%>G1unAUu=;(!2U8n!vJM37Ni$A>Q)iD4aS}JREs|@@}L8h+`W+Xmks)JZH&17Nv6YjQ8MLP!nZDHnz#@)rw9(Y`sM~ThLK0F1}J2#$#`5ht?;0bSYNMbK#zf9V>uaT>~BgY<N2kepf4PyEfh|kb*_7yOje2U&%qd#V>{PO3=9I<dP=?@Tm-2bm>jQ)>kfbKW?q|s@eZu9pY%;7m-3zK1eIX;O&Z99vf+{({+hbI5l%&i=b&dja!&Fl#7^7-BACpb&VjeIlIJ3nn^{_~GJE~0to@4WRl-{~ZLdft7Wy^p+nw|M|1hwkQ)_juI@zGZ&WZ`j^k|LJ+Rx(U9A`}))0@A9fW?E)-utvfE}{q?t;HEiKtk$BDipDXV0px=~p$3eVn?=1%r4~G7k8+upHVBfXx(|ZW-aTh<@ee!pIx*mVJ9)93Ec6LOcIFNVuk=y&sPwfGB_)b0L&&!VD800LS3Fjf-b3VV|JZ>TN3~zNoZ*d;?Q@z+%oJZJ0GPnFAk>%Xg)A^dmDl`5?E_>&9x$O1g>+`<qR7eh9=HB!(35rke`*U8aFMj8Ju72qU{<$AyUOtIue=UFc8UJ`&lTVz!8$2sJ)^}V<65MdyZn@Xl@&kvvtJm|t@VnnVSLWsOzI!e>H#axl=H<J~qqhDAFO?Oc*E{_D?!9fS`|-Sqro4RnrTV3PFaHKNae!Y=xQUp@*^%uBa=yVqKF#}E98RulS9{8<C-Ij1>+rw9vzmLn?n`^xf76~d`Dl;5(!bX0D;M)O^%Cv#XPiw{zs#d;^kp8U|7PCa1TlP?w~va{RlTqG=?i`($KluZo&QDq&hIz>`e*<6f)g*U)A~xj=M;X@XLWAJwLII=@lKye^lLx$E9;H!3F|Y*4W2eqZ!=ebawyqPOer9a=OS&OX~|NqassLPumhcj6|{!-VAF;r(7CisQ)$wu4XQ3<r~y~{Aa+hMG6%RxGc0*SUZ_)(pyqB$YC_cF94??s8y;r>yzcR<<hK=)-$vcz5LGCm)n-g1^CgNl>cNGthxmiv_F^J7dcqR*2d??o3>RnK43eSN2?P0huyvSe`9kJkVUn9+>m-fE^BU<ZG;Qf8W8!@8yPWt``tvqDtP`D9gP+vkBJ+CfKqTs8Fa6rq)6pIh6<ts>ykr(EGpAYv_^gEPCjRixMv2UwQ|Y4ZPzh+V%0`v_^nKa@t4JXZUz}9tNS_PV_E?wxC5=>Y9bnHV*dHM9ME}*EZ)1%E(;+pt@ObRANG<d8>|YY=g+i1{jpFW=fhqUUIoF1lLj_Lz*q8pxW8@5!;O+^vJQVFsGtl9@W+{pRJrIA0ERJBQD*FgtEjjj~%rj+Qqly(gs##Wg1!>grAm6{u-B9cGv^LXJ%@r7v2SPg00=PclL8ncZu;!w(1)!)=ACTw++<=NK%rI;U#%$vH&9IlT_mtLlP%(E0s*$Mt9JJ7vm}3O&LFVDHLBS4jXOgzqN4RLEPi2oU*H+FUJCpglM!z;4<l>P=$7`mtK36?)AFPnpQPM&)Q3?}9GX9@PpU;I<-S$wi0JoKlG4F|6(9Fi8<RC_hI6TL}DlFA0MxNKiI)Hkc0zkxJjE44VBqZ+-HK9y_Q8t>0G?x_PA(DB!ME$l?Y&{^0gX3)}0E)bCXRmDOBNO+TOci5e(l7#PQ1u!n!OFK3Ro<7>#6CFc)~~_F2L)x-swa5U9|+N8?loGPqD??PFO;$HQKWWL&Nf2G!7a9=2AXeq6k^FuQF<iCG+Xe9m*z+skRm*|7;jd@QWlb%f)q|tTlBl+_Ni={#b!%m`<f93d5lUPc{>t=_TbnHzxAl-rE5s*jjwpJPA`WNzR((p=X9yWlvC}p3uEXKr?68;FC({p4Qg@@9imH(EOB7fB=>Pgn3igtA87SUfLWUmVj=Ca<j&C1m?XZfzhw5si)_9m6;T5kDDr)#aW#gda}!J~(T|0g^Cwb0s<^5*p$kLUtllYJC7B9R>8nOnenl03NU-EC8Y*8fkGX}FDVs&+47G0`m7p%f0oY$;6jDSlPUNtbj8Z3x|Kz5K`BT#ncP463h%B?tEE5yLE-2zOtRam+jc}<Zd%T)CChm_!=Bx_Ky7yxwI<Dw~#ye5!FMWlDtQp>D1uSfPed-h*QScJipoa~teQgL~T%!aJF~*(k(@RBdE_phd)ZtBuxkmO-)0!l(xm-EnUTQ-#C~L%I?#LMHr1ZQb@?s?Rh|FQ0Sc^s!c`YX16^%8G#NVYB8ExelhozX)Z=^;#uWAips6=#7S;P=2ML$GP`dBN1y(O``jTo;z2CR>i3)xv_MX1d0<u4{*FzF<B8;SYzx+m~z9zXie^~4-Isi=gZ7{k}hSz%l=jAAhcYsey-pmbFIeGKFrZNyr$<(L6noqI%wnuzr)QHVxL7)8~v!xCR9)&67bC(QMnL}d?RJgt*TeZv|ehf04!Wi5FiPSh}m+v2_`Sp}t{O!?FZdk-po4Qo93v<|tFEJLb;tVLMtSus@M(sxd)T;ef6OsBZ`5w=j&(+tGi-E+x9lQ@mWpYS5-(^_(qR9`HR3yG_curl-aX|wN~_GgZ$4-UvJ-{UfK=%%Dfe`{oY_<w)l>pjokO)(+bu^_k_o{_z>@Z#xZE^pS?TFky<ZT@cNa%i*P`HmOzEeB*>ZM7r2G782_(`TJocRTU-^J3E2y5oXq$BUNGp<`erb4Fdo-h8Vq`@s?Pr;p8dyb!TBaoc;yUnZO9Z93~IzBThgern6wtXaQCc1Vrza`df}33St@s+qUSV4q&s;rSp>;#U1M`H3vk|KiVVlb`;~#pI`3i%y&MwDeg|%WOKU44&-2qK)z=vWeIgft%atM`b+)C&jwd%IG!9ht?@NdfWLK_WHxuoEmK~KO^we56v#^;~9(T8G64_*7m3jN9E0mk&Rs&`o1<=nV1`|0o4`}ZvMjD9cMo)ow*b|5NEc@N7<XnQEK8I@-;My-O5k)zNx4HFa>mv;y+eX-2z#+>G`v+nDi;nIh?Rj_mfXK4y0dK`jmrpK53bn3!|NLB}IX^GNdLb0)L24*9?~7(asd>Xzal3Uwl^v)GMyHoV3#nZ!`PlWS)!3w`}};4(q+w55MSn@{5|A_-McX`#emy+<@@U2v}CM9<93=^AINf(=U9d|Ao)==k=breybYl_Wx3!DRP{B;=TM}>s#J|JNxmS#pCooq5vY}&xu128ms>`4#Cvd;@xazD1h4cr4saIXOG0P++XEz^6f5ID(2uQ19X*O*r@%m7oU3-m|RiKXVn;vkL7vNpxb}ay0tI;#@-s0ay+)05p4g?bM)zF_G`|0jy6(AaLRLZa{&;m*Ec_#<GsHW_x5y7zKd@a>(NIX@ZaTR^1j>i>hb0u_q7Yx-=8CI597b|!!Tpgz_UK-x!&A&uQB(DcW|qz_LX<gZ)U#4f9B77GiqPv=ZJ3mL7a1A@x438tNLQS5*2oq7Ve7>d>2P4<MKs0rs(6_IA_yb8g#hP{{<WNUA;))-}=G9r}v$Hci(1?Q|I6P{ieMMw(#G6_3X$bFT^21Qpvn0Pj~Umf!t#o>CbU{u@j2kiReit^0VAtd>_g@DK{EJGEd5!hsMQy{U#$3r@SYM?M~%Sc~7`$YWI0h)|GxWW}fQQX~aEk67ACBQqlLcc(5ImP>YAeQPoIHFebHC<D@hAX~U>qW*X|U=DGV*{w!u)9Q0BJ+7VuJ%}v+DR1+C1s$A*=KW!&{e69Pz@ukfco5`%mU#7UJ>u!qmoN_@nsj&NE_0QCFR=s%6jE}>Ump7zf;+&8*WXzA!Y_ZZc^>lICF7nnZ#4}vhdhZ!6>H|DEydl?=GF{j*b=JUl=8&s5+cz8S*!7%x=aj<dR3qXVG(A^4s#D(1TwQfpz54mxm{R_h#7Gr&cupO%)Q+<K>WjQq*gf+-D^W+SZnFj`JodzWwZ>wvV{QGMX_xDE>T7@E{%pSH!E{C28H>poFE$TyEV852KHg8`Lh9_>D2!dU;jQ~aynuT3>ik&RX?+p4&*Ra4t=7G^hs$bFjt}0x>rZNb7VGJ`)QrbyVN|emUh?(UNQK>TzKA^}08bHA_h?PzK4XI|H<K716W4p(HNjtzvwqoF&$(sD<h*83oYqeWtm!dH%@@TCx}&{F06N4(2XO<mlmAex6;ly50q&3XUt;89;9Pp_@*I2I#$IZQx(3RN(dNKB#9`-c8~3l+9U~-uBX>-fYwqLdbo9i2lZfkju_pR}i^}bDBI~g_N|tE**GjU7O^N;5;u&K9N~F;H87tzVKmIg;_(=a~{mHiNBVh_%1FL^Y9)mG4`fIQaM&IqnWQz>N8YHr49L47m$bWy)DV_F$4=hcU>&Y*4O21pK!3KQumv6PnZ+v#uG!A;u8m%{BOxplm|3BKkY)erdZ1;ltpaHeII3z$A6qEpAIAc&y2C332)T`e~&}y{X`uhL(-o2JhDG)-&cYL13FlU*~Fxw5B4hy=j>n2;Dulw3~T=^M|-Iy4!%tl4`G~G&X<LbL{LuIXJ`=t8SHp+$c^|yS0qj%D!1}&I9d(>tR7-rzn&P?`4{1k&#>1gagrLl5GsdbMSvAc(Sh|#`?db6T=Pn5TByt(_uQwpo!&mS;gJ*gk;yvoyk>b^eU83x}_4#kB12E#OZiopr)@avyq#6FZa_MceurQ`euhU($z^OfgVviEs=yFam2iF*Hl5h^`>j(R75Ot09g_x?}p7)wc^`rlnWyr=DOm#1efmyY$=4j#mJJbZsE{~s|}AFxyJ{7U;7kRRXY;d<|BJ15VdfB4(`jq(}4#b~{IzW)6A>*voO^AJ+ZRW{DX`DhQAjOx?p-(js%|4{v1Id}b9e}f_VaNiwI!=BZ5`)W{s_<g?PU3uNTKm3p9y^ZI=eDH@;zs}QqNB@kyg;Iel-(QQJ_@SPE=2b1Jzh|6xe8&Uve4Sj3+Lg&m%&&e||3C7jzAMjC9?H|Q`kv444%?FQF4XbaFG)GeQ4{ErriN@?e8AiVcm8N&GswF(khlzZn}hWA{Xzb<s$a=mJw-S`Q<_tOgX$DxsKgf=CC$-BErbyT@W<5FOtG4(o+z<?uIh<PZIwH;bnEyH2ep=Prr`^`o51+RtFezMrd^Gfz8Wij=$w`?{`3Xgi*fAvRhKwiU7^;jGS2L=U%tCL|Kzr@zYdPOh>JP59dyifQCdqC$}4{=#(GzfdQk2`lt4Si0<W!ge6YES#?!lL7+qW+>Vbw<se-GBvw_p9{Zcbsi!*^E<aJcnx{D*u+JVI5^KH&Sn)}gWPUX{vx1wf$L24J~Fpm)~_kIm}OEb<^U2*P(Z`W;!Ex(LX4f~d$3YdF6xnaJK8mwa&cP=ag#A831<gFFJ55yg{B<xnMk98ZHlT?9KtmYN2W^ZwTFcQij*N$7)EA^biLCoVF-kCM7@LNvx53QVg6R?Xl(TIYB5DR7EG<<+|W^Zez;=(xa^x6q(nu~<vl^-UuW^dCF2DWgVuS-yQim4|mB=3Q0bOAV4_<-gOAibJ7{%N-K`I!?&qQB$2xwA@C%`B-Nlr<u06GVBw4(Vi($StbZ`t7@UX4V?}-M|wN2D@r%ky_!VMoxpsyOA~%MA^CEmcDzmtLrqxrq9Jorz-da5{+{Q4n(JzMgr2^md4;C*Sf$M@9Med*K@?@d#q7h#CV1)gG(?-tU5RFuH@aScG0C?;xGnLV@6mtgmq|cEyb*@5Yrg@l~vb4791POPv>&+OCIEj<&!bdn4HH~lR!JZV<AV8VCrkH-mfb$2{7gLIPRmWhOSyKJ?ew?s*6i8B|W=z>hj?4EIv_d;ObzGCekb-<8R&CWgaYO+j}&&-wh6D+V+-b_K6zzIn7n!0k#!Rm^<d#ahSX+4?fc)Tx*yjEOx0dEfNi049%?LU|JCU@sspL9m~IH+56NtgE%;Fv~23vNVKlcD1N0d!}f(2)}`pD6RGetEW|-y_`3NSPs}oPftfb(XV&m#uGOFEZa)`_a+hknN#^nUI@~+4BAu5(>1Eoiveb->;$Fm)y_|1pu8)0A12Kq&qe7qU>`Xt=$-4>Y1@SeucU(`$RIJx7<<rP2evxyQ7<fEsSKvl|?l09DsV{~UV|D4lqwAZ7BRJ<oDYuR=YyHq}u|WCz{Au3gFz^rO%&YC(M-{pMBh_l2wBv!i8TQWNp4LAJcndf1-KX`}4O;(Wro`2f=1O2oT<337zk#~9E4^5NTdU!OCC!Oa>(W*8B^E?CYF;mSW3S>#UZE;46BYGtV@GShmR%ibWLb>TYWA|;ku?G4HqpTk>#B|rCzA1tDQAkY#%7!fBIO6fPGcW)G6w<$x@$!x<2ybEEC)-Z7`$8%n61Tk?^as|*$#ZTo@rRnd`UTq`CB?3=~uh%`T&|_T`A4Lr#U82h`HI0^!W+3C3&~*-RH6FYy2e$&5&})WD`)Ob!oUYJOuXMAnV^Tz;T;gAhl&otzEqLLm<Zx=q~j8Rfu0K=5v}++SStMVc>D<nPNcN7{@k@+chL>7PJFWe}F5B{nu%z!WP01tb9XUx|NbuEHD4;6wH4P5^=xB9Q7l`AM4gMUEi7}uv{VRkj|=++mNw^tDelsPsAZNuI&hgcJJByBG#pI(v*u#hgIT}b<!v8+n5upAuC6dw~>$^a~%5#*Hb%;6_J%Y*Tj!dus>5xJPSME=K?=p>RpS}V}}~DM)>BtU&Zfac{H#N0^hd{r@>^|$0ll^8&};ND^{O)sLvEku@Wn5XU-BGlD&hB$BBuPAXlSidiF15ZR0^~YkaxZ?LF!H*rI%#9=~Mce^Q4u7c2H>6QAN$D*TkLsUV0yqY1ub)s(drTRUk?fu9?`cKXB$F7rCqte~6tf*~M*4-&te;)=&M*&kvu=JCa3`$ig|a{%)>&EbhPY-G*Rjmh4Nh2s`AcusLEDfVVk+eZpbnD6*z73y>jCn-i0hp?PGi$n=fmytO^_OdTdMYb-<6&U<sN-~F}4<=>cw|l{*>`6h{c|zx>7x?MplKQWqrFB}y<%-`R&#LeuQ&K8dBpBDzpfYXj`BbhDV!lS}=7><!L655@2$K%1%ro}=-qo^MuCwuos9fPxr^@H-Ag<s`Ji(sD<EgE6ZCaah3Q>TuKfzTOU~YdxO>AM7gEti&u`?JhqCb;yO?`y%-l=OZ<!KzpY?<-Mb^}b~Q+l+s5t*a!<T}sh?FhHn&0&XJ4{Mo*Y^SC%KF6aS;JIC+x8y?ZXpxx&srd8fYo}c8RCoM9)J`YZ`#7-QL!l&VRLx}#+{FRiQ$G_$yRN}dyyP0(k+}lNygei#8f<g=oVn43BB!>qOA?45LSZV-aZhBK`Cv0-QE}k><I9%ElXb}ELcuI!DDKJM<hlItTr5^`h{_~5U4&xRr6KstT57k<H*r%R;?Q^-%KU~KlYSZbEx$O3pt!Nx+)C9BW)1U;{$PH~U((fY*)P=n>ukGgGfmOBxh?&QbL$)*)hM18_Eb7Vt=gonXe~_9`E;$G<-hnn%$ZM4-Gi`LQ1@^j4p?Wyv2bj!SY(FWhK7<N^6?C1>nM3qF5b!$M}$-UtWL;r@+s{k?PyIs+aeoVS#mCPD(M#o3Mta!;dur>a13enki(KW=8XCA^u3IR9F~(*`7EEqFYJWnbHIa=I_#V)U9qcj#}<cNk15eKSgr>z@hZ#b(4fI^;~;OT6OctWUd5pdDM^RC5dhSRUFR0a2P@hJs)`+tp4$R#&(0-164^P;P&b7~W8tC=^OZ@VBZV0}?HuirT5}tCVQ$aEBYMwRy?lTMzvO|u2=j4jYQ_9vklV|&UK}|5`cQv4OYYOr{EHt78z<2hUN{-*Cso7sZeeCaAE}gclGPy`I5R`iN2Cth$m&jQ1Di;H@Atj(?k%fdeju#KKAn2OWJAmQDfvS_k}H|XzyV5Q+ppzG*YX@z9>YG1Z7Ys9G!Lf&&fssBrK%tB*BodMzUaLi4g66%sU3JXgW}4A3ChXfi_WLgu@AregK#=vjPb9mFSEja8T#^|AcytkS>hs=x8wIHWqCWWCweP8=K*cV>B)NZi=ETyIhLDqA?F}#Yh7YFI&h-G>lnECR{c<8zRrgAOHVrzn%DXc{&lsNy&)fJDb)iH7w%1yVJxas*&R4wU5Sra{bR>IvifUNB^btHE%DWmcO;?xkatw6>jBrW0HnUm=Pj8cI|uR~<hTN-_$M$*O$3Gn%QN#G=c1LdI0OA~>jNa!{=hd%HC#4#RCzs&wf)VX4qHy%l2*~>`No~qi#N@UTv5ubX>D)SFj7t~^XHTGAR_a1<=LlgA`)FDcbs|B?>WWJxpTMX5ZJs*hUC!qXKk~W{h_}-I!^}<TvHozvMd?(D_@nH16hAAo7{Ta993uYQ_>{hM51I#DheEII&%S7p&%VrKUPjh&gGQ<Q}L(rL{>Z6-g9nPCyZ(;*ZnWX_eszHXf0;Q?wvj7B2GFZZti+h<?Ln)*Q=DXS3&yy&m0wIQyA>(GipDec6FZ&fye8<bo~cz$-CSK*>-L=2=F0cAN+ec)_;`aKNfKN_h187DJF~RwR?(hFi9`mY30vuu~3E^h!nG$TZL99iF-Y3aG#PrknBMNZ*_q$xo&oue8U2#{w@0u6FoX4I?y__*jDuAGrHw{vbZ0)7-DAVFGI|XI?EQ7^O3o8kZ`BIKgbJDC9{EXHRqXQ<f>yN&i;+8O~x)E>w)Dgr@$0|6xaO^q==SdM8KS0{VLD=0D~QW@B=VI={J4=X2;iPEYN))-1&v+80gjC`5MfAL++CuDI2&<I_bDyhrHPOdJc0ve+z~9oC^FVCURWVz(Yv+yPLWs`eV(wyM^4zIU*|y-G=!Hv3MbJ0ha``HhZanP@n_#17<_LuY3F#7dhiRd>i~GU;a4x+<Nl)Lqay0(o^_4kzO0Ff8B2-F9Q9Ck?rjl>O-O5<^G4{PM+}KNo>3g^FX-GgK>=e82e|85fssVc<ipI?rm@1-lsj>XWV_)O@`?^cknqL^qPSqUEmeJ?%cc*&vDOwHwWJHjQ9C?OMRYEXl{_|pS?+b_J{Uk?|qY-R3bMK9b$q)G)Zdll1?axIzFfLISa;%cQK2hSte3e^L^HGPS%q4O*pAYCQ?=KeYNGBYD@EI$#2o@KgQ_5(L0RM59+xxedZ&7$nCiEN%_SyN6y$MagAXh5*V|`0!wmXb@K_i;E%q(-FL^wbmyCTf^kOM#ilngAJqd^;@IajnoD<>isRqMoW*zRpZp4F%*U5)85&O;VdcP{#wd8bx}bA*?6<V8zO*rCuU|eZ>ajk5<g9!=U>!bOKk|j$=S;9Q13MCnu`p;Fv?|b8jhhXa+L%X9SY~6k2OBe8bEMz4WZsud+D}BDa2&glf{47owUM+4%$<Bm)@v&NzZekLu3{gEo^>L6Na*gMlV9K#4LJdZ#m74Kh&+1XChJ{^*M8ZiO6})?I>Wqma`jw`+FW;Q#t|G4y{}0%)Fd^UBVl&%v@W8YM9~G8>lP(G56`PW6}_9in3QQ(rISLU#|LnQd6kwqq4rrHMpG98S|;h3x*<9lMjSk(TGtajHS`pJwr+{41fjOVzPN7GJ#ANa0y`XtlPp9FEYynAnvuhkvMV@GIC1F<IZiG(aW&I)D%(nh)5)$5LW1*8FUUE+5p^p#!DLdJftpY3uolwBnK@i1Ck@|IewDT2_laPe85cWFW$=h%o>b`IwhrmtSdS;An?l=N@8A~K-JJ1RH2KsEK}m6%Fpj3V&+nEV#dN6K7}jB+p6pc1QPB8je^OlX7RTgy723rYm#bx0E0aVh8K)F(PC}yQv8QpTwVEGn?j$%9C|g0jixn89H7w&x>H0p!)i^<~svRVBN!EfOs;Hd-&SJqX^SbDLziT60>!eHVT+59Ble#L%izm=eJ-G5b)JAouV1cZdJM-k?+=%P_BvJ9s(|9jc?7a``c^Y<8r#WriV1_)8Kdi#4Q$mCJz_U-fG$;uW_)jvTh#tF2<ksfM+RJ5=yvw!nrjO4<8p|^1y_=B89k)F)6ZcxGiMxpE#-;77u}!Z##D0!lELurm*J*3l*>-w;7XHYa`b=YjS$vdkusCKKlaLI#BU&1WRUVw`to50l=Nj|E7PN89Z`MTYJlk6qd$#6_jx_N05*f5my-Y0=Kbz&hs_@fOx62aE!FI2DNZqz)iukEUg+{JLe1FI|=a98<=a|*b)BQG-xpzc9u>w4*FPm!Kch)bUeX8qUZia+@vZJxKLrgHf#RS8U$?nhqfpm@Ktq<(nyzUtm{JfQzEYFU#RYHl#^d5PR-pf6y(<XALBuwOURYto^Jq6*iQ(wkd^{TKmklkBq>@eL+S0hNDp>i3+H&Fb7=t+^J5Y^6|7F?lzPG5lvWTYnwP=1MITTnquV_!_oE<89rsY9E65}Dj5*X>@iGYc>T;DY33v5>(IC{m%2zfF17hve^0(VUf{NTvd%75QND-TpHcawOYv^zZLwy9bP9X&h6>cyc|Kb4vEb=P?rFT<|+y-+K&YDyM(d<2T>0HkBz?{8%Wu<^-0~!2SMBJkDMD%GgH>Mlp(a*t#q}2e)8b>6G^ZD@Z46NtiTU;xbIO(+k2K#f@_PozF#ltvh6Gqqb)UA`VSxE?Or9bs73ZnOZleB;swysSyq|Og<->tT(;u+c3NMvwR0DyP~{zSdTTcv4lKGL)-_g3EUmuu0r!ggV49yYL-t>5b@+XF6#3D))}u}D1XoT%3+7qr~~03+h*GVJLZnJf??JWS$lHDJ=+d3cZzoEh`jcZ33!w1bsvWolU*NeV*$3$?xcRp+C7cdvY37%(0CeV8=I@s!+W8wGI$P(NVLNFQBvVj(xIs8hFFBAn1ypu4d*W>gHv$Golg-DI~Fk*OR%|eFn}uuLzGB!L$Qkmob@kUf2fJ<z2W=U9p}96I(6qP{EcU-JHt3;D=$~crwBE%Sg86lxqPIbK8yQ$F5i8_PklFD={y<7ellL@>+e*bls$$S2eH*sTriB#4!q$VTCHomurw1}TJBIBvINIQP+=>s)icdobSY2M-}p!xCaYZ7-2Bod&6e46n~e5V#QKWikq&lD)6N!iTV2fOeZ(nbn?Bb$2gM!NA1ks}ujT${q@0!pAnmVA!Qx8}f0*aPBpTL}rZE0BX6!o8AjN7Y@~KH<qed7NcY3&j9eYc2ddWKANoUT!#!`*@151}Dx!?V8ACPbN(b!`DNagFaFd1L>eSa~z97|g&XA=D%`rxkKtUP;%is!KyM83q5K=)FHsjV-DSYG*oPh5GT7gX2#jN5&FA5*)<9~j`+F<AY~;d=9bbiH6~ncRK1zFU8fF$cyqCVT%sX*VURqDRb(r~PEJ`k8n7%|lGuUCfqpkIjBp?t)_ND&y}Gi&bOCuW?{$EVlhlj~?EWwU6sO<tHEOMdo#UDYY@uXYT(6r%}I;V|Gr5zyAK)UM2l|d&||ztI^Fil`UML5k34PmO)Eo!fh1v1=Z_`GO$fGzo51ex!nh&>#8`6>y*Z5hsO1Mrv@@mqG0xsPMji};6Bq%Gec7g#QgE6&rHK-Lp|1O7j)?sl!l7BY(nJ6z~q@<ehU_HSQU{Ve#A}P=Ak+G>x)iXm)6lx<Ig;pRfcYJ>BOu_J>JRn^Ys=*2E6;NNJ6Vf8<G3#^PTPm@<rh_uQbPV7YDOT><-V4S=@&+Uzc%Ys5X(CO+M3|$Lr?84unhJR-Ni(lXem?pD+F9#6?a1;rTP7Ctwq)n8S5Nv6Yu-0*O9Tn`EyJmk@4a9$e$^_jA$?<(kyj3G&ZtJE}=&b6Hbwzv3cD8yk8|WNVv!Ur)Fq*2FqH1J>SY0J%sg3SY0iB;b4Ud>#8$LF3>vfwk?gjkE8RcEHyjWbk3Hwi~##aCN$_{|Vs5jfXR$Gnv<X!fWneIpE0!S6?5|EnuRTw$B+o%j4r_0rnw3a9Lf;7G}V`RFfgk51+_BWzHQhQ9`rMb$m{1@tSM+D*;;mnF{D^Fl@Q2+%e?NjC^n4oU?W_S&rj`#mU=eI`^qv4)j0t^&Y-l<Cm!}5h>0O2_5_S+_vWPJx~NGn{!SU3R1D;fN|oS;<T00Og=3gXZk8`y-B2i1(8^PB1QgTAewu0l!7o<tuQJz0ay`{``5brMm-H=u^{5R)N`}qu&R_LT8jPB%&nz4Ey%MD%dPkGTHb|}cP8caE7*a{ZgMs^cHzLIlsLKSII%>^&az7K)`t7y<VVR_E`Z7bX*!j9mjhAHIeouX(?~sSi5@Y{=ba?bXCEZbQ53HL{TtZKPA_lra<iG$Kd<ljPTujIyd(89kbQa@oBNX7SM+bH=g5k3y|16_mE~q-R<HEFTHZMtH}TZ!m+xcG!8rAUX63}%#tWJq5mI-aAGAnqS|`=Xv2Bs8HwHKsD`*tzq^z2)o|5wAJ+dXkS~`PI)N3PI`sJu~8>)>$?pORMXuT--^wZGu(lGVZc0<ZqkIM45TP1aXeBJ|FQWyUsw{dI{|NkYojpQ?v;>2#<3L@-DC%ns79>x*HUyXv?^tl7IW9)+}wj7H08dM^gTd#x6^%r^Us<*GJ+QD9~EW^1$&&v+=5n8MkgALjX<?{~7=j}nWrE_RoU6_Lnk*6220j_%C7az{pru@}L10RmX=2Gp9?DK!ODSkZiIE?pBwnvh^Fl$+UQYW>8ejya~CS?4=Q{M7j^813Sx>EMZa+WXBAZq@$yASdz!|_oH_RgE@J4fKOK;ZPA!SaWfOpC<?SXl!<J@wp39+m$^qDMTnwU2T+E_8YM#@4P;UZ62vivP?uOZ%^tf=te;*Xw%^{WV~B%AFK0hMey^{{mSbYjG0=)g;*27fYC(chnvNXr36jXkRw)X|xs25)yk|jir|FvxKZ&$shR{53)8G*}R=E-F<WcG!*H{zvuZFtiQ+kdhOR7&=L0AV&+yRiac<{6~D3}-dU=RZ7q-diAr<j>!1-SSERlQ$td04bQC3#CN|j*t~$z|`-_fp&2#@?@=iv_ZN_9JrlY8Oo~cHzs??{&$w$nc&47dDhIdf$R390&(cy3Qjk`V{{DIM~Vr}9V&#|h$vonk^dOQh6GA`_kbbcjc!(<&Y#CS_Pmb(BgnaJ5R$ACzDrmc`V$~|cpVXCCX9d@6J9jE%keln7CP1>GYItJ|z%1IR$QU}yuFA|Z3q_ZR%_I~ek9a(wtht=4z4>N8JLGR(ta|9$4c_fSiGqly&dkPVe3ums^;zPWx)SLZ49@Z|Hgs4tKd$2*u70f=a_yWVe%`n@A0t!M28zQqEqY!a%fHvt(#tJRgeh)cvWKDcMMH5_ERep3PbB4KN(EihHmfOkl<jz`Qik3(Ad21?V9+@i}0rW-7QKDGM;yK`QKKXFK=g%?zaNMbs6y+OO?wwx}c+;1=jcqkJw=#T`3@tBK2HCrerL!VyOXM7_l_N@q^RvBxUTSdxFKn*OIpiQ~{->XtxfrfkjMNtLxaRz24GpYeO+i!U-x>R*t{gw|eNM6Q%-JpZMfT(j)dRotLyi34{FvhmxQ`pjs2+=Fr^b5-fThCpE^P|^9@5;0XOl^~UiXzN8}yI4uk5_8_snjhJ5Jt8`0qKd5_ija-A8V73Vjd2d}q!RoX38M1jp~*afRQ}g<s8`^12VP7%VAcY8hFxiSCiLfFm+?eUpcs!G?0pX=Ux*$@+E8{~YY+vOxI)>NAZ=Bjddmijo~eLEI+CJ<K)wdwtIC%3^V8Ph!x(xnObBb3o_8ob8iKHqIXBfiTR2l<XPQHf;c;M{ql@mZBOghCMXpPgcbtt0KoEIUe7%kJqIQ)bMEi3Q0MUQ5X{-Mf^!BIV6?jSd(MTouqavg^>zEq{=eIw_T~GgzM8A()RT$^?y^_ko<E;<ZF-RY^r&`Qdgh7)RVtA-G!|aCIqHRL>5aG<jR;!uLcA@ISSv&EjClHiQIB0uiV+5?{s#S{|=t->(`i%-gv1;*T=m@*2<Zd6|BE~8pB>lqqZmCuY9>~tif5v6CIMq8A7pM>!8aTTxCO!%x@paamamUc->0H_Wb$P2Qrbe<yPN>;ItvK&W5y~muc?2uth7LQ~Bmt=vrI?uFrDDiA&_XXM3D9!ZSeEJq|lyCl}KH&X)hccNpBYlX>=rxJ>1*yvKjt*Ug_yR%#grIbi!b<1b@zEV{CXKPk^=b^b5_k%5$%q?7lKTJ_xnXR6PvBKZXVLB_SU>sa}}l5zjWRrY6|u6>99ev6BU`P_F^BImJrJJj`SJnRQ-9X77iVLTXLKCx_Bgg-O2{P5<}LMP*6RY@BUoVJ;pTe?Z-+?_4^aXT2vz2}?U>krql`S2eyPyf4r8Q1}hk>2lFeYXP+{9|kqyX=Zx@7(q2Qqt9<s%uoQTRNU@mMM3#x<b7W*?vXF`zIamk=%>V`c(hjrz;9PbL-P#&!o5y|KIUC$R0iTnmp<&0&I_@Hc#856-o<deIHZv9d3uO-r-i%_qys+Aze18ZP`_x>$3NF9e>X^jv{Z2OOew()WA+Q)^BJY-dg&`hME>7mRYPtaowZGVHIC{G`#N7&~b1(#8zMcg1bGse27i@ipc=jf@zU$zV7q+o3DhHcNddkIQMuepa<n(8^!GXM)hFzW_TIC3gZGczi~Dy?G{&&u~;C`Nvq4xpA(vEgCoB-_o-J~F?RTvuSBbgI=MAEww7)8Uv{*Fr}z-|HNM^W9Af5&xo)v_z+kqkL6#V7W{HlLc59sGPJRA4#86!ZnYp7_7MlTQ0#`y|lkckp=yn$q{c-TO8`I$#)nMNXI*Q}9iHU5T>lTyujK9bd+k)+9bBX1RQdwffbax_46jz;_uC+Z80U)${teH85jjQaJ;<WeP4*4%|dJEq@=)D>8vA~8=%mt#mHXw=2Tw0RvioiIUgUCEeD<dk@SE*0|BDy@7gisC{zC>(WK3U_;32?%idvo2cytI?Ic>Ts=U?F$zH0~toXV7{O{xIYXRYO%=sO=h@$ZRMqQ_uT|NDf}p3x-S2OFgFXVOynj0Pv<F8KXD+2uOL$e-5$;Tzzt6GFWg!-rw;P0XXrlXj!Z)spl_Intu7-^}L95<Mb6D`Qs-Ut4@{wXl*tx${m!UBTpR%$qPx5L2*<-p^)D?dG4%aA|kQlLh2N$U&%K0%@-^3!Sp-1wo`OxrKpmrXwr&&F!^r(sppS;^wGcSu)})JeDUAd!p1WH9p3w0?CssUXfhuIk%yM+vJ5PW6H8>;Wnk8+ug;>2y^E?@n|XY+3ilnjj<@V%;M7v|xXkL;vwgvzPIH=BSNuG>pAPe2!Qv8$?ED^w^%MW|m(0Nyp*7PFt@Cv(XX@!31ynAM?&M;Rd{VxD-Ehw9rjyQx#Fi$0ZhiPf-}9%yATpL$sNyqj>7fnSp0vE#(w@i{ceW$#G49ZO$U*<^KJaj#{Ezp^5BL2&e(=xxl!yDqQU>{c-VFM_nK7W&TYrjuuGPnNC9V>E&i3w`Jd{tm&$K$8*F%iyfDy!%b6<gQt<R-l%^R+DL)hlc<W}Y(seRrPV!;ZZ;hwzm4))JpIA?2TG1yL-fsXkJPO`q9!e0~8@0?VmRHiB?Z(x1wR~pgxHJiwq)BL3f-!tXZIx=W8(7)*G2+l@vry-g9;lJ46riFTwy|?x?KJux~qD>!klsg;TH}Nw*xZiu342~sy7vBqqeje%fHS=Ts%Q#?u;OFu4-^JIAFvsrvmtUi(x|do09>09WFq2t)>5~}p2Mz)Z?(HiN^>_ZM{?rZw9_=u!y~p4`S4{r9cqHR06YWRWePMPfES}+t*(GtRGWgy9idj(Jb6woUtIBuS2R!S~C-JJ7=4#ehv2_cgHV81Z1g^IfemU^SDoLPW#S&ioJjf|;tDdWIWBVr}Kh&DjU@yj<fCc~L2IV9QQ5ftn%CvmzHry%V?AC4|#C*iLS}x=2WY}uA%oH43F#pK8yj^3wN1Pe>dX1vsNLKLLOa$>o)$qjPj6N6gw>b1K&IQD)z@Ty!^99`OEz@ByVB;hE9Bhw+d}R)~d;8(K!B05&AZRT6fJJ)SL(oS=Z8(FCWzgUCzuFy5x|ZbJaT!1)XYbTUD%(t_`N`t-nVu>WJ#~otOEc}<><!UM7yHtpwiOQaA4JFb<WHofktH1Ti|W}b*<XMcil|6L=%u#hrBSKU*gqAxhWx|PRU`jZgr8*n**KcM@RZ3aR3`6;d}uBd88k!eBI$Tz;Kl(ai(!;%Q~LPrYg0}{qLqB89w~mM^}dxhEbb~6t#Gj~EV7=394Own{`H;gfoHM@o)5}JRc!U*W#uamPc7$*d#)F|t>iIWF4X{wA1j9<!p1aLh`e{Co&pQmL>HYFivfqL3V!@_GAe)3YXDl1x)4R}8Ygtc>T-Xy7OQpXA$jE}VCBse*em4kj>RW}-c%GK6Dd6&;uZT&SrjY9a7=~BP~?Nj_rJ(S?Ehi?Eu`P;FO`%3YyJJJ-Id6HgN!p?j}G7Z4R12hT|Cc|I47zjKKNdghxKu6U;WSZ@kw65f31&nzZmPx?A?eK!1jr8Jj-9|d#B3|`-=2br~99*ThDbmqH{M>`Kr^=`&fJ5*3$=_4tnjr_a{KNyt+%gIJSampTfA$G<$9dCuBFd9IIlK__Hcib2IiaSo&y{V}wv6zULm#U-`CQh{m{cRep{`FbO;y#*^&4^70o8T2mxMv!JP)Ak06oa56Kk+)>T|-zU0TfF^+&FD<Q~xj_#7OWk|I(a);bO(uI0Z7coeQ~5FIe}i9aJNQwUGxQq&Fxc578p}DvOMKqqwe8O|1ZCRRSH1A&gJjqLiNP%Fr}@P=W$(;KQM2{!l^N>B>zgK{_HKO>Kvj3z1!>;O(G=G};?&cQePSG?9nP%;calD=X=_9Icv#cqcTYKgI<ov($*1{hNt6R3hoe`?(E$p7+q*zk@3oBw&o4B_6B~(h;E?~x0jDQx*;+ZJ87zM}I<I@Mo*RhfH%dK`*MAXR&;K1Sofm;-oOJSxU@QH)#!I)qMEN(KAY>ecJ-O!KlKa^;q%JSnnQkpIG&#c}t6yySWKXgTORkKa^lAiBWvt0@4Se>!A-{{{*puI<<Txe2i<0o2-eA4aKcDLj_j<xLuK91iXD07v?*_9m{F#FV&dm9)FSy~+OfF{QYlxqDQPwfCxIQcX3j=VR`#1lO`0zW7sHb*Q^L$|T#Cgx&p&sh14z`m)&i@=R&Dkby4Zd>qcfQ!Nm^8k7v~>OWXcK*`JZsp&COZA^SO97>zt;Cj?&2R9u2=uvy^Znezq{s({>@f)i_3%`61vKTl`0Q$l60Lkfz*uULU<lx6@U9-*<SahPo3U!jh`p&EnmaF`C*f*tx94xd1kjC`6u?)V2`H#VfCz?nQfo8Gq6e`&+P7Pwt99yhYf|yn@BBRvh`7Q=len*@*0+s_qiie_sh<L1z`9)X%mtA$+^!SIAk8){6cfdocHoOc|BSB<rA4;DFUDT{pVa72Hv29v+?|II{3A(@ROM0Z*+n`@>ZYwTA%6W-}<RW{uFrg50uh1*G6aYfqmAhzxzq1xvVzB&barn%o)}ak&CHKFlK8z;{qDtR4_SlmC2>HnCIDCJF4Vk&2?jlmn$bPVAG*}CA^2=tRwRIFW<{B;RicCbJ{-k$DJKX`-<%z$sXVMnq}i5XXDZCbtgOh*2%^=i^X$ZsQY@3b=(Jj!aLkXe@0{xqQhC9q!#Nz)+#EcxVO3Z#R&iI{<(N8J1T{Ak+#<u<cekBEQXk4vfo#;mp52{V!@uLO*ad6rjF|PGsSgcU5s<0<^7uIVW}5$c4%*-CJ&K^t-KO<Hs#c5^4U_erWW71NP(+ZM;}YgIoVoWC$OwD70VV@Cka<Cy$W}JW#W|IPh73@(h3VHG#4?nIik}|F*oC}CX&s(uKb|G5g+w#GxL`?PDq^s#OF3{)Kk)wb<lQU9&{!O!OZh{ux=4@707u_{kCrGrLC2#q(;5tWnvHxxhf1x441XP%a2KQ;;@csF8yg;mb*;jF>dQg+L!=cV$E&3cOrM8$m1?6&!sp?8krC0bYfoSPJZQEHkcSI6!q5Lp)Y)BHt_Tz7J+hLL;;Zjg-HS$d!GvRE++D0R$Tr0)N$3I4P9e}0yjx8D^q)~U$L?4*xrL^@>hM*Ao^tQRia{X=zO8`c{%K3yD$ImYe;u<&9@kygQ_}8q3$9@dXW(2ShlmJel(VPcjEUjIJmaNBhey9i}H~!-D9@&bCrCM8yrEJ=C+$2(PYE8iPalF1KFH<nUiLS<+AadOnI9X<ejM;WJLuKq{6NgQcRbNRVWmJP4va16f8suS+;6e#vU@;xThELNtV2){>M=ajK~(W|Bivd7GSy6J42D3N1K!VtqtrMPwAbl=iYApfcrbP)!hBt()l;G#eIYKdl!oZp69Y@ce!SlN@h7BXKF_;msj7@84PmV*L-mKg7U~8adj#&tlPxnOZt1xm!)6X$H4E;ShHJq$M5MpaRgq*4W8JIiP6Q>BB8Sa8n1fc4=cYu_rw07XT_jnT;~Gw7v1bG@-TOp4w@A``;EQ-UvfN!qT7U%+#&17F%QZlJ5cN|<;eCPfy#w!?^&vy#BT*6>WGD*%qZx!>sUmI-Aa>8L379IvPtEwBU`jQ;{`>WJd?OH29(pIP}58)y-+ECxk~vG<wt92lCi%aV}FsH_MDQN+<7+Vp`CK@ByhYv;iT!2jQJ@Y>rCEgZ)0|BBBlSvxZk%id!OF}nf^QO^KX644`ZCjytU89-gqoy=bn?7*#p1u7*+|;x*=Actg1x6yJUx+mPs*1=41`($tpki`p8<8g!a|%w;22^gH8Ftwk3Mm#iST@PIjcSkirlC`s~_AQ(ZasF6^?mYWo%iN6VcXl|BVVM(s#SnK-#<Ey)j8ooRNH2OisEET6Hzzm3~r@2-w*&oqW)eUEwZy?pS{mULgPuKVZTY!dpgU;AoI@w~OE>Nx1m262mP2Kr(-#P>>rpEn=^aDXni*e{Up&0Am4{FdxE$kObk?foL1U@p@!7YeA0$oXrY^q+f$KCjtx-sredez1PwBI!1FG_#1geoEx<%^LK-nC}zXeWG`-Z_W0tplRHTs9X&CH_@}f`&Gs!@;A}2G$wynK9Rq@t-4`;P8oSG8Dp4~eYl-U@5TP7^sA7U#qtGsuYbYu8LjOznxB5d@p;xUH(Z@>;%C2!XT0Yqec+D1$A9<-f0(nnK5uMSzxzk@FpG?hfZ6r%9aqZXjsyGjcfFT#!<yLtW>2BGO}!MMh~bF@{isl_zmLzXzj^-nK4^?F%J2R~l;o54Px%bj2&7|0$S=R?r@zLOuznfibwo73&~~iR`ESREt3BV_NqxR)$NuW?`i8TG$N&R(EtS<7XD)E{XBShB@;0Mu&us9c8JlO92Io87L%)lehsHC-km?q!KL1e<b%;T7<ORj=dBi!v#-FyC>%V)>9Ww8>|Ac3y(E6Cq`bf<{)MZ0|Y@;U^5m{!(xEV^NAKve2c{-KFK#zR!6r4vF{ceAgj?3{Ry<(w5kDt-^fB&P*>%Rw1T=M?Ubg#Sj*Jy0S;#q9OU94n&&A+970AKU_;z;e{*SKXBJGLjw+=AKJ`RjEuHy>h}%5cax^_6Ak(D$SXAd!9kI<H;N%j5Ir_IjSS|I?oT-TnrR^;CiTG{~C9urYhVplbpm3w&Gd;OD&Nn_>*K1z_(N%zw~+8lwi?b4wg9qjK*24)@%|J{+wl9MOSk{K1Dz`>!1Nk?-q;<%jj(x{G0Tp4Vd}o7<9!$-0}2&VN(Rx9iwJ8?Vn#-;b>i&kB+56qx^Q`%yU)j4}7=JopE06M4Yv(4WUH8u#n|znAMx;QwIW-oH1wPyC1bp7uAn|L6bcejWIM>R;P&wEw{J-}@her+YFPZ=?MIM96c9><bS1XdVUJvzRW{J|j8d3GSOa9s0fcHgD<ptcs(3gkJag-`9<7Zt}n}E>|-j-NjTgEI&2VV70cdN4Ju_YWAY4ogTn?X<yLZt!7c?Q~oh~(1Y#0<MMch_&CnAn8?$0gd4Gs-D)covF}dI&vfD?AVgiRQ4TNcCm}k-`5w8!jQm!YsaC(l*sQY&KIFPR_|zz#odCHwq&Z3Ed-gWidSETmIER{I7iZ0JlWX{xL6PPz?c%^=d3>IBwA~QIUcI2-N7sKQK!8;Y#dA8@Bq|1!UqGXIPoyqf%27KLPx-=jsW5AjAm_6tOaMpk&AYTEIv*CjB<yI;NE-*@F%Buu>J>M#gcG7`G$}7$BAWjm%*c1dCHCIUh593I#7!pH=QzM0iAHhQOOBLdr4+A<=GGtgAyTpCU~FM1hOR$TJwD%fs;D>^nI88mQFYwM8fh0Sb}?zsT!WWnvP$F$sb3R+5<S0*b+i|X)2%N1IH=o1_Y#FS>y+G^gmLX@;*LGDHN&Cq==RPVa?K@&;$c)TK*j`E=lh80P~{D`nZ1)HPQnTJ%!Ha7FrxF@bEl)fXF_RiQu6+!JTBGnmd24~0_O6NVP}!HwYzoWcXD{+vW<@vOF9l0iK5%Ptig3k`tsVI_N^U5p{z-r_c`^UQT^=GA7X98yc=CVr*-|hmg;?hD3CT}IG^NQF7n`B{R<~<y$LyZ#+<lAuslmFR%=i9{tKXX36>MUc{^S(!w6`U&$8ssz%!+wKAjO2KJ{a-Qa)R<h~+aWbIQpFSkK7!Q`B%MYTjheh1*}zTs~Xi=on_+8|t331gTo_eHC*~6*n++Wp@$jvdpg0@?yV;dW}r%nv`kteHL*J`&2YveAmC2N{0mgl<hf`?cYG^!HeR{ie3Q_IPn{+&vDA?D*!LgR83S>?L`W@(@UwpOMr9L^9M+N>hIP1Ea_<JzdHbYBA|X2pcnLw0beWq;(_xjlBJiGGObpvv~vt^<!OpL1@EuchjWqqv|61(y3(yG<6s<~(ND+bTcp9(m*IP)p4w17e<Jen)U!Zyhkfms`HNg7AIo1%fh~}CEGIv}MkGCREEa0?`g803h*H~H%#Veq#o5ow`(YxZ1`~;^-lU7CcwVNS-`H<7XaB})%1eDMfMU&`iZ>3C&#5?U)i%=5&rowOh<rTFeKFi);pk?0;*eDAm1dtMs!0Csx2hhgKqw@J+Y06fpq1WHb*y~}XkOPgd?}RNS}pRzH|RTb()D*C+St}=E|TAE^1De5zYI66<eWpfhZj%2=#e5#Le<?M)m`t&Gtm5~T60!*Z}TU$<&fIGk^WHKccjQ~hO?FyicyIT)Z#E7{QY)rCH8y2`_Qys=E2$Zny#2fY3Al?;zs3yl;!TYAEq}e7o<J*6Z!D*rfcsuDe^<oF6bz|t&Eb4ufCmtX}OoRG~SomjuT8TI<5Ztn@nSswD<hIS3Xqj7dT2E&QQj?@Ywzj&!=OS?~4uR6dT?t%IWyKRFo6x)vc5yTy^RX>hI+G*Q(Q&d-Lt}<IVl$&3Esfx%)7zylBi9u-i(hFUzY)D?e6BRM|V}=iT4)?Z@7j7Igl!6UhlGJ@o<jRo!Ayf6pO6=TJxHP{*CJ_cxe^3tvIx<1PG!FRQBpNZqqo<Utk~>})@%_!t)TTCS&yusE$1JY9x`xK`m5G5g!--#0dy2mZHb*voge75o^Z{G8YJF2?l2{BQrOdfj0;tADSTno18?Mo(-*7PBeb*$Kg6{62C2zpbbLq@FDIZ2Ua;sX>{=2#>!1dp`ezzv12wGQRKM-=`SsL}MFyMP)$0H&+sV)*p_}WJ>oBjN%dh7ohj+X<`2_>sS51tsgS}i20L8xzoXER27*U)gOJsqxhURIXI1Of=2M{I=_52zd#D_u6t^;akZyhrU!p~9emDt`qb9-+XhH&8~-~@mVe`y9LHdD=;6BMX#5`){;(dEPru*Izo(kHHr0ajX#72i>2&|B=ju5>;=l1-X1#q>G|o(&S!(`w%>L}p=ZyU#ocRqu=21~!w-4w2=k@oW)*tSk)c-%%VKw^mIse9^nf2yT7Pz_BV^0g2jgfu#`~0Z>Lo99NF|3c|&L$~MDUaqw;twO+1xOeF8Q;U!f#>|1!+BD#dn|3*zk%W~y&O9}JEji5(y_0N#~EGxgY#%kL0`M;NB?ym$kw%-KgvrN<9+(M?a#HI&(pj0!G3bty$>}1fAL&l^lj|#GXlN%B?ao@&vxe?#{b{3^~UW>7lj8*Jw*2fh4&p>GCjTAQy7suc_)=d>#UYZ|MDEYe|!$z3;~w0KgZ4yE6}&GGh@%iNabW~ZL|Ws$=}N<_#UH??ytUyoes;qZ()bWO6?<C$~^=8_j^!Vj^WQ<4E1CO8mjW3RAXrCejQ)d!D$=Ayhjy3^8$EU<9%=Kcz}-k!c+MOH3%n4UAbz$!;LvZni=AWso8ohL|*<9@i@sf<O^G1B}Dg)wb|YeP=zKSh}(J<wIH<BI9!Kuxo*1)_B*1l?|V<fQKF$aQJ1Q`%0pb|Gp8|kn6tIKtw`BmmUHI8QtTw<%PP^LK2cAGA4FoR@X9UsWv-sAK;tVXC|Be?^t6r_Yroq%b*`hfoUH@(Lb>shi|Ge-8D)MAaxH&x)sr4*xI#g>iy_iu7(44A-$s0PK{cE$1Grp!P{smZM}mFy)mY8dQ-W&p932a5%AM%rOD^PYtae9-kM%XKt(b@EiU{nvxHnuJYaTS?tVN{lYk-=g>?^q*SDlx5<V`PSlR>+&gKUxtG4F?w80>g?y#v-7mrblwPCaLeCUua6brsclm{g=K{j!YO+IDJqj5X7?s-90hY38X%<aoTh!sUww3vL}ikY4c74Jcn{x6P~LHuH1j2bqZTeH3WNSx`Z|R%1JBYUosD=QZYs)!NfkJ6_gXU?MISg2vVYjNcO;9dbXfeWAppo!^nqn^6Vrl~+*i#eEEmbE=gZwF}x@e!*Vd+JU*X+JZ|+uLis9vR1n`)ndwxxv+Ihv?lv04*j!J#~^8O<?sdPHphM$AlcRO_q55ASgmyr$H976R%_MPou;0|b#)FPTKa8g1vLsupG{XD84nt=t!B1&THw(!o?wjP3D`P2GG^7fjRU)KH8IF1wH-}>?oLW8)!)fDs$CRDybXbao0F1r#t92C${?PswS4YiGa^sX>>8JT#bdvQ`<PoKq+c7<!sQajCiaa}=9`sUl_*mHpQ<w_BjXV_*p7vKM&?LmUCd9)Z<-1YkAxbhLjD%*s&l$?NK2c$EZ}#zMelY?+9lYNcZ}VnvMYqkg}cLj+@RW3&G#V4_*jK{j3a(smzCq&J{=FJt`p3Ohb**R(r@7!LU|R?dLFwZM6y#A7p##T6~jwRW}{VOWl37fBIDHOJAgv<OzY|G435nEp3H3r@is<69!8aVc0FXq9Hd;9A+E&tWLwGC{EFqe;C;WUiEs@ZgiX^Uiut;zia3~6*_mO8zAV)`LKoAugkl<daYWkkn0qB@yXfLpr$bVArd8#KK<_TGdeki(C+k2o$#~Li9|@U&j%%Oe(2hR|+miCdz9rhMPaEW-iH*rPtD~KDjy+VyLbuB}Qg)Ni^2W9ikEcO!LVw0Yuyvlv^8=@g^h4?%<5L|PDDe%a(H#cK9X6BS+jlYL54oc1oqp$4`l4r;ubOw<8<daJs^cWNl$00qWHoqC<A`Y6koVcI{MaY!1+sP~SnGA4!rHYO^O9=$Io8QqqZE_)67MX5n~-t%VKuN0RFSN0Kna>M%GJ7Gg>M~b=Paf_tA;#;f%A3Fbe9{y5tyLQR5)=-NO8vJLw?E)2VuhUeB)d_x|yy{Xx#e8fUz^D_R}ahZQ@4!$VcCE4Nr6Znh$QsH_n+CSveh|fZxWN`eR+5HX(O<_x!pK{F%GhotVuz)vX`&@2~4<N9Z=&_<oQoy{m4o9i%rN)+MKz2ad0g)CuJ{=8$uz?&VNoag{)-ImQo=I_8OSbm^Jw3><fs#5)S(FLP{t;JE7*S7JPNN7rG|-UqjEzj8MI99!J)v2~&`b<z(xejHnOW5<`F^T^>1p33mOF}6)8clikqvi4)_GdRD3@9F`tW70T)r#21h?|1Bb>>&yH)ES1Qn8rq`i{A95^Vn9<|M48s#wI2*nXFXGqK7NVeI0O}<yY_@&o`Hj@ky?i|Lr;&quDJf7jLfdF5ZE6SKm8y-$G<hqx+W2<viJsL<^!93&P6U!D$qND)5T4rQ7p(5?4-@pO!?ra2nf5JrLyDY#I?I-BYK$rOgtbFLy4PWC`^TkXL_muKd%wdBvZyuYA;d?aEJmA@fLP*ps(;Snh}K;q9I<0hRrk>iC$p<GDxU`3+ju%4x{DEaYc~`K%5cv*dlRJefv9>mn3ln+j+{xj$ko?o!I7+O85M$UkE!9%(FeIHBCxUZP9@DGSxngkl=chWTpm)nVQmF2kKK83z6tI;;-Mu|F;p;?J~27beQeW5>xYUd{+;8UH-T3pU3++8)CkPdL0N-p<OqA2shzG6}t?P3gRyOSK^n{G4We<>!>+fp<@k+CAg{b0m8q{bcb~O6V|7!Zp!I)YkzA9)Xog(=S}cF{oe<tmw6o8cK}gasxC=9rz7y9EGpyhOG$z0h~b^I!&bh7Hmj4P=#?Ho`(Ah#vPIr_ycU%eQ;BR^ga#Ljz-H2op=Z6I;C-1E~WIoHxT;6xdI7*=25GX;W;~6mtUZLW#=3zw*lk)bo8j$&@$h_WUtfIz;z%00+eS^-)kF*opZ@rW6*P?Oe`~=NKVBC9i2o+(Itbv1JN%enZARzHyo*@bqRo~n!~z?WSPE$f)sXynHf4QjbjPrfHP^?xUY}wewqJZ*T|<&Ir_qY_!H-orHtKp2k2p{KgOQk@1YLFQvPimBH62F692HiK}RF^`4YC|rQ>``wWIu@qu)PAVb|A|vUIFZ$$tf8L@}M5tXu!_d}k(YUjfSn@n>g^&KHWi#^(KvV|kdPS$SZ;>C){Qj(zWjYu5A{ig);Nch4)k#$dd62IB<CwnNz}!`wD@?6(2`p!k}LxBRg(qSwCYaO@j5K2{p#bccuRGNpf)X<$~7H>2QhQuf09?bAY%4~S?3AF?NfN6@Bu-fnV8J}SRqoR_MM2JTIb<`~m)6G>*v_F-*Gh6FnYCGMcm@j~`!i}8Uf*p_}W-B*nYHs_qte!LwxLn|fk+1!<Y`pS4gX|x5KyXvdr5A(4FTE))U!N5yvYX^4R^az4YM!8&7?6CRy6F{GFpe}I4I8YZbgT*bcQLeJT@^rA+18`=zAvauu4`=W*^Wx?U*S!`u6h}2{i0&5VpDaG%cCKBN?7k~sl=6iiKie=LxwwaE0N>KdA^`#4rHx2)S&kI1ikurb|9IRH{WSEIMFQbN97Jf>L`Ea)bIE190S|7)a1n>N9-#zY;PbM_oi?s2V!z5Q2ism&510$Z@V-~9%K;D39<b%-q)f6;U@i(w%F}#cdlp(GYMYm2zc`b6pA%lJlF(*6k1^T%h&)KS1S_F9_F03QBrI=xj6vJvwhyVz5Oa|WA}xdF%iXS9WqM6?OYtKl8sY8TgreptKlo@Lo8?+b+rA_F(I%tu4dfY_ZnxnCl$3u<8|KJnm^acemsrfAu^r~uFqhykzwmIK#kjE4D<1aO_NJ08`}Vobua6<7d`jglb;@D`j&yBV{hZP~UPTT=MQ+I=I&i<@+<L=D5QTYWg-4ZqP@B?msuh6DCAz-uC4b<tb$hdtKFK-tASV*#BL)kpDF%*PCeyNhBl-*DfbPf~9Oe+wOQfH}eWA1(?yLJ7C+`P4r};`YoU5gYq)=?$9rc?6h6$f(-Xhez6lq?<t!*GhM{5#^piXitPAEsvamas~i|TSd1=<7{@BGR5<dE@sly=TC`1CC8;-szOsjVitV!yV<Y`qlK_43!rAiL2gcRBT9LH9OOlaBD5v%IKY_9ce(y7322XL=N*0Vh}9g`afZmr`TNg}Td7{WC<(3XzW=YnPt+?!tk;ICkJnV*6>Kcm;dcUs5FvZ6pz$g0)cw0*9T`C0r@AJ|V^Tn)T6Me)lwY;#;cjYCg3Hk~S6&3MV<i1Vn2Nh=4oAGJlFq4#nn0UWIP`j>so;8wI%(PrnJns9hlPA;%p#?)-H-nXtO}2YJ}P;ez$EegMNelXF;Q?*Ms&yywphy1zo`EfDnP+|rg_)1!4sMRZ!zeV5#aoyEWpedSSubw=*{m8nFW)pnkzdV%B~d!!p+J^@m|pQLvVN$-U^!c&qD7fwL|cRq$xzhdioPx-7V$I~8o#bQ{i>w>NI0mWUU+|Q6E8>}2z-WtlR2=-**z2zWJfS+?<W^gBLZq+o?w?rG`bx*J7ruV~nw?v7<N9!GnD2|xSWYKv*-zA~ADr_D|rZaHDsj}O%v2I9JPx_(QZ>1j*e3QZvZd7OG(iz)UhjSE$Y%fuPGvwMuL~xVIea%)P!txJ^T&o)9zOXC(C&g27A#I;qoDSu`vYpz_rOJK>9Y==XNm;4ugZ;{Jw$CB#^Dy7AcA_{XtepxFvbib+p)@z-<8)=@g|FMHZ>3<xA*5`5Z!M!mrkv)^GCKa)I$oiIPo&DJGxx|*`Ix4n>UdG1l5rN*!WzZ1{Id#vRMAWRu@8QEa2H6P*ss(`oNUAOYBQ~Ww))Of&RfZ~3mqN}-6Z`@gv<ol7D7>>eZ?P%Q8?fDvIO`!FnW!5ig+Sb?(XzqYGRZxerELCr%XA{=`p%qQ*axR=p;IkfnO<h3ptWC1CuqQC%WR&c$(us&O3Al?Ct*nKIn7q=li&Zd#<K?-Flq&Ye~?Pb~L~5F>c_Qm+`y&!oT1a7tdm&@ABEvvx^?y<34|Sl$Z5zoq89`ygNt{nhqRL&vQqfbH0vj3Rf(A?v}Te5}g8k=O@3fm-g5CLrcG6Fep0B$vZm|#g-ZS$0@c99Aeua>N$#Y&@K5lj;LQf!87e->L-EmD$vbkBAmGBf;x18A4KO*yq$T(73NWZR!(4v@s2yaIeG#FBKri0%4*a`HwjeJ%>=&mH0=9AZmlqWk=568Qsd7+;b-fjTzO6RnR1+%=zGIcA&M{j%PN?iS!3$^y<daKuDZqA!`s-iOV^8At9DLS+bum|PvbkIyz1<=pC=gS0`-ezNwpA)n9rKiAqj|#I5F!i#C1kvYx&=Q%Pq6jRgTZMQBdEwN38*WBA=#e>0{1pg@VSmG9IRnj7f;#%qFL9#sd}w%Q@`8ajy{h?IaZTnR1%~?L=hLkhIIJ&Y8SM<<)qM-*o|FnduJKCiaNzW@lAF?H>#iDtjHkE~J$t%LP^?np16vAKTzpsBAs5P`Xv{-tRfpuDMIs@LI`nO3ic9wBn?hu$5MsQo5^jUw`mD`OTSDd${tHZDUAcu~PTqbQ^9L>tnVuY;|SKorsh7uiRM`x&HOXR`M9vkbATi`isPI#i11dSGN3H9K7|$0la&2<>Kj{V0!yff0d?J+ze?!)XaFRh7l}3!ej>D|4(&a*50Phh5LhgQNTmvi*vyw1{-XIkbpY|2W-HQ*a?_le<YE#c3OAu{hh1RK7I%wG;2vqde^%;_0VoF&cVGn#Qjky0*sc2;JK%zbM(2g{kCKHl@I={z*8o!uTmBIl_q+n_U${Bj~=aq=Wd+HVQtl_97}er#uV7qvDC^r$xn_?uLpX~<bdBF6n6cchhsX2obYGK#Lvv_Hg89mf6HZa_wTP9f_Hn7_qK6&_SH8SeNAS3?u?h=Kgj*R@H6~or*7>Y#dCw1_w~ni;`ikk|H#w)_SILz?cOW)tRHl(v7gqe|5`qRKg!1sTP&CA$lSMGGuN4%RMh_>C!_x?Cl!IqNsVarHX#F!M1=|_u=P$LNk+TD$6O2y=z2(BC7L+P=se2y7pQ!UiSGJP66eT_18n5G9V(f8l#&X(LnK_8e8f%Lr=zukGb#&@d6WrV&17MK+=Wk8Cxjt!j(D3H-8?q(2nn6K$6b=*tPilf!Xd5Wf}dxokL6AG9EvvFlDLM|YMWJj&vnOT&W{P~&1H`F|AWlwsmw8Cv}4q+ROSTXBvT^A`QK!U^~z+5JY8R@EMYz#M0y4E`kl%YdhY;*U4NG;(-@n$WExhVA2Q{ZL*kAf>u&7)g`W?5G8;R&JlSDAG{O9Gexm+u?C90gGxk3GhyH~V=plCX?p$TES4|6@mG{>E7k#<^3m5#|T1aPhiFX)9y0+R(Ya&2~+x^Ke=RJRvO;kg|ciixgv7xtqHhXZ#-}<F~?LXG9`lQ_FFVMAuVK496<7<Af?9Cb0a=bl5{hEHz4_IN?u3i}L{DabP;E&iYDhnUy{}yA2G|}<4p8dD*@IQw4A7k+DFwg-zr&81>GcDru)~@<XeE4<^uhb3+hHN2AbCb({(Yn)DZvWlX2gh7yR*luaVDiXtQz*?-w{#A%`12dx1vv4S{3VaedyAoE`5veYs{pgRZ*X9JiD!S)Pd<E?aQ@EnCcjw0ES@KBAC6|L-^yd%lxO1M18?#d&M0!d<-5CGGjv$J;SY^)!TRy~FLDAY$J_5OcbHFdz2%ZQ-z<C-tlnU|Z{?u|?y!qkt(_8kI`cE821AVL`|e9TxAw93^?$V<Vll0o?}DqhP*{EDPprJ=zp}%g>;}twUmBdN<5`~kQr%!U|Aw(={*!-3QE=+qPkzw;5#K1ctGt!3Zwmbm_P}LiEI;{_eY|Ds3rM;{I`dX8)4wG5#WhytF0ko3WT0ydd4-S&KDd0A8L(f75x0BNEl9PBe8El}6O>z!hudH!lBynkeX-6peTbUH1&zTh1N9-0#9buSr<}l&Xt9c<g+cExaTO<t6epy1U9SNW2Hi`7Ts5kJ6%+bjSV$R&4+NB+S1raw>>v&n6~ggLAS|G-iOCKr*NUGtw1qFMI=8YlVhk_^vE!e>&J*1YCQo7-l${@3v`kvrJ9J6}ko8yy7Vrp&k8?As;&LD2Bm=JKHD$ZSm6Q@^5g(ZiB-WhDZXDxsh|P+=FNWA~RVdn(Yt}OoDq&XJuc=wvxlnFX&6Q#az7sRIeUe{s&{<A1Y_JJSug(un7|#-7U*N1Hq$(9$b=Z?GdOU+is$Ylj<i6wtNKPFanKTzjQ=>$%`&`J62|KT^v#U$M5)0M>A~25x{fbWI#l;=N2l=UHi!sf+BZ)q2iWx1NnV2O`^*r$_*Y{4<HJ5;eg%t>xuTKG+zA-FvQCS`gsKK$C)8|5L+Gfy{Zz(A4tjgWJ0bBZ0p@4~d>Rw~L(@15js9MFDm<g$lsh$kaa0W?k;unJAFlN4Uk08Oo-O+kQSZrrl80K5jkA!s5USBx0t?Wd|lP#_<D5#gPu2s6mwJ-{<bWM$DT*p|*!@ZH8W6`#pup~(DUXUK2{86lSVZB`YN|#*~Au)nm-@%J?78Frv*OuXm*~zZc6Fl#I<(iYlTS6A6{XynFmvf`6@B9>#m1voHml}OR!;QHC&Z*h99*fJY-*aCX^Iw0@BC-%H6TVvpKbM(hO)bPeOCMh?v$ZXg*^}ZjlY;M3QHGwF&2c3zlhEeMP1bSF(4`9Cm?CdZ7xHuIsNe+IL893bYM{OkOEnVRfSf>xP7GsM$0;stRF`L@*RL=*iztl6Sc9fp$Nv5pGpwtJYq)lUSiwf8If6Aq0t{RY9D)iP`x=LP<n+-fw%M7Db1ex#ydVIxaZ2@>?gE2IO2#<BqHB1xuM)$O_F=5<gM~=Q5F#>c^02PrDz|WT5#zcRun>uf(S_uM5fbb&5X*$t?t-=97E}^3mF=E>i_HyY<)^YJfQ=Y#O?l<b+S-%ATO{E#t+UEvcDysYjE!K8niXy1`YpaH@2s8kncd|ktW%B=yIc}l`ebDKl_xlK96P4c$G|onfVVqb8*2}KV7lyyTk`VZ!^2pxbFo8etd0q@)m^m~7L_o^v9>?yjE`^kaZdM~HJI7p3K1F3`-9@7IJW##XP_GTG~a42tRk#u!yecPtQ8Drb>iqxD-^cdpuuP6H=6d1EyI-1K1=mSFmsO8A{{})>U-Y|ernpsNU9_+u;<%AJTm<eB5}88n4Km+?5J#pjMwin=jUl6Ka*VZNi}OZGhPA=TcmZv%Jq_mu8@$pizL8pkJs=y(aECD!KzAU`5P^F8G}_r$6K8ppFYmZ<u7|&T4J1(_l&kjDA6%S>x0=))3NiMn|4X-<`5D0HLE}T2oYxUjOU-eFi1dKaI8Ph@7H`|C98X$|JN!1e36yCa{ODO&py(c0WqQRhLTukGq;STFfk-NkBKYh25k?crunJgn7wss4D4K!wjnsh`6rhwZ4W@@^QF~N0_Is=@%UwFVEu;b&Z|BT6>e{yN&{^lc)d(#+-_EJ-RKJWxu|VU=bh8Jv?5WNQcwGO>WRu9@Y6>6`Zks4$5ft)bMAfO0C2O<K7dzmybr9}HS_r%hc5FaIx-G4md}vo@8ockgj?T7_qu!e9FFxV7KUriWC>08#QcDnyO8}|$jrA;1+-PqbnArb)aU=EQ`hEP@uGj+yVIY0wQzvJxcYNB*>wHvG)nO<DFR_QzX^)<evqFTfWtQyB^IE5DD+o>pCNUy{X82K2A~OwLYrQvqm`pUimYH~SaO*0vn<)qWrlN*VeaiR9g-knTDGdZOuhv2*Xe4X`5Bl3F7l;^ATGj2K6zH~>VfJV>A}p?`FS6Sz@o4P6)1wj)7NSGfTb@erQ9pevYHh!eTV3~fWE`*T{R?`9{2NBe?`XiTkqt0?51#dSB~=f;w(_Ez~G|Kf)&L0^6OkJ_&is`9zUxig?*UtAC3yW-E@vuMI8Tu3t)0=heFkY@A6KS=i5S01-e+>0vlR_BEAa)>;==Fvk?z_dn3QIv9oaGRx##syJfc9r~WNg7iah2NzBjXMz>+q7_SKU&3Su~1NUNW+)MA6E4lDpm_{q5N-u7jGEA5$D8Dc((>d|82jVHunVR(c-BLb1sqBnP3uH}_dnn0*UmJ&LPx}b14|h%Dx0l7b*O9O3r$|%GNQ3JjacOk9Lp&PByY$&68D4~;UmWz=UK_^9^j||0(FqNybOr0=ZYQs2N}HdIZDlQ$C0$Bfg`piQ`8m^-W%QgXZ#{TsokTzvC5v38W#_)RtBB9+?A5dsZz@kK2iA06>e+BQFSXQs!ou3}X~GmB*$sFbFl^j(mg>lotg*7{MAx3+Syub+y-8Qy>O6Of;0hQ|9r8YXby;leS=Nik+h~KIcpch?JmG%|`^d4jG8Iaf-qJXaH2voLd#}m*G@hc~{C0BqI-#ia*w+eL!+qxao_y7cweRcN)w8e<d+kaW`uyJaEFa0*U;WHaJo&%-ng5^mxbL_@l|S!;+}fzIv)?bi1|OxXT6cTWk2zGo_>n&Tao^{6ALvr1fB2U<&~>Pr0x0eYtch8l&?s7rhtvs5Gi6-Epmyjgcfiu1&^0K`G?CDCMF0<#@rhSbP30Vgko$=K<hlMhTcYcEw!XlER9sGR2-|e#3Mt1x{m~zk6^bj}(FGyJ;F@r3X~i)!!6&CV=eWKq&u(U#7u__wVJ@fz9T!hO#6EixyzFUE($K>@pZ<`C!_Xrdq`x2{Cyt9`_!-tGqXHNce#TN@&v6y19AxT0@#)|Ci{cJ%e)Hvaf3|$vzk=dXWAgpYx36c`k8Sb)=Bx6a`}#lkivwMUOBcG1b|GEkU15_g5LO^=gx)&_B0OP?rEI<<^A$X`UQ|(iiVS5=R#lG6V?3h@QVr?aGyddpp0H!5i1&?e(>kl+Ym1Nm^1J^7+OP2H*(a{;2j_wItydO)#^-v6?>$U@5Wai5wn56c6|&cSc@AHFMKJZ~DL?mQ3}HQk^cRFp>cz7Y3Qw<8-+YJk_mvm@Yc1aTisLr!UwIhr?9;suo`HY1lb!1NZV%>>kC>+~WBh^r>%>F<(07f+()-Cx8-Ds`vwe_<L2Zrj0|%Hj{H*4h^nC4CJo4?p&uay7mIH{gX3o5F)cow^T20mFK5f9fePTQrzi>B&rCmOKwY>x+&eICNb1a!6Ux9!67ychcmeybVKm4&y{?Yck(!Tn~d0_MT*~ZEr+gLeldih}+{3)LMvp9}9Q5fdrc3j{4$Y$~1^26O>KiEFl?HT8v`xGM?{5SsF0PlO~kKw3%L$n-_m3R1ay?yYpzJJ|+e=sJv?eFcr_Z_bsYscZwHo1&H(EQtXxApaPOn~#P`SX|kOd9W>+ZnM<$q##$oA2+>gn9fd{ae1#TR$sz`_AoB{`4z#{d0YO#z*z}E#`imSz1ch6dWs#GS26xOmn6=$;waP-aq}TvGM#qh5PVLG+~%uCrs~>KU+_n$?wxMG|6Rs@_l=rd{|6#`-D3l0m$?xAvj_>hflsOvV-%x|8Tcm)4Bb!)$I!wo+NDA1IyzNF3-2Z)L=}We>3+jSl-Ew4#u_k1_|RH=e~*DA9SAI&*Zaz92<L^7mm)bY->fJdKT69(oB`Vc}m;wW^&;iz}8Xoegmwh9|y#I8YR1ZR5SmO;bHa?Vb|JOd5?^RvuqXQ>(?*?S0jA3!P87Bij((R8R|OI+&;28!C6rKuny8nSA49zc{?z_@b5JG9ew5ni@<)O>jPa)nZD<M_WX3x-jRAuGfmmL{xg$j{pn+UvGfhNB^p*^vJfIsxsWO*$*fGMd{$s1&M*OsK(xd}1hY6;kW`pUnN}Y5xQx6yAA`Dk!C_ZzL2L$+i;@v9lLj2zqrGvoXoY62hZ-@+1u=3$>?S8VcZU%>V=oXW3DFk~tV+B!hL#*_BLTrIL0HYJR>YyJrAP^P#9prT;SE>aHVfi2P45grcVYWIj#0mOl?WmBBnK($0OJKRa+r^zw8IMht{*T4TNlSWjPwCv+YHPu$VBYnlZ!l|Zm9Bj_H`T~&4v4;*zQ8i(nB~bw=Rel7+C`Z_9f8WfNGdEKIMo6wFjwS2r4Wf0APT`az|E6T_1dm<V8|bHOi#Q-%(6<p}jQp;T4l=0WrirE@?SCjoG<7gzZ;(tN1e2M;cfnX)p-{T2}`4BJ2rCP^vDb^JV1{zpASo>=Ih8Ic=LHtKD-zN*s^i9aa~DMtQMC0PV3e?n7IRa6SYlNMgMXbK`qr==}oMxk}ea@4-=7IJzBSA@{vH8hla<*{oe9CKNK$S#GYYSw73&GP52NBKE04OHQgcx*j@hB>c9K28OdAbM@)?bKjQl7mEEpbh|WE&N0cwgg9S$hi>pc4m(BpC%-Qm_r-U&Hhsvta=7Q-<#@n{y40O5qxwa+x|e}09$S9!kNI%ApF3~;AA9QkTp8$p!4KW}&<)B5!T#W9LVvU-|FbXEDIbqHzVGIgpnOQ#^K0(noY3$wH}_qAa%{#ef74@bYtGZ}-1Y}HGA7?x!ykR70y?_i7;fm(Z#(kY8SX=W^2tpkzx>G~)_<a3{^W6B*bn^4v$=6!l(j#)R3>>VV*ISHz%we2DO`K2&wbw0WEa_uR4*0i*s2-dKh;zD-*kP<#?qDTO-9n{EoI0i^MenwfFrkUzf8WKgd6|x^xZWkuJq}5<1($AC%er{#C<?0t5!`Ix237PXD5_s2KO)UoEwY-6u-rEuFM+Tr)K@k_&lR<{oz;eL*FKlj(PCuE1oym@B5?-Q;8wL_?)#|m#LZFnmuv<c<f-*kQFOw)K{eYME2ihRg;5o#<};THHt2~gKQS6-0U=~aw@Q6wjY(MY#lA9Nkvcg!D~FH>$OJrQ#F@;>*86~ioY`sUgG4|YI!)lL>t%H*{f`~x#;xg>>Ss#oV|=eM<p3fB51prI0UT#>2C;L4)SZn(pBb_d6ZARQaAvtdfM>$x~g8-9$T<(3w!cY7EZq6W#N}^z*T`kJ6})urXc+G-LroAHhqqOlF;=)u>md(y!-HD_Pv{!nJrP>R8Al}))T0lH`#FlwQ^qNCz|8RY3Q|40)GFdRvw_&xm?kTeez@_p!a{pM7a@fh=1qrY$wbANuRv+1Me%3_XZx~F}WQ6$pw7NNgT-kbNu5SM(U68fA~VBa{s1M{)+K>gpcHS%b!?^Tb+yHrvAtHAM)^h33tn}z0CVt9rS-n*M5{P(-ChK;D77SF6i4keEl7tA^zXmSG{ZB?9Qk5|5$G4ak*VAi}&ekH~sg+2f^ofxWk;>E`DzJ=5DcgU-EH_4f|4$Pq+2xagKrdR`>oAez@Zcxy!$P%NH`pi@(Qn=fnM>eaM|ZoiFJD?Mr%xC-u(f``7Syc<sCTA-C<MYt@%{0_{uq@N4)@Z{O8FUB98P_-W%VztuwK+!c4}Fn@$!>gleZ$J}Q73-<9o{2ey!tKCd?n{N|wu8KRX;g|6HKb{4EzqRYrAF-EzYZps<*e>P6etU-jbB>I|<1hWcdVuZJH+{~0Q{VcI`I62Zrc0;ogY09a{f0lk-tq$mGQ$`$-y?M0_$Ay8HkF^}{LS~weLbzwANRhC-@+YlvBo;vi*F{3;g@hX@{XSa04siwldtu8{&Rh@@`-Os$$Zda-*_l@owwlnw2&u$#C{I~^Gp2wZM)wJTUTaw2cGeP86CC^$vMf%-J)jL%e#24H~Hi`+wDB+^j|Qb5B5}9r3F3w!hdv^&Ulj!Umvq^{Fm^;*YMcO@B7JkYo9jxF8*y#7C6$K9h`Qi>l?<?alSohxm{l|pHiuHs}DZ(&GVaYtKAO&)=snEu&vzZ!+k&7YQOczg6HEVwL2eo-j_W^VAT&Yd9N3%e;99L_1k!}ANI>z{z|UT8o{Vv*q(1%#HJhw{xpuP?m-N{?b)tTx7{C0C&gvMeIbh7n<LumyeZ#ElbczM5Am!lW1MeY++9#(CwpA0PS`HUDQ6g_ZH{V(Y7OUIps!L9C7wPkhyh3x<}akK#<=RXi6JIll^<~kPHqEgJQiYLh)PuRJsC4GhAL~sHEilWmuw4;ih-osVdq_mh?N|~#=cf)I;DuKct&t{c4qZDXv!I>Y8J+bM||8PJ4p;E`2@b~L#QUFxQ!Zk$<1<bac&bmKcU)PWD*#NhJ7zo8iK296vXpv7CUYYnqAng_9o*`9HLBEl&S7ku_T(fSuOSi7{rYIV8pLJs!b;>Hz@!WHpDG`KO)AT7zQh-iSUE7ZD{~-bOgBGno1XI*o4xsPL4Qs#e9>`<ki+}=SW{gt{4xwv`Vn%`hH!vNbE!?EpSTmO;o!fs$+BCxJUm;>xZ_Fhr5?xtd%S*w`}h%*Mwn5;Bu=EH7zHJ!%QTNGkR6GOtd_4h5UfS`V<jM!cs@PQ|ClNdkw1ilvZVu*RJ7(c;V}V8{mv_K(<n)I9XjnT-h_4Uge108c8MFyEHMtyI2CpOcD)z>Rt%34X2q8FoXj+*<m{3HksLRQkNj8x*j+7#c2v5KEXBPU&OdvqN9D@6WG!INARrHqOgntYy&swY}#Mcy`G;P0+TcZ#0}jev*YxR;>#}VSiNo>VOZy(GK+y?x)S5I194jCem<*KY1qm5=te<c&(jJVV?*p=HM}NuX9XfuaqZ1XB~p>pNzPFz_c-^_DL-dbtwItFelyh3tQcXiSSLoD(0W&K5UiqE>k+M71UhK;0B&7f?{~p@m9hPN`j3t$>@?yV?WZrXWY3*rHSA3ol4cdU2wxMCwgt|kAS`KLjKmb%gtp5ulANn2_1FB=9Z=IPQ?cdy$wXgFY3X3=2ei`ZIK#8nibH+Oj*77(bohYcx(|Uu`}rF}d53g+lOTM^k*)7R{))}E2*xsWjzG*ud`LC7@~gJ@K|RBQBRZrVNplI(=1JJ$e5r%d+Xt=!%`!n@H_J3}yCcsuoib+6-LSkOgu7g~?IctV4zgeN26(08ra+pFGfnSdv%tv_tWkAQePHh#1JZiQW{8N$LCR(qIE;&H;=il-c?ZLkUU85OSrDr@j0U352d~L}T26q2;gkxZk|3{-X&>01O5dsS+17ARF`@kp2MdIho{me4j$0?40a|`%9*y}aA+U$irFBAO5lQueRCbpei^Q!<9W~<8sVf0Xb>%gK;)isc1(B3CLmbr%r(26@P>*no&$)?rK2|KRw$*f2voYg)jZ5Vs?1-8BSOZ=pfXf~S(hh^AqYoyo$}R187437xtH3Uv<tP`i@0xVniME!SE=k4UiYrX=svTh+J6iy{T@bAtzfz?luVNCHIT?h{deVV@b&m1e4dWydyel1x8+LBsgIIuL*=93k773R{R@s^(h-ED1u^Z;Ej%0_9m>(08D<p6uua1#pb_ah}hYpHgkYvYD5EjX-Yv>q`{7RU`V_xDqU%Gm<+Mikr1&d{@gEhlO)ApKUY;WB_q-FO8BrFDaENwrC7r_a~8HmrG;Prb=G#Te*dSvo>)zkVap#*Sh<jd%kUA-gR#)5lviC9uu^Xf9r%c-m%yfJOWWEH97mdcX@)-1sd?AM&mh`BIdd83%@>k_9zxlHvs*f(H}M}6>Tc^OsE%*EL7jSKNb{GN>QDG{9oX6HOeaY>CsI&L&tXC-a#AvQ3TIku3Va=4}Wqh*hhfVTHBKSo5n!X|!2pz8xF3w%w)YY$xcBF1dJD1@wU=njC#JOIZXiB?|7&N@2mB2d92regyvQLU)7?OR8SF*b4wkr>6AqU}Ov-%b@yp*G?ZekDhsX8~4sVa}chz6SgZDNZDH3N3TP!dvWYgbog*#~}`$hKRP0ccOFKsBAF?r+pxrNhtT(D2V$~DFZzd=-3nqXa@)&pkrHILe8z!Eg9BEtrXhle(uxKZ(wk=XL}|mC0BIlxK59v`Dwf1us+bZTNDh8h=U{om9=Azk{WMaLp&w5-KD@LagAGCtw>gN60BV(q4VMnWh=PqWTe*-uH!{M#tG3J(LcFu2I%}J4A^b*IKnVw+^lI(9^$axddIw_eaKD;ttV6Iqho9aL0l%GeIP-OG42GqM&a|SBSy1af{BmZ9gU-<b67;jGKM7Uqu>&v5ld+Z4^dcMy@rn2x&v6O2{bW6CWKo}jM!P1#m>5dYKW`Y!K59ixKX`k;m4ygqa*j^31S}zP9Ge_n$<H7${;vqy-S?lL-Hy@V#F}r2@XalunpQc#G&gd6xiF~MDs$Q$D-{Lqt+Z#UL_&zPeEzL*j_lAa?Axf=IFfaG8qeEjDq=qXp09&FheKBz<LcKm5GqavXi3ik+R+4q64Ab@iXdX;yiQtKKX{jsXqA)yXo9GgMqm7tNNMBDFjg@ghHtVK#4;US~w8ZKwQyP_L{FRv$qMa!tq$9olSmuCyuVy35R`$xz=X3m^O>aXBEdXU+Ua#gPdWzPxgC0<J?(g-T*3d!67y9^*mvn$0;7Zp8CX3+fq?p;?Nx<lGje&S}DO}#<1CFljt+Mj-=IvK4UoXigQ<S`->lmc5-Wm?@vOwU^r;{_c?o=__sdzRGm!1%nw(UiK{cS7P`Y(o6cmydxM$&#8D~Y>e)je+|zliV%Q$72kd<Q$@4xjb$>i(x7^IMUEQ?T+@E(VTxkb3F7INW_kx%A3@^Gb0GhaoS_MxSx}}V>3F|9UZJy(1bv2r>q><cAJZ^E}zH)vg`dvElOf9LRrhT0I7h<1P%wJUpI41ht<D5VA>xs)zm#a!;9EGaha*iZ+<@nX!ZYNCNlbTMPSUb7t`8&oeG;v}@YBF(RUF4?X`AK^B!numrcM}KfRi3r{-M)7*=YTaW4HszSan_N}^16_pTCsmR3*OWD6&yYHq@hh{df6;Q+ANWMx8JSZY`1as-DW*Rf)@9}RU8D<6@`8!F^($ZxC@QrGc=C-C(gyl@Q56jD=$8<$R;Z<!z>y?s|vCg&XnLy9D=I=gX={*dOPC>a-{EG7Vc<E`!afyO%V6A-K-~Js8&Lstyq3nRJGNWFaXFz+PD_H6t)w8Bv3hyT+20%&!zPlOm&UqX2MJQh23zxwT34SKY7*4mwu<)ba|n4fiO@J1%^s6@JtYgx!|o9qIr2@b^pw<maJ@<8ch66-(+m@Hl*)j9<Mo9$W-1$ZiESYU4XZVn>SFOr+44vy3p9W+_Phu^IG-_DL6)cNBUi+4JuVi<z(kNaF;<#(8Xs#fCbG@DH<-z-^lxJ540&yo*EWBPd{XaS7!Ju85AF7ET=Nc(Tm~>G~Q+CIzyQ2yYM1!!__~$i#=YyCYX4)bTON7&>rI_^%#$#noZ@p^0Co#?zWnjOHmq*#g<nmdG%S(?O7P~i_ky4U1)FMtg+f)Ol{|y(-l~sZRq!#iO;z9)QLaQex7(ydo_~zyNZpE4<6(l9|MM`1~MN5u`KD@gxhv?J_bOgL67kuD{Hxm^of59+MFX*Z}p(yyo*RN1byl=@NMExF7&kLyve(aj#ABwwwXu2d}l&v9@P5LGs9;DOwK|2Lk@JFC&anEIL03`j6aiAf+8Pie?GS6(O0hDnSVKF@5<5k;_S97-P*aC1?d$&^_D>Ab3rI8Q7-HMmv85ajtYH@)Z#~ED9dMcQEgsypAnEnPE@%EIgC`=?}#h!9oNB5>MaGu`z93UZ@oHt0p1|5-f%krbufapE2k)Te00e+h%P;?ONOYdrN46dyz;zt(zk*}WyH0U1gOj;)0RX<?q1cS=SVZOZhk=B_|DVxT{+*aoWOIPjptBVtuG2ez$NYH7ooxzHpa3Z(7wUetPaCEXPT0Rn!1CUx-EP+a5gz@;9I+tUQ`G3=mo|GL22j3(sv(9-x)8RC<hg{eaJmv)3M=zOXgTB-LaO6CCdGU`$wbS8rmzBG4D{-#!%IFkp5)kdRCAZ7O)FN@QU~#k5{9YH`;f3FU!G(`$x3!_7V1aIt-ey*B+a^{t0`1cW!fcE^?2NzO$Wn-zNUCJC23B@XDWks;kW37xTsY5VL=Wi?I>IH3a>=4_4gUe>s1<JMVmx#eizHiuGLl#MwN=$9$=$Kl5(goy*et)rCr)a5sNBzkB3U{f^Je`q(eu$PfN~iRaJU5{&!e4g(v2zny>Hw}1P`bC!D!l7NmCtB_SsR(pnz37Dh4lHL4<_bx1Mqi(T%OI>1X*I#%R^|$hD9{0=sVZYSS*M9lLFu|3q2^yXD8riS5=+YM0#HM2mRn9oe>tcvSO!atc2BqQbhMgXpu|@Pw%$s3pfcPDYj+o8tb#w$5=SbJ~qjEq}zGj$y=hPM0h%W&uaV+JBD9E>|UWzGbMWU}<EM-)WjxT7e*G@=vA45C@*gj<qaPh1XawA_L4K93COR3Iz(_aw6QW6XYr>+)Tvy+fkM}E)=^!)+q`I+k1?VdPPkHa`0MJOFg2O|3oQ(Xmt+S&)+A`jzTB-9H$f@F{KBo}jWui584t_PyKjJM6nI&0dq0T{vNvJQk;z;$UjqAgH8J)-5bTyjy}8ah-L!roDw?TgY&F)(+uaJe~gIn!s%mi=WHI;+fVEuXBE1c@{5Qv*N<rTFa5@G;i&2s2+WW9~;)-lY0!i3nW!0I!J|hf-Pku~;k;(|!r+Zb?9{W=G{E!giR9wUy(1xd+yQXkd-Px`~=-Ooe(Ei{&vVRMBkeHU=Gl5<J5&7)X;Zg0Z~h&EgnW<=n3pQjF`!X*!aHT@ne_HEjkf58Wg=)s}~HDbR<rQ(Z`OR1O5!iyW0GugU{N?iC@bQ#UTvHA~{pT$fbLayBOWDo?T+h&$4*+-qfi>SUYAKg6U%)fL|h$tL^a<Ai@=etVU3>{o_VbmxRD7_YpTasSSskqTHvAuMS){*LxR@PWhn2<!H#Q486`A@-rm{KOF3p}49M5jEHZ^Q_}`y938H4a}~V*&g)1agoy<om+QjkFNb{I)^KjXvA-9J(0=4pVl~;5^(-#*~jvh<Db+5zteS=%hqgyask3%8+0Bt>350>N9I2i0Xvf_l%TCu>Z{&i&kJ4gL$%Y_jfRk}s?6pvFrF=0k*mW&N0BycKlwMkwf>4s;XTxZ5z${{`o=Tq>f}{E^v1<$>6$g)rDZ8VQ5FZ$pjU&>!{8M`@g14?>ZzALw_fC>cy&g>cgBl;n3Ibm_^xyGb0_yZc`YefDU@>g<W;)rZ<r*a^R%pk=PZ=HDq9u2Oh29!y2>O^+AUx0K-Xf3JR_=*1WCwwZAY01)7q4+$GMGW{4UR{^;|w<s*m7rCx@?=+Y)M9S(WsFVWo6)7dUg-u?!Dh=yOf83c#;+(P^&ttT}SY@3*S0o1VK=brE@CwF;29reo0cG1%--#rC%?MC?<16vkaJ&~Sp7&)QXR6z4SD)~kTV{1HL&H$SUR&(67i=cIaILjt*f%X|MW=$7N<p3CIMM&L~jzRe!tSntm5ir@UgsQ2^H13MwQ&OnQM+`|KWSosx4cE@35%<p;lfc1zBRHn1tefrWpe&a#<<oEQwFX{i;<{>S>ZioNbR^{XT_O6|jFYTn>;d%cpZW-(}{3YHyjvsn2QJwXH4Gi<sdTaY~hs!bM8X0af#ks!P+k0@w!33;F&Oq5YYiiz|Pd{=;aDR?Xt~Z@WZRHz0SbDpN{NNlj8TbAxFNf<}kMS3G^`+i%q*b^0FzY|Xb9@+&{h#6)Z*ens<IcHTZ~lsZjlC|lZ|ZI0lH#_SSQf2^=<qM`yN_^fxAH*YHb8g%VuOZ7y1w=ES6p^L4A$g&%h5IA9j5Q+_uuz%dON7;_edpk2MP4~Kabzy_whTw?Z;~}-c&wKFX-zx6+3oXl&Sk?8>%-=e+s|U&#k}JH??Np*DRkF8E-QG5x=G|yv%va@ORj&KCZ>bHDerEW?G2p4Y*wnj<-1VyMG7TPgcKf75sJF>vuS!pYr1tkN5pi<X_4OALun(>@9rnU-siW+~7U#a!Z6;F10)U=@j0?e}@ABms?ISd@JX^#HZisF}MBV4xjiXKJ+lYI}Sde&ds!>`MkxY2{)Y|Tz(A~8n3PeKkFqe0oL)q9*_9ZcuY(Czr;fx$K(E&c*4i=!2c3Y^f(^;FL38*&e|3IbGVk{%>L!PbKg&@M>u4xj~&}%suG508gAqm_}Ar69+e+MkK?jqov-WmH~IV5^M~;W?+gNe!XJCb|Gi%NhxGywua}Z>BL{<c7yp;??|;L|LHBRrpMMVz{}#UZJ-q$5@a6B}@!!H9zJ`zc$@X>P7`)u_K{Gp{EuT+BChzATc0wyf6EX$u1NrB@^wr+zw|Le(o)3E^P0)8AoP#^hTix3k`R;aKmL${5(La?vGORwuu8`6W8*5MrH1V=S@zMZTOGZeTk5X(5R6E3)-_&HU>%tC2tKif|xN@$f8SEU_Ny_}o5pTqjyU2xXg^%L6FO>iW*_axG=o*j^6Q6QT)TN>f0+5%m?q1xm^{^3*F|egnx+I=hs(#R~ve4o-e)|LS6X`biR4)SqHc;>uZV1<;f>Ew_v<$W%=-|2|=T$J9__n383}}9qsgb|9xSM0a65Ufbk`ust($63%mll8(+n0!>RwTzbjK*Nt*LD))SPH60bQ>45Gi|Ji@xD@mILN(JA6_!h4p?YKZ`KOrWTU*Y=NOgs9+$m$w9lDdOAt9CJjHQr<Ql^{KrugLN7ux)E$-{?;DrUlf}LqQKwq=#ErCMbxE+*iV;|x&4l$(dFz%3<tbuD|$)oL)&vDgRTfGCBfn!qVZ9dCSxW;SxHHpGXjKVV9A8Rj}l}iV}ZHn|cB5ZHRH4|yLCe0#=a2~qkvP@{b1hZTvL>!~a8RI&R*}jV_fcY+HSLD4_HmBB$ja7t2`;rpZNo%->M|~BTtrZw0gh*6(WU(|1I6y%Zyil>CBYsP;U8TT1dL-YlxVC;}N=3X281|2Zi5jdB{^b3;v~KX>59#LFIsml3Zo<HmO~1u6#-)K62TR_1x6f|En!&6deFKb%+4dMkV}|2XS}VyO*)=}lB{856g%!c%qT)KgxHzWu9v_{N_CW(nabsO$k?QfI=+ZU{5Y83c3`-<Al5>g;$5>oQLwmN)FhUGB2Q4hRG$-9L8lx)=VkvDv64#LSWown6+LrMnI$|t2^f?mCnO|Lcm%tZa@6MSZO3cr50@_(>Tn@gV)BYT+T!yy*FpBE9&qXDPHMjK}x6Q=1hoX%WlG{<;g|Lpd`;)@*-@}vgmV+(|Mw;hY=_8Hf`_?;x8IBPVttRA@m!vt5C}_t7D2W&3Ee`XOZ`cHnHF0Jg9Rbx91<^b`*$Hh6<OS}+*LyL*-fF9fTZUtdanWOjm8jd%5$d&Llq0EY6Nxxvdw`gTIzGXd*sy)4t_C=RZ=|vr&!m)$O6-fpB53M9Yv}vtEchmTVK~MBm#^qpp0fs?Qj`<ltfVLekuTaOH+1bl$lvw=o>K`5X;2gI<P6BTFn*u69gYK*x3n%qd@N^?*u6M2ckMNWKpMdO&!SjV=;|gLT%=r(VK4V2R(+{F$3}d?dR%21Jg_=}wbI3nEkdEhxd|hN>&-w($6-0!GQ6zRtsPQ2q`H`UjO$p!2Mn?WO?T-SuHjUo;WmpGas((7z;bWq4wa`7vtQq{w$<v$1+;BvU6PJ2^iOe1<27hKVVC4yR4ZXrN3;DA9COW{!DIcF)ZIB4p#o18?Hf7s!2x&p$S}el0g%L}ye73X!m7iGE+%f3Hw+_;8aGIhO?=V~QN{3Kpv}!Xp>bGlSiib;{Z5RFPfm&w9fPZ{c|&f9OGoeLRBmr`GK{e?Tv8mr?y+4moL_J%Xx-E$oON?g8oF4EFKHcznQ(DZ5gc};TA@RA`s8MrY**LM)1K+#C$DG7e0~^1mz&na!PhWTLoHFmyi1SHm19k)49HISEp6(zSX{CFR&npPo115si0l$Y63b}vw|2EB{)Y*dQ%}C*Y>s`~aJq;)pLlL-b4~~;ANNP>NyUZpASMLczFCNwx#6}FpU=Hxy@5FP^2-O8gyiZZgzVdE%hmv&@d=ROvo})FP4OXp*oN557@gBEAH-EAUFIZIg6uTyRjVI);(npY;>diQW}Lj@r$3X!FRn-BN~XG%r@9?@T2T;_xN%={Go^LO(}@xZ!0dyMXbn?ZU#l^cCb_IM^ly&qvG`g!J51b*%1jyK51%L+`Rdn>^C^D%s^j<i$z5bKSf_Y(%o@yW{GW59W-@yd&G48TE5@Nk>lP(yGjx%J-!ci)dwAVXbw~49kL&;<lS;<3cnoK7kr`oPm^5y2)kdM)h7v6Iq09UX3aPjfvZkg=du#pr_LykK6vt;B#-{Z$wc{XWMt)^JaA-WthWYx;`^K8{31sd3!^b6m#(m;u!|lHQpMO93pTO!l9_29?=xXT9aAK-8?e#NT#mPqlDRiLa{YIZZEf46Gik2UqIi3(WzF2V8W3zM9Ly%H&^d4$dDA3<u!i+S`4;tpj?_u%`+bfIy9K4QdV<rp9QT%3ytDcw_`Ps=G;<TkXQ-XaZzS)pYO$ME|4w$94oOl7J_qjL(wNTRE5S(bb)s&V=(^}KC3Jm6@v5@ECL3*>~RiCbt;>bBA<sw=rR(z13Ged1GT5fFEj7RCsQZIM@^XyT6m!Dl{k6jo>7kwXHWXpJyH^xfe*sCI0U$SI#(UZ-~Fc-8k5w5FL0ODR4y61!b9vS{AH2fJfeCeFH@+`=mx8R}#IHyxqTdpPL{3;ITcLAO!e}4EKIbdWwTNBqHX*u2{?7;^=<#3kU(vjq+^klvw?Rtvn3?1s%XQ*HIXVsMlf915uDG%b{LIJvPrWT_By?XI+l@vYiloQhZ*UVODP*=^$R)2W(8rjz))Ko;<FxioLoz9f=QBdJl7%sbmK4zBs?rF*_GT@8lUy8(-mz$ZIy|pvudl6N}b?4b2MTWSykXytCFJqh1x}e{_@^5Jx9u3<oMP!>aj`d28H|tV)F<#nmQ@}UvZNABrLD1_|(929v^8CQ?T~{+SuJ68aeLKTcZr}Bz2k|r7fg{?`X~hs<Lqjql{eAc|o}uXU0~xb#EHA0O%F@kBPd7h2>rHt@j*ghW#ng{VXGIlALwSqbh5N*KA{!$~*Q<VSCGtxneWz2xGRhZc`flC`YOV;wLY=94)zT%0g?1VH7P(Hee%5!YQmha1D9|~EnDLOkYE7TI4)*2+t&4ekl9qA$!ZB>Ea1|LA@IvEb{W6slC$GmP+`V|Mpk9D*wT-L1LApTurduF0&c0P>S*>0973R(Xo(okN+|5Bg(!RERHoI#7O8b#R`_USVUf5{JAO_<M+kyFNc?e&sb&|cd{(GifkD+!Qp?1BVi7QK)>s+#28S~uP<s9F4{_y7~dmh8O{6B`@)A0LT`SDD{KXbg8qvB!;Pp`j)PiXigS6)*ZKIQQ{$_IYYqt|GE`Vr_K{yu3QUh<3X<*V|#zx>4gT!d@)CP3v~GVSFba6i3VFpSh({rPSdqV*|-y7?R>r{mA~V;X;avAp;@^GT&BR4mxC>bxDy*ZE3yWL-Hi&IHz<Q!`pQ6K6uT|MuOR|Kv>YW|=CFKb~ZV{k_aawlAZqzFPXSr&()3?*c!PuO&3K+EQd!Z`4}<Ca?5fuJr}IUKNo)UnrPA|0eT$OHpeJ%PY%MFunfHoiOboPTUE6zveI83CyPRMyLN9Z>FOd1+z6~{+$1UwfV}wrB*s>{>&4oPv?u|AM#lJ;^70=>%_D7I}heh|LFB|DAsiC8I6y8qc6RH^)G9x0JZYh?)s<CV&HZ1r8O9jNz6Go<0>Nfl1lSVG1q8X=TN=Tw3#2fE^VF@rG_nAZ^Uj37{7FOf`8;@WSC+?Vw@k{tH8>!%{Zob0wFU@v9~Fi?@)ObDhh(^XR6CSXPg`Kw{tVyyXf>6=<uOmNWKp=asP2H0Tr`z`?Y6p@n^j~;wO|q;~vW}yRiK~?abE={G5?t1d5F|dz7a0D@}g>_LXn&w=-bOutF?P`>NaqqI-08Fbn8Jn$&ciXi&Y7tS&x|G1Xs^tj=wCjF(XCL@eg){Q@D32m<e3vp9NH`R<cJa2Qwq(WUxlC81-kIGP~sLZ_3%$?r7lKZN^%aClxmd0(>D<7@Pi)!k0#ZNha1-X?QG=cH2T7l%TBj?`f-qYvIi>0Q~lM(w3yKBU40CZVhPLcGOd3A|=-abPq1pu{Del~8@f8}oNG1K6i}WO8!NSfF~Zp4W-lonxV1_?nVzjeZu*?6)A8kC|Z~sQ!grGe3EaLv`K3r#h1#kxRJO@H%Zu+t>4XP}h<VI*l06&82)s_4Z4G>J8NeZ9m9$C#YM8zJpS{rEB2YC!z_PVVj4g?N((Q)b6{7ySG5<)ZFZn=v0je#Irpq<Gp4FRG&Wik~{PD@{C8tjSw~+R2w<zY+U6%)$9Ajpn9SJ2s(8g(k~rV-bpOMz!l3Au9am*AfURMx+S6#kwp|6xt(Zush)oMQ`q^+QuF6UHoJW$ce1e9QhiQ=^!H(ld41+S$|?n`4atfL^Z&t7beT9(Cx7AqD2qU<FAPgVb#R;N-p`q|60^pwsh;tRTh(o8eb|f#?65g~`hSGi9qR;ct8+afv|cCM2=9iEe#3EX*&D}DT{lzs^@na&!%-iy&>E&OHtAv!0b)up`qb&-K%^B1ndQKR_s7%ZQ=1D$HqKdjUM3r=)nxO*b;9gr;(>kVeR{*s`Lp+_e!g+}V^8^QCjR{NPCr~6-QY50m&qRDTzp`ZykC0UHl+GLff@;1T2}u4oyYg8PrlkG-R|gMF!N4pf#>t}gA0F>Efc5WdE!sxN0R1x%I7P$Il5X?-Z^G9tEO`ACK(^`Z|lj{Wj)2mL5vv>O~Xy??M^an(qG{xPZfVQ`6Eya`#qJ0YdpQXPIWx#m>;~Z2${;x6KMDN^he)L@s+$D*XESxiQkbQ-I|+8SN-68R3_i>@Rsw@o;a?S{Mm78gNTRQ@Ok-@Ycl0^U^hJ6Y1%J{CtDn8%1iOFhamsrntYq`SMzXdW%5%o<>h&LCQr`<{_HT-b2OD>@~?iG!cF;mpW5Tw)J7VA)=qtTobo)Sdzt!vH<eA{ZS>)<-RJ(^?e%1%<W0P|x7?b|q}yiv*~XjtW~5H#<@)Z^)Q1H1W{+YS97}soy7F`UV6&p*2ZB$Z5kZp+j!|9<p8hmPf8g9`8Tm75inrj;-X?u}@zFQ=Gd>?PKO@Dj`GC(AY_I3T_XFG8NoV%;+te3lkLJ>EMe&p}US~4YyVHhqrt!6n>2mB7TNBEjnbO(iDi?vGf0wtiA_oOsddfZ3xu{Mhi_b8WLKI5RzAQawikglrqw4A`Yx!ALFJ~FB>vz^Tb)s|r`5r}Z*UP=WjmoX8zB8D_Z|^qjo${S=8R~D$Z$lxcfvlL3r4m`Wc(R!nd&`myI#AQOEYKnK8fkt)(=1#)lGl>Q=fnk_6PJbj9%-d2tE*zG&E*Z%RXtV?txP>2nMiBavieQmfz^k-z+85w?=$-SoP8f_F!aDtLsWaAX;cnf>tJ`~I9p4$B~QSD5=TNW(&76WYs0f=Xd9%BTUm3fEx5>`lRI0drD=Q2S7Slj@@f2;2jPUY>V@WSiZ`V3Mm*j=5ET3@^g~g|r&v>v2hew<>9j0)u`?{$nSYIs=krMO*|2<mDH9L-Lc_lDuy^r&EfY&Sco+J<r)ifwtWU#gJnbz_`)gTBUY3#8=W)&2oVK0tM!$`;>yp+(vEA^xKX(Py4b>~npIhwcGl#W?u5f#>IOxMk|B?x-I~OoQTP3&oUW2??%PnhLUN1CnL(l64hV0wW<9;XPErW}w@0O~1I(#Y%AVYN3XdebUYpcq-yHZ*z17}oL(SH4Gd1|3=X}GNnUwey%ixp-YL%$<YMEj-U>G(xqm{R&Km4g+37t%PN6!6_@==bnRVP)9M+RoDXec5U>zN<#Zk@0Rh3V&9dWjJ0#x=3SJDC+{f3R$67GTdDeT|Tp`ee@J_XZJFqJ$?rp8Bu-eJH7X4de2rx#|L~W`b?&pDUE~YMVBK*-&sCQ2S1gT$KKg;#mW~^x$mvyzLovi6&JLzp(dz>rx>(8=sOzMT#<>cJQam02cGg&dM>LUvtV(09xXpyDXh#UEpx%rAqGq5*z&s7i<ZXaMZlx!XmZTT;1&)`dp+fKzGlx179YzGuL~C6PT=|e?)kJ`&{J7bnWJx>szTiqfJ!r)u3H59-r8#{p9lGk#gogr#`7ZcG#sVZcQns?8K$Gp<e@iGx%Ena-<kXxXw!IxD@PF>2N53!yl<aq-)?!|=Hr#ww7e~ds~DN<tg;-8dnS`iI<hBUCxT20Zo8yOmC9uT`%b6hT-Yh}yKUsUAj-ip;XYCXW{)#+n}VR=wr74}`;&hTN6jZ&xiuXg{N0|xS=o2Gt|gOA<y>xh?ms0hT#3IkGcEAAo#GqSvvr=A+M!Fz*Fw{;vP$clwgG-R%&)AT656k6oeXr=*nx$zq_XV5^Iaz1{z8X2mq&e20a|vI%YZHDZo)z0B^SrFs62ftVygS<?$e3Rj|BiSYg^jhPen`n(~kM3)zx`@I!GrZ56`h8e}mlSQRy6RC#C>bVfR4S3AYzhGR1Is8AuN+{?739Y_dVSDrUv)%(4Rh;O|VG4jTU5PB8^;pQeO!UGhAu)KiweWhHVf_Sx$>IL!Q4u<pZ?xqkvbB>(*OV*2m<q+7hq-qCt|n<p#%)u$baF0DGj^V%nmE<3z~uI_bNZ9V7Ly<FJSJd@9<I#|kM&-xRvbZ64-<^S`40f~xr#s".encode())).decode())))
else:
    print(f"This version of PySimpleGUI ({version}) is not compatible with the version of Python that is currently installed ({platform.python_implementation()} {sys.version_info[0]}.{sys.version_info[1]})")
    exit()


if not var_IHWWRR3D:
    print('PySimpleGUI has detected a security failure: This copy of PySimpleGUI has been compromised and is not allowed to run.')
    exit()
# ------------------------ Read the ttk scrollbar info ------------------------
_global_settings_get_ttk_scrollbar_info()


# See if running on Trinket. If Trinket, then use custom titlebars since Trinket doesn't supply any
if running_trinket():
    USE_CUSTOM_TITLEBAR = True

if tclversion_detailed.startswith('8.5'):
    warnings.warn('You are running a VERY old version of tkinter {}. You cannot use PNG formatted images for example.  Please upgrade to 8.6.x'.format(tclversion_detailed),
                  UserWarning)

# Enables the correct application icon to be shown on the Windows taskbar
if running_windows():
    try:
        myappid = 'mycompany.myproduct.subproduct.version'  # Add an app ID on Windows to control Windows taskbar icon combining
        ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(myappid)
    except Exception as e:
        print('Error setting App ID', e)


_read_mac_global_settings()

if _mac_should_set_alpha_to_99():
    # Applyting Mac OS 12.3+ Alpha Channel fix.  Sets the default Alpha Channel to 0.99
    set_options(alpha_channel=0.99)

if not __af68W():
    popup_error('Fatal Security Error Detected', 'Fatal error with the PySimpleGUI security code. ', title='PySimpleGUI Security Error')
    exit()

#-----------------------------------------------------------------------------------------


# -------------------------------- ENTRY POINT IF RUN STANDALONE -------------------------------- #
if __name__ == '__main__':
    # To execute the upgrade from command line, type:
    # python -m PySimpleGUI.PySimpleGUI upgrade
    if len(sys.argv) > 1 and sys.argv[1] == 'upgrade':
        __9ggLru()
        exit(0)
    elif len(sys.argv) > 1 and sys.argv[1] == 'help':
        main_sdk_help()
        exit(0)
    main()
    exit(0)
#25b55fa47169382034931949ddf1218636d65098e5ef47c8586cd76888e144a6e2b9905bc426c9a7d6d1ac191bf9d6b871f41ac094e465d9e870b26756ebc4582933153496ce91cc6f92b5fcea76dd132159b995b92fe80c9a9e6dc13ec539532d5acb4e370bd31a1767231933a3d78f66c8d66bc80b0fbd2f97307dc2f158e622254d47a5a3aaf7413953f6d09ae5e97bfb111ea02cf7483a6c323c7d0a9025772f6b35a320f4a6c730c14df67f7974acce68ecf6e4d3e1310ec268056001c4edc4ea58f9d9138b5c7377434669f088464985ffd744a141f714165721d7663fdf0ac0a214bd5f9abe3bfd7d4aa856b7046606c3a538a5debfc5d82a0107d67d530733cbc127da113d0a469534ead25e1bb9ecf8f0ab1ddde865a01429b83021e2694d0ddbbba9d3f7e7a4b11e498315f82ec0ad4f7a4a5655f9f957968ac2c274da5a8635f9e544c9d84a3e8d65d8e1340fe304a5293e89c7bd6084489362cc3544fef33b921b268533770e93de335ca761db68b07f418ab4b77af16a3c9f20cabdf9fd62605a239ae73f8dceb8603fba0972bb14da47ee38e6fda9ff165942b0d9a12689f02cccb9247e72ff252d8e9d8e2de3b8c2cc2c444ab565a245802e611ea0b3503efda401e67ccbb7e797bd66ba200e46b4c5a9a8e5aaf27145ec7cc44f794b37db96d40fc81ff4169e336aba5db94afeab330d3c491154839be997